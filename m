Return-Path: <linux-kernel-owner+willy=40w.ods.org-S267893AbUIAV1T@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S267893AbUIAV1T (ORCPT <rfc822;willy@w.ods.org>);
	Wed, 1 Sep 2004 17:27:19 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S267840AbUIAVYb
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Wed, 1 Sep 2004 17:24:31 -0400
Received: from mx1.redhat.com ([66.187.233.31]:29612 "EHLO mx1.redhat.com")
	by vger.kernel.org with ESMTP id S268082AbUIAVUn (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 1 Sep 2004 17:20:43 -0400
From: David Howells <dhowells@redhat.com>
In-Reply-To: <20040827054813.GG2030@kalmia.hozed.org> 
References: <20040827054813.GG2030@kalmia.hozed.org>  <17777.1093566183@redhat.com> <412E85FD.5050801@pobox.com> 
To: Troy Benjegerdes <hozer@hozed.org>
Cc: Jeff Garzik <jgarzik@pobox.com>, torvalds@osdl.org, akpm@osdl.org,
       linux-kernel@vger.kernel.org, steved@redhat.com, dwmw2@redhat.com
Subject: Re: [PATCH] CacheFS - general filesystem cache 
User-Agent: EMH/1.14.1 SEMI/1.14.5 (Awara-Onsen) FLIM/1.14.5 (Demachiyanagi) APEL/10.6 Emacs/21.3 (i386-redhat-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.5 - "Awara-Onsen")
Content-Type: text/plain; charset=US-ASCII
Date: Wed, 01 Sep 2004 22:19:57 +0100
Message-ID: <28370.1094073597@redhat.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


Troy Benjegerdes <hozer@hozed.org> wrote:
> So is it even remotely feasable to be able to use a cachefs filesystem
> when the 'backing store' (say NFSv4) filesystem is not accessible?

Well, in cachefs's current state:

 (1) That's mostly netfs policy. CacheFS is mainly for serving pages to the
     netfs upon demand. The netfs has to create a cachefs index tree suitable
     for it to be able to find its files. I'm currently arranging things in my
     AFS client and in the NFS client such that these correspond to server
     concepts such as cell address, volume ID, file ID; server IP address,
     file handle. I'm not arranging things as directories and
     files.

 (2) The user can just add or remove caches with mount/umount, even when live;
     so you could find that your inodes that were being backed in the cache
     are suddenly unavailable. Caches could be locked in the mount tree as
     long as a netfs is using them for disconnected mode operation.

 (3) CacheFS does not enforce any complete-file reading which you'd require to
     have disconnected operation. It only cares about pages. This is netfs
     policy.

 (4) CacheFS does not provide pinning facilities, other than active cache
     inodes don't get eaten because there's too little space and we need to
     recycle something.

I'm planning on adding pinning facilities for use with kAFS. I'd like to add
simple disconnected operation facilities too.

> 
> Obviously if the file's not already cached, you lose.

The file, and potentially the nest of directories in which it resides.

David
