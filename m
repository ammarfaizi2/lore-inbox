Return-Path: <linux-kernel-owner+willy=40w.ods.org@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S262278AbTD3PSl (ORCPT <rfc822;willy@w.ods.org>);
	Wed, 30 Apr 2003 11:18:41 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S262279AbTD3PSl
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Wed, 30 Apr 2003 11:18:41 -0400
Received: from 237.oncolt.com ([213.86.99.237]:47358 "EHLO warthog.warthog")
	by vger.kernel.org with ESMTP id S262278AbTD3PSh (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 30 Apr 2003 11:18:37 -0400
To: Christoph Hellwig <hch@infradead.org>,
       chas williams <chas@locutus.cmf.nrl.navy.mil>, torvalds@transmeta.com,
       viro@math.psu.edu
cc: David Howells <dhowells@redhat.com>, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] add a stub by which a module can bind to the AFS syscall 
In-Reply-To: <20030430160239.A8956@infradead.org> 
User-Agent: EMH/1.14.1 SEMI/1.14.4 (Hosorogi) FLIM/1.14.4
 (=?ISO-8859-4?Q?Kashiharajing=FE-mae?=) APEL/10.4 Emacs/21.2
 (i386-redhat-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.4 - "Hosorogi")
Content-Type: text/plain; charset=US-ASCII
Date: Wed, 30 Apr 2003 16:30:20 +0100
Message-ID: <27889.1051716620@warthog.warthog>
From: David Howells <dhowells@warthog.cambridge.redhat.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


I selected a variadic method of argument passing because I didn't want to have
to copy the argument block several times in the course of passing from the
syscall stub through the multiplexor to the actual handler.

Of course, it might be better if the kernel itself sorted out the individual
subcalls and passed them to the filesystem individually or dealt with them
itself.

The four calls implemented by Linux are:

 (*) int setpag(void)

     Set Process Authentication Group number. This could easily be moved into
     the kernel proper, with the PAG being stored in or depending from the
     task structure somehow.

     This would then obviate the need for OpenAFS to mangle the setgroups and
     getgroups syscalls.

 (*) int pioctl(const char *path, int cmd, void *arg, int followsymlink)

     Al Viro's favourite:-) Do ioctl() on a file refered to by pathname. Can't
     be emulated by open/ioctl/close because:

     (a) it can operate directly on symbolic links.

     (b) some of its functions don't require a file and don't fail if one
	 can't be opened.

 (*) int afs_call(...)

     Local client control

 (*) int afs_icl(...)

     Local client status and logging control.

There are six more which linux doesn't actually support, even though the
multiplexor does:

 (*) icreate
 (*) iopen
 (*) idec
 (*) iinc
 (*) iread
 (*) iwrite

     Deal with file by inode number.

David
