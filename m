Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261237AbVAHSQj@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261237AbVAHSQj (ORCPT <rfc822;willy@w.ods.org>);
	Sat, 8 Jan 2005 13:16:39 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261241AbVAHSQj
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Sat, 8 Jan 2005 13:16:39 -0500
Received: from vds-320151.amen-pro.com ([62.193.204.86]:60081 "EHLO
	vds-320151.amen-pro.com") by vger.kernel.org with ESMTP
	id S261237AbVAHSPo (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Sat, 8 Jan 2005 13:15:44 -0500
Subject: [PATCH] Trusted Path Execution LSM 0.2 (20050108)
From: Lorenzo =?ISO-8859-1?Q?Hern=E1ndez_?=
	 =?ISO-8859-1?Q?Garc=EDa-Hierro?= <lorenzo@gnu.org>
To: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
Cc: "narahimi@us.ibm.com" <narahimi@us.ibm.com>,
       Chris Wright <chrisw@osdl.org>, Stephen Smalley <sds@epoch.ncsc.mil>,
       "Serge E.Hallyn" <serue@us.ibm.com>, alan@redhat.com
Content-Type: multipart/signed; micalg=pgp-sha1; protocol="application/pgp-signature"; boundary="=-x6QTTlYKUJO7M3q6NKjP"
Date: Sat, 08 Jan 2005 19:15:07 +0100
Message-Id: <1105208107.24876.10.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.2 
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


--=-x6QTTlYKUJO7M3q6NKjP
Content-Type: multipart/mixed; boundary="=-Fo5/mJxdff4k2uTKQhRt"


--=-Fo5/mJxdff4k2uTKQhRt
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi,

Serge E. Hallyn contributed a patch for fix a few problems of the
kernel-configuration level support for the trusted group (outside the
groups acl support).

As suggested by Stephen D. Smalley, I've updated the file_mmap hook
checks logic, as some of statements are not needed if the initial struct
is present.

The new patch is attached, but again, extra information and
documentation can be found at http://selinux.tuxedo-es.org/tpe-lsm/ .

References (for initial release information):

[1]: http://lkml.org/lkml/2005/1/5/307 (original thread)

Please apply.

Cheers, -- Lorenzo Hern=E1ndez Garc=EDa-Hierro <lorenzo@gnu.org>
[1024D/6F2B2DEC] [2048g/9AE91A22] Hardened Debian head developer &
project manager

--=-Fo5/mJxdff4k2uTKQhRt
Content-Disposition: attachment; filename=tpe-20050108.patch
Content-Type: text/x-patch; name=tpe-20050108.patch; charset=ISO-8859-1
Content-Transfer-Encoding: base64

ZGlmZiAtTnVyIC4uL2xpbnV4LTIuNi4xMC9Eb2N1bWVudGF0aW9uL3RwZS1sc20udHh0IGxpbnV4
LTIuNi4xMC10cGUvRG9jdW1lbnRhdGlvbi90cGUtbHNtLnR4dA0KLS0tIC4uL2xpbnV4LTIuNi4x
MC9Eb2N1bWVudGF0aW9uL3RwZS1sc20udHh0CTE5NzAtMDEtMDEgMDE6MDA6MDAuMDAwMDAwMDAw
ICswMTAwDQorKysgbGludXgtMi42LjEwLXRwZS9Eb2N1bWVudGF0aW9uL3RwZS1sc20udHh0CTIw
MDUtMDEtMDcgMDE6MzY6MzUuMDAwMDAwMDAwICswMTAwDQpAQCAtMCwwICsxLDEwMyBAQA0KK1Ry
dXN0ZWQgUGF0aCBFeGVjdXRpb24gTGludXggU2VjdXJpdHkgTW9kdWxlDQorQ29weXJpZ2h0IChD
KSAyMDAzIElCTSBDb3JwLiA8bmFyYWhpbWlAdXMuaWJtLmNvbT4NCitDb3B5cmlnaHQgKEMpIDIw
MDUgTG9yZW56byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyA8bG9yZW56b0BnbnUub3JnPg0KK0F1
dGhvcjogTG9yZW56byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyAoT3JpZ2luYWw6IE5pa2kgUmFo
aW1pKQ0KK1RoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBhY2NvcmRpbmcgdG8gdGhlIEdOVSBHZW5l
cmFsIFB1YmxpYyBMaWNlbnNlLg0KK1RoaXMgbW9kdWxlIHdhcyB0ZXN0ZWQgb24gdGhlIExpbnV4
IGtlcm5lbCAyLjYuOSBhbmQgMi42LjEwLg0KKw0KK1RoZSBwdXJwb3NlIG9mIHRoZSBUcnVzdGVk
IFBhdGggRXhlY3V0aW9uIExpbnV4IFNlY3VyaXR5IE1vZHVsZSBpcyB0byBlbmFibGUgYQ0KK2No
ZWNrIGluIHRoZSBMaW51eCBrZXJuZWwgdG8gbGltaXQgdGhlIHJ1bm5pbmcgb2YgZXhlY3V0YWJs
ZXMgaW4gdHJ1c3RlZCBwYXRocw0KK3NvIHRoYXQgdGhlIHBvdGVudGlhbCBmb3IgbWFsaWNpb3Vz
IGNvZGUgdG8gYmUgcnVuIG9uIHRoZSBzeXN0ZW0gaXMgcmVkdWNlZC4NCitBIHRydXN0ZWQgcGF0
aCBpcyBvbmUgaW4gd2hpY2ggdGhlIHBhcmVudCBkaXJlY3Rvcnkgb2YgYSBmaWxlIGlzIG93bmVk
IGJ5IHJvb3QNCithbmQgaXMgbmVpdGhlciBncm91cCBub3Igb3RoZXIgd3JpdGVhYmxlLiANCitU
aGUgbW9kdWxlIHJlbGllcyBvbiBhIGtlcm5lbCBob29rIHdoaWNoIGNoZWNrcyB0byBzZWUgaWYg
dGhlIGdpdmVuIHBhdGggaXMNCit0cnVzdGVkIG9yIG5vdCBhbmQgd2hvIGlzIHRoZSB1c2VyIChv
ciBncm91cCBtZW1iZXIpIHRoYXQgY2F1c2VkIHRoZSBldmVudCAoZXhlY3V0aW9uKS4NCitUaGlz
IGNoZWNrIHRha2VzIHBsYWNlIGRpcmVjdGx5IHVwb24gYW4gYXR0ZW1wdCB0byBleGVjdXRlIHRo
ZSBjb2RlIGJ5IHVzaW5nIHRoZSANCitmaWxlX21tYXAgYW5kIGZpbGVfbXByb3RlY3QgaG9va3Mg
d2hpY2ggY29udHJvbCBob3cgbW1hcCgpIGNhbiBkbyB0aGUgbWVtb3J5IG1hcHBpbmcNCitmb3Ig
YW4gZXhlY3V0YWJsZSwgcHJldmVudGluZyB0aGUgZW5naW5lIHRvIGJlIGJ5cGFzc2VkIGJ5IHVz
aW5nIHRyaWNrcyBsaWtlIHRoZQ0KK2xkLWxpbnV4LnNvLjIgb25lIG9yIGFueSBvdGhlciBzaGFy
ZWQtbGlicmFyeS13cmFwcGluZyB0cmljay5BbHNvLCB0aGUgZmlsZV9tcHJvdGVjdA0KK2hvb2sg
cHJldmVudHMgbXByb3RlY3QoKSBvZiBiZWluZyBhYnVzZWQgZm9yIGJ5cGFzcyB0aGUgVFBFIGVu
Z2luZS4NCitPbGQgYnBybV9jaGVja19zZWN1cml0eSBiZWhhdmlvciBpcyBub3QgYW55bW9yZSB1
c2VkIGFuZCBpcyBkcm9wcGVkIGluIHRoZSBzb3VyY2UuIA0KKw0KK0xpbWl0YXRpb25zOiANCitS
aWdodCBub3csIHRoZSBlbmdpbmUgZG9lcyBub3QgdXNlIHRoZSBicHJtX3NlY3VyZWV4ZWMgaG9v
ayB0byANCitwcmV2ZW50IHVzZSBvZiBzZW5zaXRpdmUgTERfe1BSRUxPQUQsREVCVUd9IHZhcmlh
YmxlcyBieSB1bnRydXN0ZWQgdXNlcnMgb3IgZ3JvdXBzLCBidXQNCittYWtpbmcgdGhlc2UgY2hl
Y2tzIHJlbHlpbmcgaW4ga2VybmVsIHNwYWNlIGhhcyBiZWVuIGRlbW9uc3RyYXRlZCBiZWluZyBs
ZXNzIGVmZmljaWVudA0KK3RoYW4gc2ltcGx5IGNoZWNraW5nIGFuZCBoYXZpbmcgYSB3ZWxsLWNv
bmZpZ3VyZWQgdXNlciBzcGFjZS4NCitBbHNvLCBzY3JpcHQgb3Igc291cmNlIGludGVycHJldGVy
cyBsaWtlIHNoIGZvciBzaGVsbCBzY3JpcHRzLCBweXRob24sIGV0YyBjb3VsZCBzdGlsbA0KK2V4
ZWN1dGUgY29kZSBhcyB0aGV5IHJ1biBub3JtYWxseSBmcm9tIHRydXN0ZWQgcGF0aHMsIHRoZSBz
b2x1dGlvbiByZWxpZXMgb24gaGF2aW5nIHRoZW0NCitpbiBub24gdHJ1c3RlZCBwYXRocyBvciBl
dmVuIGltcGxlbWVudGluZyBhbiB1c2VyIHNwYWNlIGNvbnRyb2wgdG9vbCwgdXNlIFNFTGludXgg
b3INCithbiBhZHZhbmNlZCBtZXRob2QgZm9yIG1lbW9yeSBtYXBwaW5ncyBleGVjdXRpb24uDQor
VGhpcyBmZWF0dXJlcyBjb3VsZCBiZSBkZXZlbG9wZWQsIGJ1dCBpdCdzIG5vdCBhIGNyaXRpY2Fs
LCBibG9ja2luZyBpc3N1ZSBhbmQgaW4gbXkgb3BpbmlvbiwNCit0aGV5IHNob3VsZG4ndCByZWx5
IG9uIHRoZSBrZXJuZWwgc3BhY2UuDQorDQorVGhlIG1vZHVsZSBhbHNvIGNyZWF0ZXMgdHdvIFRy
dXN0ZWQgUGF0aCBhY2Nlc3MgY29udHJvbCBsaXN0cyB3aGljaCBjYW4gYmUgYWNjZXNzZWQNCiti
eSBhIHN5c2ZzIG1vdW50cG9pbnQsIGluc2lkZSB0aGUgLi90cGVmcy8gc3ViZGlyIChpZTogL3N5
cy90cGVmcyksIHdyaXRlYWJsZSBieSByb290LA0KK3dobyBjYW4gYWRkIGFuZCBkZWxldGUgdWlk
cyAodXNlciBpZCdzKSBhbmQgYSBlbnRpcmUgcmFuZ2Ugb2YgdXNlcnMgdXNpbmcgdGhlIChuZXcp
IG5hdGl2ZQ0KK3N1cHBvcnQgZm9yIHBlci1naWQgKGdyb3VwIGlkKSBiYXNpcyBhY2Nlc3MgY29u
dHJvbCBsaXN0cy4gQSB1c2VyIG9uIHRoZSBsaXN0IGlzIA0KK2NvbnNpZGVyZWQgdHJ1c3RlZC4N
CitBbHNvLCBpdCBjcmVhdGVzIGEgcHJvY2ZzIGVudHJ5IGNhbGxlZCAidHBlIiAoaWU6IC9wcm9j
L3RwZSkgd2hpY2ggcHJvdmlkZXMNCit2ZXJzaW9uIGluZm9ybWF0aW9uLCB0b3RhbCBhbW91bnQg
b2YgdHJ1c3RlZCB1c2VycywgdG90YWwgYW1vdW50IG9mIHRydXN0ZWQgZ3JvdXBzIGFuZA0KK290
aGVyIGluZm9ybWF0aW9uLCBkZXBlbmRpbmcgb24gdGhlIGNvZGUgcmV2aXNpb24pLCBhbmQgdGhv
c2Ugd2hvIHdhbnQgZXh0cmEgZ2FyYmFnZQ0KK2Zyb20gdGhlIGtlcm5lbCB3aWxsIGxpa2UgdG8g
ZW5hYmxlZCBkZWJ1Z2dpbmcgYnkgcGFzc2luZyBkZWJ1Zz0xIHRvIHRoZSBtb2R1bGUgcGFyYW1l
dGVycy4NCitCeSBkZWZhdWx0LCByb290IGlzIGhhcmQgY29kZWQgb250byB0aGlzIGxpc3Qgd2l0
aCBhbHNvIGEgdHJ1c3RlZCBnaWQNCit3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgd2hl
biBzZWxlY3RpbmcgdGhlICJHSUQgZm9yIHRydXN0ZWQgdXNlcnMiIG9wdGlvbiBpbiBrZXJuZWwN
Citjb25maWd1cmF0aW9uIChTRUNVUklUWV9UUEVfVFJVU1RFRF9HSUQpLg0KKw0KK1RodXMgaWYg
dXNlciBBIGF0dGVtcHRzIHRvIHJ1biBhbiBleGVjdXRhYmxlIGluIHBhdGggQSwgdGhlIGZvbGxv
d2luZyBzY2VuYXJpb3MNCitjYW4gcGxheSBvdXQ6DQorDQorMS4gVHJ1c3RlZCB1c2VyLHRydXN0
ZWQgcGF0aCAJCQk9IFVzZXIgaXMgYWJsZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuDQorMi4gVHJ1
c3RlZCB1c2VyLHRydXN0ZWQgcGF0aCx0cnVzdGVkIGdyb3VwCT0gVXNlciBpcyBhYmxlIHRvIHJ1
biB0aGUgZXhlY3V0YWJsZS4NCiszLiBUcnVzdGVkIHVzZXIsdW50cnVzdGVkIHBhdGggIAkJPSBV
c2VyIGlzIGFibGUgdG8gcnVuIHRoZSBleGVjdXRhYmxlLg0KKzQuIFRydXN0ZWQgdXNlcix1bnRy
dXN0ZWQgcGF0aCx0cnVzdGVkIGdyb3VwCT0gVXNlciBpcyBhYmxlIHRvIHJ1biB0aGUgZXhlY3V0
YWJsZS4NCis1LiBUcnVzdGVkIHVzZXIsdW50cnVzdGVkIHBhdGgsdW50cnVzdGVkIGdyb3VwCT0g
VXNlciBpcyBhYmxlIHRvIHJ1biB0aGUgZXhlY3V0YWJsZS4NCis2LiBVbnRydXN0ZWQgdXNlcix0
cnVzdGVkIHBhdGgJIAkJPSBVc2VyIGlzIGFibGUgdG8gcnVuIHRoZSBleGVjdXRhYmxlLg0KKzcu
IFVudHJ1c3RlZCB1c2VyLHRydXN0ZWQgcGF0aCx0cnVzdGVkIGdyb3VwIAk9IFVzZXIgaXMgYWJs
ZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuDQorOC4gVW50cnVzdGVkIHVzZXIsdHJ1c3RlZCBwYXRo
LHVudHJ1c3RlZCBncm91cCAJPSBVc2VyIGlzIGFibGUgdG8gcnVuIHRoZSBleGVjdXRhYmxlLg0K
KzkuIFVudHJ1c3RlZCB1c2VyLHVudHJ1c3RlZCBwYXRoCQk9IFVzZXIgaXMgbm90IGFibGUgdG8g
cnVuIHRoZSBleGVjdXRhYmxlLiMNCisxMC4gVW50cnVzdGVkIHVzZXIsdW50cnVzdGVkIHBhdGgs
dHJ1c3RlZCBncm91cAk9IFVzZXIgaXMgYWJsZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuDQorMTEu
IFVudHJ1c3RlZCB1c2VyLHVudHJ1c3RlZCBwYXRoLHVudHJ1c3RlZCBncm91cD0gVXNlciBpcyBu
b3QgYWJsZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuIw0KKw0KK0luIGV4ZWN1dGlvbiB0ZXJtcywg
dW50cnVzdGVkIHVzZXJzIHVuZGVyIHVudHJ1c3RlZCBncm91cHMgYW5kIHBhdGhzIHdvdWxkbid0
DQorYmUgYWJsZSB0byBjaGFuZ2Ugb3IgYWx0ZXIgdGhlIG1lbW9yeSBsYXlvdXQgbm9yIG1tYXAo
KSBleGVjdXRhYmxlcyBpbiBtZW1vcnksDQorcHJldmVudGluZyBhbnkgdHlwZSBvZiB1bnRydXN0
ZWQgZXhlY3V0aW9uLg0KKw0KK0luIHNob3J0LCBpZiB0aGUgcGF0aCBhbmQgdXNlciBhcmUgYm90
aCB1bnRydXN0ZWQgKGFuZCBpZiB0aGUgZ3JvdXAgaXMgdW50cnVzdGVkKSwNCitleGVjdXRpb24g
d2lsbCBiZSBkZW5pZWQgc2VuZGluZyBhIG1lc3NhZ2Ugd2l0aCB0aGUgdWlkLGdpZCxldWlkLGVn
aWQscGlkIGFuZCBmdWxsIHBhdGgNCit0byBiaW5hcnkgdGhhdCBjYXVzZWQgdGhlIGV2ZW50Lg0K
Kw0KK0luIG9yZGVyIHRvIGFjdHVhbGx5IG1vZGlmeSB0aGUgYWNjZXNzIGNvbnRyb2wgbGlzdCBm
b3IgVFBFLCB0aGUgbW9kdWxlIHVzZXMNCithIHN5c2ZzIHN1YnN5c3RlbSBjYWxsZWQgdHBlZnMu
IFRoZSB0cGVmcyBjb250YWlucyBmb3VyIGZpbGVzOyBhZGQsIGRlbCwgYWRkLWdyb3VwDQorYW5k
IGRlbC1ncm91cC4NCitQZXJmb3JtaW5nIHJlYWQgYW5kIHdyaXRlIG9wZXJhdGlvbnMgb24gdGhl
IGFmb3JlbWVudGlvbmVkIGZpbGVzIGNyZWF0ZXMgYSB1c2VyDQordG8gc3lzdGVtIGludGVyZmFj
ZSB0aGF0IHdpbGwgYWx0ZXIgdGhlIFRQRSBhY2Nlc3MgY29udHJvbCBsaXN0LiBTZWUgDQorIk1v
ZGlmeWluZyB0aGUgVFBFIEFjY2VzcyBDb250cm9sIExpc3RzIiBiZWxvdyBmb3IgdGhlIG1ldGhv
ZHMgb2YgYWx0ZXJpbmcgdGhlIGxpc3QgDQordXNpbmcgdGhlc2UgZmlsZXMuDQorTm90ZTogVGhl
IG9yaWdpbmFsIHR3byBmaWxlIGFwcHJvYWNoIHdhcyB1dGlsaXplZCByYXRoZXIgdGhhbiBhIHNp
bmdsZSBmaWxlIGluIG9yZGVyIHRvDQora2VlcCB0aGUgY29kZSBhbmQgYWRtaW5pc3RyYXRpb24g
b2YgdGhlIG1vZHVsZSBzaW1wbGUgZm9yIGJvdGggdGhlIGtlcm5lbCBhbmQNCit0aGUgdXNlciwg
YW5kIGl0IHdhcyB3aGVuIG9ubHkgdWlkLWJhc2VkIGFjY2VzcyBjb250cm9sIGxpc3RzIHdlcmUg
c3VwcG9ydGVkLCBub3cNCitpJ3ZlIGZvbGxvd2VkIHRoZSBzYW1lIHN0eWxlIHRvIHByb3ZpZGUg
YmFja3dhcmRzIGNvbXBhdGliaWxpdHkuDQorDQorSW5zdGFsbGF0aW9uOiANCisxLiBSZWNvbXBp
bGUgdGhlIGtlcm5lbCB0byBpbmNsdWRlIExTTSBhbmQgVFBFIGFzIGEgbW9kdWxlIChvciBldmVu
IGdldCBhDQorICAga2VybmVsLWluZGVwZW5kZW50IHBhY2thZ2VkIFRQRSBtb2R1bGUuDQorMi4g
bW91bnQgLXQgc3lzZnMgc3lzZnMgPG1vdW50cG9pbnQ+DQorMy4gbW9kcHJvYmUgdHBlIGRlYnVn
PTEvMCAoaWYgeW91IHdhbnQgdG8gdXNlIGRlYnVnZ2luZyBzZXQgdG8gMSkNCis0LiBTZWUgIk1v
ZGlmeWluZyB0aGUgVFBFIEFjY2VzcyBDb250cm9sIExpc3RzIiBiZWxvdyAgZm9yIGluc3RydWN0
aW9ucyBvbiBob3cgdG8gDQorYWRkL2RlbGV0ZSB1c2VycyBhbmQgZ3JvdXBzIHRvL2Zyb20gdGhl
IGxpc3QuDQorDQorTW9kaWZ5aW5nIHRoZSBUUEUgQWNjZXNzIENvbnRyb2wgTGlzdHM6DQorDQor
LSBBZGRpbmcgYSB1c2VyCQk6IGVjaG8gPHVpZD4gPiA8bW91bnRwb2ludD4vdHBlZnMvYWRkDQor
LSBEZWxldGluZyBhIHVzZXIJOiBlY2hvIDx1aWQ+ID4gPG1vdW50cG9pbnQ+L3RwZWZzL2RlbA0K
Ky0gQWRkaW5nIGEgZ3JvdXAJOiBlY2hvIDxnaWQ+ID4gPG1vdW50cG9pbnQ+L3RwZWZzL2FkZC1n
cm91cA0KKy0gRGVsZXRpbmcgYSBncm91cAk6IGVjaG8gPGdpZD4gPiA8bW91bnRwb2ludD4vdHBl
ZnMvZGVsLWdyb3VwDQorLSBTaG93IHVpZCBsaXN0IHRvIHVzZXJzcGFjZTogY2F0IDxtb3VudHBv
aW50Pi90cGVmcy9hZGQNCistIFNob3cgZ2lkIGxpc3QgdG8gdXNlcnNwYWNlOiBjYXQgPG1vdW50
cG9pbnQ+L3RwZWZzL2FkZC1ncm91cA0KKy0gU2hvdyB2ZXJzaW9uIGFuZCBzdGF0aXN0aWNzIGlu
Zm9ybWF0aW9uOiBjYXQgL3Byb2MvdHBlDQorDQorTm90ZTogQWR2YW5jZWQgdXNlcnMgd291bGQg
YmUgaW50ZXJlc3RlZCBpbiB3cml0aW5nIGEgc2NyaXB0IG9yIHNvbWV0aGluZw0KK3RvIG1vZGlm
eSB0aGUgYWNjZXNzIGNvbnRyb2wgbGlzdHMgaW4gYSBmaW5lLWdyYWluZWQgbWFubmVyLCBidXQg
dGhpcyBpcyBvdXQNCitvZiB0aGUgZ29hbHMgb2YgdGhlIFRQRSBkZXZlbG9wbWVudCwgYW55d2F5
LCBmZWVsIGZyZWUgdG8gc2VuZCB5b3VyIGNvbnRyaWJ1dGlvbnMNCit0byBsb3JlbnpvQGdudS5v
cmcuDQpkaWZmIC1OdXIgLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L2ZmZGQgbGludXgtMi42LjEw
LXRwZS9zZWN1cml0eS9mZmRkDQotLS0gLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L2ZmZGQJMTk3
MC0wMS0wMSAwMTowMDowMC4wMDAwMDAwMDAgKzAxMDANCisrKyBsaW51eC0yLjYuMTAtdHBlL3Nl
Y3VyaXR5L2ZmZGQJMjAwNS0wMS0wOCAxNzoyNTo0NS4wMDAwMDAwMDAgKzAxMDANCkBAIC0wLDAg
KzEsMTYwIEBADQorLyoNCisgKiBUcnVzdGVkIFBhdGggRXhlY3V0aW9uIFNlY3VyaXR5IE1vZHVs
ZQ0KKyAqDQorICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYSBUcnVzdGVkIFBhdGggRXhlY3V0aW9u
IChUUEUpIGVuZ2luZSB0byB0aGUNCisgKiBMaW51eCBrZXJuZWwuIFRQRSBvcmlnaW5hdGVkIGFz
IGEga2VybmVsIHBhdGNoIHRvIE9wZW5CU0QgMi40IGJ5DQorICogcm91dGV8ZGFlbW9uOSBhbmQg
TWlrZSBTY2hpZm1hbiAoc2VlIFBocmFjayA1NCkuIElCTSBvcmlnaW5hbGx5IG1vZGlmaWVkDQor
ICogdGhlIG9yaWdpbmFsIHByb2plY3QgdG8gZml0IHdpdGhpbiB0aGUgY29uc3RyYWludHMgb2Yg
dGhlIExTTSBmcmFtZXdvcmsNCisgKiBhbmQgc28gaXQgc2hvdWxkIGJlIG5vdGVkIHRoYXQgdGhp
cyBpcyBub3QgdGhlIHNhbWUgcHJvamVjdC4gQWxzbywNCisgKiB0aGUgbW9kdWxlIG1ha2VzIHVz
ZSBvZiB0aGUgc3lzZnMgZmlsZXN5c3RlbS4gDQorICogVGhpcyBtb2R1bGUgaXMgYSByZXdyaXRl
IG9mIHRoZSBJQk0ncyBvcmlnaW5hbCBjb2RlIGluIG9yZGVyIHRvIGFkZCANCisgKiBkZWJ1Z2dp
bmcsIGJldHRlciBpbmZvcm1hdGlvbiBvdXRwdXR0aW5nLCBzdXBwb3J0IGZvciBwZXItVXNlci1H
cm91cHMgDQorICogYWNjZXNzIGNvbnRyb2wgbGlzdHMgYXQgcnVudGltZSBhbmQga2VybmVsLWNv
bmZpZ3VyYXRpb24gbGV2ZWwsIGEgcHJvY2ZzIA0KKyAqIGludGVyZmFjZSBmb3IgZ2VuZXJhbCBp
bmZvcm1hdGlvbiBnYXRoZXJpbmcgZnJvbSB0aGUgVFBFIHN1YnN5c3RlbSBhbmQgdGhlDQorICog
cHJvdGVjdGlvbiBlbmdpbmUgd2hpY2ggaW4gdGhlIG9yaWdpbmFsIElCTSdzIGNvZGUgd2FzIHJl
bHlpbmcgaW4gYnBybV9zZXRfc2VjdXJpdHkNCisgKiBpcyBub3cgYmFzZWQgaW4gZXhlY3V0YWJs
ZXMgbWVtb3J5IG1hcHBpbmdzLCB3aGljaCBtYWtlcyBpdCBzZWN1cmUgYWdhaW5zdA0KKyAqIHNo
YXJlZCBsaWJyYXJpZXMgdGhhdCBjYW4gd3JhcCB1bnRydXN0ZWQgZXhlY3V0YWJsZXMgYW5kIGJ5
cGFzcyB0aGUgVFBFDQorICogc3Vic3lzdGVtLCBhbHNvIGFkZGluZyBhIHNlY29uZGFyeSBwcm90
ZWN0aW9uIGFnYWluc3QgcG9zc2libGUgYXR0ZW1wdHMgdG8NCisgKiBieXBhc3MgdGhlIG1tYXAo
KSdpbmcgY2hlY2tzIGJ5IHVzaW5nIFBST1RfUkVBRCBpbnN0ZWFkIG9mIFBST1RfRVhFQyBpbg0K
KyAqIG1wcm90ZWN0KCkgY2FsbHMuDQorICoNCisgKiBDb3B5cmlnaHQgKEMpIDIwMDMgSUJNIENv
cnAuIDxuYXJhaGltaUB1cy5pYm0uY29tPg0KKyAqIENvcHlyaWdodCAoQykgMjAwNSBMb3Jlbnpv
IEhlcm5hbmRleiBHYXJjaWEtSGllcnJvIDxsb3JlbnpvQGdudS5vcmc+DQorICogQWxsIHJpZ2h0
cyByZXZlcnNlZC4NCisgKg0KKyAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3Ug
Y2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3INCisgKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KKyAqIGFzIHB1Ymxpc2hlZCBieSB0
aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAyDQorICogb2YgdGhl
IExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQorICoNCisg
KiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJl
IHVzZWZ1bCwNCisgKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUg
aW1wbGllZCB3YXJyYW50eSBvZg0KKyAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBB
IFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUNCisgKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGlj
ZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KKyAqLw0KKw0KKyNpZm5kZWYgX19UUEVfSA0KKyNkZWZp
bmUgX19UUEVfSA0KKw0KKyNpbmNsdWRlIDxsaW51eC90eXBlcy5oPg0KKyNpbmNsdWRlIDxhc20v
dWFjY2Vzcy5oPg0KKw0KKy8qIFZlcm1hZ2ljIGFuZCAvcHJvYyBlbnRyeSBuYW1lICovDQorDQor
I2RlZmluZSBWRVJTSU9OIAkJIjAuMi0yMDA1MDEwNyINCisjZGVmaW5lIExTTV9WRVJTSU9OIAkJ
TlVMTAkvKiB1bnVzZWQgKi8NCisjZGVmaW5lIFRQRV9QUk9DX0VOVFJZX05BTUUgCSJ0cGUiCS8q
IC9wcm9jIGVudHJ5IG5hbWUgKi8NCisNCisvKiBQZXItdXNlciBncm91cCBiYXNpcyBwcm90ZWN0
aW9uIHN0dWZmICovDQorDQorI2lmZGVmIENPTkZJR19TRUNVUklUWV9UUEVfVFJVU1RFRF9HSUQN
CitzdGF0aWMgaW50IHRwZV90cnVzdGVkX2dpZCA9IENPTkZJR19TRUNVUklUWV9UUEVfVFJVU1RF
RF9HSUQ7DQorI2Vsc2UNCitzdGF0aWMgaW50IHRwZV90cnVzdGVkX2dpZCA9IDA7DQorI2VuZGlm
DQorDQorLyoNCisgKiAgc3lzY2FsbCBzdHVmZg0KKyAqLw0KKyNkZWZpbmUgVFBFX0FDTF9TSVpF
ICAgIDgyCS8qIE1heGltdW0gbnVtYmVyIG9mIHVzZXJzIGluIHRoZSBsaXN0IA0KKwkJCQkgKiBw
bHVzIHR3by4gVGhpcyB3YXMgYW4gb3JpZ2luYWwNCisJCQkJICogY29tcG9uZW50IG9mIFRQRS4g
VGhpcyB3aWxsIGJlIA0KKwkJCQkgKiBmaXhlZCBsYXRlciBvbi4NCisJCQkJICovDQorDQorI2Rl
ZmluZSBUUEVfSU5JVElBTElaRVIgLTEJLyogQSBVSUQgdGhhdCBpc24ndCB1c2VkICovDQorDQor
I2RlZmluZSBBQ0sgICAgICAgICAgICAgMQkvKiBwb3NpdGl2ZSBhY2tub3dsZWRnZW1lbnQgKi8N
CisjZGVmaW5lIE5BQ0sgICAgICAgICAgICAtMQkvKiBuZWdhdGl2ZSBhY2tub3dsZWRnZW1lbnQg
Ki8NCisjZGVmaW5lIERVUCAgICAgICAgICAgIDMJLyogZHVwbGljYXRlIGlkIHJldHVybiBmb3Ig
dHBlX2FkZCAqLw0KKw0KKy8qDQorICogIFZlcmlmeSB0aGUgcGF0aC4gDQorICovDQorI2RlZmlu
ZSBUUlVTVEVEX1BBVEgobW9kZSwgdWlkKSBcDQorKCEobW9kZSAmIChTX0lXR1JQIHwgU19JV09U
SCkpICYmICh1aWQgPT0gMCkpDQorDQorc3RhdGljIHVpZF90IHRwZV9hY2xbVFBFX0FDTF9TSVpF
XTsJLyogdHJ1c3RlZCB1c2VycyBsaXN0ICovDQorc3RhdGljIGdpZF90IHRwZV9ncm91cF9hY2xb
VFBFX0FDTF9TSVpFXTsJLyogdHJ1c3RlZCB1c2VyIGdyb3VwcyBsaXN0ICovDQorc3RhdGljIGlu
dCB0cGVfYWNsX2NhbmRpZGF0ZXM7CS8qIG51bWJlciBvZiB1c2VycyBvbiB0aGUgbGlzdCAqLw0K
K3N0YXRpYyBpbnQgdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzOwkvKiBudW1iZXIgb2YgdXNlciBn
cm91cHMgb24gdGhlIGxpc3QgKi8NCisNCisvKg0KKyAqIFZlcmlmeSB0aGUgdXNlci4gVGhpcyBt
YWNybyBpcyBwYXNzZWQgdGhlIHVzZXIncyBJRCBmcm9tIHRoZSANCisgKiB0cGVfYnBybV9zZXRf
c2VjdXJpdHkgaG9vay4gDQorICovDQorDQorI2RlZmluZSBUUlVTVEVEX1VTRVIoVUlEKSAodHBl
X3ZlcmlmeShVSUQpID09IEFDSykNCisNCisvKg0KKyAqIFZlcmlmeSB0aGUgdXNlciBncm91cC4g
VGhpcyBtYWNybyBpcyBwYXNzZWQgdGhlIHVzZXIncyBncm91cCBJRCBmcm9tIHRoZSANCisgKiB0
cGVfYnBybV9zZXRfc2VjdXJpdHkgaG9vay4gDQorICovDQorDQorI2RlZmluZSBUUlVTVEVEX0dS
T1VQKEdJRCkgKHRwZV9ncm91cF92ZXJpZnkoR0lEKSA9PSBBQ0spDQorDQorLyogIEluaXRpYWxp
emUgdGhlIGFycmF5IHdpdGggZGVmYXVsdCB2YWx1ZXMgKFRQRV9JTklUSUFMSVpFUikuICovDQor
DQorLyogRGVidWdnaW5nIGFuZCBvdXRwdXR0aW5nIGZ1bmN0aW9ucyAqLw0KKw0KK3N0YXRpYyBp
bmxpbmUgdm9pZCB0cGVfaW5pdCh2b2lkKQ0KK3sNCisJbWVtc2V0KHRwZV9hY2wsIFRQRV9JTklU
SUFMSVpFUiwgc2l6ZW9mKHVpZF90KSAqIFRQRV9BQ0xfU0laRSk7DQorCXByaW50ayhLRVJOX0lO
Rk8gIlRQRTogQWNjZXNzIENvbnRyb2wgTGlzdCBjcmVhdGVkLlxuIik7DQorCXRwZV9hY2xfY2Fu
ZGlkYXRlcyA9IDE7DQorCWlmICghKHRwZV90cnVzdGVkX2dpZCA9PSAwKSkgew0KKwkJdHBlX2Fj
bF9ncm91cF9jYW5kaWRhdGVzID0gMjsNCisJfSBlbHNlIHsNCisJCXRwZV9hY2xfZ3JvdXBfY2Fu
ZGlkYXRlcyA9IDE7DQorCX0NCisJdHBlX2FjbFswXSA9IDA7DQorCWlmICghKHRwZV90cnVzdGVk
X2dpZCA9PSAwKSkgew0KKwkJdHBlX2dyb3VwX2FjbFswXSA9IDA7DQorDQorCQl0cGVfZ3JvdXBf
YWNsWzFdID0gdHBlX3RydXN0ZWRfZ2lkOw0KKwl9IGVsc2Ugew0KKwkJdHBlX2dyb3VwX2FjbFsw
XSA9IDA7DQorCX0NCit9DQorDQorLyogIExvY2F0ZSBhIHVpZCBpbiB0aGUgbGlzdCAqLw0KK3N0
YXRpYyBpbmxpbmUgaW50IHRwZV9zZWFyY2godWlkX3QgY2FuZGlkYXRlKQ0KK3sNCisJaW50IGk7
DQorCWZvciAoaSA9IDA7IGkgPCB0cGVfYWNsX2NhbmRpZGF0ZXM7IGkrKykgew0KKwkJaWYgKGNh
bmRpZGF0ZSA9PSB0cGVfYWNsW2ldKSB7DQorCQkJcmV0dXJuIGk7DQorCQl9DQorCX0NCisJcmV0
dXJuIE5BQ0s7DQorfQ0KKw0KKy8qICBWZXJpZnkgYSBjYW5kaWRhdGUgdXNlci4gKi8NCitzdGF0
aWMgaW5saW5lIGludCB0cGVfdmVyaWZ5KHVpZF90IGNhbmRpZGF0ZSkNCit7DQorCWlmICgodHBl
X3NlYXJjaChjYW5kaWRhdGUpKSAhPSBOQUNLKSB7DQorCQlyZXR1cm4gKEFDSyk7DQorCX0NCisJ
cmV0dXJuIChOQUNLKTsNCit9DQorDQorLyogIFZlcmlmeSBhIGNhbmRpZGF0ZSB1c2VyIGdyb3Vw
LiAqLw0KK3N0YXRpYyBpbmxpbmUgaW50IHRwZV9zZWFyY2hfZ3JvdXAoZ2lkX3QgZ3JvdXBfY2Fu
ZGlkYXRlKQ0KK3sNCisJaW50IGk7DQorCWZvciAoaSA9IDA7IGkgPCB0cGVfYWNsX2dyb3VwX2Nh
bmRpZGF0ZXM7IGkrKykgew0KKwkJaWYgKGdyb3VwX2NhbmRpZGF0ZSA9PSB0cGVfZ3JvdXBfYWNs
W2ldKSB7DQorCQkJcmV0dXJuIGk7DQorCQl9DQorCX0NCisJcmV0dXJuIE5BQ0s7DQorfQ0KK3N0
YXRpYyBpbmxpbmUgaW50IHRwZV9ncm91cF92ZXJpZnkoZ2lkX3QgZ3JvdXBfY2FuZGlkYXRlKQ0K
K3sNCisJaWYgKCh0cGVfc2VhcmNoX2dyb3VwKGdyb3VwX2NhbmRpZGF0ZSkpICE9IE5BQ0spIHsN
CisJCXJldHVybiAoQUNLKTsNCisJfQ0KKwlyZXR1cm4gKE5BQ0spOw0KK30NCisNCisjZW5kaWYJ
CQkJLyogX19UUEVfSCAqLw0KZGlmZiAtTnVyIC4uL2xpbnV4LTIuNi4xMC9zZWN1cml0eS9LY29u
ZmlnIGxpbnV4LTIuNi4xMC10cGUvc2VjdXJpdHkvS2NvbmZpZw0KLS0tIC4uL2xpbnV4LTIuNi4x
MC9zZWN1cml0eS9LY29uZmlnCTIwMDUtMDEtMDMgMTk6NDM6MDUuMDAwMDAwMDAwICswMTAwDQor
KysgbGludXgtMi42LjEwLXRwZS9zZWN1cml0eS9LY29uZmlnCTIwMDUtMDEtMDcgMDA6NDg6Mjku
MDAwMDAwMDAwICswMTAwDQpAQCAtODQsNiArODQsMzYgQEANCiANCiAJICBJZiB5b3UgYXJlIHVu
c3VyZSBob3cgdG8gYW5zd2VyIHRoaXMgcXVlc3Rpb24sIGFuc3dlciBOLg0KIA0KK2NvbmZpZyBT
RUNVUklUWV9UUEUNCisJdHJpc3RhdGUgIlRydXN0ZWQgUGF0aCBFeGVjdXRpb24gKEVYUEVSSU1F
TlRBTCkiDQorCWRlcGVuZHMgb24gU0VDVVJJVFkgJiYgRVhQRVJJTUVOVEFMDQorCWhlbHANCisJ
ICBUaGUgVFBFIG1vZHVsZSBlbmZvcmNlcyBhIGNoZWNrIG9uIHRoZSBydW5uaW5nIG9mIGV4ZWN1
dGFibGVzLg0KKwkgIEl0IHdpbGwgbm90IGFsbG93IGV4ZWN1dGlvbiBpZiB0aGUgcHJvZ3JhbSBp
cyBsb2NhdGVkIGluIGEgDQorCSAgInRydXN0ZWQgcGF0aCIgYW5kIHRoZSBjdXJyZW50IHVzZXIg
aXMgInVudHJ1c3RlZCIuIEEgdHJ1c3RlZA0KKwkgIHBhdGggaXMgb25lIHdoaWNoIGlzIHJvb3Qg
b3duZWQgYW5kIG5laXRoZXIgZ3JvdXAgbm9yIG90aGVyIA0KKyAgIAkgIHdyaXRlYWJsZS4gQSB1
c2VyIGlzIGNvbnNpZGVyZWQgdHJ1c3RlZCBpZiB0aGVpciB1aWQgaXMgYWRkZWQNCisgCSAgdG8g
YSB0cnVzdGVkIGxpc3QgaW4gbWVtb3J5LCBhbHNvLCB1c2VyIGdyb3VwcyBjYW4gYmUgdHJ1c3Rl
ZA0KKyAJICBpbiBrZXJuZWwgY29tcGlsZS10aW1lIGFuZCBydW50aW1lIGJ5IGFkZGluZyB0aGVt
IHRvIHRoZSBnaWQtYmFzaXMNCisgCSAgYWNjZXNzIGNvbnRyb2wgbGlzdC5Sb290IGlzIHRydXN0
ZWQsIGJ5IGRlZmF1bHQuQSBwcm9jIGludGVyZmFjZQ0KKyAJICAvcHJvYy90cGUgaXMgY3JlYXRl
ZCB3aGVuIG1vZHVsZSBsb2FkcywgaXQgc2hvd3MgdmVyc2lvbiBhbmQgQUNMDQorIAkgIGluZm9y
bWF0aW9uIHRvIHVzZSB0aGlyZC1wYXJ0eSBjaGVja2VycyBvciBzY3JpcHRzLg0KKyAJICANCisJ
ICAoYykgMjAwNSwgTG9yZW56byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyA8bG9yZW56b0BnbnUu
b3JnPi4NCisJICANCisJICBJZiB5b3UgYXJlIHVuc3VyZSBob3cgdG8gYW5zd2VyIHRoaXMgcXVl
c3Rpb24sIGFuc3dlciBOLg0KKw0KK2NvbmZpZyBTRUNVUklUWV9UUEVfVFJVU1RFRF9HSUQNCisJ
aW50ICJHSUQgZm9yIHRydXN0ZWQgdXNlcnMiDQorCWRlcGVuZHMgb24gU0VDVVJJVFlfVFBFDQor
CWRlZmF1bHQgMTMzNw0KKwloZWxwDQorCSAgSGVyZSB5b3UgY2FuIGNob29zZSB0aGUgR0lEIHRv
IGRpc2FibGUgdHJ1c3RlZCBwYXRoIHByb3RlY3Rpb24gZm9yLg0KKwkgIFVzZXJzIHJlbHlpbmcg
dW5kZXIgdGhlIGdyb3VwIHdpdGggaWQgc3BlY2lmaWVkIGhlcmUgd2lsbCBoYXZlIFRQRQ0KKwkg
IGRpc2FibGVkIGJ5IGRlZmF1bHQsIHNvLCB0aGV5IGNvdWxkIHJlcHJlc2VudCBhIHNlY3VyaXR5
IHJpc2sgZm9yIA0KKwkgIHRoZSByZXN0IG9mIHVzZXJzLlBsZWFzZSwgYmUgc3VyZSB0aGF0IHlv
dSBjYW4gcmVhbGx5IHRydXN0IGluIHRoZQ0KKwkgIG1lbWJlcnMgb2YgdGhpcyBncm91cC4JICAN
CisNCiBzb3VyY2Ugc2VjdXJpdHkvc2VsaW51eC9LY29uZmlnDQogDQogZW5kbWVudQ0KZGlmZiAt
TnVyIC4uL2xpbnV4LTIuNi4xMC9zZWN1cml0eS9NYWtlZmlsZSBsaW51eC0yLjYuMTAtdHBlL3Nl
Y3VyaXR5L01ha2VmaWxlDQotLS0gLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L01ha2VmaWxlCTIw
MDUtMDEtMDMgMTk6NDM6MDUuMDAwMDAwMDAwICswMTAwDQorKysgbGludXgtMi42LjEwLXRwZS9z
ZWN1cml0eS9NYWtlZmlsZQkyMDA1LTAxLTA0IDAyOjEwOjQ1LjAwMDAwMDAwMCArMDEwMA0KQEAg
LTE3LDMgKzE3LDQgQEANCiBvYmotJChDT05GSUdfU0VDVVJJVFlfQ0FQQUJJTElUSUVTKQkrPSBj
b21tb25jYXAubyBjYXBhYmlsaXR5Lm8NCiBvYmotJChDT05GSUdfU0VDVVJJVFlfUk9PVFBMVUcp
CQkrPSBjb21tb25jYXAubyByb290X3BsdWcubw0KIG9iai0kKENPTkZJR19TRUNVUklUWV9TRUNM
VkwpCQkrPSBzZWNsdmwubw0KK29iai0kKENPTkZJR19TRUNVUklUWV9UUEUpCQkrPSB0cGUubw0K
ZGlmZiAtTnVyIC4uL2xpbnV4LTIuNi4xMC9zZWN1cml0eS90cGUuYyBsaW51eC0yLjYuMTAtdHBl
L3NlY3VyaXR5L3RwZS5jDQotLS0gLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L3RwZS5jCTE5NzAt
MDEtMDEgMDE6MDA6MDAuMDAwMDAwMDAwICswMTAwDQorKysgbGludXgtMi42LjEwLXRwZS9zZWN1
cml0eS90cGUuYwkyMDA1LTAxLTA4IDE3OjI5OjE3LjAwMDAwMDAwMCArMDEwMA0KQEAgLTAsMCAr
MSw3MzEgQEANCisvKg0KKyAqIFRydXN0ZWQgUGF0aCBFeGVjdXRpb24gU2VjdXJpdHkgTW9kdWxl
DQorICoNCisgKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBhIFRydXN0ZWQgUGF0aCBFeGVjdXRpb24g
KFRQRSkgZW5naW5lIHRvIHRoZQ0KKyAqIExpbnV4IGtlcm5lbC4gVFBFIG9yaWdpbmF0ZWQgYXMg
YSBrZXJuZWwgcGF0Y2ggdG8gT3BlbkJTRCAyLjQgYnkNCisgKiByb3V0ZXxkYWVtb245IGFuZCBN
aWtlIFNjaGlmbWFuIChzZWUgUGhyYWNrIDU0KS4gSUJNIG9yaWdpbmFsbHkgbW9kaWZpZWQNCisg
KiB0aGUgb3JpZ2luYWwgcHJvamVjdCB0byBmaXQgd2l0aGluIHRoZSBjb25zdHJhaW50cyBvZiB0
aGUgTFNNIGZyYW1ld29yaw0KKyAqIGFuZCBzbyBpdCBzaG91bGQgYmUgbm90ZWQgdGhhdCB0aGlz
IGlzIG5vdCB0aGUgc2FtZSBwcm9qZWN0LiBBbHNvLA0KKyAqIHRoZSBtb2R1bGUgbWFrZXMgdXNl
IG9mIHRoZSBzeXNmcyBmaWxlc3lzdGVtLiANCisgKiBUaGlzIG1vZHVsZSBpcyBhIHJld3JpdGUg
b2YgdGhlIElCTSdzIG9yaWdpbmFsIGNvZGUgaW4gb3JkZXIgdG8gYWRkIA0KKyAqIGRlYnVnZ2lu
ZywgYmV0dGVyIGluZm9ybWF0aW9uIG91dHB1dHRpbmcsIHN1cHBvcnQgZm9yIHBlci1Vc2VyLUdy
b3VwcyANCisgKiBhY2Nlc3MgY29udHJvbCBsaXN0cyBhdCBydW50aW1lIGFuZCBrZXJuZWwtY29u
ZmlndXJhdGlvbiBsZXZlbCwgYSBwcm9jZnMgDQorICogaW50ZXJmYWNlIGZvciBnZW5lcmFsIGlu
Zm9ybWF0aW9uIGdhdGhlcmluZyBmcm9tIHRoZSBUUEUgc3Vic3lzdGVtIGFuZCB0aGUNCisgKiBw
cm90ZWN0aW9uIGVuZ2luZSB3aGljaCBpbiB0aGUgb3JpZ2luYWwgSUJNJ3MgY29kZSB3YXMgcmVs
eWluZyBpbiBicHJtX3NldF9zZWN1cml0eQ0KKyAqIGlzIG5vdyBiYXNlZCBpbiBleGVjdXRhYmxl
cyBtZW1vcnkgbWFwcGluZ3MsIHdoaWNoIG1ha2VzIGl0IHNlY3VyZSBhZ2FpbnN0DQorICogc2hh
cmVkIGxpYnJhcmllcyB0aGF0IGNhbiB3cmFwIHVudHJ1c3RlZCBleGVjdXRhYmxlcyBhbmQgYnlw
YXNzIHRoZSBUUEUNCisgKiBzdWJzeXN0ZW0sIGFsc28gYWRkaW5nIGEgc2Vjb25kYXJ5IHByb3Rl
Y3Rpb24gYWdhaW5zdCBwb3NzaWJsZSBhdHRlbXB0cyB0bw0KKyAqIGJ5cGFzcyB0aGUgbW1hcCgp
J2luZyBjaGVja3MgYnkgdXNpbmcgUFJPVF9SRUFEIGluc3RlYWQgb2YgUFJPVF9FWEVDIGluDQor
ICogbXByb3RlY3QoKSBjYWxscy4NCisgKg0KKyAqIENvcHlyaWdodCAoQykgMTk5OCByb3V0ZXxk
YWVtb245IGFuZCBNaWtlIEQuIFNjaGlmZm1hbg0KKyAqIENvcHlyaWdodCAoQykgMjAwMS0yMDAy
ICBHcmVnIEtyb2FoLUhhcnRtYW4gPGdyZWdraEB1cy5pYm0uY29tPg0KKyAqIENvcHlyaWdodCAo
QykgMjAwMyBJQk0gQ29ycC4gPG5hcmFoaW1pQHVzLmlibS5jb20+DQorICogQ29weXJpZ2h0IChD
KSAyMDA1IExvcmVuem8gSGVybmFuZGV6IEdhcmNpYS1IaWVycm8gPGxvcmVuem9AZ251Lm9yZz4N
CisgKiBBbGwgcmlnaHRzIHJldmVyc2VkLg0KKyAqDQorICogVGhlIGZvbGxvd2luZyBwZW9wbGUg
Y29udHJpYnV0ZWQgdG8gdGhpczoNCisgKiAtIFN0ZXBoZW4gRC4gU21hbGxleQk8c2RzQGVwb2No
Lm5jc2MubWlsPiAJKGlkZWFzLCBzdWdnZXN0aW9ucy4uLikNCisgKiAtIENocmlzIFdyaWdodCAJ
PGNocmlzd0Bvc2RsLm9yZz4gCShoZWxwIG9uIHZtYSBzdHJ1Y3RzKQ0KKyAqIC0gQnJhZCBTcGVu
Z2xlciAJPHNwZW5kZXJAZ3JzZWN1cml0eS5uZXQ+KGNvZGUgc2FmZXR5IHJldmlld3MpDQorICog
LSBTZXRoIEFybm9sZCAJPHNhcm5vbGRAaW1tdW5peC5jb20+IAkobWVtb3J5IHVzZSByZWxhdGVk
IGZpeGVzKQ0KKyAqIC0gU2VyZ2UgRS4gSGFsbHluIAk8c2VydWVAdXMuaWJtLmNvbT4gCShmaXhl
cyxjb21tZW50cykNCisgKg0KKyAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3Ug
Y2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3INCisgKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KKyAqIGFzIHB1Ymxpc2hlZCBieSB0
aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAyDQorICogb2YgdGhl
IExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQorICoNCisg
KiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJl
IHVzZWZ1bCwNCisgKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUg
aW1wbGllZCB3YXJyYW50eSBvZg0KKyAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBB
IFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUNCisgKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGlj
ZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KKyAqLw0KKw0KKyNpbmNsdWRlIDxsaW51eC9jb25maWcu
aD4NCisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQorI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4N
CisjaW5jbHVkZSA8bGludXgvc21wX2xvY2suaD4NCisjaW5jbHVkZSA8bGludXgvaW5pdC5oPg0K
KyNpbmNsdWRlIDxsaW51eC9rZXJuZWwuaD4NCisjaW5jbHVkZSA8bGludXgvc2VjdXJpdHkuaD4N
CisjaW5jbHVkZSA8bGludXgvc2tidWZmLmg+DQorI2luY2x1ZGUgPGxpbnV4L25ldGxpbmsuaD4N
CisjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4NCisjaW5jbHVkZSA8bGludXgvZnMuaD4NCisjaW5j
bHVkZSA8YXNtL3VhY2Nlc3MuaD4NCisjaW5jbHVkZSA8bGludXgvcGFnZW1hcC5oPg0KKyNpbmNs
dWRlIDxsaW51eC9uYW1laS5oPg0KKyNpbmNsdWRlIDxsaW51eC92ZnMuaD4NCisjaW5jbHVkZSA8
bGludXgvbW91bnQuaD4NCisjaW5jbHVkZSA8bGludXgvc3RyaW5nLmg+DQorI2luY2x1ZGUgPGxp
bnV4L3N5c2ZzLmg+DQorI2luY2x1ZGUgPGxpbnV4L3Byb2NfZnMuaD4NCisjaW5jbHVkZSA8bGlu
dXgvbW0uaD4NCisjaW5jbHVkZSA8bGludXgvbW1hbi5oPg0KKyNpbmNsdWRlIDxsaW51eC9lbGYu
aD4NCisjaW5jbHVkZSA8bGludXgvZmlsZS5oPg0KKyNpbmNsdWRlICJ0cGUuaCINCisNCitzdGF0
aWMgaW50IHNlY29uZGFyeTsNCitzdGF0aWMgc3BpbmxvY2tfdCB0cGVfYWNsX2xvY2sgPSBTUElO
X0xPQ0tfVU5MT0NLRUQ7DQorc3RhdGljIHNwaW5sb2NrX3QgdHBlX2dyb3VwX2FjbF9sb2NrID0g
U1BJTl9MT0NLX1VOTE9DS0VEOw0KKw0KKy8qIGRlYnVnZ2luZyAqLw0KK3N0YXRpYyBpbnQgZGVi
dWcgPSAwOw0KKw0KKy8qIGdldCBkZWJ1Zz0xLzAgcGFyYW0gKi8NCittb2R1bGVfcGFyYW0oZGVi
dWcsIGJvb2wsIDA2MDApOw0KK01PRFVMRV9QQVJNX0RFU0MoZGVidWcsICJEZWJ1ZyBlbmFibGVk
IG9yIG5vdCIpOw0KKw0KKyNpZiBkZWZpbmVkKENPTkZJR19TRUNVUklUWV9UUEVfTU9EVUxFKQ0K
KyNkZWZpbmUgTEVHQUNZX05BTUUgVEhJU19NT0RVTEUtPm5hbWUNCisjZWxzZQ0KKyNkZWZpbmUg
TEVHQUNZX05BTUUgInRwZSINCisjZW5kaWYNCisjZGVmaW5lIE1ZX05BTUUgIlRQRSINCisNCisv
KiBNb2R1bGUgaW5mb3JtYXRpb24gKi8NCisjZGVmaW5lIERFU0NSSVBUSU9OICJUcnVzdGVkIFBh
dGggRXhlY3V0aW9uIExTTSBJbXBsZW1lbnRhdGlvbiINCisjZGVmaW5lIEFVVEhPUiAiTG9yZW56
byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyA8bG9yZW56b0BnbnUub3JnPiINCisjZGVmaW5lIExJ
Q0VOU0UgIkdQTCINCisNCisvKiBUUEUgL3Byb2MgZW50cnkgKi8NCitzdHJ1Y3QgcHJvY19kaXJf
ZW50cnkgKlRQRV9wZW50cnk7DQorDQorLyogT3V0cHV0dGluZyBhbmQgZGVidWdnaW5nIGZ1bmN0
aW9ucyAqLw0KKy8qIERlYnVnIHNob3VsZCBiZSBleHBsaWNpdGx5IGVuYWJsZWQgKGRlYnVnPTEp
IHRvIGdpdmUgb3V0cHV0IGJhY2sgZnJvbSBkYmcoKSAqLw0KKyNkZWZpbmUgZGJnKGZtdCwgYXJn
Li4uKQkJCQkJCQlcDQorCQlkbyB7CQkJCQkJCQlcDQorCQlpZiAoMSAmJiBkZWJ1ZykgIHsJCQkJ
CQlcDQorCQkJcHJpbnRrKEtFUk5fREVCVUcgIiVzOiAiIGZtdCAsIE1ZX05BTUUsICMjIGFyZyk7
CVwNCisJCQl9CQkJCQkJCVwNCisJCX0gd2hpbGUgKDApDQorDQorLyogS0VSTl9JTkZPIG1lc3Nh
Z2VzIHVzZSBraW5mbygpIHJhdGhlciB0aGFuIHByaW50aygpIGZvciBiZXR0ZXIgb3V0cHV0dGlu
ZyBsYXlvdXQgKi8NCisjZGVmaW5lIGtpbmZvKGZtdCwgYXJnLi4uKQkJCQkJCQlcDQorCQlkbyB7
CQkJCQkJCQlcDQorCQlpZiAoMSkgIHsJCQkJCQkJXA0KKwkJCXByaW50ayhLRVJOX0lORk8gIiVz
OiAiIGZtdCAsIE1ZX05BTUUsICMjIGFyZyk7CQlcDQorCQkJfQkJCQkJCQlcDQorCQl9IHdoaWxl
ICgwKQ0KKw0KKy8qICBJbnNlcnRpb24gc29ydCB0aGUgbGlzdC4gKi8NCitzdGF0aWMgdm9pZCB0
cGVfc29ydChpbnQgbG93LCBpbnQgaGlnaCkNCit7CQkJCS8qIChsaXN0IGxvdyBlbGVtZW50LCBs
aXN0IGhpZ2ggZWxlbWVudCkgKi8NCisJaW50IGksIGosIG47DQorCS8qIFN0YW5kYXJkIGluc2Vy
dGlvbiBzb3J0LiAqLw0KKwlmb3IgKGkgPSBsb3cgKyAxOyBpIDw9IGhpZ2g7IGkrKykgew0KKwkJ
aWYgKHRwZV9hY2xbaV0gPCB0cGVfYWNsW2xvd10pIHsNCisJCQl0cGVfYWNsW2xvd10gXj0gdHBl
X2FjbFtpXTsNCisJCQl0cGVfYWNsW2ldIF49IHRwZV9hY2xbbG93XTsNCisJCQl0cGVfYWNsW2xv
d10gXj0gdHBlX2FjbFtpXTsNCisJCX0NCisJfQ0KKwkvKiB0cGVfYWNsICovDQorCWZvciAoaSA9
IGxvdyArIDI7IGkgPD0gaGlnaDsgaSsrKSB7DQorCQlqID0gaTsNCisJCW4gPSB0cGVfYWNsW2ld
Ow0KKwkJd2hpbGUgKG4gPCB0cGVfYWNsW2ogLSAxXSkgew0KKwkJCXRwZV9hY2xbal0gPSB0cGVf
YWNsW2ogLSAxXTsNCisJCQlqLS07DQorCQl9DQorCQl0cGVfYWNsW2pdID0gbjsNCisJfQ0KK30N
CitzdGF0aWMgdm9pZCB0cGVfZ3JvdXBfc29ydChpbnQgbG93LCBpbnQgaGlnaCkNCit7CQkJCS8q
IChsaXN0IGxvdyBlbGVtZW50LCBsaXN0IGhpZ2ggZWxlbWVudCkgKi8NCisJaW50IGksIGosIG47
DQorCS8qIFN0YW5kYXJkIGluc2VydGlvbiBzb3J0IGZvciB0cGVfZ3JvdXBfYWNsLiAqLw0KKwlm
b3IgKGkgPSBsb3cgKyAxOyBpIDw9IGhpZ2g7IGkrKykgew0KKwkJaWYgKHRwZV9ncm91cF9hY2xb
aV0gPCB0cGVfZ3JvdXBfYWNsW2xvd10pIHsNCisJCQl0cGVfZ3JvdXBfYWNsW2xvd10gXj0gdHBl
X2dyb3VwX2FjbFtpXTsNCisJCQl0cGVfZ3JvdXBfYWNsW2ldIF49IHRwZV9ncm91cF9hY2xbbG93
XTsNCisJCQl0cGVfZ3JvdXBfYWNsW2xvd10gXj0gdHBlX2dyb3VwX2FjbFtpXTsNCisJCX0NCisJ
fQ0KKwkvKiB0cGVfZ3JvdXBfYWNsICovDQorCWZvciAoaSA9IGxvdyArIDI7IGkgPD0gaGlnaDsg
aSsrKSB7DQorCQlqID0gaTsNCisJCW4gPSB0cGVfZ3JvdXBfYWNsW2ldOw0KKwkJd2hpbGUgKG4g
PCB0cGVfZ3JvdXBfYWNsW2ogLSAxXSkgew0KKwkJCXRwZV9ncm91cF9hY2xbal0gPSB0cGVfZ3Jv
dXBfYWNsW2ogLSAxXTsNCisJCQlqLS07DQorCQl9DQorCQl0cGVfZ3JvdXBfYWNsW2pdID0gbjsN
CisJfQ0KK30NCisNCisvKiAgQXR0ZW1wdCB0byBhZGQgYW4gVUlEIGNhbmRpZGF0ZSB0byB0aGUg
bGlzdC4gICovDQorc3RhdGljIGludCB0cGVfYWRkKHVpZF90IGFkZF9jYW5kaWRhdGUpDQorew0K
KwlpbnQgcmV0dmFsID0gLUVJTlZBTDsNCisNCisJLyogRnVsbCBsaXN0LiAqLw0KKwlpZiAodHBl
X2FjbF9jYW5kaWRhdGVzID09IChUUEVfQUNMX1NJWkUgLSAyKSkgew0KKwkJa2luZm8oIlVuYWJs
ZSB0byBhZGQgdXNlciAlZC4gTGlzdCBpcyBmdWxsLlxuIiwgYWRkX2NhbmRpZGF0ZSk7DQorCQln
b3RvIG91dDsNCisJfQ0KKw0KKwlpZiAoYWRkX2NhbmRpZGF0ZSA9PSAwKSB7DQorCQlraW5mbygi
SW52YWxpZCB1c2VyIGlkLiBDYW5ub3QgYWRkLlxuIik7DQorCQlnb3RvIG91dDsNCisJfQ0KKw0K
KwkvKiBEb24ndCBhZGQgZHVwbGljYXRlcyAqLw0KKwlpZiAoKHRwZV9zZWFyY2goYWRkX2NhbmRp
ZGF0ZSkpID09IE5BQ0spIHsNCisJCS8qIEFkZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LCB0aGVu
IHNvcnQuICovDQorCQl0cGVfYWNsX2NhbmRpZGF0ZXMrKzsNCisJCXRwZV9hY2xbdHBlX2FjbF9j
YW5kaWRhdGVzXSA9IGFkZF9jYW5kaWRhdGU7DQorCQl0cGVfYWNsW3RwZV9hY2xfY2FuZGlkYXRl
cyArIDFdID0gJ1wwJzsJLyogdGVybWluYXRlIGFycmF5ICovDQorCQl0cGVfc29ydCgwLCB0cGVf
YWNsX2NhbmRpZGF0ZXMpOw0KKwkJa2luZm8oIlVJRCAlZCBhZGRlZCBhcyB0cnVzdGVkIHRvIGFj
Y2VzcyBjb250cm9sIGxpc3RcbiIsDQorCQkgICAgICBhZGRfY2FuZGlkYXRlKTsNCisJfSBlbHNl
IHsNCisJCWtpbmZvKCJEdXBsaWNhdGUgVUlEICVkIG5vdCBhZGRlZFxuIiwgYWRkX2NhbmRpZGF0
ZSk7DQorCQlnb3RvIG91dDsNCisJfQ0KKwlyZXR2YWwgPSAwOw0KKyAgICAgIG91dDoNCisJcmV0
dXJuIHJldHZhbDsNCit9DQorDQorLyogIEF0dGVtcHQgdG8gYWRkIGFuIEdJRCBjYW5kaWRhdGUg
dG8gdGhlIGxpc3QuICAqLw0KK3N0YXRpYyBpbnQgdHBlX2dyb3VwX2FkZChnaWRfdCBhZGRfY2Fu
ZGlkYXRlKQ0KK3sNCisJaW50IHJldHZhbCA9IC1FSU5WQUw7DQorDQorCS8qIEZ1bGwgbGlzdC4g
Ki8NCisJaWYgKHRwZV9hY2xfZ3JvdXBfY2FuZGlkYXRlcyA9PSAoVFBFX0FDTF9TSVpFIC0gMikp
IHsNCisJCWtpbmZvKCJVbmFibGUgdG8gYWRkIHVzZXIgJWQuIExpc3QgaXMgZnVsbC5cbiIsIGFk
ZF9jYW5kaWRhdGUpOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJaWYgKGFkZF9jYW5kaWRhdGUg
PT0gMCkgew0KKwkJa2luZm8oIkludmFsaWQgdXNlcmlkLiBDYW5ub3QgYWRkLlxuIik7DQorCQln
b3RvIG91dDsNCisJfQ0KKw0KKwkvKiBEb24ndCBhZGQgZHVwbGljYXRlcyAqLw0KKwlpZiAoKHRw
ZV9zZWFyY2hfZ3JvdXAoYWRkX2NhbmRpZGF0ZSkpID09IE5BQ0spIHsNCisJCS8qIEFkZCB0byB0
aGUgZW5kIG9mIHRoZSBsaXN0LCB0aGVuIHNvcnQuICovDQorCQl0cGVfYWNsX2dyb3VwX2NhbmRp
ZGF0ZXMrKzsNCisJCXRwZV9ncm91cF9hY2xbdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzXSA9IGFk
ZF9jYW5kaWRhdGU7DQorCQl0cGVfZ3JvdXBfYWNsW3RwZV9hY2xfZ3JvdXBfY2FuZGlkYXRlcyAr
IDFdID0gJ1wwJzsJLyogdGVybWluYXRlIGFycmF5ICovDQorCQl0cGVfZ3JvdXBfc29ydCgwLCB0
cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXMpOw0KKwkJa2luZm8oIkdJRCAlZCBhZGRlZCBhcyB0cnVz
dGVkIHRvIGFjY2VzcyBjb250cm9sIGxpc3RcbiIsDQorCQkgICAgICBhZGRfY2FuZGlkYXRlKTsN
CisJfSBlbHNlIHsNCisJCWtpbmZvKCJEdXBsaWNhdGUgR0lEICVkIG5vdCBhZGRlZFxuIiwgYWRk
X2NhbmRpZGF0ZSk7DQorCQlnb3RvIG91dDsNCisJfQ0KKwlyZXR2YWwgPSAwOw0KKyAgICAgIG91
dDoNCisJcmV0dXJuIHJldHZhbDsNCit9DQorDQorLyogIEF0dGVtcHQgdG8gcmVtb3ZlIGEgY2Fu
ZGlkYXRlIGZyb20gdGhlIGxpc3QuICBPbmx5IGZhaWxzIGlmIHRoZSBlbnRyeSBpcyAqLw0KKy8q
ICBub3QgdGhlcmUuICovDQorc3RhdGljIGludCB0cGVfcmVtb3ZlKHVpZF90IHJlbV9jYW5kaWRh
dGUpDQorew0KKwlpbnQgbjsNCisJaW50IHJldHZhbCA9IC1FSU5WQUw7DQorCWlmICh0cGVfYWNs
X2NhbmRpZGF0ZXMgPT0gMCkgew0KKwkJLyogRW1wdHkgbGlzdCAqLw0KKwkJZ290byBvdXQ7DQor
CX0NCisJaWYgKHJlbV9jYW5kaWRhdGUgPT0gMCkgew0KKwkJa2luZm8oIkludmFsaWQgdXNlcmlk
LiBDYW5ub3QgcmVtb3ZlLlxuIik7DQorCQlnb3RvIG91dDsNCisJfQ0KKw0KKwluID0gdHBlX3Nl
YXJjaChyZW1fY2FuZGlkYXRlKTsNCisJaWYgKG4gIT0gTkFDSykgew0KKwkJLyogUmVtb3ZlIGNh
bmRpZGF0ZSAobWFyayBzbG90IGFzIHVudXNlZCksIHJlc29ydCB0aGUgbGlzdC4gKi8NCisJCXRw
ZV9hY2xbbl0gPSBUUEVfSU5JVElBTElaRVI7DQorCQl0cGVfYWNsX2NhbmRpZGF0ZXMtLTsNCisJ
CXRwZV9zb3J0KDAsIHRwZV9hY2xfY2FuZGlkYXRlcyk7DQorCQlraW5mbygiVUlEICVkIHJlbW92
ZWQgZnJvbSB0cnVzdCBsaXN0XG4iLCByZW1fY2FuZGlkYXRlKTsNCisJCXJldHZhbCA9IDA7DQor
CQlnb3RvIG91dDsNCisJfQ0KKwkvKiBOb3QgZm91bmQuICovDQorCWtpbmZvKCJVSUQgJWQgbm90
IGZvdW5kIGluIHRydXN0IGxpc3RcbiIsIHJlbV9jYW5kaWRhdGUpOw0KKyAgICAgIG91dDoNCisJ
cmV0dXJuIHJldHZhbDsNCit9DQorDQorLyogR0lEIHJlbW92aW5nICovDQorc3RhdGljIGludCB0
cGVfZ3JvdXBfcmVtb3ZlKGdpZF90IHJlbV9jYW5kaWRhdGUpDQorew0KKwlpbnQgbjsNCisJaW50
IHJldHZhbCA9IC1FSU5WQUw7DQorCWlmICh0cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXMgPT0gMCkg
ew0KKwkJLyogRW1wdHkgZ3JvdXBzIGxpc3QgKi8NCisJCWdvdG8gb3V0Ow0KKwl9DQorCWlmIChy
ZW1fY2FuZGlkYXRlID09IDApIHsNCisJCWtpbmZvKCJJbnZhbGlkIEdJRC4gQ2Fubm90IHJlbW92
ZS5cbiIpOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJbiA9IHRwZV9zZWFyY2hfZ3JvdXAocmVt
X2NhbmRpZGF0ZSk7DQorCWlmIChuICE9IE5BQ0spIHsNCisJCS8qIFJlbW92ZSBjYW5kaWRhdGUg
KG1hcmsgc2xvdCBhcyB1bnVzZWQpLCByZXNvcnQgdGhlIGxpc3QuICovDQorCQl0cGVfZ3JvdXBf
YWNsW25dID0gVFBFX0lOSVRJQUxJWkVSOw0KKwkJdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzLS07
DQorCQl0cGVfZ3JvdXBfc29ydCgwLCB0cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXMpOw0KKwkJa2lu
Zm8oIkdJRCAlZCByZW1vdmVkIGZyb20gdHJ1c3QgbGlzdFxuIiwgcmVtX2NhbmRpZGF0ZSk7DQor
CQlyZXR2YWwgPSAwOw0KKwkJZ290byBvdXQ7DQorCX0NCisJLyogTm90IGZvdW5kLiAqLw0KKwlr
aW5mbygiR0lEICVkIG5vdCBmb3VuZCBpbiB0cnVzdCBsaXN0XG4iLCByZW1fY2FuZGlkYXRlKTsN
CisgICAgICBvdXQ6DQorCXJldHVybiByZXR2YWw7DQorfQ0KKw0KKy8qIEJlZ2lubmluZyBvZiBh
IHN5c2ZzIHN1YnN5c3RlbSBmb3IgdHBlICovDQorc3RhdGljIHN0cnVjdCBzdWJzeXN0ZW0gdHBl
ZnNfc3Vic3lzOw0KKw0KK3N0cnVjdCB0cGVfbGlzdCB7DQorCWNoYXIgKm5hbWU7DQorDQorCXN0
cnVjdCBsaXN0X2hlYWQgc2xvdF9saXN0Ow0KKwlzdHJ1Y3Qga29iamVjdCBrb2JqOw0KK307DQor
DQorc3RydWN0IHRwZWZzX2F0dHJpYnV0ZSB7DQorCXN0cnVjdCBhdHRyaWJ1dGUgYXR0cjsNCisJ
IHNzaXplX3QoKnNob3cpIChzdHJ1Y3QgdHBlX2xpc3QgKiwgY2hhciAqKTsNCisJIHNzaXplX3Qo
KnN0b3JlKSAoc3RydWN0IHRwZV9saXN0ICosIGNvbnN0IGNoYXIgKiwgc2l6ZV90KTsNCit9Ow0K
Kw0KK3N0YXRpYyBzc2l6ZV90IHRwZWZzX2F0dHJfc2hvdyhzdHJ1Y3Qga29iamVjdCAqa29iaiwg
c3RydWN0IGF0dHJpYnV0ZSAqYXR0ciwNCisJCQkgICAgICAgY2hhciAqYnVmKQ0KK3sNCisJc3Ry
dWN0IHRwZV9saXN0ICpsaXN0ID0gY29udGFpbmVyX29mKGtvYmosIHN0cnVjdCB0cGVfbGlzdCwg
a29iaik7DQorCXN0cnVjdCB0cGVmc19hdHRyaWJ1dGUgKmF0dHJpYnV0ZSA9IGNvbnRhaW5lcl9v
ZihhdHRyLCBzdHJ1Y3QNCisJCQkJCQkJIHRwZWZzX2F0dHJpYnV0ZSwgYXR0cik7DQorCXJldHVy
biBhdHRyaWJ1dGUtPnNob3cgPyBhdHRyaWJ1dGUtPnNob3cobGlzdCwgYnVmKSA6IDA7DQorfQ0K
Kw0KK3N0YXRpYyBzc2l6ZV90IHRwZWZzX2F0dHJfc3RvcmUoc3RydWN0IGtvYmplY3QgKmtvYmos
IHN0cnVjdCBhdHRyaWJ1dGUgKmF0dHIsDQorCQkJCWNvbnN0IGNoYXIgKmJ1Ziwgc2l6ZV90IGxl
bikNCit7DQorCXN0cnVjdCB0cGVfbGlzdCAqbGlzdCA9IGNvbnRhaW5lcl9vZihrb2JqLCBzdHJ1
Y3QgdHBlX2xpc3QsIGtvYmopOw0KKwlzdHJ1Y3QgdHBlZnNfYXR0cmlidXRlICphdHRyaWJ1dGUg
PSBjb250YWluZXJfb2YoYXR0ciwgc3RydWN0DQorCQkJCQkJCSB0cGVmc19hdHRyaWJ1dGUsIGF0
dHIpOw0KKwlyZXR1cm4gYXR0cmlidXRlLT5zdG9yZSA/IGF0dHJpYnV0ZS0+c3RvcmUobGlzdCwg
YnVmLCBsZW4pIDogMDsNCit9DQorDQorc3RhdGljIHN0cnVjdCBzeXNmc19vcHMgdHBlZnNfc3lz
ZnNfb3BzID0gew0KKwkuc2hvdyA9IHRwZWZzX2F0dHJfc2hvdywNCisJLnN0b3JlID0gdHBlZnNf
YXR0cl9zdG9yZSwNCit9Ow0KKw0KK3N0YXRpYyBzdHJ1Y3Qga29ial90eXBlIHRwZWZzX2t0eXBl
ID0gew0KKwkuc3lzZnNfb3BzID0gJnRwZWZzX3N5c2ZzX29wcw0KK307DQorDQorc3RhdGljIGRl
Y2xfc3Vic3lzKHRwZWZzLCAmdHBlZnNfa3R5cGUsIE5VTEwpOw0KKw0KK3N0YXRpYyBzc2l6ZV90
IHRydXN0ZWRsaXN0YWRkX3JlYWRfZmlsZShzdHJ1Y3QgdHBlX2xpc3QgKmxpc3QsIGNoYXIgKmJ1
ZikNCit7DQorCWludCBpOw0KKwlpbnQgcmV0dmFsID0gMDsNCisJY2hhciAqdXNlciA9IE5VTEw7
DQorCWNoYXIgKmJ1ZmZlciA9IGttYWxsb2MoNDAwLCBHRlBfS0VSTkVMKTsNCisNCisJdXNlciA9
IChjaGFyICopX19nZXRfZnJlZV9wYWdlKEdGUF9LRVJORUwpOw0KKwlpZiAoIXVzZXIpDQorCQly
ZXR1cm4gLUVOT01FTTsNCisNCisJaWYgKCFidWZmZXIpDQorCQlyZXR1cm4gLUVOT01FTTsNCisN
CisJaWYgKHRwZV9hY2wgPT0gTlVMTCkgew0KKwkJa2luZm8oIkVtcHR5IEFjY2VzcyBDb250cm9s
IExpc3RcbiIpOw0KKwkJZnJlZV9wYWdlKCh1bnNpZ25lZCBsb25nKXVzZXIpOw0KKwkJcmV0dXJu
IC1FTk9EQVRBOw0KKwl9DQorDQorCWJ1ZmZlclswXSA9ICdcMCc7DQorCWtpbmZvKCIlZCB0cnVz
dGVkIHVzZXIocyk6IFxuIiwgdHBlX2FjbF9jYW5kaWRhdGVzKTsNCisJc3Bpbl9sb2NrKCZ0cGVf
YWNsX2xvY2spOw0KKwlmb3IgKGkgPSAwOyBpIDwgdHBlX2FjbF9jYW5kaWRhdGVzOyBpKyspIHsN
CisJCXByaW50ayhLRVJOX0lORk8gIiVkICIsIHRwZV9hY2xbaV0pOw0KKwkJcmV0dmFsID0gc3By
aW50Zih1c2VyLCAiJWRcbiIsIHRwZV9hY2xbaV0pOw0KKwkJc3RyY2F0KGJ1ZmZlciwgdXNlcik7
DQorCX0NCisJLyogbGVhdmUgcHJpbnRrKCkgY2FsbHMgYWxvbmUsIG5vdCBraW5mbygpICovDQor
CXByaW50ayhLRVJOX0lORk8gIlxuIik7DQorCXNwaW5fdW5sb2NrKCZ0cGVfYWNsX2xvY2spOw0K
Kw0KKwlyZXR2YWwgPSBzbnByaW50ZihidWYsIDQwMCwgIiVzXG4iLCBidWZmZXIpOw0KKw0KKwlr
ZnJlZShidWZmZXIpOwkJLyogd2Uga2ZyZWUoKSB0aGUga21hbGxvYygpJ2VkIGJ1ZmZlciAqLw0K
KwlmcmVlX3BhZ2UoKHVuc2lnbmVkIGxvbmcpdXNlcik7DQorCXJldHVybiByZXR2YWw7DQorfQ0K
Kw0KK3N0YXRpYyBzc2l6ZV90IHRydXN0ZWRsaXN0YWRkX3dyaXRlX2ZpbGUoc3RydWN0IHRwZV9s
aXN0ICpsaXN0LCBjb25zdCBjaGFyICpidWYsDQorCQkJCQkgc2l6ZV90IGNvdW50KQ0KK3sNCisJ
aW50IHJldHZhbDsNCisJdW5zaWduZWQgbG9uZyBhZGRfY2FuZGlkYXRlOw0KKw0KKwlhZGRfY2Fu
ZGlkYXRlID0gc2ltcGxlX3N0cnRvdWwoYnVmLCBOVUxMLCAxMCk7DQorDQorCWRiZygidmFsdWUg
b2YgYWRkX2NhbmRpZGF0ZSBpcyAlZC5cbiIsIChpbnQpYWRkX2NhbmRpZGF0ZSk7DQorCXNwaW5f
bG9jaygmdHBlX2FjbF9sb2NrKTsNCisJcmV0dmFsID0gdHBlX2FkZChhZGRfY2FuZGlkYXRlKTsN
CisJc3Bpbl91bmxvY2soJnRwZV9hY2xfbG9jayk7DQorCWlmIChyZXR2YWwpIHsNCisJCXJldHVy
biByZXR2YWw7DQorCX0NCisJcmV0dXJuIGNvdW50Ow0KKw0KK30NCisNCisvKiBwZXItR0lEIGJh
c2lzIEFDTCBzdXBwb3J0ICovDQorDQorc3RhdGljIHNzaXplX3QgdHJ1c3RlZGxpc3RhZGRfZ3Jv
dXBfd3JpdGVfZmlsZShzdHJ1Y3QgdHBlX2xpc3QgKmxpc3QsDQorCQkJCQkgICAgICAgY29uc3Qg
Y2hhciAqYnVmLCBzaXplX3QgY291bnQpDQorew0KKwlpbnQgcmV0dmFsOw0KKwl1bnNpZ25lZCBs
b25nIGFkZF9ncm91cF9jYW5kaWRhdGU7DQorDQorCWFkZF9ncm91cF9jYW5kaWRhdGUgPSBzaW1w
bGVfc3RydG91bChidWYsIE5VTEwsIDEwKTsNCisNCisJZGJnKCJ2YWx1ZSBvZiBhZGRfZ3JvdXBf
Y2FuZGlkYXRlIGlzICVkLlxuIiwgKGludClhZGRfZ3JvdXBfY2FuZGlkYXRlKTsNCisJc3Bpbl9s
b2NrKCZ0cGVfZ3JvdXBfYWNsX2xvY2spOw0KKwlyZXR2YWwgPSB0cGVfZ3JvdXBfYWRkKGFkZF9n
cm91cF9jYW5kaWRhdGUpOwkvKiB0cGVfZ3JvdXBfYWRkKCkgbmluamEgbW9ua2V5ICovDQorCXNw
aW5fdW5sb2NrKCZ0cGVfZ3JvdXBfYWNsX2xvY2spOw0KKwlpZiAocmV0dmFsKSB7DQorCQlyZXR1
cm4gcmV0dmFsOw0KKwl9DQorCXJldHVybiBjb3VudDsNCisNCit9DQorc3RhdGljIHNzaXplX3Qg
dHJ1c3RlZGxpc3RhZGRfZ3JvdXBfcmVhZF9maWxlKHN0cnVjdCB0cGVfbGlzdCAqbGlzdCwgY2hh
ciAqYnVmKQ0KK3sNCisJaW50IGk7DQorCWludCByZXR2YWwgPSAwOw0KKwljaGFyICpncm91cCA9
IE5VTEw7DQorCWNoYXIgKmJ1ZmZlciA9IGttYWxsb2MoNDAwLCBHRlBfS0VSTkVMKTsNCisNCisJ
Z3JvdXAgPSAoY2hhciAqKV9fZ2V0X2ZyZWVfcGFnZShHRlBfS0VSTkVMKTsNCisJaWYgKCFncm91
cCkNCisJCXJldHVybiAtRU5PTUVNOw0KKw0KKwlpZiAoIWJ1ZmZlcikNCisJCXJldHVybiAtRU5P
TUVNOw0KKw0KKwlpZiAodHBlX2dyb3VwX2FjbCA9PSBOVUxMKSB7DQorCQlraW5mbygiRW1wdHkg
dXNlciBncm91cHMgQWNjZXNzIENvbnRyb2wgTGlzdFxuIik7DQorCQlmcmVlX3BhZ2UoKHVuc2ln
bmVkIGxvbmcpZ3JvdXApOw0KKwkJcmV0dXJuIC1FTk9EQVRBOw0KKwl9DQorDQorCWJ1ZmZlclsw
XSA9ICdcMCc7DQorCWtpbmZvKCIlZCB0cnVzdGVkIGdyb3VwKHMpOiBcbiIsIHRwZV9hY2xfZ3Jv
dXBfY2FuZGlkYXRlcyk7DQorCXNwaW5fbG9jaygmdHBlX2dyb3VwX2FjbF9sb2NrKTsNCisJZm9y
IChpID0gMDsgaSA8IHRwZV9hY2xfZ3JvdXBfY2FuZGlkYXRlczsgaSsrKSB7DQorCQlwcmludGso
S0VSTl9JTkZPICIlZCAiLCB0cGVfZ3JvdXBfYWNsW2ldKTsNCisJCXJldHZhbCA9IHNwcmludGYo
Z3JvdXAsICIlZFxuIiwgdHBlX2dyb3VwX2FjbFtpXSk7DQorCQlzdHJjYXQoYnVmZmVyLCBncm91
cCk7DQorCX0NCisJLyogbGVhdmUgcHJpbnRrKCkgY2FsbHMgYWxvbmUsIG5vdCBraW5mbygpICov
DQorCXByaW50ayhLRVJOX0lORk8gIlxuIik7DQorCXNwaW5fdW5sb2NrKCZ0cGVfZ3JvdXBfYWNs
X2xvY2spOw0KKw0KKwlyZXR2YWwgPSBzbnByaW50ZihidWYsIDQwMCwgIiVzXG4iLCBidWZmZXIp
Ow0KKw0KKwlrZnJlZShidWZmZXIpOwkJLyogd2Uga2ZyZWUoKSB0aGUga21hbGxvYygpJ2VkIGJ1
ZmZlciAqLw0KKwlmcmVlX3BhZ2UoKHVuc2lnbmVkIGxvbmcpZ3JvdXApOw0KKwlyZXR1cm4gcmV0
dmFsOw0KK30NCisNCisvKiBlbmRzIHN5c2ZzIHRwZWZzIGdyb3VwIGFjbCBtYW5hZ2VtZW50ICov
DQorDQorc3RydWN0IHRwZWZzX2F0dHJpYnV0ZSB0cGVmc19saXN0YWRkX2F0dHIgPSB7DQorCS5h
dHRyID0gey5uYW1lID0gImFkZCIsLm1vZGUgPSBTX0lGUkVHIHwgU19JUlVHTyB8IFNfSVdVU1J9
LA0KKwkuc2hvdyA9IHRydXN0ZWRsaXN0YWRkX3JlYWRfZmlsZSwNCisJLnN0b3JlID0gdHJ1c3Rl
ZGxpc3RhZGRfd3JpdGVfZmlsZQ0KK307DQorDQorLyogbGlzdGFkZF9ncm91cCBwZXItR0lEIGJh
c2lzIEFDTCAqLw0KK3N0cnVjdCB0cGVmc19hdHRyaWJ1dGUgdHBlZnNfbGlzdGFkZF9ncm91cF9h
dHRyID0gew0KKwkuYXR0ciA9IHsubmFtZSA9ICJhZGQtZ3JvdXAiLC5tb2RlID0gU19JRlJFRyB8
IFNfSVJVR08gfCBTX0lXVVNSfSwNCisJLnNob3cgPSB0cnVzdGVkbGlzdGFkZF9ncm91cF9yZWFk
X2ZpbGUsDQorCS5zdG9yZSA9IHRydXN0ZWRsaXN0YWRkX2dyb3VwX3dyaXRlX2ZpbGUNCit9Ow0K
Kw0KKy8qIHRydXN0ZWQgVUlEcyBkZWxldGlvbiAqLw0KK3N0YXRpYyBzc2l6ZV90IHRydXN0ZWRs
aXN0ZGVsX3dyaXRlX2ZpbGUoc3RydWN0IHRwZV9saXN0ICpsaXN0LCBjb25zdCBjaGFyICpidWYs
DQorCQkJCQkgc2l6ZV90IGNvdW50KQ0KK3sNCisJaW50IHJldHZhbDsNCisJdW5zaWduZWQgbG9u
ZyByZW1fY2FuZGlkYXRlOw0KKw0KKwlyZW1fY2FuZGlkYXRlID0gc2ltcGxlX3N0cnRvdWwoYnVm
LCBOVUxMLCAxMCk7DQorDQorCWRiZygidmFsdWUgb2YgcmVtX2NhbmRpZGF0ZSBpcyAlZC5cbiIs
IChpbnQpcmVtX2NhbmRpZGF0ZSk7DQorCXNwaW5fbG9jaygmdHBlX2FjbF9sb2NrKTsNCisJcmV0
dmFsID0gdHBlX3JlbW92ZShyZW1fY2FuZGlkYXRlKTsNCisJc3Bpbl91bmxvY2soJnRwZV9hY2xf
bG9jayk7DQorCWlmIChyZXR2YWwpIHsNCisJCXJldHVybiByZXR2YWw7DQorCX0NCisJcmV0dXJu
IGNvdW50Ow0KKw0KK30NCisNCisvKiB0cnVzdGVkIEdJRHMgZGVsZXRpb24gKi8NCitzdGF0aWMg
c3NpemVfdCB0cnVzdGVkbGlzdGRlbF9ncm91cF93cml0ZV9maWxlKHN0cnVjdCB0cGVfbGlzdCAq
bGlzdCwNCisJCQkJCSAgICAgICBjb25zdCBjaGFyICpidWYsIHNpemVfdCBjb3VudCkNCit7DQor
CWludCByZXR2YWw7DQorCXVuc2lnbmVkIGxvbmcgcmVtX2dyb3VwX2NhbmRpZGF0ZTsNCisNCisJ
cmVtX2dyb3VwX2NhbmRpZGF0ZSA9IHNpbXBsZV9zdHJ0b3VsKGJ1ZiwgTlVMTCwgMTApOw0KKw0K
KwlkYmcoInZhbHVlIG9mIHJlbV9jYW5kaWRhdGUgaXMgJWQuXG4iLCAoaW50KXJlbV9ncm91cF9j
YW5kaWRhdGUpOw0KKwlzcGluX2xvY2soJnRwZV9ncm91cF9hY2xfbG9jayk7DQorCXJldHZhbCA9
IHRwZV9ncm91cF9yZW1vdmUocmVtX2dyb3VwX2NhbmRpZGF0ZSk7DQorCXNwaW5fdW5sb2NrKCZ0
cGVfZ3JvdXBfYWNsX2xvY2spOw0KKwlpZiAocmV0dmFsKSB7DQorCQlyZXR1cm4gcmV0dmFsOw0K
Kwl9DQorCXJldHVybiBjb3VudDsNCisNCit9DQorDQorc3RydWN0IHRwZWZzX2F0dHJpYnV0ZSB0
cGVmc19saXN0ZGVsX2F0dHIgPSB7DQorCS5hdHRyID0gey5uYW1lID0gImRlbCIsLm1vZGUgPSBT
X0lGUkVHIHwgU19JUlVHTyB8IFNfSVdVU1J9LA0KKwkuc3RvcmUgPSB0cnVzdGVkbGlzdGRlbF93
cml0ZV9maWxlDQorfTsNCisNCisvKiBzeXNmcy90cGVmcy9kZWwtZ3JvdXAgKi8NCitzdHJ1Y3Qg
dHBlZnNfYXR0cmlidXRlIHRwZWZzX2xpc3RkZWxfZ3JvdXBfYXR0ciA9IHsNCisJLmF0dHIgPSB7
Lm5hbWUgPSAiZGVsLWdyb3VwIiwubW9kZSA9IFNfSUZSRUcgfCBTX0lSVUdPIHwgU19JV1VTUn0s
DQorCS5zdG9yZSA9IHRydXN0ZWRsaXN0ZGVsX2dyb3VwX3dyaXRlX2ZpbGUNCit9Ow0KKw0KKy8q
IFRQRSAvcHJvYyBlbnRyeSBtYW5hZ2luZyAqLw0KK3NzaXplX3QNCitwcm9jZmlsZV9yZWFkKGNo
YXIgKmJ1ZmZlciwNCisJICAgICAgY2hhciAqKmJ1ZmZlcl9sb2NhdGlvbiwNCisJICAgICAgb2Zm
X3Qgb2Zmc2V0LCBpbnQgYnVmZmVyX2xlbmd0aCwgaW50ICplb2YsIHZvaWQgKmRhdGEpDQorew0K
KwlpbnQgbGVuID0gMDsJCS8qIFRoZSBudW1iZXIgb2YgYnl0ZXMgYWN0dWFsbHkgdXNlZCAqLw0K
KwljaGFyICp2ZXJtYWdpYyA9IFZFUlNJT047DQorCWlmIChvZmZzZXQgPiAwKSB7DQorCQlkYmco
Ik9mZnNldCAlZCA6IC9wcm9jL3RwZSA6IHByb2NmaWxlX3JlYWQsIFwNCisJCSAgICAgICB3cm90
ZSAlZCBieXRlc1xuIiwgKGludCkob2Zmc2V0KSwgbGVuKTsNCisJCSplb2YgPSAxOw0KKwkJcmV0
dXJuIGxlbjsNCisJfQ0KKwkvKiBXZSB3cml0ZSB0aGUgZGF0YSB0byB0aGUgcHJvY2ZzIGVudHJ5
ICovDQorCWxlbiA9IHNwcmludGYoYnVmZmVyLA0KKwkJICAgICAgIlZlcnNpb246ICVzXG5UcnVz
dGVkIHVzZXJzOiAlZFxuVHJ1c3RlZCBncm91cHM6ICVkXG4iLA0KKwkJICAgICAgdmVybWFnaWMs
IHRwZV9hY2xfY2FuZGlkYXRlcywgdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzKTsNCisJLyogVm9p
bGEhICovDQorCWRiZygiTGVhdmluZyAvcHJvYy90cGUgOiBwcm9jZmlsZV9yZWFkLCB3cm90ZSAl
ZCBCeXRlc1xuIiwgbGVuKTsNCisJcmV0dXJuIGxlbjsNCit9DQorDQorLyogTW9kdWxlIGNvZGUg
Ki8NCisNCisvKiBwcmV2ZW50IFNJR0tJTEwgaW4gZXhlY3ZlKCkgKi8NCisNCisvKiANCisgU3Rl
cGhlbiBELiBTbWFsbGV5IHN1Z2dlc3RlZCB0aGlzIHR5cGUgb2YgY2hlY2tzLCB0aGUgZm9sbG93
aW5nIGNoZWNrcyB3aWxsIHByZXZlbnQNCisgZm9yIGV4YW1wbGUgdW50cnVzdGVkIGV4ZWN1dGFi
bGVzIGJlaW5nIGFidXNlZCB3aXRoaW4gdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIGxkLWxpbnV4
DQorIHNoYXJlZCBsaWJyYXJ5LCBhbmQgYWxzbyB0aGV5IGFyZSBhIHJlcGxhY2VtZW50IG9mIHRo
ZSBvcmlnaW5hbCxsaW1pdGVkLCANCisgdHBlX2Jwcm1fc2V0X3NlY3VyaXR5IGhvb2suDQorICov
DQorLyoNCisgKiBmaWxlX21tYXAgaG9vayAtPiB0cGVfZmlsZV9tbWFwDQorICovDQorc3RhdGlj
IGludCB0cGVfZmlsZV9tbWFwKHN0cnVjdCBmaWxlICpmaWxlLCB1bnNpZ25lZCBsb25nIHByb3Qs
DQorCQkJIHVuc2lnbmVkIGxvbmcgZmxhZ3MpDQorew0KKwlpZiAoKGZpbGUpICYmIChjdXJyZW50
LT51aWQpICYmIChjdXJyZW50LT5naWQpIA0KKwkgICAmJiAocHJvdCAmIFBST1RfRVhFQykpIHsN
CisJCS8qIEdldCB0aGUgZXhlY3V0YWJsZSBleGVjdXRpb24gdWlkIGFuZCBtb2RlICovDQorCQl1
aWRfdCBtcHVpZCA9IGZpbGUtPmZfZGVudHJ5LT5kX3BhcmVudC0+ZF9pbm9kZS0+aV91aWQ7DQor
CQltb2RlX3QgbXBtb2RlID0gZmlsZS0+Zl9kZW50cnktPmRfcGFyZW50LT5kX2lub2RlLT5pX21v
ZGU7DQorDQorCQkvKiBDaGVjayB0aGUgZXhlY3V0YWJsZSBwcm9wZXJ0aWVzICovDQorCQkvKiBh
dHRlbXB0IHRvIG1ha2UgYSBmaWxlIG1hcHBpbmcgZXhlY3V0YWJsZSwgcnVuIFRQRSB0cnVzdGlu
ZyB0ZXN0ICovDQorCQlpZiAoKCFUUlVTVEVEX1BBVEgobXBtb2RlLCBtcHVpZCkpDQorCQkgICAg
JiYgKCFUUlVTVEVEX1VTRVIoY3VycmVudC0+dWlkKSkNCisJCSAgICAmJiAoIVRSVVNURURfR1JP
VVAoY3VycmVudC0+Z2lkKSkpIHsNCisNCisJCQkvKiBnZXQgYSBmcmVlIHBhZ2UgYW5kIGFsbG9j
YXRlIGV4ZWN1dGFibGUgcmVhbCBwYXRoICovDQorCQkJY2hhciAqZnB0bXAgPQ0KKwkJCSAgICAo
Y2hhciAqKV9fZ2V0X2ZyZWVfcGFnZShHRlBfS0VSTkVMKSwgKmV4ZnBhdGg7DQorDQorCQkJLyog
IkFyZSB3ZSBvdXQgb2YgbWVtb3J5PyBJIGNhbid0IHJlbWVtYmVyIiAtRU5PTUVNIGluIEhhbGxv
d2VlbiBQYW5pYyBtZWV0aW5nLiAqLw0KKwkJCWlmICghKGZwdG1wKSkNCisJCQkJcmV0dXJuIC1F
Tk9NRU07DQorDQorCQkJZXhmcGF0aCA9DQorCQkJICAgIGRfcGF0aChmaWxlLT5mX2RlbnRyeSwg
ZmlsZS0+Zl92ZnNtbnQsIGZwdG1wLA0KKwkJCQkgICBQQUdFX1NJWkUpOw0KKw0KKwkJCS8qIFlv
dSBjYW4gc3RpbGwgYmVsaWV2ZSBpbiBOaW5qYSBDb2RlIE1vbmtleXMuLi4gKi8NCisJCQlwcmlu
dGsoS0VSTl9BTEVSVCAiVFBFOiBVbnRydXN0ZWQgZXhlY3V0aW9uOiAlcyAiDQorCQkJICAgICAg
ICJ1aWQvZXVpZD0lZC8lZCBnaWQvZWdpZD0lZC8lZCBzdWlkL3NnaWQ9JWQvJWQgcGlkPSVkIg0K
KwkJCSAgICAgICAiXG4iLCBleGZwYXRoLCBjdXJyZW50LT51aWQsIGN1cnJlbnQtPmV1aWQsDQor
CQkJICAgICAgIGN1cnJlbnQtPmdpZCwgY3VycmVudC0+ZWdpZCwgY3VycmVudC0+c3VpZCwNCisJ
CQkgICAgICAgY3VycmVudC0+c2dpZCwgY3VycmVudC0+cGlkKTsNCisNCisJCQlmcmVlX3BhZ2Uo
KHVuc2lnbmVkIGxvbmcpZnB0bXApOwkvKiBmcmVlIHRoZSBmcHRtcCBwYWdlICovDQorDQorCQkJ
cmV0dXJuIC1FQUNDRVM7CS8qIGR1ZSB0byBlbGZfbWFwKCkgdGhpcyB3aWxsIGNhdXNlIGEgU0lH
S0lMTCAqLw0KKwkJfQ0KKwl9DQorCXJldHVybiAwOw0KK30NCisNCisvKg0KKyAqIGZpbGVfbXBy
b3RlY3QgaG9vayAtPiB0cGVfZmlsZV9tcHJvdGVjdA0KKyAqLw0KK3N0YXRpYyBpbnQgdHBlX2Zp
bGVfbXByb3RlY3Qoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgcHJv
dCkNCit7DQorCWlmICgodm1hLT52bV9maWxlKSAmJiAocHJvdCAmIFBST1RfRVhFQykpIHsNCisJ
CS8qIEdldCB0aGUgZXhlY3V0YWJsZSBleGVjdXRpb24gdWlkIGFuZCBtb2RlICovDQorCQl1aWRf
dCBtcHVpZCA9IHZtYS0+dm1fZmlsZS0+Zl9kZW50cnktPmRfcGFyZW50LT5kX2lub2RlLT5pX3Vp
ZDsNCisJCW1vZGVfdCBtcG1vZGUgPQ0KKwkJICAgIHZtYS0+dm1fZmlsZS0+Zl9kZW50cnktPmRf
cGFyZW50LT5kX2lub2RlLT5pX21vZGU7DQorDQorCQlpZiAoKCFUUlVTVEVEX1BBVEgobXBtb2Rl
LCBtcHVpZCkpDQorCQkgICAgJiYgKCFUUlVTVEVEX1VTRVIoY3VycmVudC0+dWlkKSkNCisJCSAg
ICAmJiAoIVRSVVNURURfR1JPVVAoY3VycmVudC0+Z2lkKSkpIHsNCisJCQkvKiBnZXQgYSBmcmVl
IHBhZ2UgYW5kIGFsbG9jYXRlIGV4ZWN1dGFibGUgcmVhbCBwYXRoICovDQorCQkJY2hhciAqZnB0
bXAgPQ0KKwkJCSAgICAoY2hhciAqKV9fZ2V0X2ZyZWVfcGFnZShHRlBfS0VSTkVMKSwgKmV4ZnBh
dGg7DQorDQorCQkJaWYgKCEoZnB0bXApKQ0KKwkJCQlyZXR1cm4gLUVOT01FTTsNCisNCisJCQll
eGZwYXRoID0NCisJCQkgICAgZF9wYXRoKHZtYS0+dm1fZmlsZS0+Zl9kZW50cnksDQorCQkJCSAg
IHZtYS0+dm1fZmlsZS0+Zl92ZnNtbnQsIGZwdG1wLCBQQUdFX1NJWkUpOw0KKw0KKwkJCS8qIC4u
LmJ1dCB0aGV5IGRvbid0IHRydXN0IGluIG1wcm90ZWN0KCkgKi8NCisJCQlwcmludGsoS0VSTl9B
TEVSVA0KKwkJCSAgICAgICAiVFBFOiBVbnRydXN0ZWQgZXhlY3V0aW9uIGJ5IG1wcm90ZWN0KCk6
ICVzICINCisJCQkgICAgICAgInVpZC9ldWlkPSVkLyVkIGdpZC9lZ2lkPSVkLyVkIHN1aWQvc2dp
ZD0lZC8lZCBwaWQ9JWQiDQorCQkJICAgICAgICJcbiIsIGV4ZnBhdGgsIGN1cnJlbnQtPnVpZCwg
Y3VycmVudC0+ZXVpZCwNCisJCQkgICAgICAgY3VycmVudC0+Z2lkLCBjdXJyZW50LT5lZ2lkLCBj
dXJyZW50LT5zdWlkLA0KKwkJCSAgICAgICBjdXJyZW50LT5zZ2lkLCBjdXJyZW50LT5waWQpOw0K
Kw0KKwkJCWZyZWVfcGFnZSgodW5zaWduZWQgbG9uZylmcHRtcCk7CS8qIGZyZWUgdGhlIGZwdG1w
IHBhZ2UgKi8NCisNCisJCQlyZXR1cm4gLUVBQ0NFUzsNCisJCX0NCisJfQ0KKwlyZXR1cm4gMDsN
Cit9DQorDQorLyoNCisgVFBFIHNlY3VyaXR5IGhvb2tzDQorKi8NCitzdHJ1Y3Qgc2VjdXJpdHlf
b3BlcmF0aW9ucyB0cGVfc2VjdXJpdHlfb3BzID0gew0KKyAgICAgIGZpbGVfbW1hcDp0cGVfZmls
ZV9tbWFwLA0KKyAgICAgIGZpbGVfbXByb3RlY3Q6dHBlX2ZpbGVfbXByb3RlY3QsDQorfTsNCisN
CitzdGF0aWMgaW50IF9faW5pdCB0cGVfbW9kdWxlX2luaXQodm9pZCkNCit7DQorCWludCByZXR2
YWw7DQorCWludCBjZm9vID0gMDsNCisJLyogcmVnaXN0ZXIgb3Vyc2VsdmVzIHdpdGggdGhlIHNl
Y3VyaXR5IGZyYW1ld29yayAqLw0KKwlpZiAocmVnaXN0ZXJfc2VjdXJpdHkoJnRwZV9zZWN1cml0
eV9vcHMpKSB7DQorCQlwcmludGsoS0VSTl9JTkZPDQorCQkgICAgICAgIkZhaWx1cmUgcmVnaXN0
ZXJpbmcgdHBlIG1vZHVsZSB3aXRoIHRoZSBrZXJuZWxcbiIpOw0KKwkJLyogdHJ5IHJlZ2lzdGVy
aW5nIHdpdGggcHJpbWFyeSBtb2R1bGUgKi8NCisJCWlmIChtb2RfcmVnX3NlY3VyaXR5KExFR0FD
WV9OQU1FLCAmdHBlX3NlY3VyaXR5X29wcykpIHsNCisJCQlwcmludGsoS0VSTl9JTkZPICJGYWls
dXJlIHJlZ2lzdGVyaW5nIHRwZSBtb2R1bGUgIg0KKwkJCSAgICAgICAid2l0aCBwcmltYXJ5IHNl
Y3VyaXR5IG1vZHVsZS5cbiIpOw0KKwkJCXJldHVybiAtRUlOVkFMOw0KKwkJfQ0KKwkJc2Vjb25k
YXJ5ID0gMTsNCisJfQ0KKw0KKwkvKiByZWdpc3RlciB0cGUgc3Vic3lzdGVtICovDQorCWtpbmZv
KCJSZWdpc3RlcmluZyBUUEUgc3Vic3lzdGVtLlxuIik7DQorCXJldHZhbCA9IHN1YnN5c3RlbV9y
ZWdpc3RlcigmdHBlZnNfc3Vic3lzKTsNCisJaWYgKHJldHZhbCkgew0KKwkJa2luZm8oInN1YnN5
c3RlbV9yZWdpc3RlciBmYWlsZWQgd2l0aCAlZFxuIiwgcmV0dmFsKTsNCisJCXJldHVybiByZXR2
YWw7DQorCX0NCisJa2luZm8oIlJlZ2lzdGVyaW5nIHRwZWZzIHN1cHBvcnQgZm9yIHN5c2ZzLlxu
Iik7DQorCXN5c2ZzX2NyZWF0ZV9maWxlKCZ0cGVmc19zdWJzeXMua3NldC5rb2JqLCAmdHBlZnNf
bGlzdGFkZF9hdHRyLmF0dHIpOw0KKwlzeXNmc19jcmVhdGVfZmlsZSgmdHBlZnNfc3Vic3lzLmtz
ZXQua29iaiwgJnRwZWZzX2xpc3RkZWxfYXR0ci5hdHRyKTsNCisJLyogY3JlYXRlIHRoZSBncm91
cC9naWQgYWNsIHN5c2ZzIHRwZWZzIGZpbGVzICovDQorCXN5c2ZzX2NyZWF0ZV9maWxlKCZ0cGVm
c19zdWJzeXMua3NldC5rb2JqLA0KKwkJCSAgJnRwZWZzX2xpc3RhZGRfZ3JvdXBfYXR0ci5hdHRy
KTsNCisJc3lzZnNfY3JlYXRlX2ZpbGUoJnRwZWZzX3N1YnN5cy5rc2V0LmtvYmosDQorCQkJICAm
dHBlZnNfbGlzdGRlbF9ncm91cF9hdHRyLmF0dHIpOw0KKw0KKwlraW5mbygiUmVnaXN0ZXJpbmcg
d2l0aCBMU00gc3Vic3lzdGVtLlxuIik7DQorCXRwZV9pbml0KCk7DQorCS8qIFRQRSAvcHJvYy8g
ImJpbGJvIiBlbnRyeSBiZWdpbnMgOikgKi8NCisJVFBFX3BlbnRyeSA9IGNyZWF0ZV9wcm9jX2Vu
dHJ5KFRQRV9QUk9DX0VOVFJZX05BTUUsIDA2NDQsIE5VTEwpOw0KKwlUUEVfcGVudHJ5LT5yZWFk
X3Byb2MgPSBwcm9jZmlsZV9yZWFkOw0KKwlUUEVfcGVudHJ5LT5vd25lciA9IFRISVNfTU9EVUxF
Ow0KKwlUUEVfcGVudHJ5LT5tb2RlID0gU19JRlJFRyB8IFNfSVJVR087DQorCVRQRV9wZW50cnkt
PnVpZCA9IDA7DQorCVRQRV9wZW50cnktPmdpZCA9IDA7DQorCVRQRV9wZW50cnktPnNpemUgPSAy
MDsNCisJaWYgKFRQRV9wZW50cnkgPT0gTlVMTCkgew0KKwkJY2ZvbyA9IC1FTk9NRU07DQorCQkv
KiovIHJlbW92ZV9wcm9jX2VudHJ5KFRQRV9QUk9DX0VOVFJZX05BTUUsICZwcm9jX3Jvb3QpOw0K
KwkJa2luZm8oIkVycm9yOiBDb3VsZCBub3QgaW5pdGlhbGl6ZSAvcHJvYy90cGVcbiIpOw0KKwl9
IGVsc2Ugew0KKwkJa2luZm8oIi9wcm9jIGVudHJ5IGluaXRpYWxpemVkLlxuIik7DQorCX0NCisJ
a2luZm8oIlRydXN0ZWQgUGF0aCBFeGVjdXRpb24gZW5naW5lIGluaXRpYWxpemVkLlxuIik7DQor
CXJldHVybiBjZm9vOw0KK30NCisNCitzdGF0aWMgdm9pZCBfX2V4aXQgdHBlX2V4aXQodm9pZCkN
Cit7DQorCXJlbW92ZV9wcm9jX2VudHJ5KFRQRV9QUk9DX0VOVFJZX05BTUUsICZwcm9jX3Jvb3Qp
OwkvKiByZW1vdmUgVFBFIC9wcm9jIGVudHJ5ICovDQorCXN5c2ZzX3JlbW92ZV9maWxlKCZ0cGVm
c19zdWJzeXMua3NldC5rb2JqLCAmdHBlZnNfbGlzdGFkZF9hdHRyLmF0dHIpOw0KKwlzeXNmc19y
ZW1vdmVfZmlsZSgmdHBlZnNfc3Vic3lzLmtzZXQua29iaiwgJnRwZWZzX2xpc3RkZWxfYXR0ci5h
dHRyKTsNCisJLyogcmVtb3ZlIHN5c2ZzL3RwZWZzL2FkZC1ncm91cCBhbmQgZGVsLWdyb3VwICov
DQorCXN5c2ZzX3JlbW92ZV9maWxlKCZ0cGVmc19zdWJzeXMua3NldC5rb2JqLA0KKwkJCSAgJnRw
ZWZzX2xpc3RhZGRfZ3JvdXBfYXR0ci5hdHRyKTsNCisJc3lzZnNfcmVtb3ZlX2ZpbGUoJnRwZWZz
X3N1YnN5cy5rc2V0LmtvYmosDQorCQkJICAmdHBlZnNfbGlzdGRlbF9ncm91cF9hdHRyLmF0dHIp
Ow0KKwlzdWJzeXN0ZW1fdW5yZWdpc3RlcigmdHBlZnNfc3Vic3lzKTsNCisNCisJLyogcmVtb3Zl
IG91cnNlbHZlcyBmcm9tIHRoZSBzZWN1cml0eSBmcmFtZXdvcmsgKi8NCisJaWYgKHNlY29uZGFy
eSkgew0KKwkJaWYgKG1vZF91bnJlZ19zZWN1cml0eShMRUdBQ1lfTkFNRSwgJnRwZV9zZWN1cml0
eV9vcHMpKQ0KKwkJCXByaW50ayhLRVJOX0lORk8gIkZhaWx1cmUgdW5yZWdpc3RlcmluZyB0cGUg
bW9kdWxlICINCisJCQkgICAgICAgIndpdGggcHJpbWFyeSBtb2R1bGUuXG4iKTsNCisJCXJldHVy
bjsNCisJfQ0KKw0KKwlpZiAodW5yZWdpc3Rlcl9zZWN1cml0eSgmdHBlX3NlY3VyaXR5X29wcykp
IHsNCisJCXByaW50ayhLRVJOX0lORk8NCisJCSAgICAgICAiRmFpbHVyZSB1bnJlZ2lzdGVyaW5n
IHRwZSBtb2R1bGUgd2l0aCB0aGUga2VybmVsXG4iKTsNCisJfQ0KKwlraW5mbygiVHJ1c3RlZCBQ
YXRoIEV4ZWN1dGlvbiBzdWJzeXN0ZW0gdW5sb2FkZWQuXG4iKTsNCisNCit9DQorDQorbW9kdWxl
X2luaXQodHBlX21vZHVsZV9pbml0KTsNCittb2R1bGVfZXhpdCh0cGVfZXhpdCk7DQorDQorLyog
TW9kaW5mbyBwZXJscyAqLw0KK01PRFVMRV9ERVNDUklQVElPTihERVNDUklQVElPTik7DQorTU9E
VUxFX0FVVEhPUihBVVRIT1IpOw0KK01PRFVMRV9MSUNFTlNFKExJQ0VOU0UpOw0KZGlmZiAtTnVy
IC4uL2xpbnV4LTIuNi4xMC9zZWN1cml0eS90cGUuaCBsaW51eC0yLjYuMTAtdHBlL3NlY3VyaXR5
L3RwZS5oDQotLS0gLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L3RwZS5oCTE5NzAtMDEtMDEgMDE6
MDA6MDAuMDAwMDAwMDAwICswMTAwDQorKysgbGludXgtMi42LjEwLXRwZS9zZWN1cml0eS90cGUu
aAkyMDA1LTAxLTA4IDE5OjAxOjI0Ljc4NjgyMDI4MCArMDEwMA0KQEAgLTAsMCArMSwxNjAgQEAN
CisvKg0KKyAqIFRydXN0ZWQgUGF0aCBFeGVjdXRpb24gU2VjdXJpdHkgTW9kdWxlDQorICoNCisg
KiBUaGlzIG1vZHVsZSBwcm92aWRlcyBhIFRydXN0ZWQgUGF0aCBFeGVjdXRpb24gKFRQRSkgZW5n
aW5lIHRvIHRoZQ0KKyAqIExpbnV4IGtlcm5lbC4gVFBFIG9yaWdpbmF0ZWQgYXMgYSBrZXJuZWwg
cGF0Y2ggdG8gT3BlbkJTRCAyLjQgYnkNCisgKiByb3V0ZXxkYWVtb245IGFuZCBNaWtlIFNjaGlm
bWFuIChzZWUgUGhyYWNrIDU0KS4gSUJNIG9yaWdpbmFsbHkgbW9kaWZpZWQNCisgKiB0aGUgb3Jp
Z2luYWwgcHJvamVjdCB0byBmaXQgd2l0aGluIHRoZSBjb25zdHJhaW50cyBvZiB0aGUgTFNNIGZy
YW1ld29yaw0KKyAqIGFuZCBzbyBpdCBzaG91bGQgYmUgbm90ZWQgdGhhdCB0aGlzIGlzIG5vdCB0
aGUgc2FtZSBwcm9qZWN0LiBBbHNvLA0KKyAqIHRoZSBtb2R1bGUgbWFrZXMgdXNlIG9mIHRoZSBz
eXNmcyBmaWxlc3lzdGVtLiANCisgKiBUaGlzIG1vZHVsZSBpcyBhIHJld3JpdGUgb2YgdGhlIElC
TSdzIG9yaWdpbmFsIGNvZGUgaW4gb3JkZXIgdG8gYWRkIA0KKyAqIGRlYnVnZ2luZywgYmV0dGVy
IGluZm9ybWF0aW9uIG91dHB1dHRpbmcsIHN1cHBvcnQgZm9yIHBlci1Vc2VyLUdyb3VwcyANCisg
KiBhY2Nlc3MgY29udHJvbCBsaXN0cyBhdCBydW50aW1lIGFuZCBrZXJuZWwtY29uZmlndXJhdGlv
biBsZXZlbCwgYSBwcm9jZnMgDQorICogaW50ZXJmYWNlIGZvciBnZW5lcmFsIGluZm9ybWF0aW9u
IGdhdGhlcmluZyBmcm9tIHRoZSBUUEUgc3Vic3lzdGVtIGFuZCB0aGUNCisgKiBwcm90ZWN0aW9u
IGVuZ2luZSB3aGljaCBpbiB0aGUgb3JpZ2luYWwgSUJNJ3MgY29kZSB3YXMgcmVseWluZyBpbiBi
cHJtX3NldF9zZWN1cml0eQ0KKyAqIGlzIG5vdyBiYXNlZCBpbiBleGVjdXRhYmxlcyBtZW1vcnkg
bWFwcGluZ3MsIHdoaWNoIG1ha2VzIGl0IHNlY3VyZSBhZ2FpbnN0DQorICogc2hhcmVkIGxpYnJh
cmllcyB0aGF0IGNhbiB3cmFwIHVudHJ1c3RlZCBleGVjdXRhYmxlcyBhbmQgYnlwYXNzIHRoZSBU
UEUNCisgKiBzdWJzeXN0ZW0sIGFsc28gYWRkaW5nIGEgc2Vjb25kYXJ5IHByb3RlY3Rpb24gYWdh
aW5zdCBwb3NzaWJsZSBhdHRlbXB0cyB0bw0KKyAqIGJ5cGFzcyB0aGUgbW1hcCgpJ2luZyBjaGVj
a3MgYnkgdXNpbmcgUFJPVF9SRUFEIGluc3RlYWQgb2YgUFJPVF9FWEVDIGluDQorICogbXByb3Rl
Y3QoKSBjYWxscy4NCisgKg0KKyAqIENvcHlyaWdodCAoQykgMjAwMyBJQk0gQ29ycC4gPG5hcmFo
aW1pQHVzLmlibS5jb20+DQorICogQ29weXJpZ2h0IChDKSAyMDA1IExvcmVuem8gSGVybmFuZGV6
IEdhcmNpYS1IaWVycm8gPGxvcmVuem9AZ251Lm9yZz4NCisgKiBBbGwgcmlnaHRzIHJldmVyc2Vk
Lg0KKyAqDQorICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0
cmlidXRlIGl0IGFuZC9vcg0KKyAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdO
VSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQorICogYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNv
ZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDINCisgKiBvZiB0aGUgTGljZW5zZSwg
b3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCisgKg0KKyAqIFRoaXMgcHJv
Z3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0K
KyAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdh
cnJhbnR5IG9mDQorICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxB
UiBQVVJQT1NFLiAgU2VlIHRoZQ0KKyAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBt
b3JlIGRldGFpbHMuDQorICovDQorDQorI2lmbmRlZiBfX1RQRV9IDQorI2RlZmluZSBfX1RQRV9I
DQorDQorI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+DQorI2luY2x1ZGUgPGFzbS91YWNjZXNzLmg+
DQorDQorLyogVmVybWFnaWMgYW5kIC9wcm9jIGVudHJ5IG5hbWUgKi8NCisNCisjZGVmaW5lIFZF
UlNJT04gCQkiMC4yLTIwMDUwMTA4Ig0KKyNkZWZpbmUgTFNNX1ZFUlNJT04gCQlOVUxMCS8qIHVu
dXNlZCAqLw0KKyNkZWZpbmUgVFBFX1BST0NfRU5UUllfTkFNRSAJInRwZSIJLyogL3Byb2MgZW50
cnkgbmFtZSAqLw0KKw0KKy8qIFBlci11c2VyIGdyb3VwIGJhc2lzIHByb3RlY3Rpb24gc3R1ZmYg
Ki8NCisNCisjaWZkZWYgQ09ORklHX1NFQ1VSSVRZX1RQRV9UUlVTVEVEX0dJRA0KK3N0YXRpYyBp
bnQgdHBlX3RydXN0ZWRfZ2lkID0gQ09ORklHX1NFQ1VSSVRZX1RQRV9UUlVTVEVEX0dJRDsNCisj
ZWxzZQ0KK3N0YXRpYyBpbnQgdHBlX3RydXN0ZWRfZ2lkID0gMDsNCisjZW5kaWYNCisNCisvKg0K
KyAqICBzeXNjYWxsIHN0dWZmDQorICovDQorI2RlZmluZSBUUEVfQUNMX1NJWkUgICAgODIJLyog
TWF4aW11bSBudW1iZXIgb2YgdXNlcnMgaW4gdGhlIGxpc3QgDQorCQkJCSAqIHBsdXMgdHdvLiBU
aGlzIHdhcyBhbiBvcmlnaW5hbA0KKwkJCQkgKiBjb21wb25lbnQgb2YgVFBFLiBUaGlzIHdpbGwg
YmUgDQorCQkJCSAqIGZpeGVkIGxhdGVyIG9uLg0KKwkJCQkgKi8NCisNCisjZGVmaW5lIFRQRV9J
TklUSUFMSVpFUiAtMQkvKiBBIFVJRCB0aGF0IGlzbid0IHVzZWQgKi8NCisNCisjZGVmaW5lIEFD
SyAgICAgICAgICAgICAxCS8qIHBvc2l0aXZlIGFja25vd2xlZGdlbWVudCAqLw0KKyNkZWZpbmUg
TkFDSyAgICAgICAgICAgIC0xCS8qIG5lZ2F0aXZlIGFja25vd2xlZGdlbWVudCAqLw0KKyNkZWZp
bmUgRFVQICAgICAgICAgICAgMwkvKiBkdXBsaWNhdGUgaWQgcmV0dXJuIGZvciB0cGVfYWRkICov
DQorDQorLyoNCisgKiAgVmVyaWZ5IHRoZSBwYXRoLiANCisgKi8NCisjZGVmaW5lIFRSVVNURURf
UEFUSChtb2RlLCB1aWQpIFwNCisoIShtb2RlICYgKFNfSVdHUlAgfCBTX0lXT1RIKSkgJiYgKHVp
ZCA9PSAwKSkNCisNCitzdGF0aWMgdWlkX3QgdHBlX2FjbFtUUEVfQUNMX1NJWkVdOwkvKiB0cnVz
dGVkIHVzZXJzIGxpc3QgKi8NCitzdGF0aWMgZ2lkX3QgdHBlX2dyb3VwX2FjbFtUUEVfQUNMX1NJ
WkVdOwkvKiB0cnVzdGVkIHVzZXIgZ3JvdXBzIGxpc3QgKi8NCitzdGF0aWMgaW50IHRwZV9hY2xf
Y2FuZGlkYXRlczsJLyogbnVtYmVyIG9mIHVzZXJzIG9uIHRoZSBsaXN0ICovDQorc3RhdGljIGlu
dCB0cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXM7CS8qIG51bWJlciBvZiB1c2VyIGdyb3VwcyBvbiB0
aGUgbGlzdCAqLw0KKw0KKy8qDQorICogVmVyaWZ5IHRoZSB1c2VyLiBUaGlzIG1hY3JvIGlzIHBh
c3NlZCB0aGUgdXNlcidzIElEIGZyb20gdGhlIA0KKyAqIHRwZV9icHJtX3NldF9zZWN1cml0eSBo
b29rLiANCisgKi8NCisNCisjZGVmaW5lIFRSVVNURURfVVNFUihVSUQpICh0cGVfdmVyaWZ5KFVJ
RCkgPT0gQUNLKQ0KKw0KKy8qDQorICogVmVyaWZ5IHRoZSB1c2VyIGdyb3VwLiBUaGlzIG1hY3Jv
IGlzIHBhc3NlZCB0aGUgdXNlcidzIGdyb3VwIElEIGZyb20gdGhlIA0KKyAqIHRwZV9icHJtX3Nl
dF9zZWN1cml0eSBob29rLiANCisgKi8NCisNCisjZGVmaW5lIFRSVVNURURfR1JPVVAoR0lEKSAo
dHBlX2dyb3VwX3ZlcmlmeShHSUQpID09IEFDSykNCisNCisvKiAgSW5pdGlhbGl6ZSB0aGUgYXJy
YXkgd2l0aCBkZWZhdWx0IHZhbHVlcyAoVFBFX0lOSVRJQUxJWkVSKS4gKi8NCisNCisvKiBEZWJ1
Z2dpbmcgYW5kIG91dHB1dHRpbmcgZnVuY3Rpb25zICovDQorDQorc3RhdGljIGlubGluZSB2b2lk
IHRwZV9pbml0KHZvaWQpDQorew0KKwltZW1zZXQodHBlX2FjbCwgVFBFX0lOSVRJQUxJWkVSLCBz
aXplb2YodWlkX3QpICogVFBFX0FDTF9TSVpFKTsNCisJcHJpbnRrKEtFUk5fSU5GTyAiVFBFOiBB
Y2Nlc3MgQ29udHJvbCBMaXN0IGNyZWF0ZWQuXG4iKTsNCisJdHBlX2FjbF9jYW5kaWRhdGVzID0g
MTsNCisJaWYgKCEodHBlX3RydXN0ZWRfZ2lkID09IDApKSB7DQorCQl0cGVfYWNsX2dyb3VwX2Nh
bmRpZGF0ZXMgPSAyOw0KKwl9IGVsc2Ugew0KKwkJdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzID0g
MTsNCisJfQ0KKwl0cGVfYWNsWzBdID0gMDsNCisJaWYgKCEodHBlX3RydXN0ZWRfZ2lkID09IDAp
KSB7DQorCQl0cGVfZ3JvdXBfYWNsWzBdID0gMDsNCisNCisJCXRwZV9ncm91cF9hY2xbMV0gPSB0
cGVfdHJ1c3RlZF9naWQ7DQorCX0gZWxzZSB7DQorCQl0cGVfZ3JvdXBfYWNsWzBdID0gMDsNCisJ
fQ0KK30NCisNCisvKiAgTG9jYXRlIGEgdWlkIGluIHRoZSBsaXN0ICovDQorc3RhdGljIGlubGlu
ZSBpbnQgdHBlX3NlYXJjaCh1aWRfdCBjYW5kaWRhdGUpDQorew0KKwlpbnQgaTsNCisJZm9yIChp
ID0gMDsgaSA8IHRwZV9hY2xfY2FuZGlkYXRlczsgaSsrKSB7DQorCQlpZiAoY2FuZGlkYXRlID09
IHRwZV9hY2xbaV0pIHsNCisJCQlyZXR1cm4gaTsNCisJCX0NCisJfQ0KKwlyZXR1cm4gTkFDSzsN
Cit9DQorDQorLyogIFZlcmlmeSBhIGNhbmRpZGF0ZSB1c2VyLiAqLw0KK3N0YXRpYyBpbmxpbmUg
aW50IHRwZV92ZXJpZnkodWlkX3QgY2FuZGlkYXRlKQ0KK3sNCisJaWYgKCh0cGVfc2VhcmNoKGNh
bmRpZGF0ZSkpICE9IE5BQ0spIHsNCisJCXJldHVybiAoQUNLKTsNCisJfQ0KKwlyZXR1cm4gKE5B
Q0spOw0KK30NCisNCisvKiAgVmVyaWZ5IGEgY2FuZGlkYXRlIHVzZXIgZ3JvdXAuICovDQorc3Rh
dGljIGlubGluZSBpbnQgdHBlX3NlYXJjaF9ncm91cChnaWRfdCBncm91cF9jYW5kaWRhdGUpDQor
ew0KKwlpbnQgaTsNCisJZm9yIChpID0gMDsgaSA8IHRwZV9hY2xfZ3JvdXBfY2FuZGlkYXRlczsg
aSsrKSB7DQorCQlpZiAoZ3JvdXBfY2FuZGlkYXRlID09IHRwZV9ncm91cF9hY2xbaV0pIHsNCisJ
CQlyZXR1cm4gaTsNCisJCX0NCisJfQ0KKwlyZXR1cm4gTkFDSzsNCit9DQorc3RhdGljIGlubGlu
ZSBpbnQgdHBlX2dyb3VwX3ZlcmlmeShnaWRfdCBncm91cF9jYW5kaWRhdGUpDQorew0KKwlpZiAo
KHRwZV9zZWFyY2hfZ3JvdXAoZ3JvdXBfY2FuZGlkYXRlKSkgIT0gTkFDSykgew0KKwkJcmV0dXJu
IChBQ0spOw0KKwl9DQorCXJldHVybiAoTkFDSyk7DQorfQ0KKw0KKyNlbmRpZgkJCQkvKiBfX1RQ
RV9IICovDQo=


--=-Fo5/mJxdff4k2uTKQhRt--

--=-x6QTTlYKUJO7M3q6NKjP
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: Esta parte del mensaje =?ISO-8859-1?Q?est=E1?= firmada
	digitalmente

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBB4CMrDcEopW8rLewRAh0yAKCcFainq+hH/hDeLtqopcPI0kA/6wCeNMPE
YuJNXcVRQAgT948dOom/ZAo=
=sNNe
-----END PGP SIGNATURE-----

--=-x6QTTlYKUJO7M3q6NKjP--

