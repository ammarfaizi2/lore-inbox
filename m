Return-Path: <linux-kernel-owner+willy=40w.ods.org-S268209AbUIBLcr@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S268209AbUIBLcr (ORCPT <rfc822;willy@w.ods.org>);
	Thu, 2 Sep 2004 07:32:47 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S268214AbUIBLcr
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Thu, 2 Sep 2004 07:32:47 -0400
Received: from f16.mail.ru ([194.67.57.46]:58127 "EHLO f16.mail.ru")
	by vger.kernel.org with ESMTP id S268209AbUIBLcZ (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 2 Sep 2004 07:32:25 -0400
From: Kirill Korotaev <kksx@mail.ru>
To: Linus Torvalds <torvalds@osdl.org>,
       William Lee Irwin III <wli@holomorphy.com>,
       Andrew Morton <akpm@osdl.org>
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH] fixed pidhashing patch
Mime-Version: 1.0
X-Mailer: mPOP Web-Mail 2.19
X-Originating-IP: 192.168.0.129 via proxy [195.133.213.201]
Date: Thu, 02 Sep 2004 15:32:22 +0400
Reply-To: Kirill Korotaev <kksx@mail.ru>
Content-Type: multipart/mixed;
	boundary="----dRoc5azf-bnhAtXGbu3zTzTtg:1094124742"
Message-Id: <E1C2ppG-0003xU-00.kksx-mail-ru@f16.mail.ru>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


------dRoc5azf-bnhAtXGbu3zTzTtg:1094124742
Content-Type: text/plain; charset=koi8-r
Content-Transfer-Encoding: 8bit

>>I've only compiletested my changes, though I have strong reasons to
>>believe they're correct. If Kirill signs off on this, I will too.
> 
> 
> Kirill?

I cleanuped it once again. It compiles/works fine.
Hope there will be no more problems with it.

list of small changes:
- FIXED bug in do_each_task_pid() made by Lee. last task was skipped in the loop, removed __list__ var.
- remade patch against latest tree (there was a conflict in exit.c)
- returned 'extern' in find_pid() declaration
- fixed style a bit in detach_pid(), find_task_by_pid_type()

Original comment:
-------------------------------------------------------------------
This patch fixes strange and obscure pid implementation in current kernels:
- it removes calling of put_task_struct() from detach_pid()
  under tasklist_lock. This allows to use blocking calls
  in security_task_free() hooks (in __put_task_struct()).
- it saves some space = 5*5 ints = 100 bytes in task_struct
- it's smaller and tidy, more straigthforward and doesn't use
  any knowledge about pids using and assignment.
- it removes pid_links and pid_struct doesn't hold reference counters
  on task_struct. instead, new pid_structs and linked altogether and
  only one of them is inserted in hash_list.

Signed-off-by: Kirill Korotaev (kksx@mail.ru)
-------------------------------------------------------------------

Kirill


------dRoc5azf-bnhAtXGbu3zTzTtg:1094124742
Content-Type: application/octet-stream; name="diff-pid-sent2"
Content-Disposition: attachment; filename="diff-pid-sent2"
Content-Transfer-Encoding: base64

LS0tIHRlc3QyL2RyaXZlcnMvY2hhci90dHlfaW8uYy5waWQJMjAwNC0wOS0wMiAxMTozOToyOC4w
MDAwMDAwMDAgKzA0MDAKKysrIHRlc3QyL2RyaXZlcnMvY2hhci90dHlfaW8uYwkyMDA0LTA5LTAy
IDEzOjQ4OjAzLjAwMDAwMDAwMCArMDQwMApAQCAtNDI0LDcgKzQyNCw2IEBAIHZvaWQgZG9fdHR5
X2hhbmd1cCh2b2lkICpkYXRhKQogCXN0cnVjdCBmaWxlICogY29uc19maWxwID0gTlVMTDsKIAlz
dHJ1Y3QgZmlsZSAqZmlscCwgKmYgPSBOVUxMOwogCXN0cnVjdCB0YXNrX3N0cnVjdCAqcDsKLQlz
dHJ1Y3QgcGlkICpwaWQ7CiAJaW50ICAgIGNsb3NlY291bnQgPSAwLCBuOwogCiAJaWYgKCF0dHkp
CkBAIC00OTUsOCArNDk0LDcgQEAgdm9pZCBkb190dHlfaGFuZ3VwKHZvaWQgKmRhdGEpCiAJCiAJ
cmVhZF9sb2NrKCZ0YXNrbGlzdF9sb2NrKTsKIAlpZiAodHR5LT5zZXNzaW9uID4gMCkgewotCQlz
dHJ1Y3QgbGlzdF9oZWFkICpsOwotCQlmb3JfZWFjaF90YXNrX3BpZCh0dHktPnNlc3Npb24sIFBJ
RFRZUEVfU0lELCBwLCBsLCBwaWQpIHsKKwkJZG9fZWFjaF90YXNrX3BpZCh0dHktPnNlc3Npb24s
IFBJRFRZUEVfU0lELCBwKSB7CiAJCQlpZiAocC0+c2lnbmFsLT50dHkgPT0gdHR5KQogCQkJCXAt
PnNpZ25hbC0+dHR5ID0gTlVMTDsKIAkJCWlmICghcC0+c2lnbmFsLT5sZWFkZXIpCkBAIC01MDUs
NyArNTAzLDcgQEAgdm9pZCBkb190dHlfaGFuZ3VwKHZvaWQgKmRhdGEpCiAJCQlzZW5kX2dyb3Vw
X3NpZ19pbmZvKFNJR0NPTlQsIFNFTkRfU0lHX1BSSVYsIHApOwogCQkJaWYgKHR0eS0+cGdycCA+
IDApCiAJCQkJcC0+c2lnbmFsLT50dHlfb2xkX3BncnAgPSB0dHktPnBncnA7Ci0JCX0KKwkJfSB3
aGlsZV9lYWNoX3Rhc2tfcGlkKHR0eS0+c2Vzc2lvbiwgUElEVFlQRV9TSUQsIHApOwogCX0KIAly
ZWFkX3VubG9jaygmdGFza2xpc3RfbG9jayk7CiAKQEAgLTU3Nyw4ICs1NzUsNiBAQCB2b2lkIGRp
c2Fzc29jaWF0ZV9jdHR5KGludCBvbl9leGl0KQogewogCXN0cnVjdCB0dHlfc3RydWN0ICp0dHk7
CiAJc3RydWN0IHRhc2tfc3RydWN0ICpwOwotCXN0cnVjdCBsaXN0X2hlYWQgKmw7Ci0Jc3RydWN0
IHBpZCAqcGlkOwogCWludCB0dHlfcGdycCA9IC0xOwogCiAJbG9ja19rZXJuZWwoKTsKQEAgLTYw
Nyw4ICs2MDMsOSBAQCB2b2lkIGRpc2Fzc29jaWF0ZV9jdHR5KGludCBvbl9leGl0KQogCXR0eS0+
cGdycCA9IC0xOwogCiAJcmVhZF9sb2NrKCZ0YXNrbGlzdF9sb2NrKTsKLQlmb3JfZWFjaF90YXNr
X3BpZChjdXJyZW50LT5zaWduYWwtPnNlc3Npb24sIFBJRFRZUEVfU0lELCBwLCBsLCBwaWQpCisJ
ZG9fZWFjaF90YXNrX3BpZChjdXJyZW50LT5zaWduYWwtPnNlc3Npb24sIFBJRFRZUEVfU0lELCBw
KSB7CiAJCXAtPnNpZ25hbC0+dHR5ID0gTlVMTDsKKwl9IHdoaWxlX2VhY2hfdGFza19waWQoY3Vy
cmVudC0+c2lnbmFsLT5zZXNzaW9uLCBQSURUWVBFX1NJRCwgcCk7CiAJcmVhZF91bmxvY2soJnRh
c2tsaXN0X2xvY2spOwogCXVubG9ja19rZXJuZWwoKTsKIH0KQEAgLTEyNjAsMTUgKzEyNTcsMTUg
QEAgc3RhdGljIHZvaWQgcmVsZWFzZV9kZXYoc3RydWN0IGZpbGUgKiBmaQogCSAqLwogCWlmICh0
dHlfY2xvc2luZyB8fCBvX3R0eV9jbG9zaW5nKSB7CiAJCXN0cnVjdCB0YXNrX3N0cnVjdCAqcDsK
LQkJc3RydWN0IGxpc3RfaGVhZCAqbDsKLQkJc3RydWN0IHBpZCAqcGlkOwogCiAJCXJlYWRfbG9j
aygmdGFza2xpc3RfbG9jayk7Ci0JCWZvcl9lYWNoX3Rhc2tfcGlkKHR0eS0+c2Vzc2lvbiwgUElE
VFlQRV9TSUQsIHAsIGwsIHBpZCkKKwkJZG9fZWFjaF90YXNrX3BpZCh0dHktPnNlc3Npb24sIFBJ
RFRZUEVfU0lELCBwKSB7CiAJCQlwLT5zaWduYWwtPnR0eSA9IE5VTEw7CisJCX0gd2hpbGVfZWFj
aF90YXNrX3BpZCh0dHktPnNlc3Npb24sIFBJRFRZUEVfU0lELCBwKTsKIAkJaWYgKG9fdHR5KQot
CQkJZm9yX2VhY2hfdGFza19waWQob190dHktPnNlc3Npb24sIFBJRFRZUEVfU0lELCBwLGwsIHBp
ZCkKKwkJCWRvX2VhY2hfdGFza19waWQob190dHktPnNlc3Npb24sIFBJRFRZUEVfU0lELCBwKSB7
CiAJCQkJcC0+c2lnbmFsLT50dHkgPSBOVUxMOworCQkJfSB3aGlsZV9lYWNoX3Rhc2tfcGlkKG9f
dHR5LT5zZXNzaW9uLCBQSURUWVBFX1NJRCwgcCk7CiAJCXJlYWRfdW5sb2NrKCZ0YXNrbGlzdF9s
b2NrKTsKIAl9CiAKQEAgLTE2MzgsOCArMTYzNSw2IEBAIHN0YXRpYyBpbnQgZmlvbmJpbyhzdHJ1
Y3QgZmlsZSAqZmlsZSwgaW4KIAogc3RhdGljIGludCB0aW9jc2N0dHkoc3RydWN0IHR0eV9zdHJ1
Y3QgKnR0eSwgaW50IGFyZykKIHsKLQlzdHJ1Y3QgbGlzdF9oZWFkICpsOwotCXN0cnVjdCBwaWQg
KnBpZDsKIAl0YXNrX3QgKnA7CiAKIAlpZiAoY3VycmVudC0+c2lnbmFsLT5sZWFkZXIgJiYKQEAg
LTE2NjIsOCArMTY1Nyw5IEBAIHN0YXRpYyBpbnQgdGlvY3NjdHR5KHN0cnVjdCB0dHlfc3RydWN0
ICoKIAkJCSAqLwogCiAJCQlyZWFkX2xvY2soJnRhc2tsaXN0X2xvY2spOwotCQkJZm9yX2VhY2hf
dGFza19waWQodHR5LT5zZXNzaW9uLCBQSURUWVBFX1NJRCwgcCwgbCwgcGlkKQorCQkJZG9fZWFj
aF90YXNrX3BpZCh0dHktPnNlc3Npb24sIFBJRFRZUEVfU0lELCBwKSB7CiAJCQkJcC0+c2lnbmFs
LT50dHkgPSBOVUxMOworCQkJfSB3aGlsZV9lYWNoX3Rhc2tfcGlkKHR0eS0+c2Vzc2lvbiwgUElE
VFlQRV9TSUQsIHApOwogCQkJcmVhZF91bmxvY2soJnRhc2tsaXN0X2xvY2spOwogCQl9IGVsc2UK
IAkJCXJldHVybiAtRVBFUk07CkBAIC0xOTcwLDggKzE5NjYsNiBAQCBzdGF0aWMgdm9pZCBfX2Rv
X1NBSyh2b2lkICphcmcpCiAjZWxzZQogCXN0cnVjdCB0dHlfc3RydWN0ICp0dHkgPSBhcmc7CiAJ
c3RydWN0IHRhc2tfc3RydWN0ICpwOwotCXN0cnVjdCBsaXN0X2hlYWQgKmw7Ci0Jc3RydWN0IHBp
ZCAqcGlkOwogCWludCBzZXNzaW9uOwogCWludAkJaTsKIAlzdHJ1Y3QgZmlsZQkqZmlscDsKQEAg
LTE5ODQsNyArMTk3OCw3IEBAIHN0YXRpYyB2b2lkIF9fZG9fU0FLKHZvaWQgKmFyZykKIAlpZiAo
dHR5LT5kcml2ZXItPmZsdXNoX2J1ZmZlcikKIAkJdHR5LT5kcml2ZXItPmZsdXNoX2J1ZmZlcih0
dHkpOwogCXJlYWRfbG9jaygmdGFza2xpc3RfbG9jayk7Ci0JZm9yX2VhY2hfdGFza19waWQoc2Vz
c2lvbiwgUElEVFlQRV9TSUQsIHAsIGwsIHBpZCkgeworCWRvX2VhY2hfdGFza19waWQoc2Vzc2lv
biwgUElEVFlQRV9TSUQsIHApIHsKIAkJaWYgKHAtPnNpZ25hbC0+dHR5ID09IHR0eSB8fCBzZXNz
aW9uID4gMCkgewogCQkJcHJpbnRrKEtFUk5fTk9USUNFICJTQUs6IGtpbGxlZCBwcm9jZXNzICVk
IgogCQkJICAgICIgKCVzKTogcC0+c2lnbmFsLT5zZXNzaW9uPT10dHktPnNlc3Npb25cbiIsCkBA
IC0yMDExLDcgKzIwMDUsNyBAQCBzdGF0aWMgdm9pZCBfX2RvX1NBSyh2b2lkICphcmcpCiAJCQlz
cGluX3VubG9jaygmcC0+ZmlsZXMtPmZpbGVfbG9jayk7CiAJCX0KIAkJdGFza191bmxvY2socCk7
Ci0JfQorCX0gd2hpbGVfZWFjaF90YXNrX3BpZChzZXNzaW9uLCBQSURUWVBFX1NJRCwgcCk7CiAJ
cmVhZF91bmxvY2soJnRhc2tsaXN0X2xvY2spOwogI2VuZGlmCiB9Ci0tLSB0ZXN0Mi9mcy9wcm9j
L2Jhc2UuYy5waWQJMjAwNC0wOS0wMiAxMTo0MDowMy4wMDAwMDAwMDAgKzA0MDAKKysrIHRlc3Qy
L2ZzL3Byb2MvYmFzZS5jCTIwMDQtMDktMDIgMTM6NDg6MDMuMDAwMDAwMDAwICswNDAwCkBAIC03
NzgsMTAgKzc3OCw5IEBAIHN0YXRpYyBzdHJ1Y3QgaW5vZGVfb3BlcmF0aW9ucyBwcm9jX3BpZF8K
IAkuZm9sbG93X2xpbmsJPSBwcm9jX3BpZF9mb2xsb3dfbGluawogfTsKIAotc3RhdGljIGludCBw
aWRfYWxpdmUoc3RydWN0IHRhc2tfc3RydWN0ICpwKQorc3RhdGljIGlubGluZSBpbnQgcGlkX2Fs
aXZlKHN0cnVjdCB0YXNrX3N0cnVjdCAqcCkKIHsKLQlCVUdfT04ocC0+cGlkc1tQSURUWVBFX1BJ
RF0ucGlkcHRyICE9ICZwLT5waWRzW1BJRFRZUEVfUElEXS5waWQpOwotCXJldHVybiBhdG9taWNf
cmVhZCgmcC0+cGlkc1tQSURUWVBFX1BJRF0ucGlkLmNvdW50KTsKKwlyZXR1cm4gcC0+cGlkc1tQ
SURUWVBFX1BJRF0ubnIgIT0gMDsKIH0KIAogI2RlZmluZSBOVU1CVUYgMTAKLS0tIHRlc3QyL2Zz
L2ZjbnRsLmMucGlkCTIwMDQtMDktMDIgMTE6Mzk6NTcuMDAwMDAwMDAwICswNDAwCisrKyB0ZXN0
Mi9mcy9mY250bC5jCTIwMDQtMDktMDIgMTM6NDg6MDMuMDAwMDAwMDAwICswNDAwCkBAIC00OTcs
MTEgKzQ5Nyw5IEBAIHZvaWQgc2VuZF9zaWdpbyhzdHJ1Y3QgZm93bl9zdHJ1Y3QgKmZvd24KIAkJ
CXNlbmRfc2lnaW9fdG9fdGFzayhwLCBmb3duLCBmZCwgYmFuZCk7CiAJCX0KIAl9IGVsc2Ugewot
CQlzdHJ1Y3QgbGlzdF9oZWFkICpsOwotCQlzdHJ1Y3QgcGlkICpwaWRwdHI7Ci0JCWZvcl9lYWNo
X3Rhc2tfcGlkKC1waWQsIFBJRFRZUEVfUEdJRCwgcCwgbCwgcGlkcHRyKSB7CisJCWRvX2VhY2hf
dGFza19waWQoLXBpZCwgUElEVFlQRV9QR0lELCBwKSB7CiAJCQlzZW5kX3NpZ2lvX3RvX3Rhc2so
cCwgZm93biwgZmQsIGJhbmQpOwotCQl9CisJCX0gd2hpbGVfZWFjaF90YXNrX3BpZCgtcGlkLCBQ
SURUWVBFX1BHSUQsIHApOwogCX0KIAlyZWFkX3VubG9jaygmdGFza2xpc3RfbG9jayk7CiAgb3V0
X3VubG9ja19mb3duOgpAQCAtNTM0LDExICs1MzIsOSBAQCBpbnQgc2VuZF9zaWd1cmcoc3RydWN0
IGZvd25fc3RydWN0ICpmb3duCiAJCQlzZW5kX3NpZ3VyZ190b190YXNrKHAsIGZvd24pOwogCQl9
CiAJfSBlbHNlIHsKLQkJc3RydWN0IGxpc3RfaGVhZCAqbDsKLQkJc3RydWN0IHBpZCAqcGlkcHRy
OwotCQlmb3JfZWFjaF90YXNrX3BpZCgtcGlkLCBQSURUWVBFX1BHSUQsIHAsIGwsIHBpZHB0cikg
eworCQlkb19lYWNoX3Rhc2tfcGlkKC1waWQsIFBJRFRZUEVfUEdJRCwgcCkgewogCQkJc2VuZF9z
aWd1cmdfdG9fdGFzayhwLCBmb3duKTsKLQkJfQorCQl9IHdoaWxlX2VhY2hfdGFza19waWQoLXBp
ZCwgUElEVFlQRV9QR0lELCBwKTsKIAl9CiAJcmVhZF91bmxvY2soJnRhc2tsaXN0X2xvY2spOwog
IG91dF91bmxvY2tfZm93bjoKLS0tIHRlc3QyL2luY2x1ZGUvbGludXgvcGlkLmgucGlkCTIwMDQt
MDktMDIgMTE6NDA6MTkuMDAwMDAwMDAwICswNDAwCisrKyB0ZXN0Mi9pbmNsdWRlL2xpbnV4L3Bp
ZC5oCTIwMDQtMDktMDIgMTQ6NDM6NTMuMDAwMDAwMDAwICswNDAwCkBAIC0xMiwzNSArMTIsMjIg
QEAgZW51bSBwaWRfdHlwZQogCiBzdHJ1Y3QgcGlkCiB7Ci0JLyogVHJ5IHRvIGtlZXAgaGFzaF9j
aGFpbiBpbiB0aGUgc2FtZSBjYWNoZWxpbmUgYXMgbnIgZm9yIGZpbmRfcGlkICovCi0Jc3RydWN0
IGhsaXN0X25vZGUgaGFzaF9jaGFpbjsKKwkvKiBUcnkgdG8ga2VlcCBwaWRfY2hhaW4gaW4gdGhl
IHNhbWUgY2FjaGVsaW5lIGFzIG5yIGZvciBmaW5kX3BpZCAqLwogCWludCBucjsKLQlhdG9taWNf
dCBjb3VudDsKLQlzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRhc2s7Ci0Jc3RydWN0IGxpc3RfaGVhZCB0
YXNrX2xpc3Q7Ci19OwotCi1zdHJ1Y3QgcGlkX2xpbmsKLXsKLQlzdHJ1Y3QgbGlzdF9oZWFkIHBp
ZF9jaGFpbjsKLQlzdHJ1Y3QgcGlkICpwaWRwdHI7Ci0Jc3RydWN0IHBpZCBwaWQ7CisJc3RydWN0
IGhsaXN0X25vZGUgcGlkX2NoYWluOworCS8qIGxpc3Qgb2YgcGlkcyB3aXRoIHRoZSBzYW1lIG5y
LCBvbmx5IG9uZSBvZiB0aGVtIGlzIGluIHRoZSBoYXNoICovCisJc3RydWN0IGxpc3RfaGVhZCBw
aWRfbGlzdDsKIH07CiAKICNkZWZpbmUgcGlkX3Rhc2soZWxlbSwgdHlwZSkgXAotCWxpc3RfZW50
cnkoZWxlbSwgc3RydWN0IHRhc2tfc3RydWN0LCBwaWRzW3R5cGVdLnBpZF9jaGFpbikKKwlsaXN0
X2VudHJ5KGVsZW0sIHN0cnVjdCB0YXNrX3N0cnVjdCwgcGlkc1t0eXBlXS5waWRfbGlzdCkKIAog
LyoKLSAqIGF0dGFjaF9waWQoKSBhbmQgbGlua19waWQoKSBtdXN0IGJlIGNhbGxlZCB3aXRoIHRo
ZSB0YXNrbGlzdF9sb2NrCisgKiBhdHRhY2hfcGlkKCkgYW5kIGRldGFjaF9waWQoKSBtdXN0IGJl
IGNhbGxlZCB3aXRoIHRoZSB0YXNrbGlzdF9sb2NrCiAgKiB3cml0ZS1oZWxkLgogICovCiBleHRl
cm4gaW50IEZBU1RDQUxMKGF0dGFjaF9waWQoc3RydWN0IHRhc2tfc3RydWN0ICp0YXNrLCBlbnVt
IHBpZF90eXBlIHR5cGUsIGludCBucikpOwogCi1leHRlcm4gdm9pZCBGQVNUQ0FMTChsaW5rX3Bp
ZChzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRhc2ssIHN0cnVjdCBwaWRfbGluayAqbGluaywgc3RydWN0
IHBpZCAqcGlkKSk7Ci0KLS8qCi0gKiBkZXRhY2hfcGlkKCkgbXVzdCBiZSBjYWxsZWQgd2l0aCB0
aGUgdGFza2xpc3RfbG9jayB3cml0ZS1oZWxkLgotICovCiBleHRlcm4gdm9pZCBGQVNUQ0FMTChk
ZXRhY2hfcGlkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdGFzaywgZW51bSBwaWRfdHlwZSkpOwogCiAv
KgpAQCAtNTMsMTMgKzQwLDE2IEBAIGV4dGVybiBpbnQgYWxsb2NfcGlkbWFwKHZvaWQpOwogZXh0
ZXJuIHZvaWQgRkFTVENBTEwoZnJlZV9waWRtYXAoaW50KSk7CiBleHRlcm4gdm9pZCBzd2l0Y2hf
ZXhlY19waWRzKHN0cnVjdCB0YXNrX3N0cnVjdCAqbGVhZGVyLCBzdHJ1Y3QgdGFza19zdHJ1Y3Qg
KnRocmVhZCk7CiAKLSNkZWZpbmUgZm9yX2VhY2hfdGFza19waWQod2hvLCB0eXBlLCB0YXNrLCBl
bGVtLCBwaWQpCQlcCi0JaWYgKChwaWQgPSBmaW5kX3BpZCh0eXBlLCB3aG8pKSkJCQlcCi0JICAg
ICAgICBmb3IgKGVsZW0gPSBwaWQtPnRhc2tfbGlzdC5uZXh0LAkJCVwKLQkJCXByZWZldGNoKGVs
ZW0tPm5leHQpLAkJCQlcCi0JCQl0YXNrID0gcGlkX3Rhc2soZWxlbSwgdHlwZSk7CQkJXAotCQkJ
ZWxlbSAhPSAmcGlkLT50YXNrX2xpc3Q7CQkJXAotCQkJZWxlbSA9IGVsZW0tPm5leHQsIHByZWZl
dGNoKGVsZW0tPm5leHQpLCAJXAotCQkJdGFzayA9IHBpZF90YXNrKGVsZW0sIHR5cGUpKQorI2Rl
ZmluZSBkb19lYWNoX3Rhc2tfcGlkKHdobywgdHlwZSwgdGFzaykJCQkJXAorCWlmICgodGFzayA9
IGZpbmRfdGFza19ieV9waWRfdHlwZSh0eXBlLCB3aG8pKSkgewkJXAorCQlwcmVmZXRjaCgodGFz
ayktPnBpZHNbdHlwZV0ucGlkX2xpc3QubmV4dCk7CQlcCisJCWRvIHsKKworI2RlZmluZSB3aGls
ZV9lYWNoX3Rhc2tfcGlkKHdobywgdHlwZSwgdGFzaykJCQkJXAorCQkJdGFzayA9IHBpZF90YXNr
KCh0YXNrKS0+cGlkc1t0eXBlXS5waWRfbGlzdC5uZXh0LFwKKwkJCQkJCXR5cGUpOwkJCVwKKwkJ
CXByZWZldGNoKCh0YXNrKS0+cGlkc1t0eXBlXS5waWRfbGlzdC5uZXh0KTsJXAorCQl9IHdoaWxl
IChobGlzdF91bmhhc2hlZCgmKHRhc2spLT5waWRzW3R5cGVdLnBpZF9jaGFpbikpO1wKKwl9CQkJ
CQkJCQlcCiAKICNlbmRpZiAvKiBfTElOVVhfUElEX0ggKi8KLS0tIHRlc3QyL2luY2x1ZGUvbGlu
dXgvc2NoZWQuaC5waWQJMjAwNC0wOS0wMiAxMTo0MDoxOS4wMDAwMDAwMDAgKzA0MDAKKysrIHRl
c3QyL2luY2x1ZGUvbGludXgvc2NoZWQuaAkyMDA0LTA5LTAyIDEzOjQ4OjA0LjAwMDAwMDAwMCAr
MDQwMApAQCAtNDk0LDcgKzQ5NCw3IEBAIHN0cnVjdCB0YXNrX3N0cnVjdCB7CiAJc3RydWN0IHRh
c2tfc3RydWN0ICpncm91cF9sZWFkZXI7CS8qIHRocmVhZGdyb3VwIGxlYWRlciAqLwogCiAJLyog
UElEL1BJRCBoYXNoIHRhYmxlIGxpbmthZ2UuICovCi0Jc3RydWN0IHBpZF9saW5rIHBpZHNbUElE
VFlQRV9NQVhdOworCXN0cnVjdCBwaWQgcGlkc1tQSURUWVBFX01BWF07CiAKIAl3YWl0X3F1ZXVl
X2hlYWRfdCB3YWl0X2NobGRleGl0OwkvKiBmb3Igd2FpdDQoKSAqLwogCXN0cnVjdCBjb21wbGV0
aW9uICp2Zm9ya19kb25lOwkJLyogZm9yIHZmb3JrKCkgKi8KQEAgLTY3Myw3ICs2NzMsOCBAQCBl
eHRlcm4gc3RydWN0IHRhc2tfc3RydWN0IGluaXRfdGFzazsKIAogZXh0ZXJuIHN0cnVjdCAgIG1t
X3N0cnVjdCBpbml0X21tOwogCi1leHRlcm4gc3RydWN0IHRhc2tfc3RydWN0ICpmaW5kX3Rhc2tf
YnlfcGlkKGludCBwaWQpOworI2RlZmluZSBmaW5kX3Rhc2tfYnlfcGlkKG5yKQlmaW5kX3Rhc2tf
YnlfcGlkX3R5cGUoUElEVFlQRV9QSUQsIG5yKQorZXh0ZXJuIHN0cnVjdCB0YXNrX3N0cnVjdCAq
ZmluZF90YXNrX2J5X3BpZF90eXBlKGludCB0eXBlLCBpbnQgcGlkKTsKIGV4dGVybiB2b2lkIHNl
dF9zcGVjaWFsX3BpZHMocGlkX3Qgc2Vzc2lvbiwgcGlkX3QgcGdycCk7CiBleHRlcm4gdm9pZCBf
X3NldF9zcGVjaWFsX3BpZHMocGlkX3Qgc2Vzc2lvbiwgcGlkX3QgcGdycCk7CiAKQEAgLTg3Niw5
ICs4NzcsNyBAQCBleHRlcm4gdGFza190ICogRkFTVENBTEwobmV4dF90aHJlYWQoY29uCiAKIHN0
YXRpYyBpbmxpbmUgaW50IHRocmVhZF9ncm91cF9lbXB0eSh0YXNrX3QgKnApCiB7Ci0Jc3RydWN0
IHBpZCAqcGlkID0gcC0+cGlkc1tQSURUWVBFX1RHSURdLnBpZHB0cjsKLQotCXJldHVybiBwaWQt
PnRhc2tfbGlzdC5uZXh0LT5uZXh0ID09ICZwaWQtPnRhc2tfbGlzdDsKKwlyZXR1cm4gbGlzdF9l
bXB0eSgmcC0+cGlkc1tQSURUWVBFX1RHSURdLnBpZF9saXN0KTsKIH0KIAogI2RlZmluZSBkZWxh
eV9ncm91cF9sZWFkZXIocCkgXAotLS0gdGVzdDIva2VybmVsL2NhcGFiaWxpdHkuYy5waWQJMjAw
NC0wOS0wMiAxMTo0MDoyMi4wMDAwMDAwMDAgKzA0MDAKKysrIHRlc3QyL2tlcm5lbC9jYXBhYmls
aXR5LmMJMjAwNC0wOS0wMiAxMzo0ODowNC4wMDAwMDAwMDAgKzA0MDAKQEAgLTg5LDE0ICs4OSwx
MiBAQCBzdGF0aWMgaW5saW5lIHZvaWQgY2FwX3NldF9wZyhpbnQgcGdycCwgCiAJCQkgICAgICBr
ZXJuZWxfY2FwX3QgKnBlcm1pdHRlZCkKIHsKIAl0YXNrX3QgKmcsICp0YXJnZXQ7Ci0Jc3RydWN0
IGxpc3RfaGVhZCAqbDsKLQlzdHJ1Y3QgcGlkICpwaWQ7CiAKLQlmb3JfZWFjaF90YXNrX3BpZChw
Z3JwLCBQSURUWVBFX1BHSUQsIGcsIGwsIHBpZCkgeworCWRvX2VhY2hfdGFza19waWQocGdycCwg
UElEVFlQRV9QR0lELCBnKSB7CiAJCXRhcmdldCA9IGc7CiAJCXdoaWxlX2VhY2hfdGhyZWFkKGcs
IHRhcmdldCkKIAkJCXNlY3VyaXR5X2NhcHNldF9zZXQodGFyZ2V0LCBlZmZlY3RpdmUsIGluaGVy
aXRhYmxlLCBwZXJtaXR0ZWQpOwotCX0KKwl9IHdoaWxlX2VhY2hfdGFza19waWQocGdycCwgUElE
VFlQRV9QR0lELCBnKTsKIH0KIAogLyoKLS0tIHRlc3QyL2tlcm5lbC9leGl0LmMucGlkCTIwMDQt
MDktMDIgMTE6NDA6MjIuMDAwMDAwMDAwICswNDAwCisrKyB0ZXN0Mi9rZXJuZWwvZXhpdC5jCTIw
MDQtMDktMDIgMTQ6MzA6NTIuMDAwMDAwMDAwICswNDAwCkBAIC0xMjQsMTYgKzEyNCwxNSBAQCB2
b2lkIHVuaGFzaF9wcm9jZXNzKHN0cnVjdCB0YXNrX3N0cnVjdCAqCiBpbnQgc2Vzc2lvbl9vZl9w
Z3JwKGludCBwZ3JwKQogewogCXN0cnVjdCB0YXNrX3N0cnVjdCAqcDsKLQlzdHJ1Y3QgbGlzdF9o
ZWFkICpsOwotCXN0cnVjdCBwaWQgKnBpZDsKIAlpbnQgc2lkID0gLTE7CiAKIAlyZWFkX2xvY2so
JnRhc2tsaXN0X2xvY2spOwotCWZvcl9lYWNoX3Rhc2tfcGlkKHBncnAsIFBJRFRZUEVfUEdJRCwg
cCwgbCwgcGlkKQorCWRvX2VhY2hfdGFza19waWQocGdycCwgUElEVFlQRV9QR0lELCBwKSB7CiAJ
CWlmIChwLT5zaWduYWwtPnNlc3Npb24gPiAwKSB7CiAJCQlzaWQgPSBwLT5zaWduYWwtPnNlc3Np
b247CiAJCQlnb3RvIG91dDsKIAkJfQorCX0gd2hpbGVfZWFjaF90YXNrX3BpZChwZ3JwLCBQSURU
WVBFX1BHSUQsIHApOwogCXAgPSBmaW5kX3Rhc2tfYnlfcGlkKHBncnApOwogCWlmIChwKQogCQlz
aWQgPSBwLT5zaWduYWwtPnNlc3Npb247CkBAIC0xNTQsMTEgKzE1Myw5IEBAIG91dDoKIHN0YXRp
YyBpbnQgd2lsbF9iZWNvbWVfb3JwaGFuZWRfcGdycChpbnQgcGdycCwgdGFza190ICppZ25vcmVk
X3Rhc2spCiB7CiAJc3RydWN0IHRhc2tfc3RydWN0ICpwOwotCXN0cnVjdCBsaXN0X2hlYWQgKmw7
Ci0Jc3RydWN0IHBpZCAqcGlkOwogCWludCByZXQgPSAxOwogCi0JZm9yX2VhY2hfdGFza19waWQo
cGdycCwgUElEVFlQRV9QR0lELCBwLCBsLCBwaWQpIHsKKwlkb19lYWNoX3Rhc2tfcGlkKHBncnAs
IFBJRFRZUEVfUEdJRCwgcCkgewogCQlpZiAocCA9PSBpZ25vcmVkX3Rhc2sKIAkJCQl8fCBwLT5z
dGF0ZSA+PSBUQVNLX1pPTUJJRSAKIAkJCQl8fCBwLT5yZWFsX3BhcmVudC0+cGlkID09IDEpCkBA
IC0xNjgsNyArMTY1LDcgQEAgc3RhdGljIGludCB3aWxsX2JlY29tZV9vcnBoYW5lZF9wZ3JwKGlu
dAogCQkJcmV0ID0gMDsKIAkJCWJyZWFrOwogCQl9Ci0JfQorCX0gd2hpbGVfZWFjaF90YXNrX3Bp
ZChwZ3JwLCBQSURUWVBFX1BHSUQsIHApOwogCXJldHVybiByZXQ7CS8qIChzaWdoaW5nKSAiT2Z0
ZW4hIiAqLwogfQogCkBAIC0xODcsMTAgKzE4NCw4IEBAIHN0YXRpYyBpbmxpbmUgaW50IGhhc19z
dG9wcGVkX2pvYnMoaW50IHAKIHsKIAlpbnQgcmV0dmFsID0gMDsKIAlzdHJ1Y3QgdGFza19zdHJ1
Y3QgKnA7Ci0Jc3RydWN0IGxpc3RfaGVhZCAqbDsKLQlzdHJ1Y3QgcGlkICpwaWQ7CiAKLQlmb3Jf
ZWFjaF90YXNrX3BpZChwZ3JwLCBQSURUWVBFX1BHSUQsIHAsIGwsIHBpZCkgeworCWRvX2VhY2hf
dGFza19waWQocGdycCwgUElEVFlQRV9QR0lELCBwKSB7CiAJCWlmIChwLT5zdGF0ZSAhPSBUQVNL
X1NUT1BQRUQpCiAJCQljb250aW51ZTsKIApAQCAtMjA2LDcgKzIwMSw3IEBAIHN0YXRpYyBpbmxp
bmUgaW50IGhhc19zdG9wcGVkX2pvYnMoaW50IHAKIAogCQlyZXR2YWwgPSAxOwogCQlicmVhazsK
LQl9CisJfSB3aGlsZV9lYWNoX3Rhc2tfcGlkKHBncnAsIFBJRFRZUEVfUEdJRCwgcCk7CiAJcmV0
dXJuIHJldHZhbDsKIH0KIApAQCAtODQ5LDkgKzg0NCw2IEBAIGFzbWxpbmthZ2UgbG9uZyBzeXNf
ZXhpdChpbnQgZXJyb3JfY29kZSkKIAogdGFza190IGZhc3RjYWxsICpuZXh0X3RocmVhZChjb25z
dCB0YXNrX3QgKnApCiB7Ci0JY29uc3Qgc3RydWN0IHBpZF9saW5rICpsaW5rID0gcC0+cGlkcyAr
IFBJRFRZUEVfVEdJRDsKLQljb25zdCBzdHJ1Y3QgbGlzdF9oZWFkICp0bXAsICpoZWFkID0gJmxp
bmstPnBpZHB0ci0+dGFza19saXN0OwotCiAjaWZkZWYgQ09ORklHX1NNUAogCWlmICghcC0+c2ln
aGFuZCkKIAkJQlVHKCk7CkBAIC04NTksMTEgKzg1MSw3IEBAIHRhc2tfdCBmYXN0Y2FsbCAqbmV4
dF90aHJlYWQoY29uc3QgdGFza18KIAkJCQkhcndsb2NrX2lzX2xvY2tlZCgmdGFza2xpc3RfbG9j
aykpCiAJCUJVRygpOwogI2VuZGlmCi0JdG1wID0gbGluay0+cGlkX2NoYWluLm5leHQ7Ci0JaWYg
KHRtcCA9PSBoZWFkKQotCQl0bXAgPSBoZWFkLT5uZXh0OwotCi0JcmV0dXJuIHBpZF90YXNrKHRt
cCwgUElEVFlQRV9UR0lEKTsKKwlyZXR1cm4gcGlkX3Rhc2socC0+cGlkc1tQSURUWVBFX1RHSURd
LnBpZF9saXN0Lm5leHQsIFBJRFRZUEVfVEdJRCk7CiB9CiAKIEVYUE9SVF9TWU1CT0wobmV4dF90
aHJlYWQpOwotLS0gdGVzdDIva2VybmVsL2ZvcmsuYy5waWQJMjAwNC0wOS0wMiAxMTo0MDoyMi4w
MDAwMDAwMDAgKzA0MDAKKysrIHRlc3QyL2tlcm5lbC9mb3JrLmMJMjAwNC0wOS0wMiAxMzo0ODow
NC4wMDAwMDAwMDAgKzA0MDAKQEAgLTExMjQsMTQgKzExMjQsMTMgQEAgc3RhdGljIHRhc2tfdCAq
Y29weV9wcm9jZXNzKHVuc2lnbmVkIGxvbgogCQlfX3B0cmFjZV9saW5rKHAsIGN1cnJlbnQtPnBh
cmVudCk7CiAKIAlhdHRhY2hfcGlkKHAsIFBJRFRZUEVfUElELCBwLT5waWQpOworCWF0dGFjaF9w
aWQocCwgUElEVFlQRV9UR0lELCBwLT50Z2lkKTsKIAlpZiAodGhyZWFkX2dyb3VwX2xlYWRlcihw
KSkgewotCQlhdHRhY2hfcGlkKHAsIFBJRFRZUEVfVEdJRCwgcC0+dGdpZCk7CiAJCWF0dGFjaF9w
aWQocCwgUElEVFlQRV9QR0lELCBwcm9jZXNzX2dyb3VwKHApKTsKIAkJYXR0YWNoX3BpZChwLCBQ
SURUWVBFX1NJRCwgcC0+c2lnbmFsLT5zZXNzaW9uKTsKIAkJaWYgKHAtPnBpZCkKIAkJCV9fZ2V0
X2NwdV92YXIocHJvY2Vzc19jb3VudHMpKys7Ci0JfSBlbHNlCi0JCWxpbmtfcGlkKHAsIHAtPnBp
ZHMgKyBQSURUWVBFX1RHSUQsICZwLT5ncm91cF9sZWFkZXItPnBpZHNbUElEVFlQRV9UR0lEXS5w
aWQpOworCX0KIAogCW5yX3RocmVhZHMrKzsKIAl3cml0ZV91bmxvY2tfaXJxKCZ0YXNrbGlzdF9s
b2NrKTsKLS0tIHRlc3QyL2tlcm5lbC9waWQuYy5waWQJMjAwNC0wOS0wMiAxMTo0MDoyMi4wMDAw
MDAwMDAgKzA0MDAKKysrIHRlc3QyL2tlcm5lbC9waWQuYwkyMDA0LTA5LTAyIDE0OjQ5OjQxLjIw
NTg5MzEzNiArMDQwMApAQCAtMTQ2LDc0ICsxNDYsNjYgQEAgZmFpbHVyZToKIAlyZXR1cm4gLTE7
CiB9CiAKLWZhc3RjYWxsIHN0cnVjdCBwaWQgKmZpbmRfcGlkKGVudW0gcGlkX3R5cGUgdHlwZSwg
aW50IG5yKQorc3RydWN0IHBpZCAqIGZhc3RjYWxsIGZpbmRfcGlkKGVudW0gcGlkX3R5cGUgdHlw
ZSwgaW50IG5yKQogewogCXN0cnVjdCBobGlzdF9ub2RlICplbGVtOwogCXN0cnVjdCBwaWQgKnBp
ZDsKIAogCWhsaXN0X2Zvcl9lYWNoX2VudHJ5KHBpZCwgZWxlbSwKLQkJCSZwaWRfaGFzaFt0eXBl
XVtwaWRfaGFzaGZuKG5yKV0sIGhhc2hfY2hhaW4pIHsKKwkJCSZwaWRfaGFzaFt0eXBlXVtwaWRf
aGFzaGZuKG5yKV0sIHBpZF9jaGFpbikgewogCQlpZiAocGlkLT5uciA9PSBucikKIAkJCXJldHVy
biBwaWQ7CiAJfQogCXJldHVybiBOVUxMOwogfQogCi12b2lkIGZhc3RjYWxsIGxpbmtfcGlkKHRh
c2tfdCAqdGFzaywgc3RydWN0IHBpZF9saW5rICpsaW5rLCBzdHJ1Y3QgcGlkICpwaWQpCi17Ci0J
YXRvbWljX2luYygmcGlkLT5jb3VudCk7Ci0JbGlzdF9hZGRfdGFpbCgmbGluay0+cGlkX2NoYWlu
LCAmcGlkLT50YXNrX2xpc3QpOwotCWxpbmstPnBpZHB0ciA9IHBpZDsKLX0KLQogaW50IGZhc3Rj
YWxsIGF0dGFjaF9waWQodGFza190ICp0YXNrLCBlbnVtIHBpZF90eXBlIHR5cGUsIGludCBucikK
IHsKLQlzdHJ1Y3QgcGlkICpwaWQgPSBmaW5kX3BpZCh0eXBlLCBucik7CisJc3RydWN0IHBpZCAq
cGlkLCAqdGFza19waWQ7CiAKLQlpZiAocGlkKQotCQlhdG9taWNfaW5jKCZwaWQtPmNvdW50KTsK
LQllbHNlIHsKLQkJcGlkID0gJnRhc2stPnBpZHNbdHlwZV0ucGlkOwotCQlwaWQtPm5yID0gbnI7
Ci0JCWF0b21pY19zZXQoJnBpZC0+Y291bnQsIDEpOwotCQlJTklUX0xJU1RfSEVBRCgmcGlkLT50
YXNrX2xpc3QpOwotCQlwaWQtPnRhc2sgPSB0YXNrOwotCQlnZXRfdGFza19zdHJ1Y3QodGFzayk7
Ci0JCWhsaXN0X2FkZF9oZWFkKCZwaWQtPmhhc2hfY2hhaW4sCisJdGFza19waWQgPSAmdGFzay0+
cGlkc1t0eXBlXTsKKwlwaWQgPSBmaW5kX3BpZCh0eXBlLCBucik7CisJaWYgKHBpZCA9PSBOVUxM
KSB7CisJCWhsaXN0X2FkZF9oZWFkKCZ0YXNrX3BpZC0+cGlkX2NoYWluLAogCQkJCSZwaWRfaGFz
aFt0eXBlXVtwaWRfaGFzaGZuKG5yKV0pOworCQlJTklUX0xJU1RfSEVBRCgmdGFza19waWQtPnBp
ZF9saXN0KTsKKwl9IGVsc2UgeworCQlJTklUX0hMSVNUX05PREUoJnRhc2tfcGlkLT5waWRfY2hh
aW4pOworCQlsaXN0X2FkZF90YWlsKCZ0YXNrX3BpZC0+cGlkX2xpc3QsICZwaWQtPnBpZF9saXN0
KTsKIAl9Ci0JbGlzdF9hZGRfdGFpbCgmdGFzay0+cGlkc1t0eXBlXS5waWRfY2hhaW4sICZwaWQt
PnRhc2tfbGlzdCk7Ci0JdGFzay0+cGlkc1t0eXBlXS5waWRwdHIgPSBwaWQ7CisJdGFza19waWQt
Pm5yID0gbnI7CiAKIAlyZXR1cm4gMDsKIH0KIAogc3RhdGljIGlubGluZSBpbnQgX19kZXRhY2hf
cGlkKHRhc2tfdCAqdGFzaywgZW51bSBwaWRfdHlwZSB0eXBlKQogewotCXN0cnVjdCBwaWRfbGlu
ayAqbGluayA9IHRhc2stPnBpZHMgKyB0eXBlOwotCXN0cnVjdCBwaWQgKnBpZCA9IGxpbmstPnBp
ZHB0cjsKKwlzdHJ1Y3QgcGlkICpwaWQsICpwaWRfbmV4dDsKIAlpbnQgbnI7CiAKLQlsaXN0X2Rl
bCgmbGluay0+cGlkX2NoYWluKTsKLQlpZiAoIWF0b21pY19kZWNfYW5kX3Rlc3QoJnBpZC0+Y291
bnQpKQotCQlyZXR1cm4gMDsKLQorCXBpZCA9ICZ0YXNrLT5waWRzW3R5cGVdOworCWlmICghaGxp
c3RfdW5oYXNoZWQoJnBpZC0+cGlkX2NoYWluKSkgeworCQlobGlzdF9kZWwoJnBpZC0+cGlkX2No
YWluKTsKKwkJaWYgKCFsaXN0X2VtcHR5KCZwaWQtPnBpZF9saXN0KSkgeworCQkJcGlkX25leHQg
PSBsaXN0X2VudHJ5KHBpZC0+cGlkX2xpc3QubmV4dCwKKwkJCQkJCXN0cnVjdCBwaWQsIHBpZF9s
aXN0KTsKKwkJCS8qIGluc2VydCBuZXh0IHBpZCBmcm9tIHBpZF9saXN0IHRvIGhhc2ggKi8KKwkJ
CWhsaXN0X2FkZF9oZWFkKCZwaWRfbmV4dC0+cGlkX2NoYWluLAorCQkJCSZwaWRfaGFzaFt0eXBl
XVtwaWRfaGFzaGZuKHBpZF9uZXh0LT5ucildKTsKKwkJfQorCX0KKwlsaXN0X2RlbCgmcGlkLT5w
aWRfbGlzdCk7CiAJbnIgPSBwaWQtPm5yOwotCWhsaXN0X2RlbCgmcGlkLT5oYXNoX2NoYWluKTsK
LQlwdXRfdGFza19zdHJ1Y3QocGlkLT50YXNrKTsKKwlwaWQtPm5yID0gMDsKIAogCXJldHVybiBu
cjsKIH0KIAotc3RhdGljIHZvaWQgX2RldGFjaF9waWQodGFza190ICp0YXNrLCBlbnVtIHBpZF90
eXBlIHR5cGUpCi17Ci0JX19kZXRhY2hfcGlkKHRhc2ssIHR5cGUpOwotfQotCiB2b2lkIGZhc3Rj
YWxsIGRldGFjaF9waWQodGFza190ICp0YXNrLCBlbnVtIHBpZF90eXBlIHR5cGUpCiB7Ci0JaW50
IG5yID0gX19kZXRhY2hfcGlkKHRhc2ssIHR5cGUpOworCWludCBucjsKIAorCW5yID0gX19kZXRh
Y2hfcGlkKHRhc2ssIHR5cGUpOwogCWlmICghbnIpCiAJCXJldHVybjsKIApAQCAtMjIzLDE2ICsy
MTUsMTggQEAgdm9pZCBmYXN0Y2FsbCBkZXRhY2hfcGlkKHRhc2tfdCAqdGFzaywgZQogCWZyZWVf
cGlkbWFwKG5yKTsKIH0KIAotdGFza190ICpmaW5kX3Rhc2tfYnlfcGlkKGludCBucikKK3Rhc2tf
dCAqZmluZF90YXNrX2J5X3BpZF90eXBlKGludCB0eXBlLCBpbnQgbnIpCiB7Ci0Jc3RydWN0IHBp
ZCAqcGlkID0gZmluZF9waWQoUElEVFlQRV9QSUQsIG5yKTsKKwlzdHJ1Y3QgcGlkICpwaWQ7CiAK
KwlwaWQgPSBmaW5kX3BpZCh0eXBlLCBucik7CiAJaWYgKCFwaWQpCiAJCXJldHVybiBOVUxMOwot
CXJldHVybiBwaWRfdGFzayhwaWQtPnRhc2tfbGlzdC5uZXh0LCBQSURUWVBFX1BJRCk7CisKKwly
ZXR1cm4gcGlkX3Rhc2soJnBpZC0+cGlkX2xpc3QsIHR5cGUpOwogfQogCi1FWFBPUlRfU1lNQk9M
KGZpbmRfdGFza19ieV9waWQpOworRVhQT1JUX1NZTUJPTChmaW5kX3Rhc2tfYnlfcGlkX3R5cGUp
OwogCiAvKgogICogVGhpcyBmdW5jdGlvbiBzd2l0Y2hlcyB0aGUgUElEcyBpZiBhIG5vbi1sZWFk
ZXIgdGhyZWFkIGNhbGxzCkBAIC0yNDEsMTMgKzIzNSwxMyBAQCBFWFBPUlRfU1lNQk9MKGZpbmRf
dGFza19ieV9waWQpOwogICovCiB2b2lkIHN3aXRjaF9leGVjX3BpZHModGFza190ICpsZWFkZXIs
IHRhc2tfdCAqdGhyZWFkKQogewotCV9kZXRhY2hfcGlkKGxlYWRlciwgUElEVFlQRV9QSUQpOwot
CV9kZXRhY2hfcGlkKGxlYWRlciwgUElEVFlQRV9UR0lEKTsKLQlfZGV0YWNoX3BpZChsZWFkZXIs
IFBJRFRZUEVfUEdJRCk7Ci0JX2RldGFjaF9waWQobGVhZGVyLCBQSURUWVBFX1NJRCk7CisJX19k
ZXRhY2hfcGlkKGxlYWRlciwgUElEVFlQRV9QSUQpOworCV9fZGV0YWNoX3BpZChsZWFkZXIsIFBJ
RFRZUEVfVEdJRCk7CisJX19kZXRhY2hfcGlkKGxlYWRlciwgUElEVFlQRV9QR0lEKTsKKwlfX2Rl
dGFjaF9waWQobGVhZGVyLCBQSURUWVBFX1NJRCk7CiAKLQlfZGV0YWNoX3BpZCh0aHJlYWQsIFBJ
RFRZUEVfUElEKTsKLQlfZGV0YWNoX3BpZCh0aHJlYWQsIFBJRFRZUEVfVEdJRCk7CisJX19kZXRh
Y2hfcGlkKHRocmVhZCwgUElEVFlQRV9QSUQpOworCV9fZGV0YWNoX3BpZCh0aHJlYWQsIFBJRFRZ
UEVfVEdJRCk7CiAKIAlsZWFkZXItPnBpZCA9IGxlYWRlci0+dGdpZCA9IHRocmVhZC0+cGlkOwog
CXRocmVhZC0+cGlkID0gdGhyZWFkLT50Z2lkOwotLS0gdGVzdDIva2VybmVsL3NpZ25hbC5jLnBp
ZAkyMDA0LTA5LTAyIDExOjQwOjIyLjAwMDAwMDAwMCArMDQwMAorKysgdGVzdDIva2VybmVsL3Np
Z25hbC5jCTIwMDQtMDktMDIgMTM6NDg6MDQuMDAwMDAwMDAwICswNDAwCkBAIC0xMTEwLDggKzEx
MTAsNiBAQCBpbnQgZ3JvdXBfc2VuZF9zaWdfaW5mbyhpbnQgc2lnLCBzdHJ1Y3QgCiBpbnQgX19r
aWxsX3BnX2luZm8oaW50IHNpZywgc3RydWN0IHNpZ2luZm8gKmluZm8sIHBpZF90IHBncnApCiB7
CiAJc3RydWN0IHRhc2tfc3RydWN0ICpwOwotCXN0cnVjdCBsaXN0X2hlYWQgKmw7Ci0Jc3RydWN0
IHBpZCAqcGlkOwogCWludCByZXR2YWwsIHN1Y2Nlc3M7CiAKIAlpZiAocGdycCA8PSAwKQpAQCAt
MTExOSwxMSArMTExNywxMSBAQCBpbnQgX19raWxsX3BnX2luZm8oaW50IHNpZywgc3RydWN0IHNp
Z2luCiAKIAlzdWNjZXNzID0gMDsKIAlyZXR2YWwgPSAtRVNSQ0g7Ci0JZm9yX2VhY2hfdGFza19w
aWQocGdycCwgUElEVFlQRV9QR0lELCBwLCBsLCBwaWQpIHsKKwlkb19lYWNoX3Rhc2tfcGlkKHBn
cnAsIFBJRFRZUEVfUEdJRCwgcCkgewogCQlpbnQgZXJyID0gZ3JvdXBfc2VuZF9zaWdfaW5mbyhz
aWcsIGluZm8sIHApOwogCQlzdWNjZXNzIHw9ICFlcnI7CiAJCXJldHZhbCA9IGVycjsKLQl9CisJ
fSB3aGlsZV9lYWNoX3Rhc2tfcGlkKHBncnAsIFBJRFRZUEVfUEdJRCwgcCk7CiAJcmV0dXJuIHN1
Y2Nlc3MgPyAwIDogcmV0dmFsOwogfQogCkBAIC0xMTUwLDggKzExNDgsNiBAQCBpbnQKIGtpbGxf
c2xfaW5mbyhpbnQgc2lnLCBzdHJ1Y3Qgc2lnaW5mbyAqaW5mbywgcGlkX3Qgc2lkKQogewogCWlu
dCBlcnIsIHJldHZhbCA9IC1FSU5WQUw7Ci0Jc3RydWN0IHBpZCAqcGlkOwotCXN0cnVjdCBsaXN0
X2hlYWQgKmw7CiAJc3RydWN0IHRhc2tfc3RydWN0ICpwOwogCiAJaWYgKHNpZCA8PSAwKQpAQCAt
MTE1OSwxMyArMTE1NSwxMyBAQCBraWxsX3NsX2luZm8oaW50IHNpZywgc3RydWN0IHNpZ2luZm8g
KmluCiAKIAlyZXR2YWwgPSAtRVNSQ0g7CiAJcmVhZF9sb2NrKCZ0YXNrbGlzdF9sb2NrKTsKLQlm
b3JfZWFjaF90YXNrX3BpZChzaWQsIFBJRFRZUEVfU0lELCBwLCBsLCBwaWQpIHsKKwlkb19lYWNo
X3Rhc2tfcGlkKHNpZCwgUElEVFlQRV9TSUQsIHApIHsKIAkJaWYgKCFwLT5zaWduYWwtPmxlYWRl
cikKIAkJCWNvbnRpbnVlOwogCQllcnIgPSBncm91cF9zZW5kX3NpZ19pbmZvKHNpZywgaW5mbywg
cCk7CiAJCWlmIChyZXR2YWwpCiAJCQlyZXR2YWwgPSBlcnI7Ci0JfQorCX0gd2hpbGVfZWFjaF90
YXNrX3BpZChzaWQsIFBJRFRZUEVfU0lELCBwKTsKIAlyZWFkX3VubG9jaygmdGFza2xpc3RfbG9j
ayk7CiBvdXQ6CiAJcmV0dXJuIHJldHZhbDsKLS0tIHRlc3QyL2tlcm5lbC9zeXMuYy5waWQJMjAw
NC0wOS0wMiAxMTo0MDoyMi4wMDAwMDAwMDAgKzA0MDAKKysrIHRlc3QyL2tlcm5lbC9zeXMuYwky
MDA0LTA5LTAyIDEzOjQ4OjA0LjAwMDAwMDAwMCArMDQwMApAQCAtMzEwLDggKzMxMCw2IEBAIGFz
bWxpbmthZ2UgbG9uZyBzeXNfc2V0cHJpb3JpdHkoaW50IHdoaWMKIHsKIAlzdHJ1Y3QgdGFza19z
dHJ1Y3QgKmcsICpwOwogCXN0cnVjdCB1c2VyX3N0cnVjdCAqdXNlcjsKLQlzdHJ1Y3QgcGlkICpw
aWQ7Ci0Jc3RydWN0IGxpc3RfaGVhZCAqbDsKIAlpbnQgZXJyb3IgPSAtRUlOVkFMOwogCiAJaWYg
KHdoaWNoID4gMiB8fCB3aGljaCA8IDApCkBAIC0zMzYsOCArMzM0LDkgQEAgYXNtbGlua2FnZSBs
b25nIHN5c19zZXRwcmlvcml0eShpbnQgd2hpYwogCQljYXNlIFBSSU9fUEdSUDoKIAkJCWlmICgh
d2hvKQogCQkJCXdobyA9IHByb2Nlc3NfZ3JvdXAoY3VycmVudCk7Ci0JCQlmb3JfZWFjaF90YXNr
X3BpZCh3aG8sIFBJRFRZUEVfUEdJRCwgcCwgbCwgcGlkKQorCQkJZG9fZWFjaF90YXNrX3BpZCh3
aG8sIFBJRFRZUEVfUEdJRCwgcCkgewogCQkJCWVycm9yID0gc2V0X29uZV9wcmlvKHAsIG5pY2V2
YWwsIGVycm9yKTsKKwkJCX0gd2hpbGVfZWFjaF90YXNrX3BpZCh3aG8sIFBJRFRZUEVfUEdJRCwg
cCk7CiAJCQlicmVhazsKIAkJY2FzZSBQUklPX1VTRVI6CiAJCQlpZiAoIXdobykKQEAgLTM3MSw4
ICszNzAsNiBAQCBvdXQ6CiBhc21saW5rYWdlIGxvbmcgc3lzX2dldHByaW9yaXR5KGludCB3aGlj
aCwgaW50IHdobykKIHsKIAlzdHJ1Y3QgdGFza19zdHJ1Y3QgKmcsICpwOwotCXN0cnVjdCBsaXN0
X2hlYWQgKmw7Ci0Jc3RydWN0IHBpZCAqcGlkOwogCXN0cnVjdCB1c2VyX3N0cnVjdCAqdXNlcjsK
IAlsb25nIG5pY2V2YWwsIHJldHZhbCA9IC1FU1JDSDsKIApAQCAtMzk0LDExICszOTEsMTEgQEAg
YXNtbGlua2FnZSBsb25nIHN5c19nZXRwcmlvcml0eShpbnQgd2hpYwogCQljYXNlIFBSSU9fUEdS
UDoKIAkJCWlmICghd2hvKQogCQkJCXdobyA9IHByb2Nlc3NfZ3JvdXAoY3VycmVudCk7Ci0JCQlm
b3JfZWFjaF90YXNrX3BpZCh3aG8sIFBJRFRZUEVfUEdJRCwgcCwgbCwgcGlkKSB7CisJCQlkb19l
YWNoX3Rhc2tfcGlkKHdobywgUElEVFlQRV9QR0lELCBwKSB7CiAJCQkJbmljZXZhbCA9IDIwIC0g
dGFza19uaWNlKHApOwogCQkJCWlmIChuaWNldmFsID4gcmV0dmFsKQogCQkJCQlyZXR2YWwgPSBu
aWNldmFsOwotCQkJfQorCQkJfSB3aGlsZV9lYWNoX3Rhc2tfcGlkKHdobywgUElEVFlQRV9QR0lE
LCBwKTsKIAkJCWJyZWFrOwogCQljYXNlIFBSSU9fVVNFUjoKIAkJCWlmICghd2hvKQpAQCAtMTA0
NCwxMiArMTA0MSwxMSBAQCBhc21saW5rYWdlIGxvbmcgc3lzX3NldHBnaWQocGlkX3QgcGlkLCBw
CiAKIAlpZiAocGdpZCAhPSBwaWQpIHsKIAkJc3RydWN0IHRhc2tfc3RydWN0ICpwOwotCQlzdHJ1
Y3QgcGlkICpwaWQ7Ci0JCXN0cnVjdCBsaXN0X2hlYWQgKmw7CiAKLQkJZm9yX2VhY2hfdGFza19w
aWQocGdpZCwgUElEVFlQRV9QR0lELCBwLCBsLCBwaWQpCisJCWRvX2VhY2hfdGFza19waWQocGdp
ZCwgUElEVFlQRV9QR0lELCBwKSB7CiAJCQlpZiAocC0+c2lnbmFsLT5zZXNzaW9uID09IGN1cnJl
bnQtPnNpZ25hbC0+c2Vzc2lvbikKIAkJCQlnb3RvIG9rX3BnaWQ7CisJCX0gd2hpbGVfZWFjaF90
YXNrX3BpZChwZ2lkLCBQSURUWVBFX1BHSUQsIHApOwogCQlnb3RvIG91dDsKIAl9CiAK

------dRoc5azf-bnhAtXGbu3zTzTtg:1094124742--
