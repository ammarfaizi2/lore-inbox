Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261449AbUKVMCA@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261449AbUKVMCA (ORCPT <rfc822;willy@w.ods.org>);
	Mon, 22 Nov 2004 07:02:00 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261786AbUKVMCA
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Mon, 22 Nov 2004 07:02:00 -0500
Received: from mx1.redhat.com ([66.187.233.31]:22997 "EHLO mx1.redhat.com")
	by vger.kernel.org with ESMTP id S261449AbUKVMBx (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 22 Nov 2004 07:01:53 -0500
From: David Howells <dhowells@redhat.com>
In-Reply-To: <16801.9135.264043.449911@cargo.ozlabs.ibm.com> 
References: <16801.9135.264043.449911@cargo.ozlabs.ibm.com> 
To: Paul Mackerras <paulus@samba.org>
Cc: linux-kernel@vger.kernel.org, akpm@osdl.org
Subject: Re: cachefs broken on ppc64 
User-Agent: EMH/1.14.1 SEMI/1.14.5 (Awara-Onsen) FLIM/1.14.5 (Demachiyanagi) APEL/10.6 Emacs/21.3 (i386-redhat-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.5 - "Awara-Onsen")
Content-Type: text/plain; charset=US-ASCII
Date: Mon, 22 Nov 2004 12:01:36 +0000
Message-ID: <4096.1101124896@redhat.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


> I just tried compiling 2.6.10-rc2-mm2, and just for fun, I turned on
> cachefs, and found out that cachefs won't build on ppc64.  The problem
> is that it is using xchg() on 16-bit quantities, which we don't
> support on ppc (32 or 64).  Is there a good reason why
> cachefs_super.ujnl_serial has to be 16 bits rather than 32?

Because the on-disc value is 16 bits, I suppose.

Actually, if you are looking at the one in journal.c, that probably doesn't
need the xchg() at all. There's a write-locked rwsem covering the region.

> It worries me a bit that you are using xchg() so much, actually.  It
> feels like you are trying to be clever and do things without taking
> any locks, but there are no memory barriers anywhere in fs/cachefs
> that I could see.

In many of the cases, there're spinlocks or semaphores covering the xchg(), so
those don't really need to be xchg calls, I suppose.

> So I suspect it would have problems on SMP ppc64 or ia64 systems, which have
> weak memory consistency.  Or is there some serialization at a higher level
> that saves you?  (If so, why do you need to use xchg()?)

There is serialisation in the form of spinlocks and semaphores covering many
of the exchanges, but not all. I'm not entirely sure where I need memory
barriers - i386 doesn't really have them.

David
