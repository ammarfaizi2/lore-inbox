Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261810AbUKJNkW@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261810AbUKJNkW (ORCPT <rfc822;willy@w.ods.org>);
	Wed, 10 Nov 2004 08:40:22 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261838AbUKJNkW
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Wed, 10 Nov 2004 08:40:22 -0500
Received: from mx1.redhat.com ([66.187.233.31]:32194 "EHLO mx1.redhat.com")
	by vger.kernel.org with ESMTP id S261810AbUKJNkN (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 10 Nov 2004 08:40:13 -0500
From: David Howells <dhowells@redhat.com>
In-Reply-To: <20041109140122.GA5388@infradead.org> 
References: <20041109140122.GA5388@infradead.org>  <20041109125539.GA4867@infradead.org> <200411081432.iA8EWfmh023432@warthog.cambridge.redhat.com> <15068.1100008386@redhat.com> 
To: Christoph Hellwig <hch@infradead.org>
Cc: torvalds@osdl.org, akpm@osdl.org, davidm@snapgear.com,
       linux-kernel@vger.kernel.org, uclinux-dev@uclinux.org
Subject: Re: [PATCH] VM routine fixes 
User-Agent: EMH/1.14.1 SEMI/1.14.5 (Awara-Onsen) FLIM/1.14.5 (Demachiyanagi) APEL/10.6 Emacs/21.3 (i386-redhat-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.5 - "Awara-Onsen")
Content-Type: text/plain; charset=US-ASCII
Date: Wed, 10 Nov 2004 13:37:57 +0000
Message-ID: <4530.1100093877@redhat.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


Christoph Hellwig <hch@infradead.org> wrote:
> > > this is nasty.  The right thing would probably to swich !MMU arches
> > > to use the compount-page mechanism from the hugetlb code for this.
> > 
> > Supply me with a patch and I'll test it. I don't know how the
> > compound-page stuff works, but it's quite possibly the wrong way to do
> > it. There is no MMU available, so you can't generate adjacency that way.
> 
> so look at the code.  It's not about the MMU at all, it's about handling
> the Linux page structures.   What you're doing is a big mess and should
> not be merged.  So if you want to fix the issue do it properly.

It's not a big mess, and nor is it of my making; I'm just trying to make it
work. It's two tiny sections in page_alloc.c that have #ifdef variations
conditional on CONFIG_MMU. That's it. Full stop. Furthermore, it's not really
a mess at all. It's the least variation required to make the page allocator
also work in !MMU situations.

It's also a lot more efficient than the compound page stuff - though I'll
grant it won't necessarily catch the same errors - for the following reasons:

 (1) get_page() and put_page() acquire extra conditional expressions.

 (3) put_page() is out of line, not inline. This probably makes it less
     efficient, especially given register clobberage.

 (2) put_page() potentially has to access three struct pages per call, not
     just one.

 (4) prep_compound_page() and destroy_compount_page() are much bigger and more
     complicated than the !MMU variations to which you're objecting.

     I hope you also noticed that these are themselves #ifdef'd...

Compound pages seem to be in some way tied to the TLB entry coverage sizes
available (for hugetlb), so it's not obvious that it's permitted to have
compound pages not of these sizes, and as I need to allocate arbitrary
sizes...

If I am correct about this, then the !MMU problem would still exist - just
with adjacent sets of compound pages rather than adjacent sets of pages.

Compound pages might be nice, but they're overkill.

David
