Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S280257AbRK1TnJ>; Wed, 28 Nov 2001 14:43:09 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S280456AbRK1TnA>; Wed, 28 Nov 2001 14:43:00 -0500
Received: from nydalah028.sn.umu.se ([130.239.118.227]:1666 "EHLO
	x-files.giron.wox.org") by vger.kernel.org with ESMTP
	id <S280257AbRK1Tmw>; Wed, 28 Nov 2001 14:42:52 -0500
Message-ID: <049c01c17844$7591e750$0201a8c0@HOMER>
From: "Martin Eriksson" <nitrax@giron.wox.org>
To: <root@chaos.analogic.com>, <erik@hensema.net>
Cc: <linux-kernel@vger.kernel.org>
In-Reply-To: <Pine.LNX.3.95.1011128140806.5756A-100000@chaos.analogic.com>
Subject: Re: Compilation problem in ndisc.c / 2.5.1-pre2 : possible gcc bug?
Date: Wed, 28 Nov 2001 20:39:56 +0100
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2600.0000
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

----- Original Message -----
From: "Richard B. Johnson" <root@chaos.analogic.com>
To: <erik@hensema.net>
Cc: <linux-kernel@vger.kernel.org>
Sent: Wednesday, November 28, 2001 8:09 PM
Subject: Re: Compilation problem in ndisc.c / 2.5.1-pre2 : possible gcc bug?


> On 28 Nov 2001, Erik Hensema wrote:
>
> >
> > I've been looking into the compile problems of net/ipv6/ndisc.c in
> > 2.5.1-pre2 and I found that the asm generated by gcc (2.95.3) is wrong:
> >
> > This is a small part of a diff betweem two asm files generated by gcc,
note
> > the missing \n's in the wrong code:
> >
> > -
> > - addl 0(%ebp), %edx
> > - adcl 4(%ebp), %edx
> > - adcl 8(%ebp), %edx
> > - adcl 12(%ebp), %edx
> > - adcl 0(%ecx), %edx
> > - adcl 4(%ecx), %edx
> > - adcl 8(%ecx), %edx
> > - adcl 12(%ecx), %edx
> > - adcl %edi, %edx
> > - adcl %eax, %edx
> > - adcl $0, %edx
> > -
> > + addl 0(%ebp), %edxadcl 4(%ebp), %edxadcl 8(%ebp), %edxadcl 12(%ebp),
%edxadcl 0(%ecx), %edxadcl 4(%ecx), %edxadcl 8(%ecx), %edxadcl 12(%ecx),
%edxadcl %edi, %edxadcl %eax, %edxadcl $0, %edx
>
>
> This is probably just some loop unrolling, not some as you say "wrong
> code".

Correct me if I'm wrong, but I don't think "%edxadcl" really assembles....

_____________________________________________________
|  Martin Eriksson <nitrax@giron.wox.org>
|  MSc CSE student, department of Computing Science
|  Umeå University, Sweden


