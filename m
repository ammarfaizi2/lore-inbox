Return-Path: <linux-kernel-owner+willy=40w.ods.org-S268097AbUGWWMc@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S268097AbUGWWMc (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 23 Jul 2004 18:12:32 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S268115AbUGWWMc
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 23 Jul 2004 18:12:32 -0400
Received: from lakermmtao11.cox.net ([68.230.240.28]:62931 "EHLO
	lakermmtao11.cox.net") by vger.kernel.org with ESMTP
	id S268097AbUGWWM3 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 23 Jul 2004 18:12:29 -0400
Mime-Version: 1.0 (Apple Message framework v618)
Content-Transfer-Encoding: 7bit
Message-Id: <62725104-DCF5-11D8-9612-000393ACC76E@mac.com>
Content-Type: text/plain; charset=US-ASCII; format=flowed
To: lkml List <linux-kernel@vger.kernel.org>, openafs-devel@openafs.org
From: Kyle Moffett <mrmacman_g4@mac.com>
Subject: Preliminary LKI (Linux Key Infrastructure)
Date: Fri, 23 Jul 2004 18:12:28 -0400
X-Mailer: Apple Mail (2.618)
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

Here is my starting work on a key architecture for the kernel.  This 
hasn't even
been test compiled yet, so there are still bugs galore, but if anyone 
wants to
have a look, here it is:

Linux Key Infrastructure: <http://www.tjhsst.edu/~kmoffett/lki.tar.bz2>

Implemented:
	- lki_key_t
		A single key implemented with a generic blob

	- lki_keytype_t
		A keytype, either auto-generated by calling from user-space or
		registered by a kernel module with lki_keytype_register

	- lki_key_create, lki_key_destroy
		Kernel functions to create and destroy keys.  They allocate from
		a number pool.

	- lki_key_hash_add, lki_key_hash_remove, lki_key_hash_search
		Kernel functions to look up keys by number.

In progress:
	- lki_key_handle_t
		This will be tied to a file-descriptor for access by user processes. 
If
		a process "revokes" a given file-descriptor that it has open, then 
that
		key file-descriptor and any that it created (children) through dup() 
or
		being passed to another process will be destroyed.
	- Permissions on lki_key_t
		I'm still learning about this posix_acl_t stuff.  It would be nice if
		somebody could write a patch to seperate the POSIX ACL functions
		from inodes so they could be applied to lki_key_t objects even when
		the keyfs(TODO) isn't mounted

Not yet started:
	- key-rings
		They'll be a special case of a key where the BLOB contains a list of
		lki_key_handle_t and some extra metadata.
	- keyfs
		I'm not ready to open _that_ can of worms yet
	- syscall "keyctl"
		Once I get the kernel-side interfaces finalized, I'll build keyctl to 
match.

Cheers,
Kyle Moffett

-----BEGIN GEEK CODE BLOCK-----
Version: 3.12
GCM/CS/IT/U d- s++: a17 C++++>$ UB/L/X/*++++(+)>$ P+++(++++)>$
L++++(+++) E W++(+) N+++(++) o? K? w--- O? M++ V? PS+() PE+(-) Y+
PGP+++ t+(+++) 5 X R? tv-(--) b++++(++) DI+ D+ G e->++++$ h!*()>++$ r  
!y?(-)
------END GEEK CODE BLOCK------

