Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S129040AbQJ3W0G>; Mon, 30 Oct 2000 17:26:06 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S129283AbQJ3WZ4>; Mon, 30 Oct 2000 17:25:56 -0500
Received: from cordelia.mail.kokuacom.net ([212.116.96.13]:12814 "HELO
	mail1.kokuacom.com") by vger.kernel.org with SMTP
	id <S129040AbQJ3WZo>; Mon, 30 Oct 2000 17:25:44 -0500
From: "Mike Jagdis" <mjagdis@kokuacom.com>
To: <dank@alumni.caltech.edu>, "Linus Torvalds" <torvalds@transmeta.com>,
        <linux-kernel@vger.kernel.org>
Subject: RE: Linux's implementation of poll() not scalable?
Date: Mon, 30 Oct 2000 22:22:28 -0000
Message-ID: <LPBBLLNMNCOEDEJFALHPAEGBDMAA.mjagdis@kokuacom.com>
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----=_NextPart_000_0000_01C042BF.E39A4960"
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)
Importance: Normal
In-Reply-To: <39F529CC.2538300@alumni.caltech.edu>
X-MimeOLE: Produced By Microsoft MimeOLE V4.72.3155.0
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C042BF.E39A4960
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit

Here's something I did last year and then put on ice, partly
through lack of time and partly because I thought I'd pick
it up for 2.5.

  All this talk of event queues misses one thing: we already
have an event queue mechanism. They're called wait queues.
The only problem is that the only on-event action possible
is to wake the process (assuming it was asleep in the first
place). This patch firstly extends the wait queue mechanism
to allow an arbitrary action to be performed. Then I rewrote
the select/poll implementation to use event queueing to avoid
rescanning descriptors that had not changed - and restructured
the loops to be rather more efficient. This approach doesn't
need any changes to driver poll routines, it doesn't need
backwards mapping struct files. It should be fairly easy to
implement a /dev/poll mechanism using this, although I haven't
yet.

  Yes, the change to wait queues has a slight cost, but it isn't
great and the main part of it only happens if you actually sleep.

  Performance graphs and the lmbench derived test programs I
used are at http://www.purplet.demon.co.uk/linux/select/ (bounce
in and out of the index page 'cos the next and prev buttons
aren't wired up :-) )

  Oh, and I updated this patch for 2.4.0-test9.

  Comments and opinions are, as always, welcome :-).

				Mike

------=_NextPart_000_0000_01C042BF.E39A4960
Content-Type: application/octet-stream;
	name="select.patch"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename="select.patch"

ZGlmZiAtdXJOIC14ICouW29hXSAteCAuY29uZmlnIC14IC52ZXJzaW9uIC14IC5kZXBlbmQgLXgg
LmhkZXBlbmQgLXggKi5mbGFncyAteCBhdXRvY29uZi5oIC14IG1vZHZlcnNpb25zLmggLXggdmVy
c2lvbi5oIC14IGFzbSAteCBtb2R1bGVzIC14IGNvbmZpZyAteCBzb3VuZG1vZGVtIGxpbnV4LTIu
NC4wLXRlc3Q5L2ZzL3NlbGVjdC5jIGxpbnV4LTIuNC4wLXRlc3Q5Ky9mcy9zZWxlY3QuYwotLS0g
bGludXgtMi40LjAtdGVzdDkvZnMvc2VsZWN0LmMJTW9uIEp1bCAyNCAwNjozOTo0NCAyMDAwCisr
KyBsaW51eC0yLjQuMC10ZXN0OSsvZnMvc2VsZWN0LmMJU3VuIE9jdCAyOSAyMDo1MzoxNSAyMDAw
CkBAIC05LDIzOCArOSwzMjUgQEAKICAqICAgICBmbGFnIHNldCBpbiBpdHMgcGVyc29uYWxpdHkg
d2UgZG8gKm5vdCogbW9kaWZ5IHRoZSBnaXZlbiB0aW1lb3V0CiAgKiAgICAgcGFyYW1ldGVyIHRv
IHJlZmxlY3QgdGltZSByZW1haW5pbmcuCiAgKgotICogIDI0IEphbnVhcnkgMjAwMAotICogICAg
IENoYW5nZWQgc3lzX3BvbGwoKS9kb19wb2xsKCkgdG8gdXNlIFBBR0VfU0laRSBjaHVuay1iYXNl
ZCBhbGxvY2F0aW9uIAotICogICAgIG9mIGZkcyB0byBvdmVyY29tZSBuZmRzIDwgMTYzOTAgZGVz
Y3JpcHRvcnMgbGltaXQgKFRpZ3JhbiBBaXZhemlhbikuCisgKiAgQXVndXN0IDE5OTkgLSBGZWJy
dWFyeSAyMDAwCisgKiAgICAgUmV3cml0dGVuIHRvIHVzZSBhIHdha2UgdXAgY2FsbGJhY2sgdG8g
cXVldWUgZXZlbnRzCisgKiAgICAgYWZ0ZXIgc2xlZXBpbmcsIHBsdXMgZ2VuZXJhbCBwZXJmb3Jt
YW5jZSBlbmhhbmNlbWVudHMuCisgKiAgICAgLS0gTWlrZSBKYWdkaXMgPGphZ2d5QHB1cnBsZXQu
ZGVtb24uY28udWs+CiAgKi8KIAogI2luY2x1ZGUgPGxpbnV4L21hbGxvYy5oPgogI2luY2x1ZGUg
PGxpbnV4L3NtcF9sb2NrLmg+CisjaW5jbHVkZSA8bGludXgvbGlzdC5oPgogI2luY2x1ZGUgPGxp
bnV4L3BvbGwuaD4KICNpbmNsdWRlIDxsaW51eC9maWxlLmg+CiAKICNpbmNsdWRlIDxhc20vdWFj
Y2Vzcy5oPgogCi0jZGVmaW5lIFJPVU5EX1VQKHgseSkgKCgoeCkrKHkpLTEpLyh5KSkKLSNkZWZp
bmUgREVGQVVMVF9QT0xMTUFTSyAoUE9MTElOIHwgUE9MTE9VVCB8IFBPTExSRE5PUk0gfCBQT0xM
V1JOT1JNKQorLyogQ2xhaW0gdGhlIGZpbGVfbG9jayBzZW1hcGhvcmUgYXJvdW5kIHRoZSB3aG9s
ZSBmZHNldCBzY2FuIGxvb3AKKyAqIHJhdGhlciB0aGFuIHdoZW4gbG9va2luZyBhdCBhbiBmZHNl
dCBiaXQgd2l0aGluIHRoZSBsb29wICh0aGlzCisgKiBpcyBkb25lIGJ5IGZnZXQoKS9mcHV0KCkp
LiBUaGlzIGhvbGRzIGEgcmVhZCBsb2NrIG9uIHRoZSBkZWNzcmlwdG9yCisgKiB0YWJsZSBmb3Ig
bG9uZ2VyIGJ1dCByZWR1Y2VzIG92ZXJoZWFkIGluIHRoZSBsb29wLgorICogICBOb3RlIHRoYXQg
cG9sbCBhY2Nlc3NlcyB1c2VyIHNwYWNlIHdoaWxlIGhvbGRpbmcgdGhlIGZpbGUgbG9jay4KKyAq
IFRoaXMgbWF5IGJlIGFuIGlzc3VlIGZvciB0aHJlYWRlZCBwcm9ncmFtcz8KKyAqLworI2RlZmlu
ZSBXSURFX0ZJTEVfTE9DSwogCi1zdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSB7Ci0Jc3RydWN0IGZp
bGUgKiBmaWxwOwotCXdhaXRfcXVldWVfdCB3YWl0OwotCXdhaXRfcXVldWVfaGVhZF90ICogd2Fp
dF9hZGRyZXNzOwotfTsKLQotc3RydWN0IHBvbGxfdGFibGVfcGFnZSB7Ci0Jc3RydWN0IHBvbGxf
dGFibGVfcGFnZSAqIG5leHQ7Ci0Jc3RydWN0IHBvbGxfdGFibGVfZW50cnkgKiBlbnRyeTsKLQlz
dHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSBlbnRyaWVzWzBdOwotfTsKIAotI2RlZmluZSBQT0xMX1RB
QkxFX0ZVTEwodGFibGUpIFwKLQkoKHVuc2lnbmVkIGxvbmcpKCh0YWJsZSktPmVudHJ5KzEpID4g
UEFHRV9TSVpFICsgKHVuc2lnbmVkIGxvbmcpKHRhYmxlKSkKKyNkZWZpbmUgUk9VTkRfVVAoeCx5
KSAoKCh4KSsoeSktMSkvKHkpKQorI2RlZmluZSBERUZBVUxUX1BPTExNQVNLIChQT0xMSU4gfCBQ
T0xMT1VUIHwgUE9MTFJETk9STSB8IFBPTExXUk5PUk0pCiAKLS8qCi0gKiBPaywgUGV0ZXIgbWFk
ZSBhIGNvbXBsaWNhdGVkLCBidXQgc3RyYWlnaHRmb3J3YXJkIG11bHRpcGxlX3dhaXQoKSBmdW5j
dGlvbi4KLSAqIEkgaGF2ZSByZXdyaXR0ZW4gdGhpcywgdGFraW5nIHNvbWUgc2hvcnRjdXRzOiBU
aGlzIGNvZGUgbWF5IG5vdCBiZSBlYXN5IHRvCi0gKiBmb2xsb3csIGJ1dCBpdCBzaG91bGQgYmUg
ZnJlZSBvZiByYWNlLWNvbmRpdGlvbnMsIGFuZCBpdCdzIHByYWN0aWNhbC4gSWYgeW91Ci0gKiB1
bmRlcnN0YW5kIHdoYXQgSSdtIGRvaW5nIGhlcmUsIHRoZW4geW91IHVuZGVyc3RhbmQgaG93IHRo
ZSBsaW51eAotICogc2xlZXAvd2FrZXVwIG1lY2hhbmlzbSB3b3Jrcy4KLSAqCi0gKiBUd28gdmVy
eSBzaW1wbGUgcHJvY2VkdXJlcywgcG9sbF93YWl0KCkgYW5kIHBvbGxfZnJlZXdhaXQoKSBtYWtl
IGFsbCB0aGUKLSAqIHdvcmsuICBwb2xsX3dhaXQoKSBpcyBhbiBpbmxpbmUtZnVuY3Rpb24gZGVm
aW5lZCBpbiA8bGludXgvcG9sbC5oPiwKLSAqIGFzIGFsbCBzZWxlY3QvcG9sbCBmdW5jdGlvbnMg
aGF2ZSB0byBjYWxsIGl0IHRvIGFkZCBhbiBlbnRyeSB0byB0aGUKLSAqIHBvbGwgdGFibGUuCi0g
Ki8KIAotdm9pZCBwb2xsX2ZyZWV3YWl0KHBvbGxfdGFibGUqIHB0KQordm9pZCBwb2xsX2ZyZWV3
YWl0KHBvbGxfdGFibGUgKiBwdGFiKQogewotCXN0cnVjdCBwb2xsX3RhYmxlX3BhZ2UgKiBwID0g
cHQtPnRhYmxlOwotCXdoaWxlIChwKSB7Ci0JCXN0cnVjdCBwb2xsX3RhYmxlX2VudHJ5ICogZW50
cnk7Ci0JCXN0cnVjdCBwb2xsX3RhYmxlX3BhZ2UgKm9sZDsKKwlzdHJ1Y3QgcG9sbF90YWJsZV9o
ZWFkICpwOwogCi0JCWVudHJ5ID0gcC0+ZW50cnk7Ci0JCWRvIHsKLQkJCWVudHJ5LS07Ci0JCQly
ZW1vdmVfd2FpdF9xdWV1ZShlbnRyeS0+d2FpdF9hZGRyZXNzLCZlbnRyeS0+d2FpdCk7CisJcCA9
IHB0YWItPmhlYWQ7CisJd2hpbGUgKHApIHsKKwkJc3RydWN0IHBvbGxfdGFibGVfZW50cnkgKmVu
dHJ5OworCQllbnRyeSA9IChzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqKShwICsgMSk7CisJCXdo
aWxlIChlbnRyeSA8IHAtPmVudHJ5KSB7CisJCQlyZW1vdmVfd2FpdF9xdWV1ZShlbnRyeS0+d2Fp
dF9hZGRyZXNzLCAmZW50cnktPndhaXQpOwogCQkJZnB1dChlbnRyeS0+ZmlscCk7Ci0JCX0gd2hp
bGUgKGVudHJ5ID4gcC0+ZW50cmllcyk7Ci0JCW9sZCA9IHA7CisJCQllbnRyeSsrOworCQl9CisJ
CXAgPSBwLT5uZXh0OworCX0KKwlwID0gcHRhYi0+aGVhZDsKKwl3aGlsZSAocCkgeworCQlzdHJ1
Y3QgcG9sbF90YWJsZV9oZWFkICpvbGQgPSBwOwogCQlwID0gcC0+bmV4dDsKIAkJZnJlZV9wYWdl
KCh1bnNpZ25lZCBsb25nKSBvbGQpOwogCX0KIH0KIAotdm9pZCBfX3BvbGx3YWl0KHN0cnVjdCBm
aWxlICogZmlscCwgd2FpdF9xdWV1ZV9oZWFkX3QgKiB3YWl0X2FkZHJlc3MsIHBvbGxfdGFibGUg
KnApCitzdGF0aWMgaW50CitfX3BvbGx3YWtlKHdhaXRfcXVldWVfdCAqd3EsIHVuc2lnbmVkIGlu
dCBtb2RlLCBjb25zdCBpbnQgc3luYykKIHsKLQlzdHJ1Y3QgcG9sbF90YWJsZV9wYWdlICp0YWJs
ZSA9IHAtPnRhYmxlOwotCi0JaWYgKCF0YWJsZSB8fCBQT0xMX1RBQkxFX0ZVTEwodGFibGUpKSB7
Ci0JCXN0cnVjdCBwb2xsX3RhYmxlX3BhZ2UgKm5ld190YWJsZTsKLQotCQluZXdfdGFibGUgPSAo
c3RydWN0IHBvbGxfdGFibGVfcGFnZSAqKSBfX2dldF9mcmVlX3BhZ2UoR0ZQX0tFUk5FTCk7Ci0J
CWlmICghbmV3X3RhYmxlKSB7Ci0JCQlwLT5lcnJvciA9IC1FTk9NRU07Ci0JCQlfX3NldF9jdXJy
ZW50X3N0YXRlKFRBU0tfUlVOTklORyk7Ci0JCQlyZXR1cm47CisJc3RydWN0IHBvbGxfdGFibGVf
ZW50cnkgKnA7CisJc3RydWN0IHBvbGxfdGFibGVfaGVhZCAqaGVhZDsKKwl1bnNpZ25lZCBsb25n
IGZsYWdzOworCisJd3EtPm9ud2FrZSA9IE5VTEw7CisJcCA9ICh2b2lkICopd3EgLSBvZmZzZXRv
ZihzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSwgd2FpdCk7CisJaGVhZCA9IChzdHJ1Y3QgcG9sbF90
YWJsZV9oZWFkICopKCh1bnNpZ25lZCBsb25nKXAgJiBQQUdFX01BU0spOworCisJc3Bpbl9sb2Nr
X2lycXNhdmUoJmhlYWQtPnBvbGxfdGFibGUtPndva2VuX2xvY2ssIGZsYWdzKTsKKwlwLT53b2tl
bl9saXN0ID0gaGVhZC0+cG9sbF90YWJsZS0+d29rZW5fbGlzdDsKKwloZWFkLT5wb2xsX3RhYmxl
LT53b2tlbl9saXN0ID0gcDsKKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZoZWFkLT5wb2xsX3Rh
YmxlLT53b2tlbl9sb2NrLCBmbGFncyk7CisKKwlpZiAod3EtPnRhc2stPnN0YXRlICYgKG1vZGUg
JiB+VEFTS19FWENMVVNJVkUpKSB7CisJCWlmICghc3luYykgeworCQkJd2FrZV91cF9wcm9jZXNz
KHdxLT50YXNrKTsKKwkJCWdvdG8gb3V0OwogCQl9Ci0JCW5ld190YWJsZS0+ZW50cnkgPSBuZXdf
dGFibGUtPmVudHJpZXM7Ci0JCW5ld190YWJsZS0+bmV4dCA9IHRhYmxlOwotCQlwLT50YWJsZSA9
IG5ld190YWJsZTsKLQkJdGFibGUgPSBuZXdfdGFibGU7CisJCXdha2VfdXBfcHJvY2Vzc19zeW5j
aHJvbm91cyh3cS0+dGFzayk7CiAJfQorb3V0OgorCXJldHVybiAwOworfQogCi0JLyogQWRkIGEg
bmV3IGVudHJ5ICovCi0JewotCQlzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqIGVudHJ5ID0gdGFi
bGUtPmVudHJ5OwotCQl0YWJsZS0+ZW50cnkgPSBlbnRyeSsxOwordm9pZCBfX3BvbGx3YWl0KHN0
cnVjdCBmaWxlICogZmlscCwgd2FpdF9xdWV1ZV9oZWFkX3QgKiB3YWl0X2FkZHJlc3MsIHBvbGxf
dGFibGUgKnB0YWIpCit7CisJc3RydWN0IHBvbGxfdGFibGVfaGVhZCAqIHRtcCwgKiBwID0gcHRh
Yi0+bGFzdDsKKwlzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqbGFzdF9lbnRyeTsKKworCWxhc3Rf
ZW50cnkgPSAodm9pZCAqKXAgKyBQQUdFX1NJWkUgLSBzaXplb2Yoc3RydWN0IHBvbGxfdGFibGVf
ZW50cnkpOworCWlmIChwLT5lbnRyeSA8PSBsYXN0X2VudHJ5KSB7CisJCXN0cnVjdCBwb2xsX3Rh
YmxlX2VudHJ5ICplbnRyeTsKK29rX3RhYmxlOgorCQllbnRyeSA9IHAtPmVudHJ5Kys7CiAJIAln
ZXRfZmlsZShmaWxwKTsKIAkgCWVudHJ5LT5maWxwID0gZmlscDsKKwkJZW50cnktPm4gPSBwdGFi
LT5uOworCQlpbml0X3dhaXRxdWV1ZV9lbnRyeV9vbndha2UoJmVudHJ5LT53YWl0LCBjdXJyZW50
LCBfX3BvbGx3YWtlKTsKIAkJZW50cnktPndhaXRfYWRkcmVzcyA9IHdhaXRfYWRkcmVzczsKLQkJ
aW5pdF93YWl0cXVldWVfZW50cnkoJmVudHJ5LT53YWl0LCBjdXJyZW50KTsKLQkJYWRkX3dhaXRf
cXVldWUod2FpdF9hZGRyZXNzLCZlbnRyeS0+d2FpdCk7CisJCWFkZF93YWl0X3F1ZXVlKHdhaXRf
YWRkcmVzcywgJmVudHJ5LT53YWl0KTsKKwkJcmV0dXJuOwogCX0KLX0KIAotI2RlZmluZSBfX0lO
KGZkcywgbikJCShmZHMtPmluICsgbikKLSNkZWZpbmUgX19PVVQoZmRzLCBuKQkJKGZkcy0+b3V0
ICsgbikKLSNkZWZpbmUgX19FWChmZHMsIG4pCQkoZmRzLT5leCArIG4pCi0jZGVmaW5lIF9fUkVT
X0lOKGZkcywgbikJKGZkcy0+cmVzX2luICsgbikKLSNkZWZpbmUgX19SRVNfT1VUKGZkcywgbikJ
KGZkcy0+cmVzX291dCArIG4pCi0jZGVmaW5lIF9fUkVTX0VYKGZkcywgbikJKGZkcy0+cmVzX2V4
ICsgbikKLQotI2RlZmluZSBCSVRTKGZkcywgbikJCSgqX19JTihmZHMsIG4pfCpfX09VVChmZHMs
IG4pfCpfX0VYKGZkcywgbikpCi0KLXN0YXRpYyBpbnQgbWF4X3NlbGVjdF9mZCh1bnNpZ25lZCBs
b25nIG4sIGZkX3NldF9iaXRzICpmZHMpCi17Ci0JdW5zaWduZWQgbG9uZyAqb3Blbl9mZHM7Ci0J
dW5zaWduZWQgbG9uZyBzZXQ7Ci0JaW50IG1heDsKLQotCS8qIGhhbmRsZSBsYXN0IGluLWNvbXBs
ZXRlIGxvbmctd29yZCBmaXJzdCAqLwotCXNldCA9IH4ofjBVTCA8PCAobiAmIChfX05GREJJVFMt
MSkpKTsKLQluIC89IF9fTkZEQklUUzsKLQlvcGVuX2ZkcyA9IGN1cnJlbnQtPmZpbGVzLT5vcGVu
X2Zkcy0+ZmRzX2JpdHMrbjsKLQltYXggPSAwOwotCWlmIChzZXQpIHsKLQkJc2V0ICY9IEJJVFMo
ZmRzLCBuKTsKLQkJaWYgKHNldCkgewotCQkJaWYgKCEoc2V0ICYgfipvcGVuX2ZkcykpCi0JCQkJ
Z290byBnZXRfbWF4OwotCQkJcmV0dXJuIC1FQkFERjsKLQkJfQotCX0KLQl3aGlsZSAobikgewot
CQlvcGVuX2Zkcy0tOwotCQluLS07Ci0JCXNldCA9IEJJVFMoZmRzLCBuKTsKLQkJaWYgKCFzZXQp
Ci0JCQljb250aW51ZTsKLQkJaWYgKHNldCAmIH4qb3Blbl9mZHMpCi0JCQlyZXR1cm4gLUVCQURG
OwotCQlpZiAobWF4KQotCQkJY29udGludWU7Ci1nZXRfbWF4OgotCQlkbyB7Ci0JCQltYXgrKzsK
LQkJCXNldCA+Pj0gMTsKLQkJfSB3aGlsZSAoc2V0KTsKLQkJbWF4ICs9IG4gKiBfX05GREJJVFM7
CisJdG1wID0gKHZvaWQgKikgX19nZXRfZnJlZV9wYWdlKEdGUF9LRVJORUwpOworCWlmICh0bXAp
IHsKKwkJdG1wLT5lbnRyeSA9IChzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqKSh0bXAgKyAxKTsK
KwkJdG1wLT5uZXh0ID0gTlVMTDsKKwkJdG1wLT5wb2xsX3RhYmxlID0gcHRhYjsKKwkJcC0+bmV4
dCA9IHRtcDsKKwkJcHRhYi0+bGFzdCA9IHAgPSB0bXA7CisJCWdvdG8gb2tfdGFibGU7CiAJfQot
Ci0JcmV0dXJuIG1heDsKKwlwdGFiLT5lcnJvciA9IC1FTk9NRU07CiB9CiAKKwogI2RlZmluZSBC
SVQoaSkJCSgxVUwgPDwgKChpKSYoX19ORkRCSVRTLTEpKSkKLSNkZWZpbmUgTUVNKGksbSkJKCht
KSsodW5zaWduZWQpKGkpL19fTkZEQklUUykKLSNkZWZpbmUgSVNTRVQoaSxtKQkoKChpKSYqKG0p
KSAhPSAwKQotI2RlZmluZSBTRVQoaSxtKQkoKihtKSB8PSAoaSkpCiAKICNkZWZpbmUgUE9MTElO
X1NFVCAoUE9MTFJETk9STSB8IFBPTExSREJBTkQgfCBQT0xMSU4gfCBQT0xMSFVQIHwgUE9MTEVS
UikKICNkZWZpbmUgUE9MTE9VVF9TRVQgKFBPTExXUkJBTkQgfCBQT0xMV1JOT1JNIHwgUE9MTE9V
VCB8IFBPTExFUlIpCiAjZGVmaW5lIFBPTExFWF9TRVQgKFBPTExQUkkpCiAKLWludCBkb19zZWxl
Y3QoaW50IG4sIGZkX3NldF9iaXRzICpmZHMsIGxvbmcgKnRpbWVvdXQpCitpbnQgZG9fc2VsZWN0
KGludCBuLCB1bnNpZ25lZCBsb25nICpiaXRzLCBjb25zdCBpbnQgc2l6ZSwgbG9uZyAqdGltZW91
dCkKIHsKLQlwb2xsX3RhYmxlIHRhYmxlLCAqd2FpdDsKLQlpbnQgcmV0dmFsLCBpLCBvZmY7Ci0J
bG9uZyBfX3RpbWVvdXQgPSAqdGltZW91dDsKLQotIAlyZWFkX2xvY2soJmN1cnJlbnQtPmZpbGVz
LT5maWxlX2xvY2spOwotCXJldHZhbCA9IG1heF9zZWxlY3RfZmQobiwgZmRzKTsKLQlyZWFkX3Vu
bG9jaygmY3VycmVudC0+ZmlsZXMtPmZpbGVfbG9jayk7Ci0KLQlpZiAocmV0dmFsIDwgMCkKLQkJ
cmV0dXJuIHJldHZhbDsKLQluID0gcmV0dmFsOwotCi0JcG9sbF9pbml0d2FpdCgmdGFibGUpOwot
CXdhaXQgPSAmdGFibGU7Ci0JaWYgKCFfX3RpbWVvdXQpCi0JCXdhaXQgPSBOVUxMOwotCXJldHZh
bCA9IDA7Ci0JZm9yICg7OykgewotCQlzZXRfY3VycmVudF9zdGF0ZShUQVNLX0lOVEVSUlVQVElC
TEUpOwotCQlmb3IgKGkgPSAwIDsgaSA8IG47IGkrKykgewotCQkJdW5zaWduZWQgbG9uZyBiaXQg
PSBCSVQoaSk7Ci0JCQl1bnNpZ25lZCBsb25nIG1hc2s7Ci0JCQlzdHJ1Y3QgZmlsZSAqZmlsZTsK
LQotCQkJb2ZmID0gaSAvIF9fTkZEQklUUzsKLQkJCWlmICghKGJpdCAmIEJJVFMoZmRzLCBvZmYp
KSkKLQkJCQljb250aW51ZTsKLQkJCWZpbGUgPSBmZ2V0KGkpOwotCQkJbWFzayA9IFBPTExOVkFM
OwotCQkJaWYgKGZpbGUpIHsKKwlpbnQgcmV0dmFsOworCXBvbGxfdGFibGUgKndhaXQsIHdhaXRf
dGFibGU7CisJbG9uZyBfX3RpbWVvdXQ7CisJdW5zaWduZWQgbG9uZyBiaXQ7CisJdW5zaWduZWQg
bG9uZyBmZHMsICpmZGw7CisJdW5zaWduZWQgbG9uZyBtYXNrOworCXN0cnVjdCBmaWxlICpmaWxl
OworCisJd2FpdCA9IE5VTEw7CisJX190aW1lb3V0ID0gKnRpbWVvdXQ7CisJaWYgKF9fdGltZW91
dCkgeworCQl3YWl0X3RhYmxlLmhlYWQgPSAodm9pZCAqKSBfX2dldF9mcmVlX3BhZ2UoR0ZQX0tF
Uk5FTCk7CisJCWlmICghd2FpdF90YWJsZS5oZWFkKQorCQkJcmV0dXJuIC1FTk9NRU07CisKKwkJ
cG9sbF9pbml0d2FpdCgmd2FpdF90YWJsZSk7CisJCXdhaXQgPSAmd2FpdF90YWJsZTsKKwl9CisK
Kwl3YWl0X3RhYmxlLmVycm9yID0gcmV0dmFsID0gMDsKKworCWlmICghbikKKwkJZ290byBub19z
ZXR1cDsKKworCWZkbCA9IGJpdHMgKyAobiAtIDEpIC8gX19ORkRCSVRTOworCisJZmRzID0gKCpm
ZGwgfCBmZGxbc2l6ZV0gfCBmZGxbMipzaXplXSk7CisKKyNpZmRlZiBXSURFX0ZJTEVfTE9DSwor
CXJlYWRfbG9jaygmY3VycmVudC0+ZmlsZXMtPmZpbGVfbG9jayk7CisjZW5kaWYKKwlpZiAoIWZk
cykKKwkJZ290byBuZXh0X2xvbmc7CisKKwltYXNrID0gKG4gJiAoX19ORkRCSVRTLTEpKTsKKwlp
ZiAobWFzaykgeworCQlmZHMgJj0gfih+MFVMIDw8IG1hc2spOworCQlpZiAoIWZkcykKKwkJCWdv
dG8gbmV4dF9sb25nOworCX0KKworCWRvIHsKKwkJLyogQXQgdGhpcyBwb2ludCB3ZSBrbm93IHNv
bWUgYml0IGlzIHNldCBpbiBmZHMuICovCisJCXdhaXRfdGFibGUubiA9IChmZGwgLSBiaXRzKSAq
IDgqc2l6ZW9mKHVuc2lnbmVkIGxvbmcpOworCQliaXQgPSAxOworCQlkbyB7CisJCQkvKiBJZiBh
IGxvbmcgaGFzIHNldCBiaXRzIGRvIHdlIGV4cGVjdCBtb3N0CisJCQkgKiBvZiB0aGVtIHRvIGJl
IHNldD8KKwkJCSAqLworCQkJaWYgKChmZHMgJiBiaXQpKSB7CisJCQkJZmRzIF49IGJpdDsKKyNp
ZmRlZiBXSURFX0ZJTEVfTE9DSworCQkJCWZpbGUgPSBmY2hlY2sod2FpdF90YWJsZS5uKTsKKyNl
bHNlCisJCQkJZmlsZSA9IGZnZXQod2FpdF90YWJsZS5uKTsKKyNlbmRpZgorCQkJCWlmICghZmls
ZSkKKwkJCQkJZ290byBvdXRfYmFkZjsKIAkJCQltYXNrID0gREVGQVVMVF9QT0xMTUFTSzsKIAkJ
CQlpZiAoZmlsZS0+Zl9vcCAmJiBmaWxlLT5mX29wLT5wb2xsKQogCQkJCQltYXNrID0gZmlsZS0+
Zl9vcC0+cG9sbChmaWxlLCB3YWl0KTsKKyNpZm5kZWYgV0lERV9GSUxFX0xPQ0sKIAkJCQlmcHV0
KGZpbGUpOworI2VuZGlmCisJCQkJLyogQnJhbmNoIHByZWRpY3Rpb24gc2F5cyB0aGF0IGZvcndh
cmQKKwkJCQkgKiBjb25kaXRpb25hbCBicmFuY2hlcyBhcmUgbm90IHRha2VuLiBTby4uLgorCQkJ
CSAqLworCQkJCS8qIE5vcm1hbGx5IGhhdmUgdG8gd2FpdCBmb3IgaW5wdXQgKi8KKwkJCQlpZiAo
IShtYXNrICYgUE9MTElOX1NFVCkpCisJCQkJCWdvdG8gbm9faW5fY2hlY2s7CisJCQkJaWYgKCgq
ZmRsICYgYml0KSkgeworCQkJCQlmZGxbMypzaXplXSB8PSBiaXQ7CisJCQkJCXJldHZhbCsrOwor
CQkJCQl3YWl0ID0gTlVMTDsKKwkJCQl9Citub19pbl9jaGVjazoKKwkJCQkvKiBOb3JtYWxseSBj
YW4gb3V0cHV0ICovCisJCQkJaWYgKCEoZmRsW3NpemVdICYgYml0KSkKKwkJCQkJZ290byBub19v
dXRfY2hlY2s7CisJCQkJaWYgKChtYXNrICYgUE9MTE9VVF9TRVQpKSB7CisJCQkJCWZkbFs0KnNp
emVdIHw9IGJpdDsKKwkJCQkJcmV0dmFsKys7CisJCQkJCXdhaXQgPSBOVUxMOworCQkJCX0KK25v
X291dF9jaGVjazoKKwkJCQkvKiBOb3JtYWxseSBubyBleGNlcHRpb24gKi8KKwkJCQlpZiAoISht
YXNrICYgUE9MTEVYX1NFVCkpCisJCQkJCWdvdG8gbm9fZXhfY2hlY2s7CisJCQkJaWYgKChmZGxb
MipzaXplXSAmIGJpdCkpIHsKKwkJCQkJZmRsWzUqc2l6ZV0gfD0gYml0OworCQkJCQlyZXR2YWwr
KzsKKwkJCQkJd2FpdCA9IE5VTEw7CisJCQkJfQorbm9fZXhfY2hlY2s6CiAJCQl9Ci0JCQlpZiAo
KG1hc2sgJiBQT0xMSU5fU0VUKSAmJiBJU1NFVChiaXQsIF9fSU4oZmRzLG9mZikpKSB7Ci0JCQkJ
U0VUKGJpdCwgX19SRVNfSU4oZmRzLG9mZikpOworCQkJYml0ICs9IGJpdDsKKwkJCXdhaXRfdGFi
bGUubisrOworCQl9IHdoaWxlIChmZHMpOworCituZXh0X2xvbmc6CisJCS8qIExvbmcgcnVucyBv
ZiB6ZXJvIGJpdHMgdGVuZCB0byBiZSBjb21tb24sIGVzcGVjaWFsbHkKKwkJICogYXQgdGhlIGVu
ZCBvZiBvdmVyIGxhcmdlIHNldHMgc28gd2UgdXNlIGEgdGlnaHQgbG9vcAorCQkgKiB0byBza2lw
IHRoZW0uCisJCSAqIE4uQi4gV2UgYWxsb2NhdGVkIGFuIGV4dHJhLCBub24temVybywgbG9uZyBp
biBmcm9udAorCQkgKiBvZiBiaXRzIGluIHN5c19zZWxlY3Qgc3BlY2lmaWNhbGx5IHNvIHdlIGNh
biBhY2Nlc3MKKwkJICogYmVsb3cgYml0cyBhbmQgYXZvaWQgYW4gZXh0cmEgdGVzdCBhbmQgYnJh
bmNoLgorCQkgKi8KKwkJZG8geworCQkJZmRsLS07CisJCQlmZHMgPSAqZmRsIHwgZmRsW3NpemVd
IHwgZmRsWzIqc2l6ZV07CisJCX0gd2hpbGUgKCFmZHMpOworCX0gd2hpbGUgKGZkbCA+PSBiaXRz
KTsKKworI2lmZGVmIFdJREVfRklMRV9MT0NLCisJcmVhZF91bmxvY2soJmN1cnJlbnQtPmZpbGVz
LT5maWxlX2xvY2spOworI2VuZGlmCisKKwlpZiAoIXJldHZhbCkKKwkJcmV0dmFsID0gd2FpdF90
YWJsZS5lcnJvcjsKKworbm9fc2V0dXA6CisJd2hpbGUgKCFyZXR2YWwgJiYgX190aW1lb3V0ICYm
ICFzaWduYWxfcGVuZGluZyhjdXJyZW50KSkgeworCQl1bnNpZ25lZCBsb25nIGZsYWdzOworCQlz
dHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqaXRlbSwgKm5leHQ7CisKKwkJc2V0X2N1cnJlbnRfc3Rh
dGUoVEFTS19JTlRFUlJVUFRJQkxFKTsKKwkJaWYgKHdhaXRfdGFibGUud29rZW5fbGlzdCA9PSBO
VUxMKQorCQkJX190aW1lb3V0ID0gc2NoZWR1bGVfdGltZW91dChfX3RpbWVvdXQpOworCQlzZXRf
Y3VycmVudF9zdGF0ZShUQVNLX1JVTk5JTkcpOworCisJCS8qIExpZnQgdGhlIHF1ZXVlZCBldmVu
dHMgYW5kIHJlc2V0IHRoZSBxdWV1ZSByZWFkeQorCQkgKiBmb3IgYW55dGhpbmcgdGhhdCBoYXBw
ZW5zIHdoaWxlIHdlICJ0aGluayIuCisJCSAqLworCQlzcGluX2xvY2tfaXJxc2F2ZSgmd2FpdF90
YWJsZS53b2tlbl9sb2NrLCBmbGFncyk7CisJCWl0ZW0gPSB3YWl0X3RhYmxlLndva2VuX2xpc3Q7
CisJCXdhaXRfdGFibGUud29rZW5fbGlzdCA9IE5VTEw7CisJCXNwaW5fdW5sb2NrX2lycXJlc3Rv
cmUoJndhaXRfdGFibGUud29rZW5fbG9jaywgZmxhZ3MpOworCisJCWZvciAoOyBpdGVtOyBpdGVt
PW5leHQpIHsKKwkJCXN0cnVjdCBwb2xsX3RhYmxlX2VudHJ5ICogcCA9IGl0ZW07CisKKwkJCS8q
IFJlc2V0IHRoZSB3YWl0X3F1ZXVlJ3MgZXZlbnQgcG9pbnRlciBiZWZvcmUKKwkJCSAqIGNoZWNr
aW5nIGluIGNhc2UgaXQgaXMgdHJpZ2dlcmVkIGFnYWluLgorCQkJICovCisJCQluZXh0ID0gaXRl
bS0+d29rZW5fbGlzdDsKKwkJCXNldF93YWl0cXVldWVfZW50cnlfb253YWtlKCZwLT53YWl0LCBf
X3BvbGx3YWtlKTsKKworCQkJZmlsZSA9IHAtPmZpbHA7CisjaWYgMAorCQkJLyogVGhpcyBoYXMg
dG8gYmUgdHJ1ZSBvciB3ZSB3b3VsZCBuZXZlciBoYXZlCisJCQkgKiBkb25lIGEgd2FpdCBvbiB0
aGUgZmlsZSEKKwkJCSAqLworCQkJaWYgKGZpbGUtPmZfb3AgJiYgZmlsZS0+Zl9vcC0+cG9sbCkK
KyNlbmRpZgorCQkJCW1hc2sgPSBmaWxlLT5mX29wLT5wb2xsKGZpbGUsIE5VTEwpOworCisJCQlm
ZGwgPSBiaXRzICsgKHAtPm4gLyBfX05GREJJVFMpOworCQkJYml0ID0gQklUKHAtPm4pOworCisJ
CQkvKiBCcmFuY2ggcHJlZGljdGlvbiBzYXlzIHRoYXQgZm9yd2FyZAorCQkJICogY29uZGl0aW9u
YWwgYnJhbmNoZXMgYXJlIG5vdCB0YWtlbi4KKwkJCSAqIFdha2UgdXBzIGFyZSBkdW1iLiBXZSBn
ZXQgd29rZW4gdXAgZXZlcnkgdGltZQorCQkJICogbW9yZSBzcGFjZSBiZWNvbWVzIGF2YWlsYWJs
ZSBldmVuIGlmIHdlIGFyZQorCQkJICogbm90IGludGVyZXN0ZWQuCisJCQkgKi8KKwkJCWlmICgh
KG1hc2sgJiBQT0xMSU5fU0VUKSkKKwkJCQlnb3RvIGV2X25vX2luX2NoZWNrOworCQkJaWYgKCgq
ZmRsICYgYml0KSkgeworCQkJCWZkbFszKnNpemVdIHw9IGJpdDsKIAkJCQlyZXR2YWwrKzsKLQkJ
CQl3YWl0ID0gTlVMTDsKIAkJCX0KLQkJCWlmICgobWFzayAmIFBPTExPVVRfU0VUKSAmJiBJU1NF
VChiaXQsIF9fT1VUKGZkcyxvZmYpKSkgewotCQkJCVNFVChiaXQsIF9fUkVTX09VVChmZHMsb2Zm
KSk7Citldl9ub19pbl9jaGVjazoKKwkJCWlmICghKGZkbFtzaXplXSAmIGJpdCkpCisJCQkJZ290
byBldl9ub19vdXRfY2hlY2s7CisJCQlpZiAoKG1hc2sgJiBQT0xMT1VUX1NFVCkpIHsKKwkJCQlm
ZGxbNCpzaXplXSB8PSBiaXQ7CiAJCQkJcmV0dmFsKys7Ci0JCQkJd2FpdCA9IE5VTEw7CiAJCQl9
Ci0JCQlpZiAoKG1hc2sgJiBQT0xMRVhfU0VUKSAmJiBJU1NFVChiaXQsIF9fRVgoZmRzLG9mZikp
KSB7Ci0JCQkJU0VUKGJpdCwgX19SRVNfRVgoZmRzLG9mZikpOworZXZfbm9fb3V0X2NoZWNrOgor
CQkJLyogTm9ybWFsbHkgbm8gZXhjZXB0aW9uICovCisJCQlpZiAoIShtYXNrICYgUE9MTEVYX1NF
VCkpCisJCQkJZ290byBldl9ub19leF9jaGVjazsKKwkJCWlmICgoZmRsWzIqc2l6ZV0gJiBiaXQp
KSB7CisJCQkJZmRsWzUqc2l6ZV0gfD0gYml0OwogCQkJCXJldHZhbCsrOwotCQkJCXdhaXQgPSBO
VUxMOwogCQkJfQorZXZfbm9fZXhfY2hlY2s6CiAJCX0KLQkJd2FpdCA9IE5VTEw7Ci0JCWlmIChy
ZXR2YWwgfHwgIV9fdGltZW91dCB8fCBzaWduYWxfcGVuZGluZyhjdXJyZW50KSkKLQkJCWJyZWFr
OwotCQlpZih0YWJsZS5lcnJvcikgewotCQkJcmV0dmFsID0gdGFibGUuZXJyb3I7Ci0JCQlicmVh
azsKLQkJfQotCQlfX3RpbWVvdXQgPSBzY2hlZHVsZV90aW1lb3V0KF9fdGltZW91dCk7CiAJfQot
CWN1cnJlbnQtPnN0YXRlID0gVEFTS19SVU5OSU5HOwotCi0JcG9sbF9mcmVld2FpdCgmdGFibGUp
OwotCi0JLyoKLQkgKiBVcC10by1kYXRlIHRoZSBjYWxsZXIgdGltZW91dC4KLQkgKi8KK291dDoK
KwlpZiAoKnRpbWVvdXQpCisJCXBvbGxfZnJlZXdhaXQoJndhaXRfdGFibGUpOwogCSp0aW1lb3V0
ID0gX190aW1lb3V0OwogCXJldHVybiByZXR2YWw7Ci19Ci0KLXN0YXRpYyB2b2lkICpzZWxlY3Rf
Yml0c19hbGxvYyhpbnQgc2l6ZSkKLXsKLQlyZXR1cm4ga21hbGxvYyg2ICogc2l6ZSwgR0ZQX0tF
Uk5FTCk7Ci19CiAKLXN0YXRpYyB2b2lkIHNlbGVjdF9iaXRzX2ZyZWUodm9pZCAqYml0cywgaW50
IHNpemUpCi17Ci0Ja2ZyZWUoYml0cyk7CitvdXRfYmFkZjoKKyNpZmRlZiBXSURFX0ZJTEVfTE9D
SworCXJlYWRfdW5sb2NrKCZjdXJyZW50LT5maWxlcy0+ZmlsZV9sb2NrKTsKKyNlbmRpZgorCXJl
dHZhbCA9IC1FQkFERjsKKwlnb3RvIG91dDsKIH0KIAogLyoKQEAgLTI1NCwxMyArMzQxLDIyIEBA
CiAjZGVmaW5lIE1BWF9TRUxFQ1RfU0VDT05EUyBcCiAJKCh1bnNpZ25lZCBsb25nKSAoTUFYX1ND
SEVEVUxFX1RJTUVPVVQgLyBIWiktMSkKIAorLyogSG93IGJpZyBhIHNldCB3ZSBjYW4gdXNlIHN0
YWNrIGZvciByYXRoZXIgdGhhbiBnb2luZyBvdXQgdG8ga21hbGxvYy4KKyAqIDUxMiBmZHMgPSAz
ODggYnl0ZXMsIDEwMjQgZmRzID0gNzcyIGJ5dGVzLCAyMDQ4IGZkcyA9IDE1NDAgYnl0ZXMsCisg
KiA0MDk2IGZkcyA9IDMwNjggYnl0ZXMKKyAqIFJlbWVtYmVyOiB0aGUgZnV0dXJlIGNhbGwgZGVw
dGggaXMgZmFpcmx5IHNoYWxsb3cgYnV0IHdlIG5lZWQKKyAqIHRvIGxlYXZlIHNwYWNlIGZvciBp
bnRlcnJ1cHRzIQorICovCisjZGVmaW5lIE1BWF9MT0NfRkRTCTEwMjQKKyNkZWZpbmUgTUFYX0xP
Q19MT05HUwkoMSArIDYgKiBGRFNfTE9OR1MoTUFYX0xPQ19GRFMpKQorCiBhc21saW5rYWdlIGxv
bmcKIHN5c19zZWxlY3QoaW50IG4sIGZkX3NldCAqaW5wLCBmZF9zZXQgKm91dHAsIGZkX3NldCAq
ZXhwLCBzdHJ1Y3QgdGltZXZhbCAqdHZwKQogewotCWZkX3NldF9iaXRzIGZkczsKLQljaGFyICpi
aXRzOworCXVuc2lnbmVkIGxvbmcgKmRhdGEsICpiaXRzOwogCWxvbmcgdGltZW91dDsKIAlpbnQg
cmV0LCBzaXplOworCXVuc2lnbmVkIGxvbmcgbGRhdGFbTUFYX0xPQ19MT05HU107CiAKIAl0aW1l
b3V0ID0gTUFYX1NDSEVEVUxFX1RJTUVPVVQ7CiAJaWYgKHR2cCkgewpAQCAtMjkxLDI5ICszODcs
MjcgQEAKIAkvKgogCSAqIFdlIG5lZWQgNiBiaXRtYXBzIChpbi9vdXQvZXggZm9yIGJvdGggaW5j
b21pbmcgYW5kIG91dGdvaW5nKSwKIAkgKiBzaW5jZSB3ZSB1c2VkIGZkc2V0IHdlIG5lZWQgdG8g
YWxsb2NhdGUgbWVtb3J5IGluIHVuaXRzIG9mCi0JICogbG9uZy13b3Jkcy4gCisJICogbG9uZy13
b3Jkcy4gV2UgYWRkIGFuIGV4dHJhLCBub24temVybywgbG9uZyBhdCB0aGUgYmVnaW5uaW5nCisJ
ICogYmVjYXVzZSB0aGF0IGxldHMgdXMgYXZvaWQgYW4gZXh0cmEgdGVzdC1hbmQtYnJhbmNoIHdp
dGhpbgorCSAqIHRoZSBsb29wIGluIGRvX3NlbGVjdC4KIAkgKi8KIAlyZXQgPSAtRU5PTUVNOwot
CXNpemUgPSBGRFNfQllURVMobik7Ci0JYml0cyA9IHNlbGVjdF9iaXRzX2FsbG9jKHNpemUpOwot
CWlmICghYml0cykKLQkJZ290byBvdXRfbm9mZHM7Ci0JZmRzLmluICAgICAgPSAodW5zaWduZWQg
bG9uZyAqKSAgYml0czsKLQlmZHMub3V0ICAgICA9ICh1bnNpZ25lZCBsb25nICopIChiaXRzICsg
ICBzaXplKTsKLQlmZHMuZXggICAgICA9ICh1bnNpZ25lZCBsb25nICopIChiaXRzICsgMipzaXpl
KTsKLQlmZHMucmVzX2luICA9ICh1bnNpZ25lZCBsb25nICopIChiaXRzICsgMypzaXplKTsKLQlm
ZHMucmVzX291dCA9ICh1bnNpZ25lZCBsb25nICopIChiaXRzICsgNCpzaXplKTsKLQlmZHMucmVz
X2V4ICA9ICh1bnNpZ25lZCBsb25nICopIChiaXRzICsgNSpzaXplKTsKLQotCWlmICgocmV0ID0g
Z2V0X2ZkX3NldChuLCBpbnAsIGZkcy5pbikpIHx8Ci0JICAgIChyZXQgPSBnZXRfZmRfc2V0KG4s
IG91dHAsIGZkcy5vdXQpKSB8fAotCSAgICAocmV0ID0gZ2V0X2ZkX3NldChuLCBleHAsIGZkcy5l
eCkpKQorCXNpemUgPSBGRFNfTE9OR1Mobik7CisJZGF0YSA9IGxkYXRhOworCWlmIChuID4gTUFY
X0xPQ19GRFMpIHsKKwkJZGF0YSA9IGttYWxsb2MoKDEgKyA2ICogc2l6ZSkgKiBzaXplb2YodW5z
aWduZWQgbG9uZyksIEdGUF9LRVJORUwpOworCQlpZiAoIWRhdGEpCisJCQlnb3RvIG91dF9ub2Zk
czsKKwl9CisJKmRhdGEgPSAxOworCWJpdHMgPSBkYXRhICsgMTsKKwlpZiAoKHJldCA9IGdldF9m
ZF9zZXQobiwgaW5wLCBiaXRzKSkgfHwKKwkgICAgKHJldCA9IGdldF9mZF9zZXQobiwgb3V0cCwg
Yml0cytzaXplKSkgfHwKKwkgICAgKHJldCA9IGdldF9mZF9zZXQobiwgZXhwLCBiaXRzKzIqc2l6
ZSkpKQogCQlnb3RvIG91dDsKLQl6ZXJvX2ZkX3NldChuLCBmZHMucmVzX2luKTsKLQl6ZXJvX2Zk
X3NldChuLCBmZHMucmVzX291dCk7Ci0JemVyb19mZF9zZXQobiwgZmRzLnJlc19leCk7CisJbWVt
c2V0KGJpdHMrMypzaXplLCAwLCAzKnNpemUqc2l6ZW9mKHVuc2lnbmVkIGxvbmcpKTsKIAotCXJl
dCA9IGRvX3NlbGVjdChuLCAmZmRzLCAmdGltZW91dCk7CisJcmV0ID0gZG9fc2VsZWN0KG4sIGJp
dHMsIHNpemUsICZ0aW1lb3V0KTsKIAogCWlmICh0dnAgJiYgIShjdXJyZW50LT5wZXJzb25hbGl0
eSAmIFNUSUNLWV9USU1FT1VUUykpIHsKIAkJdGltZV90IHNlYyA9IDAsIHVzZWMgPSAwOwpAQCAt
MzIyLDggKzQxNiw4IEBACiAJCQl1c2VjID0gdGltZW91dCAlIEhaOwogCQkJdXNlYyAqPSAoMTAw
MDAwMC9IWik7CiAJCX0KLQkJcHV0X3VzZXIoc2VjLCAmdHZwLT50dl9zZWMpOwotCQlwdXRfdXNl
cih1c2VjLCAmdHZwLT50dl91c2VjKTsKKwkJX19wdXRfdXNlcihzZWMsICZ0dnAtPnR2X3NlYyk7
CisJCV9fcHV0X3VzZXIodXNlYywgJnR2cC0+dHZfdXNlYyk7CiAJfQogCiAJaWYgKHJldCA8IDAp
CkBAIC0zMzUsODYgKzQyOSwxNDggQEAKIAkJcmV0ID0gMDsKIAl9CiAKLQlzZXRfZmRfc2V0KG4s
IGlucCwgZmRzLnJlc19pbik7Ci0Jc2V0X2ZkX3NldChuLCBvdXRwLCBmZHMucmVzX291dCk7Ci0J
c2V0X2ZkX3NldChuLCBleHAsIGZkcy5yZXNfZXgpOworCWlmIChpbnApCisJCV9fY29weV90b191
c2VyKGlucCwgYml0cyszKnNpemUsIHNpemUqc2l6ZW9mKHVuc2lnbmVkIGxvbmcpKTsKKwlpZiAo
b3V0cCkKKwkJX19jb3B5X3RvX3VzZXIob3V0cCwgYml0cys0KnNpemUsIHNpemUqc2l6ZW9mKHVu
c2lnbmVkIGxvbmcpKTsKKwlpZiAoZXhwKQorCQlfX2NvcHlfdG9fdXNlcihleHAsIGJpdHMrNSpz
aXplLCBzaXplKnNpemVvZih1bnNpZ25lZCBsb25nKSk7CiAKIG91dDoKLQlzZWxlY3RfYml0c19m
cmVlKGJpdHMsIHNpemUpOworCWlmIChuID4gTUFYX0xPQ19GRFMpCisJCWtmcmVlKGRhdGEpOwog
b3V0X25vZmRzOgogCXJldHVybiByZXQ7CiB9CiAKLSNkZWZpbmUgUE9MTEZEX1BFUl9QQUdFICAo
KFBBR0VfU0laRSkgLyBzaXplb2Yoc3RydWN0IHBvbGxmZCkpCi0KLXN0YXRpYyB2b2lkIGRvX3Bv
bGxmZCh1bnNpZ25lZCBpbnQgbnVtLCBzdHJ1Y3QgcG9sbGZkICogZmRwYWdlLAotCXBvbGxfdGFi
bGUgKiogcHdhaXQsIGludCAqY291bnQpCitzdGF0aWMgaW50IGRvX3BvbGwodW5zaWduZWQgaW50
IG5mZHMsIHN0cnVjdCBwb2xsZmQgKnVmZHMsIGxvbmcgdGltZW91dCkKIHsKLQlpbnQgaTsKKwlp
bnQgcmV0dmFsOworCXBvbGxfdGFibGUgKndhaXQsIHdhaXRfdGFibGU7CisKKwl3YWl0ID0gTlVM
TDsKKwlpZiAodGltZW91dCkgeworCQl3YWl0X3RhYmxlLmhlYWQgPSAodm9pZCAqKSBfX2dldF9m
cmVlX3BhZ2UoR0ZQX0tFUk5FTCk7CisJCWlmICghd2FpdF90YWJsZS5oZWFkKQorCQkJcmV0dXJu
IC1FTk9NRU07CiAKLQlmb3IgKGkgPSAwOyBpIDwgbnVtOyBpKyspIHsKKwkJcG9sbF9pbml0d2Fp
dCgmd2FpdF90YWJsZSk7CisJCXdhaXQgPSAmd2FpdF90YWJsZTsKKwl9CisKKwl3YWl0X3RhYmxl
LmVycm9yID0gcmV0dmFsID0gMDsKKworI2lmZGVmIFdJREVfRklMRV9MT0NLCisJcmVhZF9sb2Nr
KCZjdXJyZW50LT5maWxlcy0+ZmlsZV9sb2NrKTsKKyNlbmRpZgorCWZvciAod2FpdF90YWJsZS5u
ID0gMDsgd2FpdF90YWJsZS5uIDwgbmZkczsgd2FpdF90YWJsZS5uKyspIHsKIAkJaW50IGZkOwot
CQl1bnNpZ25lZCBpbnQgbWFzazsKLQkJc3RydWN0IHBvbGxmZCAqZmRwOworCQl1bnNpZ25lZCBp
bnQgbWFzaywgZXZlbnRzOwogCiAJCW1hc2sgPSAwOwotCQlmZHAgPSBmZHBhZ2UraTsKLQkJZmQg
PSBmZHAtPmZkOworCQlpZiAoX19nZXRfdXNlcihmZCwgJnVmZHNbd2FpdF90YWJsZS5uXS5mZCkp
CisJCQlnb3RvIG91dF9mYXVsdDsKIAkJaWYgKGZkID49IDApIHsKLQkJCXN0cnVjdCBmaWxlICog
ZmlsZSA9IGZnZXQoZmQpOworCQkJc3RydWN0IGZpbGUgKiBmaWxlOworI2lmZGVmIFdJREVfRklM
RV9MT0NLCisJCQlmaWxlID0gZmNoZWNrKGZkKTsKKyNlbHNlCisJCQlmaWxlID0gZmdldChmZCk7
CisjZW5kaWYKIAkJCW1hc2sgPSBQT0xMTlZBTDsKIAkJCWlmIChmaWxlICE9IE5VTEwpIHsKIAkJ
CQltYXNrID0gREVGQVVMVF9QT0xMTUFTSzsKIAkJCQlpZiAoZmlsZS0+Zl9vcCAmJiBmaWxlLT5m
X29wLT5wb2xsKQotCQkJCQltYXNrID0gZmlsZS0+Zl9vcC0+cG9sbChmaWxlLCAqcHdhaXQpOwot
CQkJCW1hc2sgJj0gZmRwLT5ldmVudHMgfCBQT0xMRVJSIHwgUE9MTEhVUDsKKwkJCQkJbWFzayA9
IGZpbGUtPmZfb3AtPnBvbGwoZmlsZSwgd2FpdCk7CisjaWZuZGVmIFdJREVfRklMRV9MT0NLCiAJ
CQkJZnB1dChmaWxlKTsKKyNlbmRpZgorCQkJCWlmIChfX2dldF91c2VyKGV2ZW50cywgJnVmZHNb
d2FpdF90YWJsZS5uXS5ldmVudHMpKQorCQkJCQlnb3RvIG91dF9mYXVsdDsKKwkJCQltYXNrICY9
IGV2ZW50cyB8IFBPTExFUlIgfCBQT0xMSFVQOwogCQkJfQogCQkJaWYgKG1hc2spIHsKLQkJCQkq
cHdhaXQgPSBOVUxMOwotCQkJCSgqY291bnQpKys7CisJCQkJd2FpdCA9IE5VTEw7CisJCQkJcmV0
dmFsKys7CiAJCQl9CiAJCX0KLQkJZmRwLT5yZXZlbnRzID0gbWFzazsKKwkJX19wdXRfdXNlciht
YXNrLCAmdWZkc1t3YWl0X3RhYmxlLm5dLnJldmVudHMpOwogCX0KLX0KIAotc3RhdGljIGludCBk
b19wb2xsKHVuc2lnbmVkIGludCBuZmRzLCB1bnNpZ25lZCBpbnQgbmNodW5rcywgdW5zaWduZWQg
aW50IG5sZWZ0LCAKLQlzdHJ1Y3QgcG9sbGZkICpmZHNbXSwgcG9sbF90YWJsZSAqd2FpdCwgbG9u
ZyB0aW1lb3V0KQotewotCWludCBjb3VudCA9IDA7Ci0JcG9sbF90YWJsZSogcHQgPSB3YWl0Owor
I2lmZGVmIFdJREVfRklMRV9MT0NLCisJcmVhZF91bmxvY2soJmN1cnJlbnQtPmZpbGVzLT5maWxl
X2xvY2spOworI2VuZGlmCiAKLQlmb3IgKDs7KSB7Ci0JCXVuc2lnbmVkIGludCBpOworCWlmICgh
cmV0dmFsKQorCQlyZXR2YWwgPSB3YWl0X3RhYmxlLmVycm9yOworCisJd2hpbGUgKCFyZXR2YWwg
JiYgdGltZW91dCAmJiAhc2lnbmFsX3BlbmRpbmcoY3VycmVudCkpIHsKKwkJdW5zaWduZWQgbG9u
ZyBmbGFnczsKKwkJc3RydWN0IHBvbGxfdGFibGVfZW50cnkgKml0ZW0sICpuZXh0OwogCiAJCXNl
dF9jdXJyZW50X3N0YXRlKFRBU0tfSU5URVJSVVBUSUJMRSk7Ci0JCWZvciAoaT0wOyBpIDwgbmNo
dW5rczsgaSsrKQotCQkJZG9fcG9sbGZkKFBPTExGRF9QRVJfUEFHRSwgZmRzW2ldLCAmcHQsICZj
b3VudCk7Ci0JCWlmIChubGVmdCkKLQkJCWRvX3BvbGxmZChubGVmdCwgZmRzW25jaHVua3NdLCAm
cHQsICZjb3VudCk7Ci0JCXB0ID0gTlVMTDsKLQkJaWYgKGNvdW50IHx8ICF0aW1lb3V0IHx8IHNp
Z25hbF9wZW5kaW5nKGN1cnJlbnQpKQotCQkJYnJlYWs7Ci0JCWlmKHdhaXQtPmVycm9yKSB7Ci0J
CQlyZXR1cm4gd2FpdC0+ZXJyb3I7CisJCWlmICh3YWl0X3RhYmxlLndva2VuX2xpc3QgPT0gTlVM
TCkKKwkJCXRpbWVvdXQgPSBzY2hlZHVsZV90aW1lb3V0KHRpbWVvdXQpOworCQlzZXRfY3VycmVu
dF9zdGF0ZShUQVNLX1JVTk5JTkcpOworCisJCS8qIExpZnQgdGhlIHF1ZXVlZCBldmVudHMgYW5k
IHJlc2V0IHRoZSBxdWV1ZSByZWFkeQorCQkgKiBmb3IgYW55dGhpbmcgdGhhdCBoYXBwZW5zIHdo
aWxlIHdlICJ0aGluayIuCisJCSAqLworCQlzcGluX2xvY2tfaXJxc2F2ZSgmd2FpdF90YWJsZS53
b2tlbl9sb2NrLCBmbGFncyk7CisJCWl0ZW0gPSB3YWl0X3RhYmxlLndva2VuX2xpc3Q7CisJCXdh
aXRfdGFibGUud29rZW5fbGlzdCA9IE5VTEw7CisJCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJndh
aXRfdGFibGUud29rZW5fbG9jaywgZmxhZ3MpOworCisJCWZvciAoOyBpdGVtOyBpdGVtPW5leHQp
IHsKKwkJCXN0cnVjdCBwb2xsX3RhYmxlX2VudHJ5ICogcCA9IGl0ZW07CisJCQl1bnNpZ25lZCBs
b25nIG1hc2ssIGV2ZW50czsKKwkJCXN0cnVjdCBmaWxlICogZmlsZTsKKworCQkJLyogUmVzZXQg
dGhlIHdhaXRfcXVldWUncyBldmVudCBwb2ludGVyIGJlZm9yZQorCQkJICogY2hlY2tpbmcgaW4g
Y2FzZSBpdCBpcyB0cmlnZ2VyZWQgYWdhaW4uCisJCQkgKi8KKwkJCW5leHQgPSBpdGVtLT53b2tl
bl9saXN0OworCQkJc2V0X3dhaXRxdWV1ZV9lbnRyeV9vbndha2UoJnAtPndhaXQsIF9fcG9sbHdh
a2UpOworCisJCQlmaWxlID0gcC0+ZmlscDsKKyNpZiAwCisJCQkvKiBUaGlzIGhhcyB0byBiZSB0
cnVlIG9yIHdlIHdvdWxkIG5ldmVyIGhhdmUKKwkJCSAqIGRvbmUgYSB3YWl0IG9uIHRoZSBmaWxl
IQorCQkJICovCisJCQlpZiAoZmlsZS0+Zl9vcCAmJiBmaWxlLT5mX29wLT5wb2xsKQorI2VuZGlm
CisJCQkJbWFzayA9IGZpbGUtPmZfb3AtPnBvbGwoZmlsZSwgTlVMTCk7CisJCQlpZiAoX19nZXRf
dXNlcihldmVudHMsICZ1ZmRzW3AtPm5dLmV2ZW50cykpCisJCQkJZ290byBvdXRfZmF1bHQ7CisJ
CQltYXNrICY9IGV2ZW50cyB8IFBPTExFUlIgfCBQT0xMSFVQOworCQkJaWYgKG1hc2spIHsKKwkJ
CQlyZXR2YWwrKzsKKwkJCQlfX3B1dF91c2VyKG1hc2ssICZ1ZmRzW3AtPm5dLnJldmVudHMpOwor
CQkJfQogCQl9Ci0JCXRpbWVvdXQgPSBzY2hlZHVsZV90aW1lb3V0KHRpbWVvdXQpOwogCX0KLQlj
dXJyZW50LT5zdGF0ZSA9IFRBU0tfUlVOTklORzsKLQlyZXR1cm4gY291bnQ7CitvdXQ6CisJaWYg
KHRpbWVvdXQpCisJCXBvbGxfZnJlZXdhaXQoJndhaXRfdGFibGUpOworCXJldHVybiByZXR2YWw7
CisKK291dF9mYXVsdDoKKyNpZmRlZiBXSURFX0ZJTEVfTE9DSworCXJlYWRfdW5sb2NrKCZjdXJy
ZW50LT5maWxlcy0+ZmlsZV9sb2NrKTsKKyNlbmRpZgorCXJldHZhbCA9IC1FRkFVTFQ7CisJZ290
byBvdXQ7CiB9CiAKLWFzbWxpbmthZ2UgbG9uZyBzeXNfcG9sbChzdHJ1Y3QgcG9sbGZkICogdWZk
cywgdW5zaWduZWQgaW50IG5mZHMsIGxvbmcgdGltZW91dCkKK2FzbWxpbmthZ2UgbG9uZworc3lz
X3BvbGwoc3RydWN0IHBvbGxmZCAqIHVmZHMsIHVuc2lnbmVkIGludCBuZmRzLCBsb25nIHRpbWVv
dXQpCiB7Ci0JaW50IGksIGosIGZkY291bnQsIGVycjsKLQlzdHJ1Y3QgcG9sbGZkICoqZmRzOwot
CXBvbGxfdGFibGUgdGFibGUsICp3YWl0OwotCWludCBuY2h1bmtzLCBubGVmdDsKKwlpbnQgZXJy
OwogCiAJLyogRG8gYSBzYW5pdHkgY2hlY2sgb24gbmZkcyAuLi4gKi8KKwllcnIgPSAtRUlOVkFM
OwogCWlmIChuZmRzID4gY3VycmVudC0+ZmlsZXMtPm1heF9mZHMpCi0JCXJldHVybiAtRUlOVkFM
OworCQlnb3RvIG91dDsKIAogCWlmICh0aW1lb3V0KSB7CiAJCS8qIENhcmVmdWwgYWJvdXQgb3Zl
cmZsb3cgaW4gdGhlIGludGVybWVkaWF0ZSB2YWx1ZXMgKi8KQEAgLTQyNCw2OSArNTgwLDEzIEBA
CiAJCQl0aW1lb3V0ID0gTUFYX1NDSEVEVUxFX1RJTUVPVVQ7CiAJfQogCi0JcG9sbF9pbml0d2Fp
dCgmdGFibGUpOwotCXdhaXQgPSAmdGFibGU7Ci0JaWYgKCF0aW1lb3V0KQotCQl3YWl0ID0gTlVM
TDsKLQotCWVyciA9IC1FTk9NRU07Ci0JZmRzID0gTlVMTDsKLQlpZiAobmZkcyAhPSAwKSB7Ci0J
CWZkcyA9IChzdHJ1Y3QgcG9sbGZkICoqKWttYWxsb2MoCi0JCQkoMSArIChuZmRzIC0gMSkgLyBQ
T0xMRkRfUEVSX1BBR0UpICogc2l6ZW9mKHN0cnVjdCBwb2xsZmQgKiksCi0JCQlHRlBfS0VSTkVM
KTsKLQkJaWYgKGZkcyA9PSBOVUxMKQotCQkJZ290byBvdXQ7Ci0JfQorCWVyciA9IHZlcmlmeV9h
cmVhKFZFUklGWV9XUklURSwgdWZkcywgbmZkcyAqIHNpemVvZihzdHJ1Y3QgcG9sbGZkKSk7CisJ
aWYgKCFlcnIpIHsKKwkJZXJyID0gZG9fcG9sbChuZmRzLCB1ZmRzLCB0aW1lb3V0KTsKIAotCW5j
aHVua3MgPSAwOwotCW5sZWZ0ID0gbmZkczsKLQl3aGlsZSAobmxlZnQgPiBQT0xMRkRfUEVSX1BB
R0UpIHsgLyogYWxsb2NhdGUgY29tcGxldGUgUEFHRV9TSVpFIGNodW5rcyAqLwotCQlmZHNbbmNo
dW5rc10gPSAoc3RydWN0IHBvbGxmZCAqKV9fZ2V0X2ZyZWVfcGFnZShHRlBfS0VSTkVMKTsKLQkJ
aWYgKGZkc1tuY2h1bmtzXSA9PSBOVUxMKQotCQkJZ290byBvdXRfZmRzOwotCQluY2h1bmtzKys7
Ci0JCW5sZWZ0IC09IFBPTExGRF9QRVJfUEFHRTsKLQl9Ci0JaWYgKG5sZWZ0KSB7IC8qIGFsbG9j
YXRlIGxhc3QgUEFHRV9TSVpFIGNodW5rLCBvbmx5IG5sZWZ0IGVsZW1lbnRzIHVzZWQgKi8KLQkJ
ZmRzW25jaHVua3NdID0gKHN0cnVjdCBwb2xsZmQgKilfX2dldF9mcmVlX3BhZ2UoR0ZQX0tFUk5F
TCk7Ci0JCWlmIChmZHNbbmNodW5rc10gPT0gTlVMTCkKLQkJCWdvdG8gb3V0X2ZkczsKLQl9Ci0K
LQllcnIgPSAtRUZBVUxUOwotCWZvciAoaT0wOyBpIDwgbmNodW5rczsgaSsrKQotCQlpZiAoY29w
eV9mcm9tX3VzZXIoZmRzW2ldLCB1ZmRzICsgaSpQT0xMRkRfUEVSX1BBR0UsIFBBR0VfU0laRSkp
Ci0JCQlnb3RvIG91dF9mZHMxOwotCWlmIChubGVmdCkgewotCQlpZiAoY29weV9mcm9tX3VzZXIo
ZmRzW25jaHVua3NdLCB1ZmRzICsgbmNodW5rcypQT0xMRkRfUEVSX1BBR0UsIAotCQkJCW5sZWZ0
ICogc2l6ZW9mKHN0cnVjdCBwb2xsZmQpKSkKLQkJCWdvdG8gb3V0X2ZkczE7Ci0JfQotCi0JZmRj
b3VudCA9IGRvX3BvbGwobmZkcywgbmNodW5rcywgbmxlZnQsIGZkcywgd2FpdCwgdGltZW91dCk7
Ci0KLQkvKiBPSywgbm93IGNvcHkgdGhlIHJldmVudHMgZmllbGRzIGJhY2sgdG8gdXNlciBzcGFj
ZS4gKi8KLQlmb3IoaT0wOyBpIDwgbmNodW5rczsgaSsrKQotCQlmb3IgKGo9MDsgaiA8IFBPTExG
RF9QRVJfUEFHRTsgaisrLCB1ZmRzKyspCi0JCQlfX3B1dF91c2VyKChmZHNbaV0gKyBqKS0+cmV2
ZW50cywgJnVmZHMtPnJldmVudHMpOwotCWlmIChubGVmdCkKLQkJZm9yIChqPTA7IGogPCBubGVm
dDsgaisrLCB1ZmRzKyspCi0JCQlfX3B1dF91c2VyKChmZHNbbmNodW5rc10gKyBqKS0+cmV2ZW50
cywgJnVmZHMtPnJldmVudHMpOwotCi0JZXJyID0gZmRjb3VudDsKLQlpZiAoIWZkY291bnQgJiYg
c2lnbmFsX3BlbmRpbmcoY3VycmVudCkpCi0JCWVyciA9IC1FSU5UUjsKLQotb3V0X2ZkczE6Ci0J
aWYgKG5sZWZ0KQotCQlmcmVlX3BhZ2UoKHVuc2lnbmVkIGxvbmcpKGZkc1tuY2h1bmtzXSkpOwot
b3V0X2ZkczoKLQlmb3IgKGk9MDsgaSA8IG5jaHVua3M7IGkrKykKLQkJZnJlZV9wYWdlKCh1bnNp
Z25lZCBsb25nKShmZHNbaV0pKTsKLQlpZiAobmZkcyAhPSAwKQotCQlrZnJlZShmZHMpOworCQlp
ZiAoIWVyciAmJiBzaWduYWxfcGVuZGluZyhjdXJyZW50KSkKKwkJCWVyciA9IC1FSU5UUjsKKwl9
CiBvdXQ6Ci0JcG9sbF9mcmVld2FpdCgmdGFibGUpOwogCXJldHVybiBlcnI7CiB9CmRpZmYgLXVy
TiAteCAqLltvYV0gLXggLmNvbmZpZyAteCAudmVyc2lvbiAteCAuZGVwZW5kIC14IC5oZGVwZW5k
IC14ICouZmxhZ3MgLXggYXV0b2NvbmYuaCAteCBtb2R2ZXJzaW9ucy5oIC14IHZlcnNpb24uaCAt
eCBhc20gLXggbW9kdWxlcyAteCBjb25maWcgLXggc291bmRtb2RlbSBsaW51eC0yLjQuMC10ZXN0
OS9pbmNsdWRlL2xpbnV4L3BvbGwuaCBsaW51eC0yLjQuMC10ZXN0OSsvaW5jbHVkZS9saW51eC9w
b2xsLmgKLS0tIGxpbnV4LTIuNC4wLXRlc3Q5L2luY2x1ZGUvbGludXgvcG9sbC5oCU1vbiBPY3Qg
IDIgMTk6MDE6MzkgMjAwMAorKysgbGludXgtMi40LjAtdGVzdDkrL2luY2x1ZGUvbGludXgvcG9s
bC5oCVN1biBPY3QgMjkgMjE6MDE6MzUgMjAwMApAQCAtOCwxNSArOCwzMyBAQAogI2luY2x1ZGUg
PGxpbnV4L3dhaXQuaD4KICNpbmNsdWRlIDxsaW51eC9zdHJpbmcuaD4KICNpbmNsdWRlIDxsaW51
eC9tbS5oPgorI2luY2x1ZGUgPGxpbnV4L3NtcF9sb2NrLmg+CiAjaW5jbHVkZSA8YXNtL3VhY2Nl
c3MuaD4KIAotc3RydWN0IHBvbGxfdGFibGVfcGFnZTsKKworc3RydWN0IHBvbGxfdGFibGVfZW50
cnkgeworCWludCBuOworCXN0cnVjdCBmaWxlICogZmlscDsKKwlzdHJ1Y3QgcG9sbF90YWJsZV9l
bnRyeSAqd29rZW5fbGlzdDsKKwl3YWl0X3F1ZXVlX3Qgd2FpdDsKKwl3YWl0X3F1ZXVlX2hlYWRf
dCAqIHdhaXRfYWRkcmVzczsKK307CiAKIHR5cGVkZWYgc3RydWN0IHBvbGxfdGFibGVfc3RydWN0
IHsKKwlpbnQgbjsKIAlpbnQgZXJyb3I7Ci0Jc3RydWN0IHBvbGxfdGFibGVfcGFnZSAqIHRhYmxl
OworCXNwaW5sb2NrX3Qgd29rZW5fbG9jazsKKwlzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqd29r
ZW5fbGlzdDsKKwlzdHJ1Y3QgcG9sbF90YWJsZV9oZWFkICogaGVhZCwgKiBsYXN0OwogfSBwb2xs
X3RhYmxlOwogCitzdHJ1Y3QgcG9sbF90YWJsZV9oZWFkIHsKKwlwb2xsX3RhYmxlICpwb2xsX3Rh
YmxlOworCXN0cnVjdCBwb2xsX3RhYmxlX2hlYWQgKiBuZXh0OworCXN0cnVjdCBwb2xsX3RhYmxl
X2VudHJ5ICogZW50cnk7Cit9OworCisKIGV4dGVybiB2b2lkIF9fcG9sbHdhaXQoc3RydWN0IGZp
bGUgKiBmaWxwLCB3YWl0X3F1ZXVlX2hlYWRfdCAqIHdhaXRfYWRkcmVzcywgcG9sbF90YWJsZSAq
cCk7CiAKIGV4dGVybiBpbmxpbmUgdm9pZCBwb2xsX3dhaXQoc3RydWN0IGZpbGUgKiBmaWxwLCB3
YWl0X3F1ZXVlX2hlYWRfdCAqIHdhaXRfYWRkcmVzcywgcG9sbF90YWJsZSAqcCkKQEAgLTI3LDIw
ICs0NSwxNiBAQAogCiBzdGF0aWMgaW5saW5lIHZvaWQgcG9sbF9pbml0d2FpdChwb2xsX3RhYmxl
KiBwdCkKIHsKKwlzcGluX2xvY2tfaW5pdCgmcHQtPndva2VuX2xvY2spOworCXB0LT5oZWFkLT5l
bnRyeSA9IChzdHJ1Y3QgcG9sbF90YWJsZV9lbnRyeSAqKShwdC0+aGVhZCArIDEpOworCXB0LT5o
ZWFkLT5wb2xsX3RhYmxlID0gcHQ7CisJcHQtPmhlYWQtPm5leHQgPSBOVUxMOworCXB0LT53b2tl
bl9saXN0ID0gTlVMTDsKIAlwdC0+ZXJyb3IgPSAwOwotCXB0LT50YWJsZSA9IE5VTEw7CisJcHQt
Pmxhc3QgPSBwdC0+aGVhZDsKIH0KLWV4dGVybiB2b2lkIHBvbGxfZnJlZXdhaXQocG9sbF90YWJs
ZSogcHQpOwotCiAKLS8qCi0gKiBTY2FsZWFibGUgdmVyc2lvbiBvZiB0aGUgZmRfc2V0LgotICov
Ci0KLXR5cGVkZWYgc3RydWN0IHsKLQl1bnNpZ25lZCBsb25nICppbiwgKm91dCwgKmV4OwotCXVu
c2lnbmVkIGxvbmcgKnJlc19pbiwgKnJlc19vdXQsICpyZXNfZXg7Ci19IGZkX3NldF9iaXRzOwor
ZXh0ZXJuIHZvaWQgcG9sbF9mcmVld2FpdChwb2xsX3RhYmxlKiBwdCk7CiAKIC8qCiAgKiBIb3cg
bWFueSBsb25nd29yZHMgZm9yICJuciIgYml0cz8KQEAgLTY5LDIxICs4Myw2IEBACiAJbWVtc2V0
KGZkc2V0LCAwLCBucik7CiAJcmV0dXJuIDA7CiB9Ci0KLXN0YXRpYyBpbmxpbmUKLXZvaWQgc2V0
X2ZkX3NldCh1bnNpZ25lZCBsb25nIG5yLCB2b2lkICp1ZmRzZXQsIHVuc2lnbmVkIGxvbmcgKmZk
c2V0KQotewotCWlmICh1ZmRzZXQpCi0JCV9fY29weV90b191c2VyKHVmZHNldCwgZmRzZXQsIEZE
U19CWVRFUyhucikpOwotfQotCi1zdGF0aWMgaW5saW5lCi12b2lkIHplcm9fZmRfc2V0KHVuc2ln
bmVkIGxvbmcgbnIsIHVuc2lnbmVkIGxvbmcgKmZkc2V0KQotewotCW1lbXNldChmZHNldCwgMCwg
RkRTX0JZVEVTKG5yKSk7Ci19Ci0KLWV4dGVybiBpbnQgZG9fc2VsZWN0KGludCBuLCBmZF9zZXRf
Yml0cyAqZmRzLCBsb25nICp0aW1lb3V0KTsKIAogI2VuZGlmIC8qIEtFUk5FTCAqLwogCmRpZmYg
LXVyTiAteCAqLltvYV0gLXggLmNvbmZpZyAteCAudmVyc2lvbiAteCAuZGVwZW5kIC14IC5oZGVw
ZW5kIC14ICouZmxhZ3MgLXggYXV0b2NvbmYuaCAteCBtb2R2ZXJzaW9ucy5oIC14IHZlcnNpb24u
aCAteCBhc20gLXggbW9kdWxlcyAteCBjb25maWcgLXggc291bmRtb2RlbSBsaW51eC0yLjQuMC10
ZXN0OS9pbmNsdWRlL2xpbnV4L3NjaGVkLmggbGludXgtMi40LjAtdGVzdDkrL2luY2x1ZGUvbGlu
dXgvc2NoZWQuaAotLS0gbGludXgtMi40LjAtdGVzdDkvaW5jbHVkZS9saW51eC9zY2hlZC5oCU1v
biBPY3QgIDIgMTk6MDE6MTkgMjAwMAorKysgbGludXgtMi40LjAtdGVzdDkrL2luY2x1ZGUvbGlu
dXgvc2NoZWQuaAlTdW4gT2N0IDI5IDE4OjAxOjI3IDIwMDAKQEAgLTU0MSw2ICs1NDEsNyBAQAog
ZXh0ZXJuIGxvbmcgRkFTVENBTEwoaW50ZXJydXB0aWJsZV9zbGVlcF9vbl90aW1lb3V0KHdhaXRf
cXVldWVfaGVhZF90ICpxLAogCQkJCQkJICAgIHNpZ25lZCBsb25nIHRpbWVvdXQpKTsKIGV4dGVy
biB2b2lkIEZBU1RDQUxMKHdha2VfdXBfcHJvY2VzcyhzdHJ1Y3QgdGFza19zdHJ1Y3QgKiB0c2sp
KTsKK2V4dGVybiB2b2lkIEZBU1RDQUxMKHdha2VfdXBfcHJvY2Vzc19zeW5jaHJvbm91cyhzdHJ1
Y3QgdGFza19zdHJ1Y3QgKiB0c2spKTsKIAogI2RlZmluZSB3YWtlX3VwKHgpCQkJX193YWtlX3Vw
KCh4KSxUQVNLX1VOSU5URVJSVVBUSUJMRSB8IFRBU0tfSU5URVJSVVBUSUJMRSB8IFRBU0tfRVhD
TFVTSVZFKQogI2RlZmluZSB3YWtlX3VwX2FsbCh4KQkJCV9fd2FrZV91cCgoeCksVEFTS19VTklO
VEVSUlVQVElCTEUgfCBUQVNLX0lOVEVSUlVQVElCTEUpCmRpZmYgLXVyTiAteCAqLltvYV0gLXgg
LmNvbmZpZyAteCAudmVyc2lvbiAteCAuZGVwZW5kIC14IC5oZGVwZW5kIC14ICouZmxhZ3MgLXgg
YXV0b2NvbmYuaCAteCBtb2R2ZXJzaW9ucy5oIC14IHZlcnNpb24uaCAteCBhc20gLXggbW9kdWxl
cyAteCBjb25maWcgLXggc291bmRtb2RlbSBsaW51eC0yLjQuMC10ZXN0OS9pbmNsdWRlL2xpbnV4
L3dhaXQuaCBsaW51eC0yLjQuMC10ZXN0OSsvaW5jbHVkZS9saW51eC93YWl0LmgKLS0tIGxpbnV4
LTIuNC4wLXRlc3Q5L2luY2x1ZGUvbGludXgvd2FpdC5oCU1vbiBPY3QgIDIgMTk6MDE6MTcgMjAw
MAorKysgbGludXgtMi40LjAtdGVzdDkrL2luY2x1ZGUvbGludXgvd2FpdC5oCVN1biBPY3QgMjkg
MTc6MTA6MDUgMjAwMApAQCAtMTYsNiArMTYsNyBAQAogI2luY2x1ZGUgPGxpbnV4L3NwaW5sb2Nr
Lmg+CiAKICNpbmNsdWRlIDxhc20vcGFnZS5oPgorI2luY2x1ZGUgPGFzbS9zeXN0ZW0uaD4KICNp
bmNsdWRlIDxhc20vcHJvY2Vzc29yLmg+CiAKIC8qCkBAIC0zMSw3ICszMiw3IEBACiAJQlVHKCk7
IFwKIH0gd2hpbGUgKDApCiAKLSNkZWZpbmUgQ0hFQ0tfTUFHSUMoeCkgaWYgKHggIT0gKGxvbmcp
Jih4KSkgXAorI2RlZmluZSBDSEVDS19NQUdJQyh4KSBpZiAoKGxvbmcpeCAhPSAobG9uZykmKHgp
KSBcCiAJeyBwcmludGsoImJhZCBtYWdpYyAlbHggKHNob3VsZCBiZSAlbHgpLCAiLCAobG9uZyl4
LCAobG9uZykmKHgpKTsgV1FfQlVHKCk7IH0KIAogI2RlZmluZSBDSEVDS19NQUdJQ19XUUhFQUQo
eCkgZG8geyBcCkBAIC00MywxNiArNDQsMTkgQEAKIH0gd2hpbGUgKDApCiAjZW5kaWYKIAordHlw
ZWRlZiBzdHJ1Y3QgX193YWl0X3F1ZXVlIHdhaXRfcXVldWVfdDsKK3R5cGVkZWYgaW50ICgqb253
YWtlX2Z1bmNfdCkod2FpdF9xdWV1ZV90ICosIHVuc2lnbmVkIGludCwgY29uc3QgaW50KTsKKwog
c3RydWN0IF9fd2FpdF9xdWV1ZSB7CiAJdW5zaWduZWQgaW50IGNvbXBpbGVyX3dhcm5pbmc7CiAJ
c3RydWN0IHRhc2tfc3RydWN0ICogdGFzazsKIAlzdHJ1Y3QgbGlzdF9oZWFkIHRhc2tfbGlzdDsK
Kwlvbndha2VfZnVuY190IG9ud2FrZTsKICNpZiBXQUlUUVVFVUVfREVCVUcKIAlsb25nIF9fbWFn
aWM7CiAJbG9uZyBfX3dha2VyOwogI2VuZGlmCiB9OwotdHlwZWRlZiBzdHJ1Y3QgX193YWl0X3F1
ZXVlIHdhaXRfcXVldWVfdDsKIAogLyoKICAqICdkdWFsJyBzcGlubG9jayBhcmNoaXRlY3R1cmUu
IENhbiBiZSBzd2l0Y2hlZCBiZXR3ZWVuIHNwaW5sb2NrX3QgYW5kCkBAIC0xMDksNyArMTEzLDcg
QEAKICNlbmRpZgogCiAjZGVmaW5lIF9fV0FJVFFVRVVFX0lOSVRJQUxJWkVSKG5hbWUsdGFzaykg
XAotCXsgMHgxMjM0NTY3LCB0YXNrLCB7IE5VTEwsIE5VTEwgfSBfX1dBSVRRVUVVRV9ERUJVR19J
TklUKG5hbWUpfQorCXsgMHgxMjM0NTY3LCB0YXNrLCB7IE5VTEwsIE5VTEwgfSwgKHZvaWQgKikt
MSBfX1dBSVRRVUVVRV9ERUJVR19JTklUKG5hbWUpfQogI2RlZmluZSBERUNMQVJFX1dBSVRRVUVV
RShuYW1lLHRhc2spIFwKIAl3YWl0X3F1ZXVlX3QgbmFtZSA9IF9fV0FJVFFVRVVFX0lOSVRJQUxJ
WkVSKG5hbWUsdGFzaykKIApAQCAtMTM0LDE3ICsxMzgsMjUgQEAKICNlbmRpZgogfQogCi1zdGF0
aWMgaW5saW5lIHZvaWQgaW5pdF93YWl0cXVldWVfZW50cnkod2FpdF9xdWV1ZV90ICpxLAotCQkJ
CSBzdHJ1Y3QgdGFza19zdHJ1Y3QgKnApCitzdGF0aWMgaW5saW5lIHZvaWQgaW5pdF93YWl0cXVl
dWVfZW50cnlfb253YWtlKHdhaXRfcXVldWVfdCAqcSwKKwkJCQkgc3RydWN0IHRhc2tfc3RydWN0
ICpwLCBvbndha2VfZnVuY190IG9ud2FrZSkKIHsKICNpZiBXQUlUUVVFVUVfREVCVUcKIAlpZiAo
IXEgfHwgIXApCiAJCVdRX0JVRygpOwogI2VuZGlmCiAJcS0+dGFzayA9IHA7CisJcS0+b253YWtl
ID0gb253YWtlOwogI2lmIFdBSVRRVUVVRV9ERUJVRwogCXEtPl9fbWFnaWMgPSAobG9uZykmcS0+
X19tYWdpYzsKICNlbmRpZgorfQorCisjZGVmaW5lIGluaXRfd2FpdHF1ZXVlX2VudHJ5KHEsIHAp
IGluaXRfd2FpdHF1ZXVlX2VudHJ5X29ud2FrZShxLCBwLCAodm9pZCAqKS0xKTsKKworc3RhdGlj
IGlubGluZSB2b2lkIHNldF93YWl0cXVldWVfZW50cnlfb253YWtlKHdhaXRfcXVldWVfdCAqd3Es
IG9ud2FrZV9mdW5jX3Qgb253YWtlKQoreworCXdxLT5vbndha2UgPSBvbndha2U7CiB9CiAKIHN0
YXRpYyBpbmxpbmUgaW50IHdhaXRxdWV1ZV9hY3RpdmUod2FpdF9xdWV1ZV9oZWFkX3QgKnEpCmRp
ZmYgLXVyTiAteCAqLltvYV0gLXggLmNvbmZpZyAteCAudmVyc2lvbiAteCAuZGVwZW5kIC14IC5o
ZGVwZW5kIC14ICouZmxhZ3MgLXggYXV0b2NvbmYuaCAteCBtb2R2ZXJzaW9ucy5oIC14IHZlcnNp
b24uaCAteCBhc20gLXggbW9kdWxlcyAteCBjb25maWcgLXggc291bmRtb2RlbSBsaW51eC0yLjQu
MC10ZXN0OS9rZXJuZWwvc2NoZWQuYyBsaW51eC0yLjQuMC10ZXN0OSsva2VybmVsL3NjaGVkLmMK
LS0tIGxpbnV4LTIuNC4wLXRlc3Q5L2tlcm5lbC9zY2hlZC5jCU1vbiBPY3QgIDIgMTk6NDU6MDEg
MjAwMAorKysgbGludXgtMi40LjAtdGVzdDkrL2tlcm5lbC9zY2hlZC5jCVR1ZSBPY3QgMjQgMTE6
NDk6MDcgMjAwMApAQCAtMzYxLDcgKzM2MSw3IEBACiAJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgm
cnVucXVldWVfbG9jaywgZmxhZ3MpOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgd2FrZV91cF9w
cm9jZXNzX3N5bmNocm9ub3VzKHN0cnVjdCB0YXNrX3N0cnVjdCAqIHApCitpbmxpbmUgdm9pZCB3
YWtlX3VwX3Byb2Nlc3Nfc3luY2hyb25vdXMoc3RydWN0IHRhc2tfc3RydWN0ICogcCkKIHsKIAl1
bnNpZ25lZCBsb25nIGZsYWdzOwogCkBAIC03MjYsMzggKzcyNiw0NSBAQAogCXdoaWxlICh0bXAg
IT0gaGVhZCkgewogCQl1bnNpZ25lZCBpbnQgc3RhdGU7CiAgICAgICAgICAgICAgICAgd2FpdF9x
dWV1ZV90ICpjdXJyID0gbGlzdF9lbnRyeSh0bXAsIHdhaXRfcXVldWVfdCwgdGFza19saXN0KTsK
KwkJb253YWtlX2Z1bmNfdCBvbndha2UgPSBjdXJyLT5vbndha2U7CiAKIAkJdG1wID0gdG1wLT5u
ZXh0OwogCiAjaWYgV0FJVFFVRVVFX0RFQlVHCiAJCUNIRUNLX01BR0lDKGN1cnItPl9fbWFnaWMp
OwogI2VuZGlmCi0JCXAgPSBjdXJyLT50YXNrOwotCQlzdGF0ZSA9IHAtPnN0YXRlOwotCQlpZiAo
c3RhdGUgJiAobW9kZSAmIH5UQVNLX0VYQ0xVU0lWRSkpIHsKKwkJaWYgKG9ud2FrZSA9PSAodm9p
ZCAqKS0xKSB7CisJCQlwID0gY3Vyci0+dGFzazsKKwkJCXN0YXRlID0gcC0+c3RhdGU7CisJCQlp
ZiAoc3RhdGUgJiAobW9kZSAmIH5UQVNLX0VYQ0xVU0lWRSkpIHsKICNpZiBXQUlUUVVFVUVfREVC
VUcKLQkJCWN1cnItPl9fd2FrZXIgPSAobG9uZylfX2J1aWx0aW5fcmV0dXJuX2FkZHJlc3MoMCk7
CisJCQkJY3Vyci0+X193YWtlciA9IChsb25nKV9fYnVpbHRpbl9yZXR1cm5fYWRkcmVzcygwKTsK
ICNlbmRpZgotCQkJLyoKLQkJCSAqIElmIHdha2luZyB1cCBmcm9tIGFuIGludGVycnVwdCBjb250
ZXh0IHRoZW4KLQkJCSAqIHByZWZlciBwcm9jZXNzZXMgd2hpY2ggYXJlIGFmZmluZSB0byB0aGlz
Ci0JCQkgKiBDUFUuCi0JCQkgKi8KLQkJCWlmIChpcnEgJiYgKHN0YXRlICYgbW9kZSAmIFRBU0tf
RVhDTFVTSVZFKSkgewotCQkJCWlmICghYmVzdF9leGNsdXNpdmUpCi0JCQkJCWJlc3RfZXhjbHVz
aXZlID0gcDsKLQkJCQllbHNlIGlmICgocC0+cHJvY2Vzc29yID09IGJlc3RfY3B1KSAmJgotCQkJ
CQkoYmVzdF9leGNsdXNpdmUtPnByb2Nlc3NvciAhPSBiZXN0X2NwdSkpCisJCQkJLyoKKwkJCQkg
KiBJZiB3YWtpbmcgdXAgZnJvbSBhbiBpbnRlcnJ1cHQgY29udGV4dCB0aGVuCisJCQkJICogcHJl
ZmVyIHByb2Nlc3NlcyB3aGljaCBhcmUgYWZmaW5lIHRvIHRoaXMKKwkJCQkgKiBDUFUuCisJCQkJ
ICovCisJCQkJaWYgKGlycSAmJiAoc3RhdGUgJiBtb2RlICYgVEFTS19FWENMVVNJVkUpKSB7CisJ
CQkJCWlmICghYmVzdF9leGNsdXNpdmUpCiAJCQkJCQliZXN0X2V4Y2x1c2l2ZSA9IHA7Ci0JCQl9
IGVsc2UgewotCQkJCWlmIChzeW5jKQotCQkJCQl3YWtlX3VwX3Byb2Nlc3Nfc3luY2hyb25vdXMo
cCk7Ci0JCQkJZWxzZQotCQkJCQl3YWtlX3VwX3Byb2Nlc3MocCk7Ci0JCQkJaWYgKHN0YXRlICYg
bW9kZSAmIFRBU0tfRVhDTFVTSVZFKQotCQkJCQlicmVhazsKKwkJCQkJZWxzZSBpZiAoKHAtPnBy
b2Nlc3NvciA9PSBiZXN0X2NwdSkgJiYKKwkJCQkJCShiZXN0X2V4Y2x1c2l2ZS0+cHJvY2Vzc29y
ICE9IGJlc3RfY3B1KSkKKwkJCQkJCQliZXN0X2V4Y2x1c2l2ZSA9IHA7CisJCQkJfSBlbHNlIHsK
KwkJCQkJaWYgKHN5bmMpCisJCQkJCQl3YWtlX3VwX3Byb2Nlc3Nfc3luY2hyb25vdXMocCk7CisJ
CQkJCWVsc2UKKwkJCQkJCXdha2VfdXBfcHJvY2VzcyhwKTsKKwkJCQkJaWYgKHN0YXRlICYgbW9k
ZSAmIFRBU0tfRVhDTFVTSVZFKQorCQkJCQkJYnJlYWs7CisJCQkJfQogCQkJfQorCQkJY29udGlu
dWU7CiAJCX0KKworCQlpZiAob253YWtlICYmIG9ud2FrZShjdXJyLCBtb2RlLCBzeW5jKSkKKwkJ
CWJyZWFrOwogCX0KIAlpZiAoYmVzdF9leGNsdXNpdmUpCiAJCWJlc3RfZXhjbHVzaXZlLT5zdGF0
ZSA9IFRBU0tfUlVOTklORzsK

------=_NextPart_000_0000_01C042BF.E39A4960--

-
To unsubscribe from this list: send the line "unsubscribe linux-kernel" in
the body of a message to majordomo@vger.kernel.org
Please read the FAQ at http://www.tux.org/lkml/
