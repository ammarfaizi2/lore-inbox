Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S271597AbRHXO3Z>; Fri, 24 Aug 2001 10:29:25 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S271818AbRHXO3P>; Fri, 24 Aug 2001 10:29:15 -0400
Received: from [64.211.100.89] ([64.211.100.89]:54428 "EHLO sampatonline.com")
	by vger.kernel.org with ESMTP id <S271597AbRHXO3L>;
	Fri, 24 Aug 2001 10:29:11 -0400
Message-Id: <200108241428.f7OESi928310@sampatonline.com>
To: Andrew Ebling <kernelhacker@lineone.net>
cc: kernelnewbies@nl.linux.org, linux-kernel@vger.kernel.org
Subject: Re: suggestions for new kernel hacking-HOWTO 
In-Reply-To: Message from Andrew Ebling <kernelhacker@lineone.net> 
   of "23 Aug 2001 22:29:27 BST." <998602169.405.21.camel@elixr.jfreak> 
Mime-Version: 1.0 (generated by tm-edit 8.8 (Time Passed Me By))
Content-Type: text/plain; charset=US-ASCII
Date: Fri, 24 Aug 2001 10:28:44 -0400
From: Pragnesh Sampat <pss@sampatonline.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


> - Key Kernel Concepts
> 	(placing these in a good order is important)
>         - virtual memory/memory management
>         - virtual file system/IO management
>         - process/scheduling
>         - contexts/interrupts/exceptions
>         - system calls/signals/IPC
>         - boot sequence

> - Kernel source tour
>         What goes where in the source tree
> 

I am not sure if these two sections are suitable in this howto.  It
seems pretty ambitious, since they can get very large and the
books/resources sections can take care of this.  The book "Linux
Device Drivers" by Rubini and Corbet has got a section on source tour.

> - How do I... ?
>         - Print messages to kernel logs
>         - create a new module
>         - Add a system call
>         - write ioctls
>         - Add a /proc entry
>         - Write a driver for a new device
>         - Add an option to the kernel configuation
> 
> - Kernel Debugging
>         - A word on debugging
>         - Different approaches
>                 - local running kernel
>                 - UML
>         - two box debugging (I have already write a sort of mini HOWTO
> on this, which can be found at
> http://www.kernelhacking.org/docs/2boxdebugging.txt)
>         	- Setting up
>                 	- hardware
>                 	- software
>         	- Preparing the source
>         	- Example debugging session
>         	- Troublshooting
> 

Kernel Debugging can probably go ahead of the "How do I...?" section,
since in practice you probably need some variant of the the setup you
have described before you start, unless you are just trying out a
trivial module.

In fact, if the concepts section is not there, the whole document
seems to have the structure of how to do something, with sub sections
of varying length (after all, it is hacking HOWTO).

-Pragnesh
