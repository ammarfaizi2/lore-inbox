Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S261823AbREPIDh>; Wed, 16 May 2001 04:03:37 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S261832AbREPID2>; Wed, 16 May 2001 04:03:28 -0400
Received: from quechua.inka.de ([212.227.14.2]:21548 "EHLO mail.inka.de")
	by vger.kernel.org with ESMTP id <S261823AbREPIDM>;
	Wed, 16 May 2001 04:03:12 -0400
To: alexey.vyskubov@nokia.com (Alexey Vyskubov)
Cc: linux-kernel@vger.kernel.org
Subject: Re: Question about ipip implementation
In-Reply-To: Your message of "Wed, 16 May 2001 10:24:36 +0300."
             <20010516102436.B1972@Hews1193nrc>
In-Reply-To: <20010511173940.A418@Hews1193nrc> <E14yvjd-0002Rw-00@g212.hadiko.de> <20010514140709.A3325@Hews1193nrc> <E14zcng-0006Cg-00@g212.hadiko.de>  <20010516102436.B1972@Hews1193nrc>
X-Face: /`ST`Hv?*sL!s'S6-'gR0$/LS9x}Oa+7#rIM@#?5]HrLuXUuYw|!B(WX5(P_V>5EcrDvF?@
 qvu]'$2hWLlpq+/}@Q0We<(,[FZ_S^CY>yKfnPM;GU#psKPG/.+KaG{qDd=}Ak_=|ATIBWpccF^*u^
 0N+a8|4f^?uJKKQLDA$%^kwjgmLO`TOxsAsj}tX=eW"Ll8yxD1O{_G[F/+wjwvq1e*[uyhRp-d:V?x
 $PtI{{(~k(:jV|Pb>"uvMJ8Z$,.\V>EF9I#
Mime-Version: 1.0 (generated by tm-edit 1.5)
Content-Type: text/plain; charset=US-ASCII
Date: Wed, 16 May 2001 09:53:54 +0200
From: Olaf Titz <olaf@bigred.inka.de>
Message-Id: <E14zw83-0003EZ-00@g212.hadiko.de>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

> Well, I understand that ipip_rcv does some work cleaning sk_buff.
> But why after that sk_buff cannot be submitted to ip_rcv, not
> netif_rx?

Oops, now I see that you're talking about ip_rcv, not netif_rx...

I'm doing roughly what you're proposing in CIPE (get IP packet
encapsulated in UDP packet via UDP receiver mechanism, strip UDP and
optional SOCKS5 headers, submit to processing) but I'm using netif_rx
simply because I copied code from the ipip driver ;-)
(and because this is the standard way a network driver is supposed to
submit input).

I'm not exactly sure if it is supposed to be possible to deliver
directly into ip_rcv. The code which gets invoked after queuing
(net_rx_action() in net/core/dev.c) does something more than just
dispatching into the receiver, like handling diversion and bridges,
and manipulates fields of the skb itself.

Olaf
