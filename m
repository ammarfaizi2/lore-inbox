Return-Path: <linux-kernel-owner+willy=40w.ods.org@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S263101AbSJGPbX>; Mon, 7 Oct 2002 11:31:23 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S263104AbSJGPbX>; Mon, 7 Oct 2002 11:31:23 -0400
Received: from dell-paw-3.cambridge.redhat.com ([195.224.55.237]:40691 "EHLO
	executor.cambridge.redhat.com") by vger.kernel.org with ESMTP
	id <S263101AbSJGPai>; Mon, 7 Oct 2002 11:30:38 -0400
To: trond.myklebust@fys.uio.no
Cc: David Howells <dhowells@cambridge.redhat.com>,
       linux-kernel@vger.kernel.org
Subject: Re: [PATCH] AFS filesystem for Linux (2/2) 
In-Reply-To: Your message of "Mon, 07 Oct 2002 16:54:16 +0200."
             <15777.40984.140661.380868@charged.uio.no> 
User-Agent: EMH/1.14.1 SEMI/1.14.3 (Ushinoya) FLIM/1.14.3
 (=?ISO-8859-4?Q?Unebigory=F2mae?=) APEL/10.3 Emacs/21.2 (i686-pc-linux-gnu)
 MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.3 - "Ushinoya")
Content-Type: text/plain; charset=US-ASCII
Date: Mon, 07 Oct 2002 16:36:17 +0100
Message-ID: <15121.1034004977@warthog.cambridge.redhat.com>
From: David Howells <dhowells@cambridge.redhat.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


> NFSv4 does not specify that files need to be backed by local storage
> the way AFS does if that is what you mean. However it does offer
> AFS-like features (such as file delegation / leases) that make a
> cachefs a much more feasible proposition.
> 
> I, for one, would be very interested in seeing a cachefs add-on for
> NFSv4. I think that it would be of great use for GRID / distributed
> computation applications, which is where my personal interest in NFSv4
> lies.

Can you give me some sort of idea as to what keys I might use for indexing?

For instance, AFS has the following:

	PRIMARY KEY	SIZE		AUXILLIARY DATA IN INDEX
	==============	==============	============================
	cell name	up to 64 ASCII	- volume location database
					  server addresses

	volume ID	32-bit number	- name of volume
					- associated keys
					- fileserver addresses

	vnode ID	32-bit number	- access time
					- vnode metadata record pointer
					  - vnode ID version
					  - vnode data version
					  - modify time
					  - size
					  - data block pointers

Each index entry of course has a pointer back up the hierarchy.

Furthermore, to determine whether a cached file's contents are still valid, I
can compare the the vnode ID version and vnode data version numbers against
the server.

Not all these indices and keys will necessarily be useful for NFS.

David
