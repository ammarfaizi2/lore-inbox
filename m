Return-Path: <linux-kernel-owner+willy=40w.ods.org-S264991AbUJOCsl@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S264991AbUJOCsl (ORCPT <rfc822;willy@w.ods.org>);
	Thu, 14 Oct 2004 22:48:41 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S265910AbUJOCsl
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Thu, 14 Oct 2004 22:48:41 -0400
Received: from coriana6.CIS.McMaster.CA ([130.113.128.17]:30962 "EHLO
	coriana6.cis.mcmaster.ca") by vger.kernel.org with ESMTP
	id S264991AbUJOCp6 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Thu, 14 Oct 2004 22:45:58 -0400
Subject: [RFC][PATCH] inotify 0.14
From: John McCutchan <ttb@tentacle.dhs.org>
To: linux-kernel@vger.kernel.org, gamin-list@gnome.org, rml@ximian.com,
       viro@parcelfarce.linux.theplanet.co.uk, akpm@osdl.org,
       bkonrath@redhat.com, greg@kroah.com
Content-Type: multipart/mixed; boundary="=-x0MFNKLLAUupVNiEEW/W"
Message-Id: <1097808272.4009.0.camel@vertex>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.4.6 
Date: Thu, 14 Oct 2004 22:44:32 -0400
X-PMX-Version-Mac: 4.7.0.111621, Antispam-Engine: 2.0.1.0, Antispam-Data: 2004.10.14.3
X-PerlMx-Spam: Gauge=IIIIIII, Probability=7%, Report='__CT 0, __CTYPE_HAS_BOUNDARY 0, __CTYPE_MULTIPART 0, __HAS_MSGID 0, __HAS_X_MAILER 0, __MIME_VERSION 0, __SANE_MSGID 0'
X-Spam-Flag: NO
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


--=-x0MFNKLLAUupVNiEEW/W
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

Hello,

Here is release 0.14.0 of inotify. Attached is a patch to 2.6.8.1

--New in this version--
-fix compiling without inotify (rml)
-zero out kevent structure (rml)
-setattr_mask -> setattr_mask_dnotify (rml)
-setattr_mask_inotify moved to inotify.c (rml)
-fixup setattr_mask return values (rml)
-always define wd as s32 (rml)
-fix dentry leak bug (rml)
-misc cleanups (rml,me)
-implement security when attempting to watch something (me)
-got rid of debug code (me)
-merged setattr_mask_inotify/dnotify (me)


John McCutchan

Release notes:

--Why Not dnotify and Why inotify (By Robert Love)--

Everyone seems quick to deride the blunder known as "dnotify" and
applaud a
replacement, any replacement, man anything but that current mess, but in
the
name of fairness I present my treatise on why dnotify is what one might
call
not good:

* dnotify requires the opening of one fd per each directory that you
intend to
  watch.
	o The file descriptor pins the directory, disallowing the backing
	  device to be unmounted, which absolutely wrecks havoc with removable
	  media.
	o Watching many directories results in many open file descriptors,
	  possibly hitting a per-process fd limit. 
* dnotify is directory-based. You only learn about changes to
directories.
  Sure, a change to a file in a directory affects the directory, but you
are
  then forced to keep a cache of stat structures around to compare
things in
  order to find out which file.
* dnotify's interface to user-space is awful.
	o dnotify uses signals to communicate with user-space.
	o Specifically, dnotify uses SIGIO.
	o But then you can pick a different signal! So by "signals," I really
	  meant you need to use real-time signals if you want to queue the
	  events.
* dnotify basically ignores any problems that would arise in the VFS
from hard
  links.
* Rumor is that the "d" in "dnotify" does not stand for "directory" but
for
  "suck."

A suitable replacement is "inotify." And now, my tract on what inotify
brings
to the table:

* inotify's interface is a device node, not SIGIO.
	o You open only a single fd, to the device node. No more pinning
	  directories or opening a million file descriptors.
	o Usage is nice: open the device, issue simple commands via ioctl(),
	  and then block on the device. It returns events when, well, there are
	  events to be returned.
	o You can select() on the device node and so it integrates with main
	  loops like coffee mixed with vanilla milkshake.
* inotify has an event that says "the filesystem that the item you were
  watching is on was unmounted" (this is particularly cool).
* inotify can watch directories or files.
* The "i" in inotify does not stand for "suck" but for "inode" -- the
logical
  choice since inotify is inode-based. 


--COMPLEXITY--

I have been asked what the complexity of inotify is. Inotify has
2 path codes where complexity could be an issue:

Adding a watch to a device
	This code has to check if the inode is already being watched 
	by the device, this is O(1) since the maximum number of 
	devices is limited to 8.


Removing a watch from a device
	This code has to do a search of all watches on the device to
	find the watch descriptor that is being asked to remove.
	This involves a linear search, but should not really be an issue
	because it is limited to 8192 entries. If this does turn in to
	a concern, I would replace the list of watches on the device
	with a sorted binary tree, so that the search could be done
	very quickly.

	In the near future this will be based on idr, and the complexity
	will be O(logn)


The calls to inotify from the VFS code has a complexity of O(1) so
inotify does not affect the speed of VFS operations.

--MEMORY USAGE--

The inotify data structures are light weight:

inotify watch is 40 bytes
inotify device is 68 bytes
inotify event is 272 bytes

So assuming a device has 8192 watches, the structures are only going
to consume 320KB of memory. With a maximum number of 8 devices allowed
to exist at a time, this is still only 2.5 MB

Each device can also have 256 events queued at a time, which sums to
68KB per device. And only .5 MB if all devices are opened and have
a full event queue.

So approximately 3 MB of memory are used in the rare case of 
everything open and full.

Each inotify watch pins the inode of a directory/file in memory,
the size of an inode is different per file system but lets assume
that it is 512 byes. 

So assuming the maximum number of global watches are active, this would
pin down 32 MB of inodes in the inode cache. Again not a problem
on a modern system. 

On smaller systems, the maximum watches / events could be lowered
to provide a smaller foot print.

Keep in mind that this is an absolute worst case memory analysis.
In reality it will most likely cost approximately 5MB.

--HOWTO USE--
Inotify is a character device that when opened offers 2 IOCTL's.
(It actually has 4 but the other 2 are used for debugging)

INOTIFY_WATCH:
        Which takes a path and event mask and returns a unique 
        (to the instance of the driver) integer (wd [watch descriptor]
        from here on) that is a 1:1 mapping to the path passed. 
        What happens is inotify gets the inode (and ref's the inode)
        for the path and adds a inotify_watch structure to the inodes
        list of watches. If this instance of the driver is already
        watching the path, the event mask will be updated and
        the original wd will be returned.

INOTIFY_IGNORE:
        Which takes an integer (that you got from INOTIFY_WATCH) 
        representing a wd that you are not interested in watching
        anymore. This will:

        send an IGNORE event to the device
        remove the inotify_watch structure from the device and 
        from the inode and unref the inode.
        
After you are watching 1 or more paths, you can read from the fd
and get events. The events are struct inotify_event. If you are
watching a directory and something happens to a file in the directory
the event will contain the filename (just the filename not the full
path).

-- EVENTS --
IN_ACCESS - Sent when file is accessed.
IN_MODIFY - Sent when file is modified.
IN_ATTRIB - Sent when file is chmod'ed.
IN_CLOSE_WRITE - Sent when file is closed and was opened for writing.
IN_CLOSE_NOWRITE - Sent when file is closed but was not opened for
writing.
IN_CLOSE - either of the two above events.
IN_OPEN - Sent when file is opened.
IN_MOVED_FROM - Sent to the source folder of a move.
IN_MOVED_TO - Sent to the destination folder of a move.
IN_DELETE_SUBDIR - Sent when a sub directory is deleted. (When watching
parent)
IN_DELETE_FILE - Sent when a file is deleted. (When watching parent)
IN_CREATE_SUBDIR - Sent when a sub directory is created. (When watching
parent)
IN_CREATE_FILE - Sent when a file is created. (When watching parent)
IN_DELETE_SELF - Sent when file is deleted.
IN_UNMOUNT - Sent when the filesystem is being unmounted.
IN_Q_OVERFLOW - Sent when your event queue has over flowed.

The MOVED_FROM/MOVED_TO events are always sent in pairs.
MOVED_FROM/MOVED_TO
is also sent when a file is renamed. The cookie field in the event pairs
up MOVED_FROM/MOVED_TO events. These two events are not guaranteed to be
successive in the event stream. You must rely on the cookie to pair
them up. (Note, the cookie is not sent yet.)

If you aren't watching the source and destination folders in a MOVE.
You will only get MOVED_TO or MOVED_FROM. In this case, MOVED_TO
is equivelent to a CREATE and MOVED_FROM is equivelent to a DELETE.

--KERNEL CHANGES--
inotify char device driver.

Adding calls to inotify_inode_queue_event and 
inotify_dentry_parent_queue_event from VFS operations.
Dnotify has the same function calls. The complexity of the VFS 
operations is not affected because inotify_*_queue_event is O(1).


Adding a call to inotify_super_block_umount from
generic_shutdown_superblock

inotify_super_block_umount consists of this:
find all of the inodes that are on the super block being shut down,
sends each watch on each inode the UNMOUNT and IGNORED event
removes the watch structures from each instance of the device driver 
and each inode.
unref's the inode.


--=-x0MFNKLLAUupVNiEEW/W
Content-Disposition: attachment; filename=inotify-0.14.patch
Content-Transfer-Encoding: base64
Content-Type: text/x-patch; name=inotify-0.14.patch; charset=UTF-8

LS0tIGNsZWFuL2xpbnV4L2RyaXZlcnMvY2hhci9pbm90aWZ5LmMJMTk2OS0xMi0zMSAxOTowMDow
MC4wMDAwMDAwMDAgLTA1MDANCisrKyBsaW51eC9kcml2ZXJzL2NoYXIvaW5vdGlmeS5jCTIwMDQt
MTAtMTEgMjE6NTE6NTMuMDAwMDAwMDAwIC0wNDAwDQpAQCAtMCwwICsxLDkzMiBAQA0KKy8qDQor
ICogSW5vZGUgYmFzZWQgZGlyZWN0b3J5IG5vdGlmaWNhdGlvbnMgZm9yIExpbnV4Lg0KKyAqDQor
ICogQ29weXJpZ2h0IChDKSAyMDA0IEpvaG4gTWNDdXRjaGFuDQorICoNCisgKiBUaGlzIHByb2dy
YW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlm
eSBpdA0KKyAqIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vu
c2UgYXMgcHVibGlzaGVkIGJ5IHRoZQ0KKyAqIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0
aGVyIHZlcnNpb24gMiwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkNCisgKiBsYXRlciB2ZXJzaW9u
Lg0KKyAqDQorICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQg
aXQgd2lsbCBiZSB1c2VmdWwsIGJ1dA0KKyAqIFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0
IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCisgKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklU
TkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQ0KKyAqIEdlbmVyYWwg
UHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCisgKi8NCisNCisvKiBUT0RPOiANCisg
KiB1bm1vdW50IGV2ZW50cyBkb24ndCBnZXQgc2VudCBpZiBmaWxlc3lzdGVtIGlzIG1vdW50ZWQg
aW4gdHdvIHBsYWNlcw0KKyAqIGR5bmFtaWNhbGx5IGFsbG9jYXRlIGV2ZW50IGZpbGVuYW1lDQor
ICovDQorDQorI2luY2x1ZGUgPGxpbnV4L2JpdG1hcC5oPg0KKyNpbmNsdWRlIDxsaW51eC9tb2R1
bGUuaD4NCisjaW5jbHVkZSA8bGludXgva2VybmVsLmg+DQorI2luY2x1ZGUgPGxpbnV4L3NjaGVk
Lmg+DQorI2luY2x1ZGUgPGxpbnV4L3NwaW5sb2NrLmg+DQorI2luY2x1ZGUgPGxpbnV4L3NsYWIu
aD4NCisjaW5jbHVkZSA8bGludXgvZnMuaD4NCisjaW5jbHVkZSA8bGludXgvbmFtZWkuaD4NCisj
aW5jbHVkZSA8bGludXgvcG9sbC5oPg0KKyNpbmNsdWRlIDxsaW51eC9taXNjZGV2aWNlLmg+DQor
I2luY2x1ZGUgPGxpbnV4L2luaXQuaD4NCisjaW5jbHVkZSA8bGludXgvbGlzdC5oPg0KKyNpbmNs
dWRlIDxsaW51eC93cml0ZWJhY2suaD4NCisjaW5jbHVkZSA8bGludXgvaW5vdGlmeS5oPg0KKw0K
KyNkZWZpbmUgTUFYX0lOT1RJRllfREVWUwkgIDgJLyogbWF4IG9wZW4gaW5vdGlmeSBkZXZpY2Vz
ICovDQorI2RlZmluZSBNQVhfSU5PVElGWV9ERVZfV0FUQ0hFUyAgIDgxOTIJLyogbWF4IHRvdGFs
IHdhdGNoZXMgKi8NCisjZGVmaW5lIE1BWF9JTk9USUZZX1FVRVVFRF9FVkVOVFMgMjU2CS8qIG1h
eCBldmVudHMgcXVldWVkIG9uIHRoZSBkZXYgKi8NCisNCitzdGF0aWMgYXRvbWljX3Qgd2F0Y2hf
Y291bnQ7DQorc3RhdGljIGF0b21pY190IGlub3RpZnlfY29va2llOw0KK3N0YXRpYyBrbWVtX2Nh
Y2hlX3QgKndhdGNoX2NhY2hlcDsNCitzdGF0aWMga21lbV9jYWNoZV90ICpldmVudF9jYWNoZXA7
DQorc3RhdGljIGttZW1fY2FjaGVfdCAqaW5vZGVfZGF0YV9jYWNoZXA7DQorDQorLyoNCisgKiBz
dHJ1Y3QgaW5vdGlmeV9kZXZpY2UgLSByZXByZXNlbnRzIGFuIG9wZW4gaW5zdGFuY2Ugb2YgYW4g
aW5vdGlmeSBkZXZpY2UNCisgKg0KKyAqIEZvciBlYWNoIGlub3RpZnkgZGV2aWNlLCB3ZSBuZWVk
IHRvIGtlZXAgdHJhY2sgb2YgdGhlIGV2ZW50cyBxdWV1ZWQgb24gaXQsDQorICogYSBsaXN0IG9m
IHRoZSBpbm9kZXMgdGhhdCB3ZSBhcmUgd2F0Y2hpbmcsIGFuZCBzbyBvbi4NCisgKg0KKyAqICdi
aXRtYXNrJyBob2xkcyBvbmUgYml0IGZvciBlYWNoIHBvc3NpYmxlIHdhdGNoIGRlc2NyaXB0b3I6
IGEgc2V0IGJpdA0KKyAqIGltcGxpZXMgdGhhdCB0aGUgZ2l2ZW4gV0QgaXMgdmFsaWQsIHVuc2V0
IGltcGxpZXMgaXQgaXMgbm90Lg0KKyAqDQorICogVGhpcyBzdHJ1Y3R1cmUgaXMgcHJvdGVjdGVk
IGJ5ICdsb2NrJy4gIExvY2sgb3JkZXJpbmc6DQorICoNCisgKiBpbm9kZS0+aV9sb2NrDQorICoJ
ZGV2LT5sb2NrDQorICoJCWRldi0+d2FpdC0+bG9jaw0KKyAqDQorICogRklYTUU6IExvb2sgYXQg
cmVwbGFjaW5nIGlfbG9jayB3aXRoIGlfc2VtLg0KKyAqLw0KK3N0cnVjdCBpbm90aWZ5X2Rldmlj
ZSB7DQorCURFQ0xBUkVfQklUTUFQKGJpdG1hc2ssIE1BWF9JTk9USUZZX0RFVl9XQVRDSEVTKTsN
CisJd2FpdF9xdWV1ZV9oZWFkX3QgCXdhaXQ7DQorCXN0cnVjdCBsaXN0X2hlYWQgCWV2ZW50czsN
CisJc3RydWN0IGxpc3RfaGVhZCAJd2F0Y2hlczsNCisJc3BpbmxvY2tfdAkJbG9jazsNCisJdW5z
aWduZWQgaW50CQlldmVudF9jb3VudDsNCisJdW5zaWduZWQgaW50CQlucl93YXRjaGVzOw0KK307
DQorDQorc3RydWN0IGlub3RpZnlfd2F0Y2ggew0KKwlzMzIgCQkJd2Q7CS8qIHdhdGNoIGRlc2Ny
aXB0b3IgKi8NCisJdTMyCQkJbWFzazsNCisJc3RydWN0IGlub2RlICoJCWlub2RlOw0KKwlzdHJ1
Y3QgaW5vdGlmeV9kZXZpY2UgKglkZXY7DQorCXN0cnVjdCBsaXN0X2hlYWQJZF9saXN0OwkvKiBk
ZXZpY2UgbGlzdCAqLw0KKwlzdHJ1Y3QgbGlzdF9oZWFkCWlfbGlzdDsgLyogaW5vZGUgbGlzdCAq
Lw0KKwlzdHJ1Y3QgbGlzdF9oZWFkCXVfbGlzdDsgLyogdW5tb3VudCBsaXN0ICovDQorfTsNCisj
ZGVmaW5lIGlub3RpZnlfd2F0Y2hfZF9saXN0KHBvcykgbGlzdF9lbnRyeSgocG9zKSwgc3RydWN0
IGlub3RpZnlfd2F0Y2gsIGRfbGlzdCkNCisjZGVmaW5lIGlub3RpZnlfd2F0Y2hfaV9saXN0KHBv
cykgbGlzdF9lbnRyeSgocG9zKSwgc3RydWN0IGlub3RpZnlfd2F0Y2gsIGlfbGlzdCkNCisjZGVm
aW5lIGlub3RpZnlfd2F0Y2hfdV9saXN0KHBvcykgbGlzdF9lbnRyeSgocG9zKSwgc3RydWN0IGlu
b3RpZnlfd2F0Y2gsIHVfbGlzdCkNCisNCisvKg0KKyAqIEEgbGlzdCBvZiB0aGVzZSBpcyBhdHRh
Y2hlZCB0byBlYWNoIGluc3RhbmNlIG9mIHRoZSBkcml2ZXINCisgKiB3aGVuIHRoZSBkcml2ZXJz
IHJlYWQoKSBnZXRzIGNhbGxlZCwgdGhpcyBsaXN0IGlzIHdhbGtlZCBhbmQNCisgKiBhbGwgZXZl
bnRzIHRoYXQgY2FuIGZpdCBpbiB0aGUgYnVmZmVyIGdldCBkZWxpdmVyZWQNCisgKi8NCitzdHJ1
Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQgew0KKyAgICAgICAgc3RydWN0IGxpc3RfaGVhZCAgICAg
ICAgbGlzdDsNCisJc3RydWN0IGlub3RpZnlfZXZlbnQJZXZlbnQ7DQorfTsNCisNCisvKg0KKyAq
IGZpbmRfaW5vZGUgLSByZXNvbHZlIGEgdXNlci1naXZlbiBwYXRoIHRvIGEgc3BlY2lmaWMgaW5v
ZGUgYW5kIGlnZXQoKSBpdA0KKyAqLw0KK3N0YXRpYyBzdHJ1Y3QgaW5vZGUgKiBmaW5kX2lub2Rl
KGNvbnN0IGNoYXIgX191c2VyICpkaXJuYW1lKQ0KK3sNCisJc3RydWN0IGlub2RlICppbm9kZTsN
CisJc3RydWN0IG5hbWVpZGF0YSBuZDsNCisJaW50IGVycm9yOw0KKw0KKwllcnJvciA9IF9fdXNl
cl93YWxrKGRpcm5hbWUsIExPT0tVUF9GT0xMT1csICZuZCk7DQorCWlmIChlcnJvcikgew0KKwkJ
aW5vZGUgPSBFUlJfUFRSKGVycm9yKTsNCisJCWdvdG8gb3V0Ow0KKwl9DQorDQorCWlub2RlID0g
bmQuZGVudHJ5LT5kX2lub2RlOw0KKw0KKwkvKiB5b3UgY2FuIG9ubHkgd2F0Y2ggYW4gaW5vZGUg
aWYgeW91IGhhdmUgcmVhZCBwZXJtaXNzaW9ucyBvbiBpdCAqLw0KKwllcnJvciA9IHZmc19wZXJt
aXNzaW9uKGlub2RlLCBNQVlfUkVBRCk7DQorCWlmIChlcnJvcikgew0KKwkJaW5vZGUgPSBFUlJf
UFRSKGVycm9yKTsNCisJCWdvdG8gcmVsZWFzZV9hbmRfb3V0Ow0KKwl9DQorDQorCV9faWdldChp
bm9kZSk7DQorcmVsZWFzZV9hbmRfb3V0Og0KKwlwYXRoX3JlbGVhc2UoJm5kKTsNCitvdXQ6DQor
CXJldHVybiBpbm9kZTsNCit9DQorDQorc3RhdGljIGlubGluZSB2b2lkIHVucmVmX2lub2RlKHN0
cnVjdCBpbm9kZSAqaW5vZGUpDQorew0KKwlpcHV0KGlub2RlKTsNCit9DQorDQorc3RydWN0IGlu
b3RpZnlfa2VybmVsX2V2ZW50ICprZXJuZWxfZXZlbnQoczMyIHdkLCB1MzIgbWFzaywgdTMyIGNv
b2tpZSwNCisJCQkJCSAgY29uc3QgY2hhciAqZmlsZW5hbWUpDQorew0KKwlzdHJ1Y3QgaW5vdGlm
eV9rZXJuZWxfZXZlbnQgKmtldmVudDsNCisNCisJa2V2ZW50ID0ga21lbV9jYWNoZV9hbGxvYyhl
dmVudF9jYWNoZXAsIEdGUF9BVE9NSUMpOw0KKwlpZiAoIWtldmVudCkNCisJCWdvdG8gb3V0Ow0K
Kw0KKwkvKiB3ZSBoYW5kIHRoaXMgb3V0IHRvIHVzZXItc3BhY2UsIHNvIHplcm8gaXQgb3V0IGp1
c3QgaW4gY2FzZSAqLw0KKwltZW1zZXQoa2V2ZW50LCAwLCBzaXplb2Yoc3RydWN0IGlub3RpZnlf
a2VybmVsX2V2ZW50KSk7DQorDQorCWtldmVudC0+ZXZlbnQud2QgPSB3ZDsNCisJa2V2ZW50LT5l
dmVudC5tYXNrID0gbWFzazsNCisJa2V2ZW50LT5ldmVudC5jb29raWUgPSBjb29raWU7DQorCUlO
SVRfTElTVF9IRUFEKCZrZXZlbnQtPmxpc3QpOw0KKw0KKwlpZiAoZmlsZW5hbWUpIHsNCisJCXN0
cm5jcHkoa2V2ZW50LT5ldmVudC5maWxlbmFtZSwgZmlsZW5hbWUsDQorCQkJSU5PVElGWV9GSUxF
TkFNRV9NQVgpOw0KKwkJa2V2ZW50LT5ldmVudC5maWxlbmFtZVtJTk9USUZZX0ZJTEVOQU1FX01B
WC0xXSA9ICdcMCc7DQorCX0gZWxzZQ0KKwkJa2V2ZW50LT5ldmVudC5maWxlbmFtZVswXSA9ICdc
MCc7DQorDQorb3V0Og0KKwlyZXR1cm4ga2V2ZW50Ow0KK30NCisNCit2b2lkIGRlbGV0ZV9rZXJu
ZWxfZXZlbnQoc3RydWN0IGlub3RpZnlfa2VybmVsX2V2ZW50ICprZXZlbnQpDQorew0KKwlpZiAo
IWtldmVudCkNCisJCXJldHVybjsNCisJa21lbV9jYWNoZV9mcmVlKGV2ZW50X2NhY2hlcCwga2V2
ZW50KTsNCit9DQorDQorI2RlZmluZSBsaXN0X3RvX2lub3RpZnlfa2VybmVsX2V2ZW50KHBvcykg
bGlzdF9lbnRyeSgocG9zKSwgc3RydWN0IGlub3RpZnlfa2VybmVsX2V2ZW50LCBsaXN0KQ0KKyNk
ZWZpbmUgaW5vdGlmeV9kZXZfZ2V0X2V2ZW50KGRldikgKGxpc3RfdG9faW5vdGlmeV9rZXJuZWxf
ZXZlbnQoZGV2LT5ldmVudHMubmV4dCkpDQorI2RlZmluZSBpbm90aWZ5X2Rldl9oYXNfZXZlbnRz
KGRldikJKCFsaXN0X2VtcHR5KCZkZXYtPmV2ZW50cykpDQorDQorLyogRG9lcyB0aGlzIGV2ZW50
cyBtYXNrIGdldCBzZW50IHRvIHRoZSB3YXRjaCA/ICovDQorI2RlZmluZSBldmVudF9hbmQoZXZl
bnRfbWFzayx3YXRjaGVzX21hc2spIAkoKGV2ZW50X21hc2sgPT0gSU5fVU5NT1VOVCkgfHwgXA0K
KwkJCQkJCShldmVudF9tYXNrID09IElOX0lHTk9SRUQpIHx8IFwNCisJCQkJCQkoZXZlbnRfbWFz
ayAmIHdhdGNoZXNfbWFzaykpDQorDQorLyoNCisgKiBpbm90aWZ5X2Rldl9xdWV1ZV9ldmVudCAt
IGFkZCBhIG5ldyBldmVudCB0byB0aGUgZ2l2ZW4gZGV2aWNlDQorICoNCisgKiBDYWxsZXIgbXVz
dCBob2xkIGRldi0+bG9jay4NCisgKi8NCitzdGF0aWMgdm9pZCBpbm90aWZ5X2Rldl9xdWV1ZV9l
dmVudChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwNCisJCQkJICAgIHN0cnVjdCBpbm90aWZ5
X3dhdGNoICp3YXRjaCwgdTMyIG1hc2ssDQorCQkJCSAgICB1MzIgY29va2llLCBjb25zdCBjaGFy
ICpmaWxlbmFtZSkNCit7DQorCXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVudCAqa2V2ZW50LCAq
bGFzdDsNCisNCisJLyoNCisJICogQ2hlY2sgaWYgdGhlIG5ldyBldmVudCBpcyBhIGR1cGxpY2F0
ZSBvZiB0aGUgbGFzdCBldmVudCBxdWV1ZWQuDQorCSAqLw0KKwlsYXN0ID0gaW5vdGlmeV9kZXZf
Z2V0X2V2ZW50KGRldik7DQorCWlmIChkZXYtPmV2ZW50X2NvdW50ICYmIGxhc3QtPmV2ZW50Lm1h
c2sgPT0gbWFzayAmJg0KKwkJCWxhc3QtPmV2ZW50LndkID09IHdhdGNoLT53ZCkgew0KKwkJLyog
Q2hlY2sgaWYgdGhlIGZpbGVuYW1lcyBtYXRjaCAqLw0KKwkJaWYgKCFmaWxlbmFtZSAmJiBsYXN0
LT5ldmVudC5maWxlbmFtZVswXSA9PSAnXDAnKQ0KKwkJCXJldHVybjsNCisJCWlmIChmaWxlbmFt
ZSAmJiAhc3RyY21wKGxhc3QtPmV2ZW50LmZpbGVuYW1lLCBmaWxlbmFtZSkpDQorCQkJcmV0dXJu
Ow0KKwl9DQorDQorCS8qDQorCSAqIHRoZSBxdWV1ZSBoYXMgYWxyZWFkeSBvdmVyZmxvd2VkIGFu
ZCB3ZSBoYXZlIGFscmVhZHkgc2VudCB0aGUNCisJICogUV9PVkVSRkxPVyBldmVudA0KKwkgKi8N
CisJaWYgKGRldi0+ZXZlbnRfY291bnQgPiBNQVhfSU5PVElGWV9RVUVVRURfRVZFTlRTKQ0KKwkJ
cmV0dXJuOw0KKw0KKwkvKiB0aGUgcXVldWUgaGFzIGp1c3Qgb3ZlcmZsb3dlZCBhbmQgd2UgbmVl
ZCB0byBub3RpZnkgdXNlciBzcGFjZSAqLw0KKwlpZiAoZGV2LT5ldmVudF9jb3VudCA9PSBNQVhf
SU5PVElGWV9RVUVVRURfRVZFTlRTKSB7DQorCQlkZXYtPmV2ZW50X2NvdW50Kys7DQorCQlrZXZl
bnQgPSBrZXJuZWxfZXZlbnQoLTEsIElOX1FfT1ZFUkZMT1csIGNvb2tpZSwgTlVMTCk7DQorCQln
b3RvIGFkZF9ldmVudF90b19xdWV1ZTsNCisJfQ0KKw0KKwlpZiAoIWV2ZW50X2FuZChtYXNrLCB3
YXRjaC0+aW5vZGUtPmlub3RpZnlfZGF0YS0+d2F0Y2hfbWFzaykgfHwNCisJCQkhZXZlbnRfYW5k
KG1hc2ssIHdhdGNoLT5tYXNrKSkNCisJCXJldHVybjsNCisNCisJZGV2LT5ldmVudF9jb3VudCsr
Ow0KKwlrZXZlbnQgPSBrZXJuZWxfZXZlbnQod2F0Y2gtPndkLCBtYXNrLCBjb29raWUsIGZpbGVu
YW1lKTsNCisNCithZGRfZXZlbnRfdG9fcXVldWU6DQorCWlmICgha2V2ZW50KSB7DQorCQlkZXYt
PmV2ZW50X2NvdW50LS07DQorCQlyZXR1cm47DQorCX0NCisNCisJLyogcXVldWUgdGhlIGV2ZW50
IGFuZCB3YWtlIHVwIGFueW9uZSB3YWl0aW5nICovDQorCWxpc3RfYWRkX3RhaWwoJmtldmVudC0+
bGlzdCwgJmRldi0+ZXZlbnRzKTsNCisJd2FrZV91cF9pbnRlcnJ1cHRpYmxlKCZkZXYtPndhaXQp
Ow0KK30NCisNCisvKg0KKyAqIGlub3RpZnlfZGV2X2V2ZW50X2RlcXVldWUgLSBkZXN0cm95IGFu
IGV2ZW50IG9uIHRoZSBnaXZlbiBkZXZpY2UNCisgKg0KKyAqIENhbGxlciBtdXN0IGhvbGQgZGV2
LT5sb2NrLg0KKyAqLw0KK3N0YXRpYyB2b2lkIGlub3RpZnlfZGV2X2V2ZW50X2RlcXVldWUoc3Ry
dWN0IGlub3RpZnlfZGV2aWNlICpkZXYpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZl
bnQgKmtldmVudDsNCisNCisJaWYgKCFpbm90aWZ5X2Rldl9oYXNfZXZlbnRzKGRldikpDQorCQly
ZXR1cm47DQorDQorCWtldmVudCA9IGlub3RpZnlfZGV2X2dldF9ldmVudChkZXYpOw0KKwlsaXN0
X2RlbCgma2V2ZW50LT5saXN0KTsNCisJZGV2LT5ldmVudF9jb3VudC0tOw0KKwlkZWxldGVfa2Vy
bmVsX2V2ZW50KGtldmVudCk7DQorDQorfQ0KKw0KKy8qDQorICogaW5vdGlmeV9kZXZfZ2V0X3dk
IC0gcmV0dXJucyB0aGUgbmV4dCBXRCBmb3IgdXNlIGJ5IHRoZSBnaXZlbiBkZXYNCisgKg0KKyAq
IENhbGxlciBtdXN0IGhvbGQgZGV2LT5sb2NrIGJlZm9yZSBjYWxsaW5nLg0KKyAqLw0KK3N0YXRp
YyBpbnQgaW5vdGlmeV9kZXZfZ2V0X3dkKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2KQ0KK3sN
CisJczMyIHdkOw0KKw0KKwlpZiAoIWRldiB8fCBkZXYtPm5yX3dhdGNoZXMgPT0gTUFYX0lOT1RJ
RllfREVWX1dBVENIRVMpDQorCQlyZXR1cm4gLTE7DQorDQorCWRldi0+bnJfd2F0Y2hlcysrOw0K
Kwl3ZCA9IGZpbmRfZmlyc3RfemVyb19iaXQoZGV2LT5iaXRtYXNrLCBNQVhfSU5PVElGWV9ERVZf
V0FUQ0hFUyk7DQorCXNldF9iaXQod2QsIGRldi0+Yml0bWFzayk7DQorDQorCXJldHVybiB3ZDsN
Cit9DQorDQorLyoNCisgKiBpbm90aWZ5X2Rldl9wdXRfd2QgLSByZWxlYXNlIHRoZSBnaXZlbiBX
RCBvbiB0aGUgZ2l2ZW4gZGV2aWNlDQorICoNCisgKiBDYWxsZXIgbXVzdCBob2xkIGRldi0+bG9j
ay4NCisgKi8NCitzdGF0aWMgaW50IGlub3RpZnlfZGV2X3B1dF93ZChzdHJ1Y3QgaW5vdGlmeV9k
ZXZpY2UgKmRldiwgczMyIHdkKQ0KK3sNCisJaWYgKCFkZXYgfHwgd2QgPCAwKQ0KKwkJcmV0dXJu
IC0xOw0KKw0KKwlkZXYtPm5yX3dhdGNoZXMtLTsNCisJY2xlYXJfYml0KHdkLCBkZXYtPmJpdG1h
c2spOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQorLyoNCisgKiBjcmVhdGVfd2F0Y2ggLSBjcmVh
dGVzIGEgd2F0Y2ggb24gdGhlIGdpdmVuIGRldmljZS4NCisgKg0KKyAqIEdyYWJzIGRldi0+bG9j
aywgc28gdGhlIGNhbGxlciBtdXN0IG5vdCBob2xkIGl0Lg0KKyAqLw0KK3N0YXRpYyBzdHJ1Y3Qg
aW5vdGlmeV93YXRjaCAqY3JlYXRlX3dhdGNoKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LA0K
KwkJCQkJICB1MzIgbWFzaywgc3RydWN0IGlub2RlICppbm9kZSkNCit7DQorCXN0cnVjdCBpbm90
aWZ5X3dhdGNoICp3YXRjaDsNCisNCisJd2F0Y2ggPSBrbWVtX2NhY2hlX2FsbG9jKHdhdGNoX2Nh
Y2hlcCwgR0ZQX0tFUk5FTCk7DQorCWlmICghd2F0Y2gpDQorCQlyZXR1cm4gTlVMTDsNCisNCisJ
d2F0Y2gtPm1hc2sgPSBtYXNrOw0KKwl3YXRjaC0+aW5vZGUgPSBpbm9kZTsNCisJd2F0Y2gtPmRl
diA9IGRldjsNCisJSU5JVF9MSVNUX0hFQUQoJndhdGNoLT5kX2xpc3QpOw0KKwlJTklUX0xJU1Rf
SEVBRCgmd2F0Y2gtPmlfbGlzdCk7DQorCUlOSVRfTElTVF9IRUFEKCZ3YXRjaC0+dV9saXN0KTsN
CisNCisJc3Bpbl9sb2NrKCZkZXYtPmxvY2spOw0KKwl3YXRjaC0+d2QgPSBpbm90aWZ5X2Rldl9n
ZXRfd2QoZGV2KTsNCisJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorDQorCWlmICh3YXRjaC0+
d2QgPCAwKSB7DQorCQlrbWVtX2NhY2hlX2ZyZWUod2F0Y2hfY2FjaGVwLCB3YXRjaCk7DQorCQly
ZXR1cm4gTlVMTDsNCisJfQ0KKw0KKwlyZXR1cm4gd2F0Y2g7DQorfQ0KKw0KKy8qDQorICogZGVs
ZXRlX3dhdGNoIC0gcmVtb3ZlcyB0aGUgZ2l2ZW4gJ3dhdGNoJyBmcm9tIHRoZSBnaXZlbiAnZGV2
Jw0KKyAqDQorICogQ2FsbGVyIG11c3QgaG9sZCBkZXYtPmxvY2suDQorICovDQorc3RhdGljIHZv
aWQgZGVsZXRlX3dhdGNoKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJCSBzdHJ1Y3Qg
aW5vdGlmeV93YXRjaCAqd2F0Y2gpDQorew0KKwlpbm90aWZ5X2Rldl9wdXRfd2QoZGV2LCB3YXRj
aC0+d2QpOw0KKwlrbWVtX2NhY2hlX2ZyZWUod2F0Y2hfY2FjaGVwLCB3YXRjaCk7DQorfQ0KKw0K
Ky8qDQorICogaW5vdGlmeV9maW5kX2RldiAtIGZpbmQgdGhlIHdhdGNoIGFzc29jaWF0ZWQgd2l0
aCB0aGUgZ2l2ZW4gaW5vZGUgYW5kIGRldg0KKyAqDQorICogQ2FsbGVyIG11c3QgaG9sZCBkZXYt
PmxvY2suDQorICovDQorc3RhdGljIHN0cnVjdCBpbm90aWZ5X3dhdGNoICppbm9kZV9maW5kX2Rl
dihzdHJ1Y3QgaW5vZGUgKmlub2RlLA0KKwkJCQkJICAgIHN0cnVjdCBpbm90aWZ5X2RldmljZSAq
ZGV2KQ0KK3sNCisJc3RydWN0IGlub3RpZnlfd2F0Y2ggKndhdGNoOw0KKw0KKwlpZiAoIWlub2Rl
LT5pbm90aWZ5X2RhdGEpDQorCQlyZXR1cm4gTlVMTDsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRy
eSh3YXRjaCwgJmlub2RlLT5pbm90aWZ5X2RhdGEtPndhdGNoZXMsIGlfbGlzdCkgew0KKwkJaWYg
KHdhdGNoLT5kZXYgPT0gZGV2KQ0KKwkJCXJldHVybiB3YXRjaDsNCisJfQ0KKw0KKwlyZXR1cm4g
TlVMTDsNCit9DQorDQorc3RhdGljIHN0cnVjdCBpbm90aWZ5X3dhdGNoICpkZXZfZmluZF93ZChz
dHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwgczMyIHdkKQ0KK3sNCisJc3RydWN0IGlub3RpZnlf
d2F0Y2ggKndhdGNoOw0KKw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5KHdhdGNoLCAmZGV2LT53YXRj
aGVzLCBkX2xpc3QpIHsNCisJCWlmICh3YXRjaC0+d2QgPT0gd2QpDQorCQkJcmV0dXJuIHdhdGNo
Ow0KKwl9DQorDQorCXJldHVybiBOVUxMOw0KK30NCisNCitzdGF0aWMgaW50IGlub3RpZnlfZGV2
X2lzX3dhdGNoaW5nX2lub2RlKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJCQkJIHN0
cnVjdCBpbm9kZSAqaW5vZGUpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaCAqd2F0Y2g7DQor
DQorCWxpc3RfZm9yX2VhY2hfZW50cnkod2F0Y2gsICZkZXYtPndhdGNoZXMsIGRfbGlzdCkgew0K
KwkJaWYgKHdhdGNoLT5pbm9kZSA9PSBpbm9kZSkNCisJCQlyZXR1cm4gMTsNCisJfQ0KKw0KKwly
ZXR1cm4gMDsNCit9DQorDQorLyoNCisgKiBpbm90aWZ5X2Rldl9hZGRfd2F0Y2hlciAtIGFkZCB0
aGUgZ2l2ZW4gd2F0Y2hlciB0byB0aGUgZ2l2ZW4gZGV2aWNlIGluc3RhbmNlDQorICoNCisgKiBD
YWxsZXIgbXVzdCBob2xkIGRldi0+bG9jay4NCisgKi8NCitzdGF0aWMgaW50IGlub3RpZnlfZGV2
X2FkZF93YXRjaChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwNCisJCQkJIHN0cnVjdCBpbm90
aWZ5X3dhdGNoICp3YXRjaCkNCit7DQorCWlmICghZGV2IHx8ICF3YXRjaCkNCisJCXJldHVybiAt
RUlOVkFMOw0KKw0KKwlpZiAoZGV2X2ZpbmRfd2QgKGRldiwgd2F0Y2gtPndkKSkNCisJCXJldHVy
biAtRUlOVkFMOw0KKw0KKwlpZiAoZGV2LT5ucl93YXRjaGVzID09IE1BWF9JTk9USUZZX0RFVl9X
QVRDSEVTKQ0KKwkJcmV0dXJuIC1FTk9TUEM7DQorDQorCWxpc3RfYWRkKCZ3YXRjaC0+ZF9saXN0
LCAmZGV2LT53YXRjaGVzKTsNCisJcmV0dXJuIDA7DQorfQ0KKw0KKy8qDQorICogaW5vdGlmeV9k
ZXZfcm1fd2F0Y2ggLSByZW1vdmUgdGhlIGdpdmVuIHdhdGNoIGZyb20gdGhlIGdpdmVuIGRldmlj
ZQ0KKyAqDQorICogQ2FsbGVyIG11c3QgaG9sZCBkZXYtPmxvY2sgYmVjYXVzZSB3ZSBjYWxsIGlu
b3RpZnlfZGV2X3F1ZXVlX2V2ZW50KCkuDQorICovDQorc3RhdGljIGludCBpbm90aWZ5X2Rldl9y
bV93YXRjaChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwNCisJCQkJc3RydWN0IGlub3RpZnlf
d2F0Y2ggKndhdGNoKQ0KK3sNCisJaWYgKCF3YXRjaCkNCisJCXJldHVybiAtRUlOVkFMOw0KKw0K
Kwlpbm90aWZ5X2Rldl9xdWV1ZV9ldmVudChkZXYsIHdhdGNoLCBJTl9JR05PUkVELCAwLCBOVUxM
KTsNCisJbGlzdF9kZWwoJndhdGNoLT5kX2xpc3QpOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQor
dm9pZCBpbm9kZV91cGRhdGVfd2F0Y2hfbWFzayhzdHJ1Y3QgaW5vZGUgKmlub2RlKQ0KK3sNCisJ
c3RydWN0IGlub3RpZnlfd2F0Y2ggKndhdGNoOw0KKwl1MzIgbmV3X21hc2s7DQorDQorCWlmICgh
aW5vZGUtPmlub3RpZnlfZGF0YSkNCisJCXJldHVybjsNCisNCisJbmV3X21hc2sgPSAwOw0KKwls
aXN0X2Zvcl9lYWNoX2VudHJ5KHdhdGNoLCAmaW5vZGUtPmlub3RpZnlfZGF0YS0+d2F0Y2hlcywg
aV9saXN0KQ0KKwkJbmV3X21hc2sgfD0gd2F0Y2gtPm1hc2s7DQorDQorCWlub2RlLT5pbm90aWZ5
X2RhdGEtPndhdGNoX21hc2sgPSBuZXdfbWFzazsNCit9DQorDQorLyoNCisgKiBpbm9kZV9hZGRf
d2F0Y2ggLSBhZGQgYSB3YXRjaCB0byB0aGUgZ2l2ZW4gaW5vZGUNCisgKg0KKyAqIENhbGxlcnMg
bXVzdCBob2xkIGRldi0+bG9jaywgYmVjYXVzZSB3ZSBjYWxsIGlub2RlX2ZpbmRfZGV2KCkuDQor
ICovDQorc3RhdGljIGludCBpbm9kZV9hZGRfd2F0Y2goc3RydWN0IGlub2RlICppbm9kZSwNCisJ
CQkgICBzdHJ1Y3QgaW5vdGlmeV93YXRjaCAqd2F0Y2gpDQorew0KKwlpZiAoIWlub2RlIHx8ICF3
YXRjaCB8fCBpbm9kZV9maW5kX2Rldihpbm9kZSwgd2F0Y2gtPmRldikpDQorCQlyZXR1cm4gLUVJ
TlZBTDsNCisNCisJLyoNCisJICogVGhpcyBpbm9kZSBkb2Vzbid0IGhhdmUgYW4gaW5vdGlmeV9k
YXRhIHN0cnVjdHVyZSBhdHRhY2hlZCB0byBpdA0KKwkgKi8NCisJaWYgKCFpbm9kZS0+aW5vdGlm
eV9kYXRhKSB7DQorCQlpbm9kZS0+aW5vdGlmeV9kYXRhID0ga21lbV9jYWNoZV9hbGxvYyhpbm9k
ZV9kYXRhX2NhY2hlcCwNCisJCQkJCQkgICAgICAgR0ZQX0FUT01JQyk7DQorCQlJTklUX0xJU1Rf
SEVBRCgmaW5vZGUtPmlub3RpZnlfZGF0YS0+d2F0Y2hlcyk7DQorCQlpbm9kZS0+aW5vdGlmeV9k
YXRhLT53YXRjaF9tYXNrID0gMDsNCisJCWlub2RlLT5pbm90aWZ5X2RhdGEtPndhdGNoX2NvdW50
ID0gMDsNCisJfQ0KKwlsaXN0X2FkZCgmd2F0Y2gtPmlfbGlzdCwgJmlub2RlLT5pbm90aWZ5X2Rh
dGEtPndhdGNoZXMpOw0KKwlpbm9kZS0+aW5vdGlmeV9kYXRhLT53YXRjaF9jb3VudCsrOw0KKwlp
bm9kZV91cGRhdGVfd2F0Y2hfbWFzayhpbm9kZSk7DQorDQorCXJldHVybiAwOw0KK30NCisNCitz
dGF0aWMgaW50IGlub2RlX3JtX3dhdGNoKHN0cnVjdCBpbm9kZSAqaW5vZGUsDQorCQkJICBzdHJ1
Y3QgaW5vdGlmeV93YXRjaCAqd2F0Y2gpDQorew0KKwlpZiAoIWlub2RlIHx8ICF3YXRjaCB8fCAh
aW5vZGUtPmlub3RpZnlfZGF0YSkNCisJCXJldHVybiAtRUlOVkFMOw0KKw0KKwlsaXN0X2RlbCgm
d2F0Y2gtPmlfbGlzdCk7DQorCWlub2RlLT5pbm90aWZ5X2RhdGEtPndhdGNoX2NvdW50LS07DQor
DQorCWlmICghaW5vZGUtPmlub3RpZnlfZGF0YS0+d2F0Y2hfY291bnQpIHsNCisJCWttZW1fY2Fj
aGVfZnJlZShpbm9kZV9kYXRhX2NhY2hlcCwgaW5vZGUtPmlub3RpZnlfZGF0YSk7DQorCQlpbm9k
ZS0+aW5vdGlmeV9kYXRhID0gTlVMTDsNCisJfQ0KKw0KKwlpbm9kZV91cGRhdGVfd2F0Y2hfbWFz
ayhpbm9kZSk7DQorDQorCXJldHVybiAwOw0KK30NCisNCisvKiBLZXJuZWwgQVBJICovDQorDQor
dm9pZCBpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KHN0cnVjdCBpbm9kZSAqaW5vZGUsIHUzMiBt
YXNrLCB1MzIgY29va2llLA0KKwkJCSAgICAgICBjb25zdCBjaGFyICpmaWxlbmFtZSkNCit7DQor
CXN0cnVjdCBpbm90aWZ5X3dhdGNoICp3YXRjaDsNCisNCisJaWYgKCFpbm9kZS0+aW5vdGlmeV9k
YXRhKQ0KKwkJcmV0dXJuOw0KKw0KKwlzcGluX2xvY2soJmlub2RlLT5pX2xvY2spOw0KKw0KKwls
aXN0X2Zvcl9lYWNoX2VudHJ5KHdhdGNoLCAmaW5vZGUtPmlub3RpZnlfZGF0YS0+d2F0Y2hlcywg
aV9saXN0KSB7DQorCQlzcGluX2xvY2soJndhdGNoLT5kZXYtPmxvY2spOw0KKwkJaW5vdGlmeV9k
ZXZfcXVldWVfZXZlbnQod2F0Y2gtPmRldiwgd2F0Y2gsIG1hc2ssIGNvb2tpZSwNCisJCQkJCWZp
bGVuYW1lKTsNCisJCXNwaW5fdW5sb2NrKCZ3YXRjaC0+ZGV2LT5sb2NrKTsNCisJfQ0KKw0KKwlz
cGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorfQ0KK0VYUE9SVF9TWU1CT0xfR1BMKGlub3Rp
ZnlfaW5vZGVfcXVldWVfZXZlbnQpOw0KKw0KK3ZvaWQgaW5vdGlmeV9kZW50cnlfcGFyZW50X3F1
ZXVlX2V2ZW50KHN0cnVjdCBkZW50cnkgKmRlbnRyeSwgdTMyIG1hc2ssDQorCQkJCSAgICAgICB1
MzIgY29va2llLCBjb25zdCBjaGFyICpmaWxlbmFtZSkNCit7DQorCXN0cnVjdCBkZW50cnkgKnBh
cmVudDsNCisNCisJcGFyZW50ID0gZGdldF9wYXJlbnQoZGVudHJ5KTsNCisJaW5vdGlmeV9pbm9k
ZV9xdWV1ZV9ldmVudChwYXJlbnQtPmRfaW5vZGUsIG1hc2ssIGNvb2tpZSwgZmlsZW5hbWUpOw0K
KwlkcHV0KHBhcmVudCk7DQorfQ0KK0VYUE9SVF9TWU1CT0xfR1BMKGlub3RpZnlfZGVudHJ5X3Bh
cmVudF9xdWV1ZV9ldmVudCk7DQorDQordTMyIGlub3RpZnlfZ2V0X2Nvb2tpZSgpDQorew0KKwlh
dG9taWNfaW5jKCZpbm90aWZ5X2Nvb2tpZSk7DQorDQorCXJldHVybiBhdG9taWNfcmVhZCgmaW5v
dGlmeV9jb29raWUpOw0KK30NCitFWFBPUlRfU1lNQk9MX0dQTChpbm90aWZ5X2dldF9jb29raWUp
Ow0KKw0KK3N0YXRpYyB2b2lkIGlnbm9yZV9oZWxwZXIoc3RydWN0IGlub3RpZnlfd2F0Y2ggKndh
dGNoLCBpbnQgZXZlbnQpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldjsNCisJc3Ry
dWN0IGlub2RlICppbm9kZTsNCisNCisJaW5vZGUgPSB3YXRjaC0+aW5vZGU7DQorCWRldiA9IHdh
dGNoLT5kZXY7DQorDQorCXNwaW5fbG9jaygmaW5vZGUtPmlfbG9jayk7DQorCXNwaW5fbG9jaygm
ZGV2LT5sb2NrKTsNCisNCisJaWYgKGV2ZW50KQ0KKwkJaW5vdGlmeV9kZXZfcXVldWVfZXZlbnQo
ZGV2LCB3YXRjaCwgZXZlbnQsIDAsIE5VTEwpOw0KKw0KKwlpbm9kZV9ybV93YXRjaChpbm9kZSwg
d2F0Y2gpOw0KKwlpbm90aWZ5X2Rldl9ybV93YXRjaCh3YXRjaC0+ZGV2LCB3YXRjaCk7DQorCWxp
c3RfZGVsKCZ3YXRjaC0+dV9saXN0KTsNCisNCisJZGVsZXRlX3dhdGNoKGRldiwgd2F0Y2gpOw0K
KwlzcGluX3VubG9jaygmZGV2LT5sb2NrKTsNCisJc3Bpbl91bmxvY2soJmlub2RlLT5pX2xvY2sp
Ow0KKw0KKwl1bnJlZl9pbm9kZShpbm9kZSk7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIHByb2Nlc3Nf
dW1vdW50X2xpc3Qoc3RydWN0IGxpc3RfaGVhZCAqdW1vdW50KQ0KK3sNCisJc3RydWN0IGlub3Rp
Znlfd2F0Y2ggKndhdGNoLCAqbmV4dDsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeV9zYWZlKHdh
dGNoLCBuZXh0LCB1bW91bnQsIHVfbGlzdCkNCisJCWlnbm9yZV9oZWxwZXIod2F0Y2gsIElOX1VO
TU9VTlQpOw0KK30NCisNCisvKg0KKyAqIGJ1aWxkX3Vtb3VudF9saXN0IC0gYnVpbGQgYSBsaXN0
IG9mIHdhdGNoZXMgYWZmZWN0ZWQgYnkgYW4gdW5tb3VudC4NCisgKg0KKyAqIENhbGxlciBtdXN0
IGhvbGQgaW5vZGVfbG9jay4NCisgKi8NCitzdGF0aWMgdm9pZCBidWlsZF91bW91bnRfbGlzdChz
dHJ1Y3QgbGlzdF9oZWFkICpoZWFkLCBzdHJ1Y3Qgc3VwZXJfYmxvY2sgKnNiLA0KKwkJCSAgICAg
IHN0cnVjdCBsaXN0X2hlYWQgKnVtb3VudCkNCit7DQorCXN0cnVjdCBpbm9kZSAqaW5vZGU7DQor
DQorCWxpc3RfZm9yX2VhY2hfZW50cnkoaW5vZGUsIGhlYWQsIGlfbGlzdCkgew0KKwkJc3RydWN0
IGlub3RpZnlfd2F0Y2ggKndhdGNoOw0KKw0KKwkJaWYgKGlub2RlLT5pX3NiICE9IHNiKQ0KKwkJ
CWNvbnRpbnVlOw0KKw0KKwkJaWYgKCFpbm9kZS0+aW5vdGlmeV9kYXRhKQ0KKwkJCWNvbnRpbnVl
Ow0KKw0KKwkJc3Bpbl9sb2NrKCZpbm9kZS0+aV9sb2NrKTsNCisNCisJCWxpc3RfZm9yX2VhY2hf
ZW50cnkod2F0Y2gsICZpbm9kZS0+aW5vdGlmeV9kYXRhLT53YXRjaGVzLA0KKwkJCQkgICAgaV9s
aXN0KQ0KKwkJCWxpc3RfYWRkKCZ3YXRjaC0+dV9saXN0LCB1bW91bnQpOw0KKw0KKwkJc3Bpbl91
bmxvY2soJmlub2RlLT5pX2xvY2spOw0KKwl9DQorfQ0KKw0KK3ZvaWQgaW5vdGlmeV9zdXBlcl9i
bG9ja191bW91bnQoc3RydWN0IHN1cGVyX2Jsb2NrICpzYikNCit7DQorCXN0cnVjdCBsaXN0X2hl
YWQgdW1vdW50Ow0KKw0KKwlJTklUX0xJU1RfSEVBRCgmdW1vdW50KTsNCisNCisJc3Bpbl9sb2Nr
KCZpbm9kZV9sb2NrKTsNCisJYnVpbGRfdW1vdW50X2xpc3QoJmlub2RlX2luX3VzZSwgc2IsICZ1
bW91bnQpOw0KKwlzcGluX3VubG9jaygmaW5vZGVfbG9jayk7DQorDQorCXByb2Nlc3NfdW1vdW50
X2xpc3QoJnVtb3VudCk7DQorfQ0KK0VYUE9SVF9TWU1CT0xfR1BMKGlub3RpZnlfc3VwZXJfYmxv
Y2tfdW1vdW50KTsNCisNCisvKg0KKyAqIGlub3RpZnlfaW5vZGVfaXNfZGVhZCAtIGFuIGlub2Rl
IGhhcyBiZWVuIGRlbGV0ZWQsIGNsZWFudXAgYW55IHdhdGNoZXMNCisgKg0KKyAqIEZJWE1FOiBD
YWxsZXJzIG5lZWQgdG8gYWx3YXlzIGhvbGQgaW5vZGUtPmlfbG9jay4NCisgKi8NCit2b2lkIGlu
b3RpZnlfaW5vZGVfaXNfZGVhZChzdHJ1Y3QgaW5vZGUgKmlub2RlKQ0KK3sNCisJc3RydWN0IGlu
b3RpZnlfd2F0Y2ggKndhdGNoLCAqbmV4dDsNCisJc3RydWN0IGlub3RpZnlfaW5vZGVfZGF0YSAq
ZGF0YTsNCisNCisJZGF0YSA9IGlub2RlLT5pbm90aWZ5X2RhdGE7DQorCWlmICghZGF0YSkNCisJ
CXJldHVybjsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeV9zYWZlKHdhdGNoLCBuZXh0LCAmZGF0
YS0+d2F0Y2hlcywgaV9saXN0KQ0KKwkJaWdub3JlX2hlbHBlcih3YXRjaCwgMCk7DQorfQ0KK0VY
UE9SVF9TWU1CT0xfR1BMKGlub3RpZnlfaW5vZGVfaXNfZGVhZCk7DQorDQorLyoNCisgKiBzZXRh
dHRyX21hc2tfaW5vdGlmeSAtIHJldHVybiB0aGUgZGVzaXJlZCBldmVudCBtYXNrIGJhc2VkIG9u
IHRoZSBnaXZlbg0KKyAqIGF0dHJpYnV0ZSBiaXRtYXNrLg0KKyAqLw0KK3UzMiBzZXRhdHRyX21h
c2tfaW5vdGlmeSh1bnNpZ25lZCBpbnQgaWFfdmFsaWQpDQorew0KKwl1MzIgbWFzayA9IDA7DQor
DQorCWlmIChpYV92YWxpZCAmIEFUVFJfVUlEKQ0KKwkJbWFzayB8PSBJTl9BVFRSSUI7DQorCWlm
IChpYV92YWxpZCAmIEFUVFJfR0lEKQ0KKwkJbWFzayB8PSBJTl9BVFRSSUI7DQorCWlmIChpYV92
YWxpZCAmIEFUVFJfU0laRSkNCisJCW1hc2sgfD0gSU5fTU9ESUZZOw0KKwkvKiBib3RoIHRpbWVz
IGltcGxpZXMgYSB1dGltZShzKSBjYWxsICovDQorCWlmICgoaWFfdmFsaWQgJiAoQVRUUl9BVElN
RXxBVFRSX01USU1FKSkgPT0gKEFUVFJfQVRJTUV8QVRUUl9NVElNRSkpDQorCQltYXNrIHw9IElO
X0FUVFJJQjsNCisJZWxzZSBpZiAoaWFfdmFsaWQgJiBBVFRSX0FUSU1FKQ0KKwkJbWFzayB8PSBJ
Tl9BQ0NFU1M7DQorCWVsc2UgaWYgKGlhX3ZhbGlkICYgQVRUUl9NVElNRSkNCisJCW1hc2sgfD0g
SU5fTU9ESUZZOw0KKwlpZiAoaWFfdmFsaWQgJiBBVFRSX01PREUpDQorCQltYXNrIHw9IElOX0FU
VFJJQjsNCisJcmV0dXJuIG1hc2s7DQorfQ0KK0VYUE9SVF9TWU1CT0woc2V0YXR0cl9tYXNrX2lu
b3RpZnkpOw0KKw0KKy8qIFRoZSBkcml2ZXIgaW50ZXJmYWNlIGlzIGltcGxlbWVudGVkIGJlbG93
ICovDQorDQorc3RhdGljIHVuc2lnbmVkIGludCBpbm90aWZ5X3BvbGwoc3RydWN0IGZpbGUgKmZp
bGUsIHBvbGxfdGFibGUgKndhaXQpDQorew0KKyAgICAgICAgc3RydWN0IGlub3RpZnlfZGV2aWNl
ICpkZXY7DQorDQorICAgICAgICBkZXYgPSBmaWxlLT5wcml2YXRlX2RhdGE7DQorDQorICAgICAg
ICBwb2xsX3dhaXQoZmlsZSwgJmRldi0+d2FpdCwgd2FpdCk7DQorDQorICAgICAgICBpZiAoaW5v
dGlmeV9kZXZfaGFzX2V2ZW50cyhkZXYpKQ0KKyAgICAgICAgICAgICAgICByZXR1cm4gUE9MTElO
IHwgUE9MTFJETk9STTsNCisNCisgICAgICAgIHJldHVybiAwOw0KK30NCisNCitzdGF0aWMgc3Np
emVfdCBpbm90aWZ5X3JlYWQoc3RydWN0IGZpbGUgKmZpbGUsIGNoYXIgX191c2VyICpidWYsDQor
CQkJICAgIHNpemVfdCBjb3VudCwgbG9mZl90ICpwb3MpDQorew0KKwlzaXplX3QgZXZlbnRfc2l6
ZTsNCisJc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXY7DQorCWNoYXIgKnN0YXJ0Ow0KKwlERUNM
QVJFX1dBSVRRVUVVRSh3YWl0LCBjdXJyZW50KTsNCisNCisJc3RhcnQgPSBidWY7DQorCWRldiA9
IGZpbGUtPnByaXZhdGVfZGF0YTsNCisNCisJLyogV2Ugb25seSBoYW5kIG91dCBmdWxsIGlub3Rp
ZnkgZXZlbnRzICovDQorCWV2ZW50X3NpemUgPSBzaXplb2Yoc3RydWN0IGlub3RpZnlfZXZlbnQp
Ow0KKwlpZiAoY291bnQgPCBldmVudF9zaXplKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQorDQorCXdo
aWxlKDEpIHsNCisJCWludCBoYXNfZXZlbnRzOw0KKw0KKwkJc3Bpbl9sb2NrKCZkZXYtPmxvY2sp
Ow0KKwkJaGFzX2V2ZW50cyA9IGlub3RpZnlfZGV2X2hhc19ldmVudHMoZGV2KTsNCisJCXNwaW5f
dW5sb2NrKCZkZXYtPmxvY2spOw0KKwkJaWYgKGhhc19ldmVudHMpDQorCQkJYnJlYWs7DQorDQor
CQlpZiAoZmlsZS0+Zl9mbGFncyAmIE9fTk9OQkxPQ0spDQorCQkJcmV0dXJuIC1FQUdBSU47DQor
DQorCQlpZiAoc2lnbmFsX3BlbmRpbmcoY3VycmVudCkpDQorCQkJcmV0dXJuIC1FUkVTVEFSVFNZ
UzsNCisNCisJCWFkZF93YWl0X3F1ZXVlKCZkZXYtPndhaXQsICZ3YWl0KTsNCisJCXNldF9jdXJy
ZW50X3N0YXRlKFRBU0tfSU5URVJSVVBUSUJMRSk7DQorDQorCQlzY2hlZHVsZSgpOw0KKw0KKwkJ
c2V0X2N1cnJlbnRfc3RhdGUoVEFTS19SVU5OSU5HKTsJCQ0KKwkJcmVtb3ZlX3dhaXRfcXVldWUo
JmRldi0+d2FpdCwgJndhaXQpOw0KKwl9DQorDQorCXdoaWxlIChjb3VudCA+PSBldmVudF9zaXpl
KSB7DQorCQlzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQgKmtldmVudDsNCisNCisJCXNwaW5f
bG9jaygmZGV2LT5sb2NrKTsNCisJCWlmICghaW5vdGlmeV9kZXZfaGFzX2V2ZW50cyhkZXYpKSB7
DQorCQkJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorCQkJYnJlYWs7DQorCQl9DQorCQlrZXZl
bnQgPSBpbm90aWZ5X2Rldl9nZXRfZXZlbnQoZGV2KTsNCisJCXNwaW5fdW5sb2NrKCZkZXYtPmxv
Y2spOw0KKwkJaWYgKGNvcHlfdG9fdXNlcihidWYsICZrZXZlbnQtPmV2ZW50LCBldmVudF9zaXpl
KSkNCisJCQlyZXR1cm4gLUVGQVVMVDsNCisNCisJCXNwaW5fbG9jaygmZGV2LT5sb2NrKTsNCisJ
CWlub3RpZnlfZGV2X2V2ZW50X2RlcXVldWUoZGV2KTsNCisJCXNwaW5fdW5sb2NrKCZkZXYtPmxv
Y2spOw0KKwkJY291bnQgLT0gZXZlbnRfc2l6ZTsNCisJCWJ1ZiArPSBldmVudF9zaXplOw0KKwl9
DQorDQorCXJldHVybiBidWYgLSBzdGFydDsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X29w
ZW4oc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbGUpDQorew0KKwlzdHJ1Y3Qg
aW5vdGlmeV9kZXZpY2UgKmRldjsNCisNCisJaWYgKGF0b21pY19yZWFkKCZ3YXRjaF9jb3VudCkg
PT0gTUFYX0lOT1RJRllfREVWUykNCisJCXJldHVybiAtRU5PREVWOw0KKw0KKwlhdG9taWNfaW5j
KCZ3YXRjaF9jb3VudCk7DQorDQorCWRldiA9IGttYWxsb2Moc2l6ZW9mKHN0cnVjdCBpbm90aWZ5
X2RldmljZSksIEdGUF9LRVJORUwpOw0KKwlpZiAoIWRldikNCisJCXJldHVybiAtRU5PTUVNOw0K
Kw0KKwliaXRtYXBfemVybyhkZXYtPmJpdG1hc2ssIE1BWF9JTk9USUZZX0RFVl9XQVRDSEVTKTsN
CisNCisJSU5JVF9MSVNUX0hFQUQoJmRldi0+ZXZlbnRzKTsNCisJSU5JVF9MSVNUX0hFQUQoJmRl
di0+d2F0Y2hlcyk7DQorCWluaXRfd2FpdHF1ZXVlX2hlYWQoJmRldi0+d2FpdCk7DQorDQorCWRl
di0+ZXZlbnRfY291bnQgPSAwOw0KKwlkZXYtPm5yX3dhdGNoZXMgPSAwOw0KKwlkZXYtPmxvY2sg
PSBTUElOX0xPQ0tfVU5MT0NLRUQ7DQorDQorCWZpbGUtPnByaXZhdGVfZGF0YSA9IGRldjsNCisN
CisJcmV0dXJuIDA7DQorfQ0KKw0KKy8qDQorICogaW5vdGlmeV9yZWxlYXNlX2FsbF93YXRjaGVz
IC0gZGVzdHJveSBhbGwgd2F0Y2hlcyBvbiBhIGdpdmVuIGRldmljZQ0KKyAqDQorICogRklYTUU6
IERvIHdlIHdhbnQgYSBsb2NrIGhlcmU/DQorICovDQorc3RhdGljIHZvaWQgaW5vdGlmeV9yZWxl
YXNlX2FsbF93YXRjaGVzKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2KQ0KK3sNCisJc3RydWN0
IGlub3RpZnlfd2F0Y2ggKndhdGNoLCpuZXh0Ow0KKw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5X3Nh
ZmUod2F0Y2gsIG5leHQsICZkZXYtPndhdGNoZXMsIGRfbGlzdCkNCisJCWlnbm9yZV9oZWxwZXIo
d2F0Y2gsIDApOw0KK30NCisNCisvKg0KKyAqIGlub3RpZnlfcmVsZWFzZV9hbGxfZXZlbnRzIC0g
ZGVzdHJveSBhbGwgb2YgdGhlIGV2ZW50cyBvbiBhIGdpdmVuIGRldmljZQ0KKyAqLw0KK3N0YXRp
YyB2b2lkIGlub3RpZnlfcmVsZWFzZV9hbGxfZXZlbnRzKHN0cnVjdCBpbm90aWZ5X2RldmljZSAq
ZGV2KQ0KK3sNCisJc3Bpbl9sb2NrKCZkZXYtPmxvY2spOw0KKwl3aGlsZSAoaW5vdGlmeV9kZXZf
aGFzX2V2ZW50cyhkZXYpKQ0KKwkJaW5vdGlmeV9kZXZfZXZlbnRfZGVxdWV1ZShkZXYpOw0KKwlz
cGluX3VubG9jaygmZGV2LT5sb2NrKTsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X3JlbGVh
c2Uoc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbGUpDQorew0KKwlzdHJ1Y3Qg
aW5vdGlmeV9kZXZpY2UgKmRldjsNCisNCisJZGV2ID0gZmlsZS0+cHJpdmF0ZV9kYXRhOw0KKwlp
bm90aWZ5X3JlbGVhc2VfYWxsX3dhdGNoZXMoZGV2KTsNCisJaW5vdGlmeV9yZWxlYXNlX2FsbF9l
dmVudHMoZGV2KTsNCisJa2ZyZWUoZGV2KTsNCisNCisJYXRvbWljX2RlYygmd2F0Y2hfY291bnQp
Ow0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X3dhdGNoKHN0cnVjdCBp
bm90aWZ5X2RldmljZSAqZGV2LA0KKwkJCSBzdHJ1Y3QgaW5vdGlmeV93YXRjaF9yZXF1ZXN0ICpy
ZXF1ZXN0KQ0KK3sNCisJc3RydWN0IGlub2RlICppbm9kZTsNCisJc3RydWN0IGlub3RpZnlfd2F0
Y2ggKndhdGNoOw0KKw0KKwlpbm9kZSA9IGZpbmRfaW5vZGUocmVxdWVzdC0+ZGlybmFtZSk7DQor
CWlmIChJU19FUlIoaW5vZGUpKQ0KKwkJcmV0dXJuIFBUUl9FUlIoaW5vZGUpOw0KKw0KKwlzcGlu
X2xvY2soJmlub2RlLT5pX2xvY2spOw0KKwlzcGluX2xvY2soJmRldi0+bG9jayk7DQorDQorCS8q
DQorCSAqIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSBvZiByZS1hZGRpbmcgYSBkaXJlY3Rvcnkgd2Ug
YXJlIGFscmVhZHkNCisJICogd2F0Y2hpbmcsIHdlIGp1c3QgdXBkYXRlIHRoZSBtYXNrIGFuZCBy
ZXR1cm4gMA0KKwkgKi8NCisJaWYgKGlub3RpZnlfZGV2X2lzX3dhdGNoaW5nX2lub2RlKGRldiwg
aW5vZGUpKSB7DQorCQlzdHJ1Y3QgaW5vdGlmeV93YXRjaCAqb3dhdGNoOwkvKiB0aGUgb2xkIHdh
dGNoICovDQorDQorCQlvd2F0Y2ggPSBpbm9kZV9maW5kX2Rldihpbm9kZSwgZGV2KTsNCisJCW93
YXRjaC0+bWFzayA9IHJlcXVlc3QtPm1hc2s7DQorCQlpbm9kZV91cGRhdGVfd2F0Y2hfbWFzayhp
bm9kZSk7DQorCQlzcGluX3VubG9jaygmZGV2LT5sb2NrKTsNCisJCXNwaW5fdW5sb2NrKCZpbm9k
ZS0+aV9sb2NrKTsJCQ0KKwkJdW5yZWZfaW5vZGUoaW5vZGUpOw0KKw0KKwkJcmV0dXJuIG93YXRj
aC0+d2Q7DQorCX0NCisNCisJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorCXNwaW5fdW5sb2Nr
KCZpbm9kZS0+aV9sb2NrKTsJDQorDQorCXdhdGNoID0gY3JlYXRlX3dhdGNoKGRldiwgcmVxdWVz
dC0+bWFzaywgaW5vZGUpOw0KKwlpZiAoIXdhdGNoKSB7DQorCQl1bnJlZl9pbm9kZShpbm9kZSk7
DQorCQlyZXR1cm4gLUVOT1NQQzsNCisJfQ0KKw0KKwlzcGluX2xvY2soJmlub2RlLT5pX2xvY2sp
Ow0KKwlzcGluX2xvY2soJmRldi0+bG9jayk7DQorDQorCS8qIFdlIGNhbid0IGFkZCBhbnltb3Jl
IHdhdGNoZXMgdG8gdGhpcyBkZXZpY2UgKi8NCisJaWYgKGlub3RpZnlfZGV2X2FkZF93YXRjaChk
ZXYsIHdhdGNoKSA9PSAtRU5PU1BDKSB7DQorCQlkZWxldGVfd2F0Y2goZGV2LCB3YXRjaCk7DQor
CQlzcGluX3VubG9jaygmZGV2LT5sb2NrKTsNCisJCXNwaW5fdW5sb2NrKCZpbm9kZS0+aV9sb2Nr
KTsJCQ0KKwkJdW5yZWZfaW5vZGUoaW5vZGUpOw0KKwkJcmV0dXJuIC1FTk9TUEM7DQorCX0NCisN
CisJaW5vZGVfYWRkX3dhdGNoKGlub2RlLCB3YXRjaCk7DQorDQorCXNwaW5fdW5sb2NrKCZkZXYt
PmxvY2spOw0KKwlzcGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorDQorCXJldHVybiB3YXRj
aC0+d2Q7DQorfQ0KKw0KK3N0YXRpYyBpbnQgaW5vdGlmeV9pZ25vcmUoc3RydWN0IGlub3RpZnlf
ZGV2aWNlICpkZXYsIHMzMiB3ZCkNCit7DQorCXN0cnVjdCBpbm90aWZ5X3dhdGNoICp3YXRjaDsN
CisNCisJd2F0Y2ggPSBkZXZfZmluZF93ZChkZXYsIHdkKTsNCisJaWYgKCF3YXRjaCkNCisJCXJl
dHVybiAtRUlOVkFMOw0KKwlpZ25vcmVfaGVscGVyKHdhdGNoLCAwKTsNCisNCisJcmV0dXJuIDA7
DQorfQ0KKw0KKy8qDQorICogaW5vdGlmeV9pb2N0bCgpIC0gb3VyIGRldmljZSBmaWxlJ3MgaW9j
dGwgbWV0aG9kDQorICoNCisgKiBUaGUgVkZTIHNlcmlhbGl6ZXMgYWxsIG9mIG91ciBjYWxscyB2
aWEgdGhlIEJLTCBhbmQgd2UgcmVseSBvbiB0aGF0LiAgV2UNCisgKiBjb3VsZCwgYWx0ZXJuYXRp
dmVseSwgZ3JhYiBkZXYtPmxvY2suICBSaWdodCBub3cgbG93ZXIgbGV2ZWxzIGdyYWIgdGhhdA0K
KyAqIHdoZXJlIG5lZWRlZC4NCisgKi8NCitzdGF0aWMgaW50IGlub3RpZnlfaW9jdGwoc3RydWN0
IGlub2RlICppcCwgc3RydWN0IGZpbGUgKmZwLA0KKwkJCSB1bnNpZ25lZCBpbnQgY21kLCB1bnNp
Z25lZCBsb25nIGFyZykNCit7DQorCXN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2Ow0KKwlzdHJ1
Y3QgaW5vdGlmeV93YXRjaF9yZXF1ZXN0IHJlcXVlc3Q7DQorCXZvaWQgX191c2VyICpwOw0KKwlz
MzIgd2Q7DQorDQorCWRldiA9IGZwLT5wcml2YXRlX2RhdGE7DQorCXAgPSAodm9pZCBfX3VzZXIg
KikgYXJnOw0KKw0KKwlzd2l0Y2ggKGNtZCkgew0KKwljYXNlIElOT1RJRllfV0FUQ0g6DQorCQlp
ZiAoY29weV9mcm9tX3VzZXIoJnJlcXVlc3QsIHAsIHNpemVvZiAocmVxdWVzdCkpKQ0KKwkJCXJl
dHVybiAtRUZBVUxUOw0KKwkJcmV0dXJuIGlub3RpZnlfd2F0Y2goZGV2LCAmcmVxdWVzdCk7DQor
CWNhc2UgSU5PVElGWV9JR05PUkU6DQorCQlpZiAoY29weV9mcm9tX3VzZXIoJndkLCBwLCBzaXpl
b2YgKHdkKSkpDQorCQkJcmV0dXJuIC1FRkFVTFQ7DQorCQlyZXR1cm4gaW5vdGlmeV9pZ25vcmUo
ZGV2LCB3ZCk7DQorCWRlZmF1bHQ6DQorCQlyZXR1cm4gLUVOT1RUWTsNCisJfQ0KK30NCisNCitz
dGF0aWMgc3RydWN0IGZpbGVfb3BlcmF0aW9ucyBpbm90aWZ5X2ZvcHMgPSB7DQorCS5vd25lcgkJ
PSBUSElTX01PRFVMRSwNCisJLnBvbGwJCT0gaW5vdGlmeV9wb2xsLA0KKwkucmVhZAkJPSBpbm90
aWZ5X3JlYWQsDQorCS5vcGVuCQk9IGlub3RpZnlfb3BlbiwNCisJLnJlbGVhc2UJPSBpbm90aWZ5
X3JlbGVhc2UsDQorCS5pb2N0bAkJPSBpbm90aWZ5X2lvY3RsLA0KK307DQorDQorc3RydWN0IG1p
c2NkZXZpY2UgaW5vdGlmeV9kZXZpY2UgPSB7DQorCS5taW5vciAgPSBNSVNDX0RZTkFNSUNfTUlO
T1IsDQorCS5uYW1lCT0gImlub3RpZnkiLA0KKwkuZm9wcwk9ICZpbm90aWZ5X2ZvcHMsDQorfTsN
CisNCitzdGF0aWMgaW50IF9faW5pdCBpbm90aWZ5X2luaXQodm9pZCkNCit7DQorCWludCByZXQ7
DQorDQorCXJldCA9IG1pc2NfcmVnaXN0ZXIoJmlub3RpZnlfZGV2aWNlKTsNCisJaWYgKHJldCkN
CisJCXJldHVybiByZXQ7DQorDQorCWF0b21pY19zZXQoJndhdGNoX2NvdW50LCAwKTsNCisJYXRv
bWljX3NldCgmaW5vdGlmeV9jb29raWUsIDApOw0KKw0KKwl3YXRjaF9jYWNoZXAgPSBrbWVtX2Nh
Y2hlX2NyZWF0ZSgiaW5vdGlmeV93YXRjaF9jYWNoZSIsDQorCQkJc2l6ZW9mKHN0cnVjdCBpbm90
aWZ5X3dhdGNoKSwgMCwgU0xBQl9QQU5JQywNCisJCQlOVUxMLCBOVUxMKTsNCisNCisJZXZlbnRf
Y2FjaGVwID0ga21lbV9jYWNoZV9jcmVhdGUoImlub3RpZnlfZXZlbnRfY2FjaGUiLA0KKwkJCXNp
emVvZihzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQpLCAwLA0KKwkJCVNMQUJfUEFOSUMsIE5V
TEwsIE5VTEwpOw0KKw0KKwlpbm9kZV9kYXRhX2NhY2hlcCA9IGttZW1fY2FjaGVfY3JlYXRlKCJp
bm90aWZ5X2lub2RlX2RhdGFfY2FjaGUiLA0KKwkJCXNpemVvZihzdHJ1Y3QgaW5vdGlmeV9pbm9k
ZV9kYXRhKSwgMCwgU0xBQl9QQU5JQywNCisJCQlOVUxMLCBOVUxMKTsNCisNCisJcHJpbnRrKEtF
Uk5fSU5GTyAiaW5vdGlmeSBpbml0OiBtaW5vcj0lZFxuIiwgaW5vdGlmeV9kZXZpY2UubWlub3Ip
Ow0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQorbW9kdWxlX2luaXQoaW5vdGlmeV9pbml0KTsNCi0t
LSBjbGVhbi9saW51eC9pbmNsdWRlL2xpbnV4L2lub3RpZnkuaAkxOTY5LTEyLTMxIDE5OjAwOjAw
LjAwMDAwMDAwMCAtMDUwMA0KKysrIGxpbnV4L2luY2x1ZGUvbGludXgvaW5vdGlmeS5oCTIwMDQt
MTAtMDcgMTA6Mjc6NTUuMDAwMDAwMDAwIC0wNDAwDQpAQCAtMCwwICsxLDE1NCBAQA0KKy8qDQor
ICogSW5vZGUgYmFzZWQgZGlyZWN0b3J5IG5vdGlmaWNhdGlvbiBmb3IgTGludXgNCisgKg0KKyAq
IENvcHlyaWdodCAoQykgMjAwNCBKb2huIE1jQ3V0Y2hhbg0KKyAqLw0KKw0KKyNpZm5kZWYgX0xJ
TlVYX0lOT1RJRllfSA0KKyNkZWZpbmUgX0xJTlVYX0lOT1RJRllfSA0KKw0KKyNpbmNsdWRlIDxs
aW51eC90eXBlcy5oPg0KKyNpbmNsdWRlIDxsaW51eC9saW1pdHMuaD4NCisNCisvKiB0aGlzIHNp
emUgY291bGQgbGltaXQgdGhpbmdzLCBzaW5jZSB0ZWNobmljYWxseSB3ZSBjb3VsZCBuZWVkIFBB
VEhfTUFYICovDQorI2RlZmluZSBJTk9USUZZX0ZJTEVOQU1FX01BWAkyNTYNCisNCisvKg0KKyAq
IHN0cnVjdCBpbm90aWZ5X2V2ZW50IC0gc3RydWN0dXJlIHJlYWQgZnJvbSB0aGUgaW5vdGlmeSBk
ZXZpY2UgZm9yIGVhY2ggZXZlbnQNCisgKg0KKyAqIFdoZW4geW91IGFyZSB3YXRjaGluZyBhIGRp
cmVjdG9yeSwgeW91IHdpbGwgcmVjZWl2ZSB0aGUgZmlsZW5hbWUgZm9yIGV2ZW50cw0KKyAqIHN1
Y2ggYXMgSU5fQ1JFQVRFLCBJTl9ERUxFVEUsIElOX09QRU4sIElOX0NMT1NFLCAuLi4NCisgKg0K
KyAqIE5vdGU6IFdoZW4gcmVhZGluZyBmcm9tIHRoZSBkZXZpY2UgeW91IG11c3QgcHJvdmlkZSBh
IGJ1ZmZlciB0aGF0IGlzIGENCisgKiBtdWx0aXBsZSBvZiBzaXplb2Yoc3RydWN0IGlub3RpZnlf
ZXZlbnQpDQorICovDQorc3RydWN0IGlub3RpZnlfZXZlbnQgew0KKwlfX3MzMiB3ZDsNCisJX191
MzIgbWFzazsNCisJX191MzIgY29va2llOw0KKwljaGFyIGZpbGVuYW1lW0lOT1RJRllfRklMRU5B
TUVfTUFYXTsNCit9Ow0KKw0KKy8qDQorICogc3RydWN0IGlub3RpZnlfd2F0Y2hfcmVxdWVzdCAt
IHJlcHJlc2VudHMgYSB3YXRjaCByZXF1ZXN0DQorICoNCisgKiBQYXNzIHRvIHRoZSBpbm90aWZ5
IGRldmljZSB2aWEgdGhlIElOT1RJRllfV0FUQ0ggaW9jdGwNCisgKi8NCitzdHJ1Y3QgaW5vdGlm
eV93YXRjaF9yZXF1ZXN0IHsNCisJY2hhciAqZGlybmFtZTsJCS8qIGRpcmVjdG9yeSBuYW1lICov
DQorCV9fdTMyIG1hc2s7CQkvKiBldmVudCBtYXNrICovDQorfTsNCisNCisvKiB0aGUgZm9sbG93
aW5nIGFyZSBsZWdhbCwgaW1wbGVtZW50ZWQgZXZlbnRzICovDQorI2RlZmluZSBJTl9BQ0NFU1MJ
CTB4MDAwMDAwMDEJLyogRmlsZSB3YXMgYWNjZXNzZWQgKi8NCisjZGVmaW5lIElOX01PRElGWQkJ
MHgwMDAwMDAwMgkvKiBGaWxlIHdhcyBtb2RpZmllZCAqLw0KKyNkZWZpbmUgSU5fQVRUUklCCQkw
eDAwMDAwMDA0CS8qIEZpbGUgY2hhbmdlZCBhdHRyaWJ1dGVzICovDQorI2RlZmluZSBJTl9DTE9T
RV9XUklURQkJMHgwMDAwMDAwOAkvKiBXcml0dGFibGUgZmlsZSB3YXMgY2xvc2VkICovDQorI2Rl
ZmluZSBJTl9DTE9TRV9OT1dSSVRFCTB4MDAwMDAwMTAJLyogVW53cml0dGFibGUgZmlsZSBjbG9z
ZWQgKi8NCisjZGVmaW5lIElOX09QRU4JCQkweDAwMDAwMDIwCS8qIEZpbGUgd2FzIG9wZW5lZCAq
Lw0KKyNkZWZpbmUgSU5fTU9WRURfRlJPTQkJMHgwMDAwMDA0MAkvKiBGaWxlIHdhcyBtb3ZlZCBm
cm9tIFggKi8NCisjZGVmaW5lIElOX01PVkVEX1RPCQkweDAwMDAwMDgwCS8qIEZpbGUgd2FzIG1v
dmVkIHRvIFkgKi8NCisjZGVmaW5lIElOX0RFTEVURV9TVUJESVIJMHgwMDAwMDEwMAkvKiBTdWJk
aXIgd2FzIGRlbGV0ZWQgKi8gDQorI2RlZmluZSBJTl9ERUxFVEVfRklMRQkJMHgwMDAwMDIwMAkv
KiBTdWJmaWxlIHdhcyBkZWxldGVkICovDQorI2RlZmluZSBJTl9DUkVBVEVfU1VCRElSCTB4MDAw
MDA0MDAJLyogU3ViZGlyIHdhcyBjcmVhdGVkICovDQorI2RlZmluZSBJTl9DUkVBVEVfRklMRQkJ
MHgwMDAwMDgwMAkvKiBTdWJmaWxlIHdhcyBjcmVhdGVkICovDQorI2RlZmluZSBJTl9ERUxFVEVf
U0VMRgkJMHgwMDAwMTAwMAkvKiBTZWxmIHdhcyBkZWxldGVkICovDQorI2RlZmluZSBJTl9VTk1P
VU5UCQkweDAwMDAyMDAwCS8qIEJhY2tpbmcgZnMgd2FzIHVubW91bnRlZCAqLw0KKyNkZWZpbmUg
SU5fUV9PVkVSRkxPVwkJMHgwMDAwNDAwMAkvKiBFdmVudCBxdWV1ZWQgb3ZlcmZsb3dlZCAqLw0K
KyNkZWZpbmUgSU5fSUdOT1JFRAkJMHgwMDAwODAwMAkvKiBGaWxlIHdhcyBpZ25vcmVkICovDQor
DQorLyogc3BlY2lhbCBmbGFncyAqLw0KKyNkZWZpbmUgSU5fQUxMX0VWRU5UUwkJMHhmZmZmZmZm
ZgkvKiBBbGwgdGhlIGV2ZW50cyAqLw0KKyNkZWZpbmUgSU5fQ0xPU0UJCShJTl9DTE9TRV9XUklU
RSB8IElOX0NMT1NFX05PV1JJVEUpDQorDQorI2RlZmluZSBJTk9USUZZX0lPQ1RMX01BR0lDCSdR
Jw0KKyNkZWZpbmUgSU5PVElGWV9JT0NUTF9NQVhOUgkyDQorDQorI2RlZmluZSBJTk9USUZZX1dB
VENIICAJCV9JT1IoSU5PVElGWV9JT0NUTF9NQUdJQywgMSwgc3RydWN0IGlub3RpZnlfd2F0Y2hf
cmVxdWVzdCkNCisjZGVmaW5lIElOT1RJRllfSUdOT1JFIAkJX0lPUihJTk9USUZZX0lPQ1RMX01B
R0lDLCAyLCBpbnQpDQorDQorI2lmZGVmIF9fS0VSTkVMX18NCisNCisjaW5jbHVkZSA8bGludXgv
ZGNhY2hlLmg+DQorI2luY2x1ZGUgPGxpbnV4L2ZzLmg+DQorI2luY2x1ZGUgPGxpbnV4L2NvbmZp
Zy5oPg0KKw0KK3N0cnVjdCBpbm90aWZ5X2lub2RlX2RhdGEgew0KKwlzdHJ1Y3QgbGlzdF9oZWFk
IHdhdGNoZXM7DQorCV9fdTMyIHdhdGNoX21hc2s7DQorCWludCB3YXRjaF9jb3VudDsNCit9Ow0K
Kw0KKyNpZmRlZiBDT05GSUdfSU5PVElGWQ0KKw0KK2V4dGVybiB2b2lkIGlub3RpZnlfaW5vZGVf
cXVldWVfZXZlbnQoc3RydWN0IGlub2RlICosIF9fdTMyLCBfX3UzMiwNCisJCQkJICAgICAgY29u
c3QgY2hhciAqKTsNCitleHRlcm4gdm9pZCBpbm90aWZ5X2RlbnRyeV9wYXJlbnRfcXVldWVfZXZl
bnQoc3RydWN0IGRlbnRyeSAqLCBfX3UzMiwgX191MzIsDQorCQkJCQkgICAgICBjb25zdCBjaGFy
ICopOw0KK2V4dGVybiB2b2lkIGlub3RpZnlfc3VwZXJfYmxvY2tfdW1vdW50KHN0cnVjdCBzdXBl
cl9ibG9jayAqKTsNCitleHRlcm4gdm9pZCBpbm90aWZ5X2lub2RlX2lzX2RlYWQoc3RydWN0IGlu
b2RlICopOw0KK2V4dGVybiBfX3UzMiBpbm90aWZ5X2dldF9jb29raWUodm9pZCk7DQorZXh0ZXJu
IF9fdTMyIHNldGF0dHJfbWFza19pbm90aWZ5KHVuc2lnbmVkIGludCk7DQorDQorLyogdGhpcyBj
b3VsZCBiZSBrc3RyZHVwIGlmIG9ubHkgd2UgY291bGQgYWRkIHRoYXQgdG8gbGliL3N0cmluZy5j
ICovDQorc3RhdGljIGlubGluZSBjaGFyICogaW5vdGlmeV9vbGRuYW1lX2luaXQoc3RydWN0IGRl
bnRyeSAqb2xkX2RlbnRyeSkNCit7DQorCWNoYXIgKm9sZF9uYW1lOw0KKw0KKwlvbGRfbmFtZSA9
IGttYWxsb2Moc3RybGVuKG9sZF9kZW50cnktPmRfbmFtZS5uYW1lKSArIDEsIEdGUF9LRVJORUwp
Ow0KKwlpZiAob2xkX25hbWUpDQorCQlzdHJjcHkob2xkX25hbWUsIG9sZF9kZW50cnktPmRfbmFt
ZS5uYW1lKTsNCisJcmV0dXJuIG9sZF9uYW1lOw0KK30NCisNCitzdGF0aWMgaW5saW5lIHZvaWQg
aW5vdGlmeV9vbGRuYW1lX2ZyZWUoY29uc3QgY2hhciAqb2xkX25hbWUpDQorew0KKwlrZnJlZShv
bGRfbmFtZSk7DQorfQ0KKw0KKyNlbHNlDQorDQorc3RhdGljIGlubGluZSB2b2lkIGlub3RpZnlf
aW5vZGVfcXVldWVfZXZlbnQoc3RydWN0IGlub2RlICppbm9kZSwNCisJCQkJCSAgICAgX191MzIg
bWFzaywgX191MzIgY29va2llLA0KKwkJCQkJICAgICBjb25zdCBjaGFyICpmaWxlbmFtZSkNCit7
DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBpbm90aWZ5X2RlbnRyeV9wYXJlbnRfcXVldWVf
ZXZlbnQoc3RydWN0IGRlbnRyeSAqZGVudHJ5LA0KKwkJCQkJCSAgICAgX191MzIgbWFzaywgX191
MzIgY29va2llLA0KKwkJCQkJCSAgICAgY29uc3QgY2hhciAqZmlsZW5hbWUpDQorew0KK30NCisN
CitzdGF0aWMgaW5saW5lIHZvaWQgaW5vdGlmeV9zdXBlcl9ibG9ja191bW91bnQoc3RydWN0IHN1
cGVyX2Jsb2NrICpzYikNCit7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBpbm90aWZ5X2lu
b2RlX2lzX2RlYWQoc3RydWN0IGlub2RlICppbm9kZSkNCit7DQorfQ0KKw0KK3N0YXRpYyBpbmxp
bmUgY2hhciAqIGlub3RpZnlfb2xkbmFtZV9pbml0KHN0cnVjdCBkZW50cnkgKm9sZF9kZW50cnkp
DQorew0KKwlyZXR1cm4gTlVMTDsNCit9DQorDQorc3RhdGljIGlubGluZSBfX3UzMiBpbm90aWZ5
X2dldF9jb29raWUodm9pZCkNCit7DQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW5saW5l
IHZvaWQgaW5vdGlmeV9vbGRuYW1lX2ZyZWUoY29uc3QgY2hhciAqb2xkX25hbWUpDQorew0KK30N
CisNCitzdGF0aWMgaW5saW5lIGludCBzZXRhdHRyX21hc2tfaW5vdGlmeSh1bnNpZ25lZCBpbnQg
aWFfbWFzaykNCit7DQorCXJldHVybiAwOw0KK30NCisNCisjZW5kaWYJLyogQ09ORklHX0lOT1RJ
RlkgKi8NCisNCisjZW5kaWYJLyogX19LRVJORUwgX18gKi8NCisNCisjZW5kaWYJLyogX0xJTlVY
X0lOT1RJRllfSCAqLw0KLS0tIGNsZWFuL2xpbnV4L2luY2x1ZGUvbGludXgvZnMuaAkyMDA0LTA4
LTE0IDA2OjU1OjA5LjAwMDAwMDAwMCAtMDQwMA0KKysrIGxpbnV4L2luY2x1ZGUvbGludXgvZnMu
aAkyMDA0LTEwLTE0IDIyOjIxOjA2LjAwMDAwMDAwMCAtMDQwMA0KQEAgLTI3LDYgKzI3LDcgQEAN
CiBzdHJ1Y3Qga3N0YXRmczsNCiBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3Q7DQogc3RydWN0IHZmc21v
dW50Ow0KK3N0cnVjdCBpbm90aWZ5X2lub2RlX2RhdGE7DQogDQogLyoNCiAgKiBJdCdzIHNpbGx5
IHRvIGhhdmUgTlJfT1BFTiBiaWdnZXIgdGhhbiBOUl9GSUxFLCBidXQgeW91IGNhbiBjaGFuZ2UN
CkBAIC02MSw3ICs2Miw3IEBADQogfTsNCiBleHRlcm4gc3RydWN0IGlub2Rlc19zdGF0X3QgaW5v
ZGVzX3N0YXQ7DQogDQotZXh0ZXJuIGludCBsZWFzZXNfZW5hYmxlLCBkaXJfbm90aWZ5X2VuYWJs
ZSwgbGVhc2VfYnJlYWtfdGltZTsNCitleHRlcm4gaW50IGxlYXNlc19lbmFibGUsIGxlYXNlX2Jy
ZWFrX3RpbWU7DQogDQogI2RlZmluZSBOUl9GSUxFICA4MTkyCS8qIHRoaXMgY2FuIHdlbGwgYmUg
bGFyZ2VyIG9uIGEgbGFyZ2VyIHN5c3RlbSAqLw0KICNkZWZpbmUgTlJfUkVTRVJWRURfRklMRVMg
MTAgLyogcmVzZXJ2ZWQgZm9yIHJvb3QgKi8NCkBAIC00NTUsOCArNDU2LDE0IEBADQogCXN0cnVj
dCBjZGV2CQkqaV9jZGV2Ow0KIAlpbnQJCQlpX2NpbmRleDsNCiANCisjaWZkZWYgQ09ORklHX0RO
T1RJRlkNCiAJdW5zaWduZWQgbG9uZwkJaV9kbm90aWZ5X21hc2s7IC8qIERpcmVjdG9yeSBub3Rp
ZnkgZXZlbnRzICovDQogCXN0cnVjdCBkbm90aWZ5X3N0cnVjdAkqaV9kbm90aWZ5OyAvKiBmb3Ig
ZGlyZWN0b3J5IG5vdGlmaWNhdGlvbnMgKi8NCisjZW5kaWYNCisNCisjaWZkZWYgQ09ORklHX0lO
T1RJRlkNCisJc3RydWN0IGlub3RpZnlfaW5vZGVfZGF0YSAqaW5vdGlmeV9kYXRhOw0KKyNlbmRp
Zg0KIA0KIAl1bnNpZ25lZCBsb25nCQlpX3N0YXRlOw0KIAl1bnNpZ25lZCBsb25nCQlkaXJ0aWVk
X3doZW47CS8qIGppZmZpZXMgb2YgZmlyc3QgZGlydHlpbmcgKi8NCkBAIC0xMzE1LDcgKzEzMjIs
NyBAQA0KIGV4dGVybiBpbnQgZG9fcmVtb3VudF9zYihzdHJ1Y3Qgc3VwZXJfYmxvY2sgKnNiLCBp
bnQgZmxhZ3MsDQogCQkJIHZvaWQgKmRhdGEsIGludCBmb3JjZSk7DQogZXh0ZXJuIHNlY3Rvcl90
IGJtYXAoc3RydWN0IGlub2RlICosIHNlY3Rvcl90KTsNCi1leHRlcm4gaW50IHNldGF0dHJfbWFz
ayh1bnNpZ25lZCBpbnQpOw0KK2V4dGVybiB2b2lkIHNldGF0dHJfbWFzayh1bnNpZ25lZCBpbnQs
IGludCAqLCB1MzIgKik7DQogZXh0ZXJuIGludCBub3RpZnlfY2hhbmdlKHN0cnVjdCBkZW50cnkg
Kiwgc3RydWN0IGlhdHRyICopOw0KIGV4dGVybiBpbnQgcGVybWlzc2lvbihzdHJ1Y3QgaW5vZGUg
KiwgaW50LCBzdHJ1Y3QgbmFtZWlkYXRhICopOw0KIGV4dGVybiBpbnQgdmZzX3Blcm1pc3Npb24o
c3RydWN0IGlub2RlICosIGludCk7DQotLS0gY2xlYW4vbGludXgvZnMvc3VwZXIuYwkyMDA0LTA4
LTE0IDA2OjU1OjIyLjAwMDAwMDAwMCAtMDQwMA0KKysrIGxpbnV4L2ZzL3N1cGVyLmMJMjAwNC0x
MC0wNiAxNTo0OToyOC4wMDAwMDAwMDAgLTA0MDANCkBAIC0zNiw2ICszNiw3IEBADQogI2luY2x1
ZGUgPGxpbnV4L3dyaXRlYmFjay5oPgkJLyogZm9yIHRoZSBlbWVyZ2VuY3kgcmVtb3VudCBzdHVm
ZiAqLw0KICNpbmNsdWRlIDxsaW51eC9pZHIuaD4NCiAjaW5jbHVkZSA8YXNtL3VhY2Nlc3MuaD4N
CisjaW5jbHVkZSA8bGludXgvaW5vdGlmeS5oPg0KIA0KIA0KIHZvaWQgZ2V0X2ZpbGVzeXN0ZW0o
c3RydWN0IGZpbGVfc3lzdGVtX3R5cGUgKmZzKTsNCkBAIC0yMDQsNiArMjA1LDcgQEANCiANCiAJ
aWYgKHJvb3QpIHsNCiAJCXNiLT5zX3Jvb3QgPSBOVUxMOw0KKwkJaW5vdGlmeV9zdXBlcl9ibG9j
a191bW91bnQoc2IpOw0KIAkJc2hyaW5rX2RjYWNoZV9wYXJlbnQocm9vdCk7DQogCQlzaHJpbmtf
ZGNhY2hlX2Fub24oJnNiLT5zX2Fub24pOw0KIAkJZHB1dChyb290KTsNCi0tLSBjbGVhbi9saW51
eC9mcy9yZWFkX3dyaXRlLmMJMjAwNC0wOC0xNCAwNjo1NTozNS4wMDAwMDAwMDAgLTA0MDANCisr
KyBsaW51eC9mcy9yZWFkX3dyaXRlLmMJMjAwNC0xMC0wNiAxNjoyMjozOS4wMDAwMDAwMDAgLTA0
MDANCkBAIC0xMSw2ICsxMSw3IEBADQogI2luY2x1ZGUgPGxpbnV4L3Vpby5oPg0KICNpbmNsdWRl
IDxsaW51eC9zbXBfbG9jay5oPg0KICNpbmNsdWRlIDxsaW51eC9kbm90aWZ5Lmg+DQorI2luY2x1
ZGUgPGxpbnV4L2lub3RpZnkuaD4NCiAjaW5jbHVkZSA8bGludXgvc2VjdXJpdHkuaD4NCiAjaW5j
bHVkZSA8bGludXgvbW9kdWxlLmg+DQogDQpAQCAtMjE2LDggKzIxNywxNCBAQA0KIAkJCQlyZXQg
PSBmaWxlLT5mX29wLT5yZWFkKGZpbGUsIGJ1ZiwgY291bnQsIHBvcyk7DQogCQkJZWxzZQ0KIAkJ
CQlyZXQgPSBkb19zeW5jX3JlYWQoZmlsZSwgYnVmLCBjb3VudCwgcG9zKTsNCi0JCQlpZiAocmV0
ID4gMCkNCi0JCQkJZG5vdGlmeV9wYXJlbnQoZmlsZS0+Zl9kZW50cnksIEROX0FDQ0VTUyk7DQor
CQkJaWYgKHJldCA+IDApIHsNCisJCQkJc3RydWN0IGRlbnRyeSAqZGVudHJ5ID0gZmlsZS0+Zl9k
ZW50cnk7DQorCQkJCWRub3RpZnlfcGFyZW50KGRlbnRyeSwgRE5fQUNDRVNTKTsNCisJCQkJaW5v
dGlmeV9kZW50cnlfcGFyZW50X3F1ZXVlX2V2ZW50KGRlbnRyeSwNCisJCQkJCQlJTl9BQ0NFU1Ms
IDAsIGRlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KKwkJCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50
KGlub2RlLCBJTl9BQ0NFU1MsIDAsDQorCQkJCQkJTlVMTCk7DQorCQkJfQ0KIAkJfQ0KIAl9DQog
DQpAQCAtMjYwLDggKzI2NywxNCBAQA0KIAkJCQlyZXQgPSBmaWxlLT5mX29wLT53cml0ZShmaWxl
LCBidWYsIGNvdW50LCBwb3MpOw0KIAkJCWVsc2UNCiAJCQkJcmV0ID0gZG9fc3luY193cml0ZShm
aWxlLCBidWYsIGNvdW50LCBwb3MpOw0KLQkJCWlmIChyZXQgPiAwKQ0KLQkJCQlkbm90aWZ5X3Bh
cmVudChmaWxlLT5mX2RlbnRyeSwgRE5fTU9ESUZZKTsNCisJCQlpZiAocmV0ID4gMCkgew0KKwkJ
CQlzdHJ1Y3QgZGVudHJ5ICpkZW50cnkgPSBmaWxlLT5mX2RlbnRyeTsNCisJCQkJZG5vdGlmeV9w
YXJlbnQoZGVudHJ5LCBETl9NT0RJRlkpOw0KKwkJCQlpbm90aWZ5X2RlbnRyeV9wYXJlbnRfcXVl
dWVfZXZlbnQoZGVudHJ5LA0KKwkJCQkJCUlOX01PRElGWSwgMCwgZGVudHJ5LT5kX25hbWUubmFt
ZSk7DQorCQkJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoaW5vZGUsIElOX01PRElGWSwgMCwN
CisJCQkJCQlOVUxMKTsNCisJCQl9DQogCQl9DQogCX0NCiANCkBAIC00OTMsOSArNTA2LDE1IEBA
DQogb3V0Og0KIAlpZiAoaW92ICE9IGlvdnN0YWNrKQ0KIAkJa2ZyZWUoaW92KTsNCi0JaWYgKChy
ZXQgKyAodHlwZSA9PSBSRUFEKSkgPiAwKQ0KLQkJZG5vdGlmeV9wYXJlbnQoZmlsZS0+Zl9kZW50
cnksDQotCQkJCSh0eXBlID09IFJFQUQpID8gRE5fQUNDRVNTIDogRE5fTU9ESUZZKTsNCisJaWYg
KChyZXQgKyAodHlwZSA9PSBSRUFEKSkgPiAwKSB7DQorCQlzdHJ1Y3QgZGVudHJ5ICpkZW50cnkg
PSBmaWxlLT5mX2RlbnRyeTsNCisJCWRub3RpZnlfcGFyZW50KGRlbnRyeSwgKHR5cGUgPT0gUkVB
RCkgPyBETl9BQ0NFU1MgOiBETl9NT0RJRlkpOw0KKwkJaW5vdGlmeV9kZW50cnlfcGFyZW50X3F1
ZXVlX2V2ZW50KGRlbnRyeSwNCisJCQkJKHR5cGUgPT0gUkVBRCkgPyBJTl9BQ0NFU1MgOiBJTl9N
T0RJRlksIDAsDQorCQkJCWRlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KKwkJaW5vdGlmeV9pbm9kZV9x
dWV1ZV9ldmVudCAoZGVudHJ5LT5kX2lub2RlLA0KKwkJCQkodHlwZSA9PSBSRUFEKSA/IElOX0FD
Q0VTUyA6IElOX01PRElGWSwgMCwgTlVMTCk7DQorCX0NCiAJcmV0dXJuIHJldDsNCiB9DQogDQot
LS0gY2xlYW4vbGludXgvZnMvb3Blbi5jCTIwMDQtMDgtMTQgMDY6NTQ6NDguMDAwMDAwMDAwIC0w
NDAwDQorKysgbGludXgvZnMvb3Blbi5jCTIwMDQtMTAtMDYgMTY6MjA6NTYuMDAwMDAwMDAwIC0w
NDAwDQpAQCAtMTEsNiArMTEsNyBAQA0KICNpbmNsdWRlIDxsaW51eC9zbXBfbG9jay5oPg0KICNp
bmNsdWRlIDxsaW51eC9xdW90YW9wcy5oPg0KICNpbmNsdWRlIDxsaW51eC9kbm90aWZ5Lmg+DQor
I2luY2x1ZGUgPGxpbnV4L2lub3RpZnkuaD4NCiAjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQog
I2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4NCiAjaW5jbHVkZSA8bGludXgvdHR5Lmg+DQpAQCAtOTU1
LDYgKzk1NiwxMCBAQA0KIAkJCWVycm9yID0gUFRSX0VSUihmKTsNCiAJCQlpZiAoSVNfRVJSKGYp
KQ0KIAkJCQlnb3RvIG91dF9lcnJvcjsNCisJCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGYt
PmZfZGVudHJ5LT5kX2lub2RlLA0KKwkJCQkJSU5fT1BFTiwgMCwgTlVMTCk7DQorCQkJaW5vdGlm
eV9kZW50cnlfcGFyZW50X3F1ZXVlX2V2ZW50KGYtPmZfZGVudHJ5LCBJTl9PUEVOLA0KKwkJCQkJ
MCwgZi0+Zl9kZW50cnktPmRfbmFtZS5uYW1lKTsNCiAJCQlmZF9pbnN0YWxsKGZkLCBmKTsNCiAJ
CX0NCiBvdXQ6DQotLS0gY2xlYW4vbGludXgvZnMvbmFtZWkuYwkyMDA0LTA4LTE0IDA2OjU1OjEw
LjAwMDAwMDAwMCAtMDQwMA0KKysrIGxpbnV4L2ZzL25hbWVpLmMJMjAwNC0xMC0wNiAxNjoyNDox
NC4wMDAwMDAwMDAgLTA0MDANCkBAIC0yMiw2ICsyMiw3IEBADQogI2luY2x1ZGUgPGxpbnV4L3F1
b3Rhb3BzLmg+DQogI2luY2x1ZGUgPGxpbnV4L3BhZ2VtYXAuaD4NCiAjaW5jbHVkZSA8bGludXgv
ZG5vdGlmeS5oPg0KKyNpbmNsdWRlIDxsaW51eC9pbm90aWZ5Lmg+DQogI2luY2x1ZGUgPGxpbnV4
L3NtcF9sb2NrLmg+DQogI2luY2x1ZGUgPGxpbnV4L3BlcnNvbmFsaXR5Lmg+DQogI2luY2x1ZGUg
PGxpbnV4L3NlY3VyaXR5Lmg+DQpAQCAtMTIyMSw2ICsxMjIyLDggQEANCiAJZXJyb3IgPSBkaXIt
Pmlfb3AtPmNyZWF0ZShkaXIsIGRlbnRyeSwgbW9kZSwgbmQpOw0KIAlpZiAoIWVycm9yKSB7DQog
CQlpbm9kZV9kaXJfbm90aWZ5KGRpciwgRE5fQ1JFQVRFKTsNCisJCWlub3RpZnlfaW5vZGVfcXVl
dWVfZXZlbnQoZGlyLCBJTl9DUkVBVEVfRklMRSwNCisJCQkJMCwgZGVudHJ5LT5kX25hbWUubmFt
ZSk7DQogCQlzZWN1cml0eV9pbm9kZV9wb3N0X2NyZWF0ZShkaXIsIGRlbnRyeSwgbW9kZSk7DQog
CX0NCiAJcmV0dXJuIGVycm9yOw0KQEAgLTE1MzUsNiArMTUzOCw4IEBADQogCWVycm9yID0gZGly
LT5pX29wLT5ta25vZChkaXIsIGRlbnRyeSwgbW9kZSwgZGV2KTsNCiAJaWYgKCFlcnJvcikgew0K
IAkJaW5vZGVfZGlyX25vdGlmeShkaXIsIEROX0NSRUFURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1
ZXVlX2V2ZW50KGRpciwgSU5fQ1JFQVRFX0ZJTEUsIDAsDQorCQkJCWRlbnRyeS0+ZF9uYW1lLm5h
bWUpOw0KIAkJc2VjdXJpdHlfaW5vZGVfcG9zdF9ta25vZChkaXIsIGRlbnRyeSwgbW9kZSwgZGV2
KTsNCiAJfQ0KIAlyZXR1cm4gZXJyb3I7DQpAQCAtMTYwOCw2ICsxNjEzLDggQEANCiAJZXJyb3Ig
PSBkaXItPmlfb3AtPm1rZGlyKGRpciwgZGVudHJ5LCBtb2RlKTsNCiAJaWYgKCFlcnJvcikgew0K
IAkJaW5vZGVfZGlyX25vdGlmeShkaXIsIEROX0NSRUFURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1
ZXVlX2V2ZW50KGRpciwgSU5fQ1JFQVRFX1NVQkRJUiwgMCwNCisJCQkJZGVudHJ5LT5kX25hbWUu
bmFtZSk7DQogCQlzZWN1cml0eV9pbm9kZV9wb3N0X21rZGlyKGRpcixkZW50cnksIG1vZGUpOw0K
IAl9DQogCXJldHVybiBlcnJvcjsNCkBAIC0xNzAzLDYgKzE3MTAsMTEgQEANCiAJdXAoJmRlbnRy
eS0+ZF9pbm9kZS0+aV9zZW0pOw0KIAlpZiAoIWVycm9yKSB7DQogCQlpbm9kZV9kaXJfbm90aWZ5
KGRpciwgRE5fREVMRVRFKTsNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoZGlyLCBJTl9E
RUxFVEVfU1VCRElSLCAwLA0KKwkJCQlkZW50cnktPmRfbmFtZS5uYW1lKTsNCisJCWlub3RpZnlf
aW5vZGVfcXVldWVfZXZlbnQoZGVudHJ5LT5kX2lub2RlLCBJTl9ERUxFVEVfU0VMRiwgMCwNCisJ
CQkJTlVMTCk7DQorCQlpbm90aWZ5X2lub2RlX2lzX2RlYWQgKGRlbnRyeS0+ZF9pbm9kZSk7DQog
CQlkX2RlbGV0ZShkZW50cnkpOw0KIAl9DQogCWRwdXQoZGVudHJ5KTsNCkBAIC0xNzc1LDggKzE3
ODcsMTMgQEANCiANCiAJLyogV2UgZG9uJ3QgZF9kZWxldGUoKSBORlMgc2lsbHlyZW5hbWVkIGZp
bGVzLS10aGV5IHN0aWxsIGV4aXN0LiAqLw0KIAlpZiAoIWVycm9yICYmICEoZGVudHJ5LT5kX2Zs
YWdzICYgRENBQ0hFX05GU0ZTX1JFTkFNRUQpKSB7DQotCQlkX2RlbGV0ZShkZW50cnkpOw0KIAkJ
aW5vZGVfZGlyX25vdGlmeShkaXIsIEROX0RFTEVURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVl
X2V2ZW50KGRpciwgSU5fREVMRVRFX0ZJTEUsIDAsDQorCQkJCWRlbnRyeS0+ZF9uYW1lLm5hbWUp
Ow0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudChkZW50cnktPmRfaW5vZGUsIElOX0RFTEVU
RV9TRUxGLCAwLA0KKwkJCQlOVUxMKTsNCisJCWlub3RpZnlfaW5vZGVfaXNfZGVhZCAoZGVudHJ5
LT5kX2lub2RlKTsNCisJCWRfZGVsZXRlKGRlbnRyeSk7DQogCX0NCiAJcmV0dXJuIGVycm9yOw0K
IH0NCkBAIC0xODUzLDYgKzE4NzAsOCBAQA0KIAllcnJvciA9IGRpci0+aV9vcC0+c3ltbGluayhk
aXIsIGRlbnRyeSwgb2xkbmFtZSk7DQogCWlmICghZXJyb3IpIHsNCiAJCWlub2RlX2Rpcl9ub3Rp
ZnkoZGlyLCBETl9DUkVBVEUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudChkaXIsIElO
X0NSRUFURV9GSUxFLCAwLA0KKwkJCQlkZW50cnktPmRfbmFtZS5uYW1lKTsNCiAJCXNlY3VyaXR5
X2lub2RlX3Bvc3Rfc3ltbGluayhkaXIsIGRlbnRyeSwgb2xkbmFtZSk7DQogCX0NCiAJcmV0dXJu
IGVycm9yOw0KQEAgLTE5MjYsNiArMTk0NSw4IEBADQogCXVwKCZvbGRfZGVudHJ5LT5kX2lub2Rl
LT5pX3NlbSk7DQogCWlmICghZXJyb3IpIHsNCiAJCWlub2RlX2Rpcl9ub3RpZnkoZGlyLCBETl9D
UkVBVEUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudChkaXIsIElOX0NSRUFURV9GSUxF
LCAwLCANCisJCQkJCW5ld19kZW50cnktPmRfbmFtZS5uYW1lKTsNCiAJCXNlY3VyaXR5X2lub2Rl
X3Bvc3RfbGluayhvbGRfZGVudHJ5LCBkaXIsIG5ld19kZW50cnkpOw0KIAl9DQogCXJldHVybiBl
cnJvcjsNCkBAIC0yMDg5LDYgKzIxMTAsOCBAQA0KIHsNCiAJaW50IGVycm9yOw0KIAlpbnQgaXNf
ZGlyID0gU19JU0RJUihvbGRfZGVudHJ5LT5kX2lub2RlLT5pX21vZGUpOw0KKwljaGFyICpvbGRf
bmFtZTsNCisJdTMyIGNvb2tpZTsNCiANCiAJaWYgKG9sZF9kZW50cnktPmRfaW5vZGUgPT0gbmV3
X2RlbnRyeS0+ZF9pbm9kZSkNCiAgCQlyZXR1cm4gMDsNCkBAIC0yMTEwLDYgKzIxMzMsOCBAQA0K
IAlEUVVPVF9JTklUKG9sZF9kaXIpOw0KIAlEUVVPVF9JTklUKG5ld19kaXIpOw0KIA0KKwlvbGRf
bmFtZSA9IGlub3RpZnlfb2xkbmFtZV9pbml0KG9sZF9kZW50cnkpOw0KKw0KIAlpZiAoaXNfZGly
KQ0KIAkJZXJyb3IgPSB2ZnNfcmVuYW1lX2RpcihvbGRfZGlyLG9sZF9kZW50cnksbmV3X2Rpcixu
ZXdfZGVudHJ5KTsNCiAJZWxzZQ0KQEAgLTIxMjEsNyArMjE0NiwxNSBAQA0KIAkJCWlub2RlX2Rp
cl9ub3RpZnkob2xkX2RpciwgRE5fREVMRVRFKTsNCiAJCQlpbm9kZV9kaXJfbm90aWZ5KG5ld19k
aXIsIEROX0NSRUFURSk7DQogCQl9DQorDQorCQljb29raWUgPSBpbm90aWZ5X2dldF9jb29raWUo
KTsNCisNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQob2xkX2RpciwgSU5fTU9WRURfRlJP
TSwgY29va2llLCBvbGRfbmFtZSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KG5ld19k
aXIsIElOX01PVkVEX1RPLCBjb29raWUsDQorCQkJCQkgIG5ld19kZW50cnktPmRfbmFtZS5uYW1l
KTsNCiAJfQ0KKwlpbm90aWZ5X29sZG5hbWVfZnJlZShvbGRfbmFtZSk7DQorDQogCXJldHVybiBl
cnJvcjsNCiB9DQogDQotLS0gY2xlYW4vbGludXgvZnMvaW5vZGUuYwkyMDA0LTA4LTE0IDA2OjU2
OjIzLjAwMDAwMDAwMCAtMDQwMA0KKysrIGxpbnV4L2ZzL2lub2RlLmMJMjAwNC0xMC0wNCAwMDo0
NDo1NC4wMDAwMDAwMDAgLTA0MDANCkBAIC0xMTQsNiArMTE0LDkgQEANCiAJaWYgKGlub2RlKSB7
DQogCQlzdHJ1Y3QgYWRkcmVzc19zcGFjZSAqIGNvbnN0IG1hcHBpbmcgPSAmaW5vZGUtPmlfZGF0
YTsNCiANCisjaWZkZWYgQ09ORklHX0lOT1RJRlkNCisJCWlub2RlLT5pbm90aWZ5X2RhdGEgPSBO
VUxMOw0KKyNlbmRpZg0KIAkJaW5vZGUtPmlfc2IgPSBzYjsNCiAJCWlub2RlLT5pX2Jsa2JpdHMg
PSBzYi0+c19ibG9ja3NpemVfYml0czsNCiAJCWlub2RlLT5pX2ZsYWdzID0gMDsNCi0tLSBjbGVh
bi9saW51eC9mcy9hdHRyLmMJMjAwNC0wOC0xNCAwNjo1NDo1MC4wMDAwMDAwMDAgLTA0MDANCisr
KyBsaW51eC9mcy9hdHRyLmMJMjAwNC0xMC0xNCAyMjoyMzowOS4wMDAwMDAwMDAgLTA0MDANCkBA
IC0xMSw2ICsxMSw3IEBADQogI2luY2x1ZGUgPGxpbnV4L3N0cmluZy5oPg0KICNpbmNsdWRlIDxs
aW51eC9zbXBfbG9jay5oPg0KICNpbmNsdWRlIDxsaW51eC9kbm90aWZ5Lmg+DQorI2luY2x1ZGUg
PGxpbnV4L2lub3RpZnkuaD4NCiAjaW5jbHVkZSA8bGludXgvZmNudGwuaD4NCiAjaW5jbHVkZSA8
bGludXgvcXVvdGFvcHMuaD4NCiAjaW5jbHVkZSA8bGludXgvc2VjdXJpdHkuaD4NCkBAIC0xMDMs
MjkgKzEwNCw1MSBAQA0KIG91dDoNCiAJcmV0dXJuIGVycm9yOw0KIH0NCi0NCiBFWFBPUlRfU1lN
Qk9MKGlub2RlX3NldGF0dHIpOw0KIA0KLWludCBzZXRhdHRyX21hc2sodW5zaWduZWQgaW50IGlh
X3ZhbGlkKQ0KK3ZvaWQgc2V0YXR0cl9tYXNrICh1bnNpZ25lZCBpbnQgaWFfdmFsaWQsIGludCAq
ZG5fbWFzaywgdTMyICppbl9tYXNrKQ0KIHsNCi0JdW5zaWduZWQgbG9uZyBkbl9tYXNrID0gMDsN
CisJaW50IGRubWFzazsNCisJdTMyIGlubWFzazsNCiANCi0JaWYgKGlhX3ZhbGlkICYgQVRUUl9V
SUQpDQotCQlkbl9tYXNrIHw9IEROX0FUVFJJQjsNCi0JaWYgKGlhX3ZhbGlkICYgQVRUUl9HSUQp
DQotCQlkbl9tYXNrIHw9IEROX0FUVFJJQjsNCi0JaWYgKGlhX3ZhbGlkICYgQVRUUl9TSVpFKQ0K
LQkJZG5fbWFzayB8PSBETl9NT0RJRlk7DQotCS8qIGJvdGggdGltZXMgaW1wbGllcyBhIHV0aW1l
KHMpIGNhbGwgKi8NCi0JaWYgKChpYV92YWxpZCAmIChBVFRSX0FUSU1FfEFUVFJfTVRJTUUpKSA9
PSAoQVRUUl9BVElNRXxBVFRSX01USU1FKSkNCi0JCWRuX21hc2sgfD0gRE5fQVRUUklCOw0KLQll
bHNlIGlmIChpYV92YWxpZCAmIEFUVFJfQVRJTUUpDQotCQlkbl9tYXNrIHw9IEROX0FDQ0VTUzsN
Ci0JZWxzZSBpZiAoaWFfdmFsaWQgJiBBVFRSX01USU1FKQ0KLQkJZG5fbWFzayB8PSBETl9NT0RJ
Rlk7DQotCWlmIChpYV92YWxpZCAmIEFUVFJfTU9ERSkNCi0JCWRuX21hc2sgfD0gRE5fQVRUUklC
Ow0KLQlyZXR1cm4gZG5fbWFzazsNCisJaW5tYXNrID0gMDsNCisJZG5tYXNrID0gMDsNCisNCisJ
aWYgKCFkbl9tYXNrIHx8ICFpbl9tYXNrKSB7DQorCQlyZXR1cm47DQorCX0NCisgICAgICAgIGlm
IChpYV92YWxpZCAmIEFUVFJfVUlEKSB7DQorICAgICAgICAgICAgICAgIGlubWFzayB8PSBJTl9B
VFRSSUI7DQorCQlkbm1hc2sgfD0gRE5fQVRUUklCOw0KKwl9DQorICAgICAgICBpZiAoaWFfdmFs
aWQgJiBBVFRSX0dJRCkgew0KKyAgICAgICAgICAgICAgICBpbm1hc2sgfD0gSU5fQVRUUklCOw0K
KwkJZG5tYXNrIHw9IEROX0FUVFJJQjsNCisJfQ0KKyAgICAgICAgaWYgKGlhX3ZhbGlkICYgQVRU
Ul9TSVpFKSB7DQorICAgICAgICAgICAgICAgIGlubWFzayB8PSBJTl9NT0RJRlk7DQorCQlkbm1h
c2sgfD0gRE5fTU9ESUZZOw0KKwl9DQorICAgICAgICAvKiBib3RoIHRpbWVzIGltcGxpZXMgYSB1
dGltZShzKSBjYWxsICovDQorICAgICAgICBpZiAoKGlhX3ZhbGlkICYgKEFUVFJfQVRJTUV8QVRU
Ul9NVElNRSkpID09IChBVFRSX0FUSU1FfEFUVFJfTVRJTUUpKSB7DQorICAgICAgICAgICAgICAg
IGlubWFzayB8PSBJTl9BVFRSSUI7DQorCQlkbm1hc2sgfD0gRE5fQVRUUklCOw0KKwl9DQorICAg
ICAgICBlbHNlIGlmIChpYV92YWxpZCAmIEFUVFJfQVRJTUUpIHsNCisgICAgICAgICAgICAgICAg
aW5tYXNrIHw9IElOX0FDQ0VTUzsNCisJCWRubWFzayB8PSBETl9BQ0NFU1M7DQorCX0NCisgICAg
ICAgIGVsc2UgaWYgKGlhX3ZhbGlkICYgQVRUUl9NVElNRSkgew0KKyAgICAgICAgICAgICAgICBp
bm1hc2sgfD0gSU5fTU9ESUZZOw0KKwkJZG5tYXNrIHw9IEROX01PRElGWTsNCisJfQ0KKyAgICAg
ICAgaWYgKGlhX3ZhbGlkICYgQVRUUl9NT0RFKSB7DQorICAgICAgICAgICAgICAgIGlubWFzayB8
PSBJTl9BVFRSSUI7DQorCQlkbm1hc2sgfD0gRE5fQVRUUklCOw0KKwl9DQorDQorCSppbl9tYXNr
ID0gaW5tYXNrOw0KKwkqZG5fbWFzayA9IGRubWFzazsNCiB9DQogDQogaW50IG5vdGlmeV9jaGFu
Z2Uoc3RydWN0IGRlbnRyeSAqIGRlbnRyeSwgc3RydWN0IGlhdHRyICogYXR0cikNCkBAIC0xODQs
OSArMjA3LDE5IEBADQogCQl9DQogCX0NCiAJaWYgKCFlcnJvcikgew0KLQkJdW5zaWduZWQgbG9u
ZyBkbl9tYXNrID0gc2V0YXR0cl9tYXNrKGlhX3ZhbGlkKTsNCisJCWludCBkbl9tYXNrOw0KKwkJ
dTMyIGluX21hc2s7DQorDQorCQlzZXRhdHRyX21hc2sgKGlhX3ZhbGlkLCAmZG5fbWFzaywgJmlu
X21hc2spOw0KKw0KIAkJaWYgKGRuX21hc2spDQogCQkJZG5vdGlmeV9wYXJlbnQoZGVudHJ5LCBk
bl9tYXNrKTsNCisJCWlmIChpbl9tYXNrKSB7DQorCQkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVu
dChkZW50cnktPmRfaW5vZGUsIGluX21hc2ssIDAsDQorCQkJCQkJICBOVUxMKTsNCisJCQlpbm90
aWZ5X2RlbnRyeV9wYXJlbnRfcXVldWVfZXZlbnQoZGVudHJ5LCBpbl9tYXNrLCAwLA0KKwkJCQkJ
CQkgIGRlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KKwkJfQ0KIAl9DQogCXJldHVybiBlcnJvcjsNCiB9
DQotLS0gY2xlYW4vbGludXgvZnMvZmlsZV90YWJsZS5jCTIwMDQtMDgtMTQgMDY6NTQ6NDguMDAw
MDAwMDAwIC0wNDAwDQorKysgbGludXgvZnMvZmlsZV90YWJsZS5jCTIwMDQtMTAtMDYgMTY6MjM6
MDAuMDAwMDAwMDAwIC0wNDAwDQpAQCAtMTYsNiArMTYsNyBAQA0KICNpbmNsdWRlIDxsaW51eC9l
dmVudHBvbGwuaD4NCiAjaW5jbHVkZSA8bGludXgvbW91bnQuaD4NCiAjaW5jbHVkZSA8bGludXgv
Y2Rldi5oPg0KKyNpbmNsdWRlIDxsaW51eC9pbm90aWZ5Lmg+DQogDQogLyogc3lzY3RsIHR1bmFi
bGVzLi4uICovDQogc3RydWN0IGZpbGVzX3N0YXRfc3RydWN0IGZpbGVzX3N0YXQgPSB7DQpAQCAt
MTY4LDYgKzE2OSwxMiBAQA0KIAlzdHJ1Y3QgZGVudHJ5ICpkZW50cnkgPSBmaWxlLT5mX2RlbnRy
eTsNCiAJc3RydWN0IHZmc21vdW50ICptbnQgPSBmaWxlLT5mX3Zmc21udDsNCiAJc3RydWN0IGlu
b2RlICppbm9kZSA9IGRlbnRyeS0+ZF9pbm9kZTsNCisJdTMyIG1hc2s7DQorDQorDQorCW1hc2sg
PSAoZmlsZS0+Zl9tb2RlICYgRk1PREVfV1JJVEUpID8gSU5fQ0xPU0VfV1JJVEUgOiBJTl9DTE9T
RV9OT1dSSVRFOw0KKwlpbm90aWZ5X2RlbnRyeV9wYXJlbnRfcXVldWVfZXZlbnQoZGVudHJ5LCBt
YXNrLCAwLCBkZW50cnktPmRfbmFtZS5uYW1lKTsNCisJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVu
dChpbm9kZSwgbWFzaywgMCwgTlVMTCk7DQogDQogCS8qDQogCSAqIFRoZSBmdW5jdGlvbiBldmVu
dHBvbGxfcmVsZWFzZSgpIHNob3VsZCBiZSB0aGUgZmlyc3QgY2FsbGVkDQotLS0gY2xlYW4vbGlu
dXgvZHJpdmVycy9jaGFyL01ha2VmaWxlCTIwMDQtMDgtMTQgMDY6NTY6MjIuMDAwMDAwMDAwIC0w
NDAwDQorKysgbGludXgvZHJpdmVycy9jaGFyL01ha2VmaWxlCTIwMDQtMDktMjggMTY6NDY6MDUu
MDAwMDAwMDAwIC0wNDAwDQpAQCAtOSw2ICs5LDggQEANCiANCiBvYmoteQkgKz0gbWVtLm8gcmFu
ZG9tLm8gdHR5X2lvLm8gbl90dHkubyB0dHlfaW9jdGwubyBwdHkubyBtaXNjLm8NCiANCisNCitv
YmotJChDT05GSUdfSU5PVElGWSkJCSs9IGlub3RpZnkubw0KIG9iai0kKENPTkZJR19WVCkJCSs9
IHZ0X2lvY3RsLm8gdmNfc2NyZWVuLm8gY29uc29sZW1hcC5vIFwNCiAJCQkJICAgY29uc29sZW1h
cF9kZWZ0YmwubyBzZWxlY3Rpb24ubyBrZXlib2FyZC5vDQogb2JqLSQoQ09ORklHX0hXX0NPTlNP
TEUpCSs9IHZ0Lm8gZGVma2V5bWFwLm8NCi0tLSBjbGVhbi9saW51eC9kcml2ZXJzL2NoYXIvS2Nv
bmZpZwkyMDA0LTA4LTE0IDA2OjU0OjQ3LjAwMDAwMDAwMCAtMDQwMA0KKysrIGxpbnV4L2RyaXZl
cnMvY2hhci9LY29uZmlnCTIwMDQtMDktMjggMTY6NDQ6MzQuMDAwMDAwMDAwIC0wNDAwDQpAQCAt
NjIsNiArNjIsMTkgQEANCiAJZGVwZW5kcyBvbiBWVCAmJiAhUzM5MCAmJiAhVU0NCiAJZGVmYXVs
dCB5DQogDQorY29uZmlnIElOT1RJRlkNCisJYm9vbCAiSW5vdGlmeSBmaWxlIGNoYW5nZSBub3Rp
ZmljYXRpb24gc3VwcG9ydCINCisJZGVmYXVsdCB5DQorCS0tLWhlbHAtLS0NCisJICBTYXkgWSBo
ZXJlIHRvIGVuYWJsZSBpbm90aWZ5IHN1cHBvcnQgYW5kIHRoZSAvZGV2L2lub3RpZnkgY2hhcmFj
dGVyDQorCSAgZGV2aWNlLiAgSW5vdGlmeSBpcyBhIGZpbGUgY2hhbmdlIG5vdGlmaWNhdGlvbiBz
eXN0ZW0gYW5kIGENCisJICByZXBsYWNlbWVudCBmb3IgZG5vdGlmeS4gIElub3RpZnkgZml4ZXMg
bnVtZXJvdXMgc2hvcnRjb21pbmdzIGluDQorCSAgZG5vdGlmeSBhbmQgaW50cm9kdWNlcyBzZXZl
cmFsIG5ldyBmZWF0dXJlcy4gIEl0IGFsbG93cyBtb25pdG9yaW5nDQorCSAgb2YgYm90aCBmaWxl
cyBhbmQgZGlyZWN0b3JpZXMgdmlhIGEgc2luZ2xlIG9wZW4gZmQuICBNdWx0aXBsZSBmaWxlDQor
CSAgZXZlbnRzIGFyZSBzdXBwb3J0ZWQuDQorCSAgDQorCSAgSWYgdW5zdXJlLCBzYXkgWS4NCisN
CiBjb25maWcgU0VSSUFMX05PTlNUQU5EQVJEDQogCWJvb2wgIk5vbi1zdGFuZGFyZCBzZXJpYWwg
cG9ydCBzdXBwb3J0Ig0KIAktLS1oZWxwLS0tDQotLS0gY2xlYW4vbGludXgvRG9jdW1lbnRhdGlv
bi9kbm90aWZ5LnR4dAkyMDA0LTA4LTE0IDA2OjU1OjMzLjAwMDAwMDAwMCAtMDQwMA0KKysrIGxp
bnV4L0RvY3VtZW50YXRpb24vZG5vdGlmeS50eHQJMjAwNC0xMC0wNCAyMToxMzowMy4wMDAwMDAw
MDAgLTA0MDANCkBAIC01NCw2ICs1NCwxNCBAQA0KIEFsc28sIGZpbGVzIHRoYXQgYXJlIHVubGlu
a2VkLCB3aWxsIHN0aWxsIGNhdXNlIG5vdGlmaWNhdGlvbnMgaW4gdGhlDQogbGFzdCBkaXJlY3Rv
cnkgdGhhdCB0aGV5IHdlcmUgbGlua2VkIHRvLg0KIA0KK0NvbmZpZ3VyYXRpb24NCistLS0tLS0t
LS0tLS0tDQorDQorRG5vdGlmeSBpcyBjb250cm9sbGVkIHZpYSB0aGUgQ09ORklHX0ROT1RJRlkg
Y29uZmlndXJhdGlvbiBvcHRpb24uICBXaGVuDQorZGlzYWJsZWQsIGZjbnRsKGZkLCBGX05PVElG
WSwgLi4uKSB3aWxsIHJldHVybiAtRUlOVkFMLg0KKw0KK0Rub3RpZnkgaXMgZGVwcmVjYXRlZCBp
biBmYXZvciBvZiBpbm90aWZ5IChDT05GSUdfSU5PVElGWSkuDQorDQogRXhhbXBsZQ0KIC0tLS0t
LS0NCiANCi0tLSBjbGVhbi9saW51eC9mcy9LY29uZmlnCTIwMDQtMDgtMTQgMDY6NTU6MzMuMDAw
MDAwMDAwIC0wNDAwDQorKysgbGludXgvZnMvS2NvbmZpZwkyMDA0LTEwLTA0IDIxOjEzOjAzLjAw
MDAwMDAwMCAtMDQwMA0KQEAgLTQzOCw2ICs0MzgsMTggQEANCiAJZGVwZW5kcyBvbiBYRlNfUVVP
VEEgfHwgUVVPVEENCiAJZGVmYXVsdCB5DQogDQorY29uZmlnIEROT1RJRlkNCisJYm9vbCAiRG5v
dGlmeSBzdXBwb3J0Ig0KKwlkZWZhdWx0IHkNCisJaGVscA0KKwkgIERub3RpZnkgaXMgYSBkaXJl
Y3RvcnktYmFzZWQgcGVyLWZkIGZpbGUgY2hhbmdlIG5vdGlmaWNhdGlvbiBzeXN0ZW0NCisJICB0
aGF0IHVzZXMgc2lnbmFscyB0byBjb21tdW5pY2F0ZSBldmVudHMgdG8gdXNlci1zcGFjZS4gIEl0
IGhhcw0KKwkgIGJlZW4gcmVwbGFjZWQgYnkgaW5vdGlmeSAoc2VlIENPTkZJR19JTk9USUZZKSwg
d2hpY2ggc29sdmVzIG1hbnkgb2YNCisJICB0aGUgc2hvcnRjb21pbmdzIG9mIGRub3RpZnkgYW5k
IGFkZHMgbmV3IGZlYXR1cmVzLCBidXQgc29tZQ0KKwkgIGFwcGxpY2F0aW9ucyBtYXkgc3RpbGwg
cmVseSBvbiBkbm90aWZ5Lg0KKwkgIA0KKwkgIEJlY2F1c2Ugb2YgdGhpcywgaWYgdW5zdXJlLCBz
YXkgWS4NCisNCiBjb25maWcgQVVUT0ZTX0ZTDQogCXRyaXN0YXRlICJLZXJuZWwgYXV0b21vdW50
ZXIgc3VwcG9ydCINCiAJaGVscA0KLS0tIGNsZWFuL2xpbnV4L2ZzL01ha2VmaWxlCTIwMDQtMDgt
MTQgMDY6NTU6MzMuMDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgvZnMvTWFrZWZpbGUJMjAwNC0x
MC0wNCAyMToxMzowMy4wMDAwMDAwMDAgLTA0MDANCkBAIC01LDEyICs1LDExIEBADQogIyBSZXdy
aXR0ZW4gdG8gdXNlIGxpc3RzIGluc3RlYWQgb2YgaWYtc3RhdGVtZW50cy4NCiAjIA0KIA0KLW9i
ai15IDo9CW9wZW4ubyByZWFkX3dyaXRlLm8gZmlsZV90YWJsZS5vIGJ1ZmZlci5vIFwNCi0JCWJp
by5vIHN1cGVyLm8gYmxvY2tfZGV2Lm8gY2hhcl9kZXYubyBzdGF0Lm8gZXhlYy5vIHBpcGUubyBc
DQotCQluYW1laS5vIGZjbnRsLm8gaW9jdGwubyByZWFkZGlyLm8gc2VsZWN0Lm8gZmlmby5vIGxv
Y2tzLm8gXA0KLQkJZGNhY2hlLm8gaW5vZGUubyBhdHRyLm8gYmFkX2lub2RlLm8gZmlsZS5vIGRu
b3RpZnkubyBcDQotCQlmaWxlc3lzdGVtcy5vIG5hbWVzcGFjZS5vIHNlcV9maWxlLm8geGF0dHIu
byBsaWJmcy5vIFwNCi0JCWZzLXdyaXRlYmFjay5vIG1wYWdlLm8gZGlyZWN0LWlvLm8gYWlvLm8N
CitvYmoteSA6PQlvcGVuLm8gcmVhZF93cml0ZS5vIGZpbGVfdGFibGUubyBidWZmZXIubyAgYmlv
Lm8gc3VwZXIubyBcDQorCQlibG9ja19kZXYubyBjaGFyX2Rldi5vIHN0YXQubyBleGVjLm8gcGlw
ZS5vIG5hbWVpLm8gZmNudGwubyBcDQorCQlpb2N0bC5vIHJlYWRkaXIubyBzZWxlY3QubyBmaWZv
Lm8gbG9ja3MubyBkY2FjaGUubyBpbm9kZS5vIFwNCisJCWF0dHIubyBiYWRfaW5vZGUubyBmaWxl
Lm8gZmlsZXN5c3RlbXMubyBuYW1lc3BhY2UubyBhaW8ubyBcDQorCQlzZXFfZmlsZS5vIHhhdHRy
Lm8gbGliZnMubyBmcy13cml0ZWJhY2subyBtcGFnZS5vIGRpcmVjdC1pby5vIFwNCiANCiBvYmot
JChDT05GSUdfRVBPTEwpCQkrPSBldmVudHBvbGwubw0KIG9iai0kKENPTkZJR19DT01QQVQpCQkr
PSBjb21wYXQubw0KQEAgLTM3LDYgKzM2LDggQEANCiBvYmotJChDT05GSUdfUUZNVF9WMikJCSs9
IHF1b3RhX3YyLm8NCiBvYmotJChDT05GSUdfUVVPVEFDVEwpCQkrPSBxdW90YS5vDQogDQorb2Jq
LSQoQ09ORklHX0ROT1RJRlkpCQkrPSBkbm90aWZ5Lm8NCisNCiBvYmotJChDT05GSUdfUFJPQ19G
UykJCSs9IHByb2MvDQogb2JqLXkJCQkJKz0gcGFydGl0aW9ucy8NCiBvYmotJChDT05GSUdfU1lT
RlMpCQkrPSBzeXNmcy8NCi0tLSBjbGVhbi9saW51eC9mcy9kbm90aWZ5LmMJMjAwNC0wOC0xNCAw
Njo1NToxMC4wMDAwMDAwMDAgLTA0MDANCisrKyBsaW51eC9mcy9kbm90aWZ5LmMJMjAwNC0xMC0w
NiAxOToyMzozNy4wMDAwMDAwMDAgLTA0MDANCkBAIC0xMyw2ICsxMyw3IEBADQogICogTUVSQ0hB
TlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBH
TlUNCiAgKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQogICovDQor
DQogI2luY2x1ZGUgPGxpbnV4L2ZzLmg+DQogI2luY2x1ZGUgPGxpbnV4L21vZHVsZS5oPg0KICNp
bmNsdWRlIDxsaW51eC9zY2hlZC5oPg0KQEAgLTIxLDggKzIyLDYgQEANCiAjaW5jbHVkZSA8bGlu
dXgvc3BpbmxvY2suaD4NCiAjaW5jbHVkZSA8bGludXgvc2xhYi5oPg0KIA0KLWludCBkaXJfbm90
aWZ5X2VuYWJsZSA9IDE7DQotDQogc3RhdGljIGttZW1fY2FjaGVfdCAqZG5fY2FjaGU7DQogDQog
c3RhdGljIHZvaWQgcmVkb19pbm9kZV9tYXNrKHN0cnVjdCBpbm9kZSAqaW5vZGUpDQpAQCAtNzIs
OCArNzEsNiBAQA0KIAkJZG5vdGlmeV9mbHVzaChmaWxwLCBpZCk7DQogCQlyZXR1cm4gMDsNCiAJ
fQ0KLQlpZiAoIWRpcl9ub3RpZnlfZW5hYmxlKQ0KLQkJcmV0dXJuIC1FSU5WQUw7DQogCWlub2Rl
ID0gZmlscC0+Zl9kZW50cnktPmRfaW5vZGU7DQogCWlmICghU19JU0RJUihpbm9kZS0+aV9tb2Rl
KSkNCiAJCXJldHVybiAtRU5PVERJUjsNCkBAIC0xNDYsNiArMTQzLDI5IEBADQogDQogRVhQT1JU
X1NZTUJPTChfX2lub2RlX2Rpcl9ub3RpZnkpOw0KIA0KK2ludCBzZXRhdHRyX21hc2tfZG5vdGlm
eSh1bnNpZ25lZCBpbnQgaWFfdmFsaWQpDQorew0KKwl1bnNpZ25lZCBsb25nIGRuX21hc2sgPSAw
Ow0KKw0KKwlpZiAoaWFfdmFsaWQgJiBBVFRSX1VJRCkNCisJCWRuX21hc2sgfD0gRE5fQVRUUklC
Ow0KKwlpZiAoaWFfdmFsaWQgJiBBVFRSX0dJRCkNCisJCWRuX21hc2sgfD0gRE5fQVRUUklCOw0K
KwlpZiAoaWFfdmFsaWQgJiBBVFRSX1NJWkUpDQorCQlkbl9tYXNrIHw9IEROX01PRElGWTsNCisJ
LyogYm90aCB0aW1lcyBpbXBsaWVzIGEgdXRpbWUocykgY2FsbCAqLw0KKwlpZiAoKGlhX3ZhbGlk
ICYgKEFUVFJfQVRJTUV8QVRUUl9NVElNRSkpID09IChBVFRSX0FUSU1FfEFUVFJfTVRJTUUpKQ0K
KwkJZG5fbWFzayB8PSBETl9BVFRSSUI7DQorCWVsc2UgaWYgKGlhX3ZhbGlkICYgQVRUUl9BVElN
RSkNCisJCWRuX21hc2sgfD0gRE5fQUNDRVNTOw0KKwllbHNlIGlmIChpYV92YWxpZCAmIEFUVFJf
TVRJTUUpDQorCQlkbl9tYXNrIHw9IEROX01PRElGWTsNCisJaWYgKGlhX3ZhbGlkICYgQVRUUl9N
T0RFKQ0KKwkJZG5fbWFzayB8PSBETl9BVFRSSUI7DQorCXJldHVybiBkbl9tYXNrOw0KK30NCitF
WFBPUlRfU1lNQk9MKHNldGF0dHJfbWFza19kbm90aWZ5KTsNCisNCiAvKg0KICAqIFRoaXMgaXMg
aG9wZWxlc3NseSB3cm9uZywgYnV0IHVuZml4YWJsZSB3aXRob3V0IEFQSSBjaGFuZ2VzLiAgQXQN
CiAgKiBsZWFzdCBpdCBkb2Vzbid0IG9vcHMgdGhlIGtlcm5lbC4uLg0KQEAgLTE1Nyw5ICsxNzcs
NiBAQA0KIHsNCiAJc3RydWN0IGRlbnRyeSAqcGFyZW50Ow0KIA0KLQlpZiAoIWRpcl9ub3RpZnlf
ZW5hYmxlKQ0KLQkJcmV0dXJuOw0KLQ0KIAlzcGluX2xvY2soJmRlbnRyeS0+ZF9sb2NrKTsNCiAJ
cGFyZW50ID0gZGVudHJ5LT5kX3BhcmVudDsNCiAJaWYgKHBhcmVudC0+ZF9pbm9kZS0+aV9kbm90
aWZ5X21hc2sgJiBldmVudCkgew0KLS0tIGNsZWFuL2xpbnV4L2luY2x1ZGUvbGludXgvZG5vdGlm
eS5oCTIwMDQtMDgtMTQgMDY6NTQ6NDcuMDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgvaW5jbHVk
ZS9saW51eC9kbm90aWZ5LmgJMjAwNC0xMC0wNiAxOToyMzozNy4wMDAwMDAwMDAgLTA0MDANCkBA
IC0xLDMgKzEsNSBAQA0KKyNpZm5kZWYgX0xJTlVYX0ROT1RJRllfSA0KKyNkZWZpbmUgX0xJTlVY
X0ROT1RJRllfSA0KIC8qDQogICogRGlyZWN0b3J5IG5vdGlmaWNhdGlvbiBmb3IgTGludXgNCiAg
Kg0KQEAgLTgsMjAgKzEwLDYwIEBADQogDQogc3RydWN0IGRub3RpZnlfc3RydWN0IHsNCiAJc3Ry
dWN0IGRub3RpZnlfc3RydWN0ICoJZG5fbmV4dDsNCi0JdW5zaWduZWQgbG9uZwkJZG5fbWFzazsJ
LyogRXZlbnRzIHRvIGJlIG5vdGlmaWVkDQotCQkJCQkJICAgc2VlIGxpbnV4L2ZjbnRsLmggKi8N
CisJdW5zaWduZWQgbG9uZwkJZG5fbWFzazsNCiAJaW50CQkJZG5fZmQ7DQogCXN0cnVjdCBmaWxl
ICoJCWRuX2ZpbHA7DQogCWZsX293bmVyX3QJCWRuX293bmVyOw0KIH07DQogDQorI2lmZGVmIF9f
S0VSTkVMX18NCisNCisjaW5jbHVkZSA8bGludXgvY29uZmlnLmg+DQorDQorI2lmZGVmIENPTkZJ
R19ETk9USUZZDQorDQogZXh0ZXJuIHZvaWQgX19pbm9kZV9kaXJfbm90aWZ5KHN0cnVjdCBpbm9k
ZSAqLCB1bnNpZ25lZCBsb25nKTsNCi1leHRlcm4gdm9pZCBkbm90aWZ5X2ZsdXNoKHN0cnVjdCBm
aWxlICpmaWxwLCBmbF9vd25lcl90IGlkKTsNCitleHRlcm4gdm9pZCBkbm90aWZ5X2ZsdXNoKHN0
cnVjdCBmaWxlICosIGZsX293bmVyX3QpOw0KIGV4dGVybiBpbnQgZmNudGxfZGlybm90aWZ5KGlu
dCwgc3RydWN0IGZpbGUgKiwgdW5zaWduZWQgbG9uZyk7DQotdm9pZCBkbm90aWZ5X3BhcmVudChz
dHJ1Y3QgZGVudHJ5ICpkZW50cnksIHVuc2lnbmVkIGxvbmcgZXZlbnQpOw0KK2V4dGVybiB2b2lk
IGRub3RpZnlfcGFyZW50KHN0cnVjdCBkZW50cnkgKiwgdW5zaWduZWQgbG9uZyk7DQorZXh0ZXJu
IGludCBzZXRhdHRyX21hc2tfZG5vdGlmeSh1bnNpZ25lZCBpbnQpOw0KIA0KIHN0YXRpYyBpbmxp
bmUgdm9pZCBpbm9kZV9kaXJfbm90aWZ5KHN0cnVjdCBpbm9kZSAqaW5vZGUsIHVuc2lnbmVkIGxv
bmcgZXZlbnQpDQogew0KLQlpZiAoKGlub2RlKS0+aV9kbm90aWZ5X21hc2sgJiAoZXZlbnQpKQ0K
KwlpZiAoaW5vZGUtPmlfZG5vdGlmeV9tYXNrICYgKGV2ZW50KSkNCiAJCV9faW5vZGVfZGlyX25v
dGlmeShpbm9kZSwgZXZlbnQpOw0KIH0NCisNCisjZWxzZQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9p
ZCBfX2lub2RlX2Rpcl9ub3RpZnkoc3RydWN0IGlub2RlICppbm9kZSwgdW5zaWduZWQgbG9uZyBl
dmVudCkNCit7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBkbm90aWZ5X2ZsdXNoKHN0cnVj
dCBmaWxlICpmaWxwLCBmbF9vd25lcl90IGlkKQ0KK3sNCit9DQorDQorc3RhdGljIGlubGluZSBp
bnQgZmNudGxfZGlybm90aWZ5KGludCBmZCwgc3RydWN0IGZpbGUgKmZpbHAsIHVuc2lnbmVkIGxv
bmcgYXJnKQ0KK3sNCisJcmV0dXJuIC1FSU5WQUw7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9p
ZCBkbm90aWZ5X3BhcmVudChzdHJ1Y3QgZGVudHJ5ICpkZW50cnksIHVuc2lnbmVkIGxvbmcgZXZl
bnQpDQorew0KK30NCisNCitzdGF0aWMgaW5saW5lIHZvaWQgaW5vZGVfZGlyX25vdGlmeShzdHJ1
Y3QgaW5vZGUgKmlub2RlLCB1bnNpZ25lZCBsb25nIGV2ZW50KQ0KK3sNCit9DQorDQorc3RhdGlj
IGlubGluZSBpbnQgc2V0YXR0cl9tYXNrX2Rub3RpZnkodW5zaWduZWQgaW50IGlhX3ZhbGlkKQ0K
K3sNCisJcmV0dXJuIDA7DQorfQ0KKw0KKyNlbmRpZiAvKiBDT05GSUdfRE5PVElGWSAqLw0KKw0K
KyNlbmRpZiAvKiBfX0tFUk5FTCBfXyAqLw0KKw0KKyNlbmRpZiAvKiBfTElOVVhfRE5PVElGWV9I
ICovDQotLS0gY2xlYW4vbGludXgva2VybmVsL3N5c2N0bC5jCTIwMDQtMDgtMTQgMDY6NTQ6NDku
MDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgva2VybmVsL3N5c2N0bC5jCTIwMDQtMTAtMDQgMjE6
MTM6MDMuMDAwMDAwMDAwIC0wNDAwDQpAQCAtODY4LDE0ICs4NjgsNiBAQA0KIAkJLnByb2NfaGFu
ZGxlcgk9ICZwcm9jX2RvaW50dmVjLA0KIAl9LA0KIAl7DQotCQkuY3RsX25hbWUJPSBGU19ESVJf
Tk9USUZZLA0KLQkJLnByb2NuYW1lCT0gImRpci1ub3RpZnktZW5hYmxlIiwNCi0JCS5kYXRhCQk9
ICZkaXJfbm90aWZ5X2VuYWJsZSwNCi0JCS5tYXhsZW4JCT0gc2l6ZW9mKGludCksDQotCQkubW9k
ZQkJPSAwNjQ0LA0KLQkJLnByb2NfaGFuZGxlcgk9ICZwcm9jX2RvaW50dmVjLA0KLQl9LA0KLQl7
DQogCQkuY3RsX25hbWUJPSBGU19MRUFTRV9USU1FLA0KIAkJLnByb2NuYW1lCT0gImxlYXNlLWJy
ZWFrLXRpbWUiLA0KIAkJLmRhdGEJCT0gJmxlYXNlX2JyZWFrX3RpbWUsDQo=

--=-x0MFNKLLAUupVNiEEW/W--
