Return-Path: <linux-kernel-owner+willy=40w.ods.org-S1751499AbWHRVrV@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751499AbWHRVrV (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 18 Aug 2006 17:47:21 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1751502AbWHRVrV
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 18 Aug 2006 17:47:21 -0400
Received: from py-out-1112.google.com ([64.233.166.180]:63688 "EHLO
	py-out-1112.google.com") by vger.kernel.org with ESMTP
	id S1751499AbWHRVrT (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 18 Aug 2006 17:47:19 -0400
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=b7AixZOWX64nexxO3PVQ1cv4gju2FanI+cGimmaiGYdrHfRNTqIgvy3wGGnJnlAeJB5CVS9jwSFhnbv5mxvsbC1KeuyNXizjxU/LJdYI3IOsmdBfJIFxL1zgaTYMqRFHE15GuvPQUIRjGOtZi+Bvvqgjslii0dyd5a5SkdAg188=
Message-ID: <b0943d9e0608181447t5503b24eyfea6f3903c2ba27d@mail.gmail.com>
Date: Fri, 18 Aug 2006 22:47:18 +0100
From: "Catalin Marinas" <catalin.marinas@gmail.com>
To: "Michal Piotrowski" <michal.k.k.piotrowski@gmail.com>
Subject: Re: [PATCH 2.6.18-rc4 00/10] Kernel memory leak detector 0.9
Cc: linux-kernel@vger.kernel.org
In-Reply-To: <6bffcb0e0608181438m3406de08q9a168d486127aef@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_35814_14599875.1155937638711"
References: <20060812215857.17709.79502.stgit@localhost.localdomain>
	 <b0943d9e0608171458l45b717bexbfb8fb2ba68228db@mail.gmail.com>
	 <6bffcb0e0608180528ocadc36ck8868ae1a33342bb9@mail.gmail.com>
	 <b0943d9e0608180627g61007207read993387bf0c0b4@mail.gmail.com>
	 <6bffcb0e0608180655j50332247m8ed393c37d570ee4@mail.gmail.com>
	 <6bffcb0e0608180715v27015481vb7c603c4be356a21@mail.gmail.com>
	 <b0943d9e0608180846s4ed560b7ld4e3081bdc754454@mail.gmail.com>
	 <6bffcb0e0608180942l12e342epd60dffbb5c5d4b3e@mail.gmail.com>
	 <b0943d9e0608180957w60d22261k61b272c9b76505bd@mail.gmail.com>
	 <6bffcb0e0608181438m3406de08q9a168d486127aef@mail.gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

------=_Part_35814_14599875.1155937638711
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 18/08/06, Michal Piotrowski <michal.k.k.piotrowski@gmail.com> wrote:
> cat /sys/kernel/debug/memleak + LTP + patching repo = oops?
>
> BUG: unable to handle kernel paging request at virtual address 6b6b6b6b

I got this as well today on an 4-CPU ARM platform. I changed some list
traversal to the RCU variants but forgot to change the list_del/add. I
attach another patch which fixes this (haven't tested it extensively
yet).

Thanks.

-- 
Catalin

------=_Part_35814_14599875.1155937638711
Content-Type: text/x-patch; name="new-locking.patch"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="new-locking.patch"
X-Attachment-Id: f_er13cwgc

ZGlmZiAtLWdpdCBhL21tL21lbWxlYWsuYyBiL21tL21lbWxlYWsuYwppbmRleCA1MTQyODBmLi43
ZDZjMWYzIDEwMDY0NAotLS0gYS9tbS9tZW1sZWFrLmMKKysrIGIvbW0vbWVtbGVhay5jCkBAIC0x
Niw2ICsxNiwxOCBAQAogICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUg
R05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBp
ZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAgKiBGb3VuZGF0aW9uLCBJbmMuLCA1
OSBUZW1wbGUgUGxhY2UsIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3IFVTQQorICoK
KyAqCisgKiBOb3RlcyBvbiBsb2NraW5nOiBrbWVtbGVhayBuZWVkcyB0byBhbGxvY2F0ZS9mcmVl
IG1lbW9yeSBmb3IgaXRzCisgKiBvd24gZGF0YSBzdHJ1Y3R1cmVzIC0gdGhlIG1lbWxlYWtfcG9p
bnRlciBhbmQgdGhlIHBvaW50ZXIgYW5kCisgKiBhbGlhc2VzIHJhZGl4IHRyZWVzLiBUaGUgbWVt
bGVha19mcmVlIGhvb2sgY2FuIGJlIGNhbGxlZCBmcm9tCisgKiBtbS9zbGFiLmMgd2l0aCB0aGUg
bGlzdF9sb2NrIGhlbGQgKGkuZS4gd2hlbiByZWxlYXNpbmcgb2Ygb2ZmLXNsYWIKKyAqIG1hbmFn
ZW1lbnQgc3RydWN0dXJlcykgYW5kIGl0IHdpbGwgYWNrcXVpcmUgdGhlIG1lbWxlYWtfbG9jay4g
VG8KKyAqIGF2b2lkIGRlYWRsb2NrcyBjYXVzZWQgYnkgbG9ja2luZyBkZXBlbmRlbmN5LCB0aGUg
bGlzdF9sb2NrIG11c3QKKyAqIG5vdCBiZSBhY3F1aXJlZCB3aGlsZSBtZW1sZWFrX2xvY2sgaXMg
aGVsZC4gVGhpcyBpcyBlbnN1cmVkIGJ5IG5vdAorICogYWxsb2NhdGluZyBhbnkgbWVtb3J5IHdo
aWxlIG1lbWxlYWtfbG9jayBpcyBoZWxkLiBUaGUgcmFkaXggdHJlZXMKKyAqIGhhdmUgdG8gYmUg
cHJlbG9hZGVkIGJlZm9yZSBhY3F1aXJpbmcgdGhlIGxvY2sgc28gdGhhdCB0aGUKKyAqIGluc2Vy
dGlvbiB3b24ndCBhbGxvY2F0ZSBtZW1vcnkuCiAgKi8KIAogLyogI2RlZmluZSBERUJVRyAqLwpA
QCAtMzcsNiArNDksOCBAQCAjaW5jbHVkZSA8bGludXgvc2VxX2ZpbGUuaD4KICNpbmNsdWRlIDxs
aW51eC92bWFsbG9jLmg+CiAjaW5jbHVkZSA8bGludXgvbXV0ZXguaD4KICNpbmNsdWRlIDxsaW51
eC9jcHVtYXNrLmg+CisjaW5jbHVkZSA8bGludXgvc3BpbmxvY2suaD4KKyNpbmNsdWRlIDxsaW51
eC9yY3VwZGF0ZS5oPgogCiAjaW5jbHVkZSA8YXNtL2JpdG9wcy5oPgogI2luY2x1ZGUgPGFzbS9z
ZWN0aW9ucy5oPgpAQCAtNzUsNiArODksNyBAQCBzdHJ1Y3QgbWVtbGVha19wb2ludGVyIHsKIAl1
bnNpZ25lZCBsb25nIGZsYWdzOwogCXN0cnVjdCBsaXN0X2hlYWQgcG9pbnRlcl9saXN0OwogCXN0
cnVjdCBsaXN0X2hlYWQgZ3JheV9saXN0OworCXN0cnVjdCByY3VfaGVhZCByY3U7CiAJaW50IHVz
ZV9jb3VudDsKIAl1bnNpZ25lZCBsb25nIHBvaW50ZXI7CiAJdW5zaWduZWQgbG9uZyBvZmZzZXQ7
CQkvKiBwYWRkaW5nICovCkBAIC0xMjgsNiArMTQzLDcgQEAgc3RhdGljIGlubGluZSBpbnQgY29s
b3JfYmxhY2soY29uc3Qgc3RydQogCiAvKiBUcmVlIHN0b3JpbmcgdGhlIHBvaW50ZXIgYWxpYXNl
cyBpbmRleGVkIGJ5IHNpemUgKi8KIHN0YXRpYyBSQURJWF9UUkVFKGFsaWFzX3RyZWUsIEdGUF9B
VE9NSUMpOworc3RhdGljIERFRklORV9SV0xPQ0soYWxpYXNfdHJlZV9sb2NrKTsKIC8qIFRyZWUg
c3RvcmluZyBhbGwgdGhlIHBvc3NpYmxlIHBvaW50ZXJzLCBpbmRleGVkIGJ5IHRoZSBwb2ludGVy
IHZhbHVlICovCiBzdGF0aWMgUkFESVhfVFJFRShwb2ludGVyX3RyZWUsIEdGUF9BVE9NSUMpOwog
LyogVGhlIGxpc3Qgb2YgYWxsIGFsbG9jYXRlZCBwb2ludGVycyAqLwpAQCAtMTM2LDggKzE1Miw4
IEBAIHN0YXRpYyBMSVNUX0hFQUQocG9pbnRlcl9saXN0KTsKIHN0YXRpYyBMSVNUX0hFQUQoZ3Jh
eV9saXN0KTsKIAogc3RhdGljIHN0cnVjdCBrbWVtX2NhY2hlICpwb2ludGVyX2NhY2hlOwotLyog
VXNlZCB0byBhdm9pZCByZWN1cnNpdmUgY2FsbCB2aWEgdGhlIGttYWxsb2Mva2ZyZWUgZnVuY3Rp
b25zICovCi1zdGF0aWMgc3BpbmxvY2tfdCBtZW1sZWFrX2xvY2sgPSBTUElOX0xPQ0tfVU5MT0NL
RUQ7CisvKiBUaGUgbWFpbiBsb2NrIGZvciBwcm90ZWN0aW5nIHRoZSBwb2ludGVyIGxpc3RzIGFu
ZCByYWRpeCB0cmVlcyAqLworc3RhdGljIERFRklORV9TUElOTE9DSyhtZW1sZWFrX2xvY2spOwog
c3RhdGljIGNwdW1hc2tfdCBtZW1sZWFrX2NwdV9tYXNrID0gQ1BVX01BU0tfTk9ORTsKIHN0YXRp
YyBERUZJTkVfTVVURVgobWVtbGVha19tdXRleCk7CiBzdGF0aWMgYXRvbWljX3QgbWVtbGVha19p
bml0aWFsaXplZCA9IEFUT01JQ19JTklUKDApOwpAQCAtMTgxLDkgKzE5NywxMiBAQCBzdGF0aWMg
aW5saW5lIHZvaWQgZHVtcF9wb2ludGVyX2ludGVybmFsCiAJcHJpbnRrKEtFUk5fTk9USUNFICIg
IHJlZl9jb3VudCA9ICVkXG4iLCBwb2ludGVyLT5yZWZfY291bnQpOwogCXByaW50ayhLRVJOX05P
VElDRSAiICBjb3VudCA9ICVkXG4iLCBwb2ludGVyLT5jb3VudCk7CiAJcHJpbnRrKEtFUk5fTk9U
SUNFICIgIGFsaWFzZXM6XG4iKTsKLQlpZiAocG9pbnRlci0+YWxpYXNfbGlzdCkKLQkJaGxpc3Rf
Zm9yX2VhY2hfZW50cnkoYWxpYXMsIGVsZW0sIHBvaW50ZXItPmFsaWFzX2xpc3QsIG5vZGUpCisJ
aWYgKHBvaW50ZXItPmFsaWFzX2xpc3QpIHsKKwkJcmN1X3JlYWRfbG9jaygpOworCQlobGlzdF9m
b3JfZWFjaF9lbnRyeV9yY3UoYWxpYXMsIGVsZW0sIHBvaW50ZXItPmFsaWFzX2xpc3QsIG5vZGUp
CiAJCQlwcmludGsoS0VSTl9OT1RJQ0UgIiAgICAweCVseFxuIiwgYWxpYXMtPm9mZnNldCk7CisJ
CXJjdV9yZWFkX3VubG9jaygpOworCX0KIH0KICNlbHNlCiBzdGF0aWMgaW5saW5lIHZvaWQgZHVt
cF9wb2ludGVyX2ludGVybmFscyhzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQpAQCAt
MjEzLDQ1ICsyMzIsODEgQEAgc3RhdGljIGludCBpbnNlcnRfYWxpYXModW5zaWduZWQgbG9uZyB0
eQogewogCWludCByZXQgPSAwOwogCXN0cnVjdCBobGlzdF9oZWFkICphbGlhc19saXN0OworCXN0
cnVjdCBobGlzdF9ub2RlICplbGVtOwogCXN0cnVjdCBtZW1sZWFrX2FsaWFzICphbGlhczsKKwl1
bnNpZ25lZCBsb25nIGZsYWdzOworCXVuc2lnbmVkIGludCBjcHVfaWQ7CiAKLQlpZiAodHlwZV9p
ZCA9PSAwIHx8IG9mZnNldCA9PSAwIHx8IG9mZnNldCA+PSBtbF9zaXplb2YodHlwZV9pZCkpIHsK
LQkJcmV0ID0gLUVJTlZBTDsKLQkJZ290byBvdXQ7Ci0JfQorCWlmICh0eXBlX2lkID09IDAgfHwg
b2Zmc2V0ID09IDAgfHwgb2Zmc2V0ID49IG1sX3NpemVvZih0eXBlX2lkKSkKKwkJcmV0dXJuIC1F
SU5WQUw7CisKKwkvKiBubyByZWN1cnNpdmUgcmUtZW50cmFuY2Ugb24gdGhlIHNhbWUgQ1BVLiBX
ZSBkbyBub3QgdHJhY2sKKwkgKiB0aGUgYWxpYXMgdHJlZSBhbGxvY2F0aW9ucyAqLworCWxvY2Fs
X2lycV9zYXZlKGZsYWdzKTsKKwljcHVfaWQgPSBnZXRfY3B1KCk7CisJaWYgKGNwdV90ZXN0X2Fu
ZF9zZXQoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKSkKKwkJQlVHKCk7CiAKIAlvZmZzZXQgJj0g
fihCWVRFU19QRVJfV09SRCAtIDEpOwogCisJcmVhZF9sb2NrKCZhbGlhc190cmVlX2xvY2spOwog
CWFsaWFzX2xpc3QgPSByYWRpeF90cmVlX2xvb2t1cCgmYWxpYXNfdHJlZSwgdHlwZV9pZCk7Ci0J
aWYgKGFsaWFzX2xpc3QpIHsKLQkJc3RydWN0IGhsaXN0X25vZGUgKmVsZW07CisJcmVhZF91bmxv
Y2soJmFsaWFzX3RyZWVfbG9jayk7CiAKLQkJaGxpc3RfZm9yX2VhY2hfZW50cnkoYWxpYXMsIGVs
ZW0sIGFsaWFzX2xpc3QsIG5vZGUpIHsKLQkJCWlmIChhbGlhcy0+b2Zmc2V0ID09IG9mZnNldCkg
ewotCQkJCXJldCA9IC1FRVhJU1Q7Ci0JCQkJZ290byBvdXQ7Ci0JCQl9Ci0JCX0KLQl9IGVsc2Ug
eworCWlmICghYWxpYXNfbGlzdCkgeworCQkvKiBubyBhbGlhcyBsaXN0IGZvciB0aGlzIHR5cGUg
aWQuIEFsbG9jYXRlIGxpc3RfaGVhZAorCQkgKiBhbmQgcHJlbG9hZCB0aGUgcmFkaXggdHJlZSAq
LwogCQlhbGlhc19saXN0ID0ga21hbGxvYyhzaXplb2YoKmFsaWFzX2xpc3QpLCBHRlBfQVRPTUlD
KTsKIAkJaWYgKCFhbGlhc19saXN0KQotCQkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgYWxsb2Nh
dGUgaW5pdGlhbCBtZW1vcnlcbiIpOworCQkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgYWxsb2Nh
dGUgYWxpYXNfbGlzdFxuIik7CiAJCUlOSVRfSExJU1RfSEVBRChhbGlhc19saXN0KTsKIAotCQly
ZXQgPSByYWRpeF90cmVlX2luc2VydCgmYWxpYXNfdHJlZSwgdHlwZV9pZCwgYWxpYXNfbGlzdCk7
CisJCXJldCA9IHJhZGl4X3RyZWVfcHJlbG9hZChHRlBfQVRPTUlDKTsKIAkJaWYgKHJldCkKKwkJ
CXBhbmljKCJrbWVtbGVhazogY2Fubm90IHByZWxvYWQgdGhlIGFsaWFzZXMgcmFkaXggdHJlZTog
JWRcbiIsIHJldCk7CisKKwkJd3JpdGVfbG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwkJcmV0ID0g
cmFkaXhfdHJlZV9pbnNlcnQoJmFsaWFzX3RyZWUsIHR5cGVfaWQsIGFsaWFzX2xpc3QpOworCQl3
cml0ZV91bmxvY2soJmFsaWFzX3RyZWVfbG9jayk7CisKKwkJcmFkaXhfdHJlZV9wcmVsb2FkX2Vu
ZCgpOworCisJCWlmIChyZXQgPT0gLUVFWElTVCkgeworCQkJLyogYWxsb2NhdGVkIGluIHRoZSBt
ZWFudGltZSBvbiBhIGRpZmZlcmVudCBDUFUgKi8KKwkJCXJlYWRfbG9jaygmYWxpYXNfdHJlZV9s
b2NrKTsKKwkJCWFsaWFzX2xpc3QgPSByYWRpeF90cmVlX2xvb2t1cCgmYWxpYXNfdHJlZSwgdHlw
ZV9pZCk7CisJCQlyZWFkX3VubG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwkJfSBlbHNlIGlmIChy
ZXQpCiAJCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBpbnNlcnQgaW50byB0aGUgYWxpYXNlcyBy
YWRpeCB0cmVlOiAlZFxuIiwgcmV0KTsKIAl9CiAKKwlCVUdfT04oIWFsaWFzX2xpc3QpOworCisJ
cmN1X3JlYWRfbG9jaygpOworCWhsaXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShhbGlhcywgZWxlbSwg
YWxpYXNfbGlzdCwgbm9kZSkgeworCQlpZiAoYWxpYXMtPm9mZnNldCA9PSBvZmZzZXQpIHsKKwkJ
CXJjdV9yZWFkX3VubG9jaygpOworCQkJcmV0ID0gLUVFWElTVDsKKwkJCWdvdG8gb3V0OworCQl9
CisJfQorCXJjdV9yZWFkX3VubG9jaygpOworCiAJYWxpYXMgPSBrbWFsbG9jKHNpemVvZigqYWxp
YXMpLCBHRlBfQVRPTUlDKTsKIAlpZiAoIWFsaWFzKQogCQlwYW5pYygia21lbWxlYWs6IGNhbm5v
dCBhbGxvY2F0ZSBpbml0aWFsIG1lbW9yeVxuIik7CiAJSU5JVF9ITElTVF9OT0RFKCZhbGlhcy0+
bm9kZSk7CiAJYWxpYXMtPm9mZnNldCA9IG9mZnNldDsKIAotCWhsaXN0X2FkZF9oZWFkKCZhbGlh
cy0+bm9kZSwgYWxpYXNfbGlzdCk7CisJd3JpdGVfbG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwlo
bGlzdF9hZGRfaGVhZF9yY3UoJmFsaWFzLT5ub2RlLCBhbGlhc19saXN0KTsKKwl3cml0ZV91bmxv
Y2soJmFsaWFzX3RyZWVfbG9jayk7CiAKICBvdXQ6CisJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVh
a19jcHVfbWFzayk7CisJcHV0X2NwdV9ub19yZXNjaGVkKCk7CisJbG9jYWxfaXJxX3Jlc3RvcmUo
ZmxhZ3MpOworCiAJcmV0dXJuIHJldDsKIH0KIApAQCAtMjYxLDE4ICszMTYsMTIgQEAgdm9pZCBt
ZW1sZWFrX2luc2VydF9hbGlhc2VzKHN0cnVjdCBtZW1sZQogewogCXN0cnVjdCBtZW1sZWFrX29m
ZnNldCAqbWxfb2ZmOwogCWludCBpID0gMDsKKyNpZmRlZiBDT05GSUdfREVCVUdfTUVNTEVBS19T
RUNPTkRBUllfQUxJQVNFUwogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7Ci0JdW5zaWduZWQgaW50IGNw
dV9pZDsKKyNlbmRpZgogCiAJcHJfZGVidWcoIiVzKDB4JXAsIDB4JXApXG4iLCBfX0ZVTkNUSU9O
X18sIG1sX29mZl9zdGFydCwgbWxfb2ZmX2VuZCk7CiAKLQlzcGluX2xvY2tfaXJxc2F2ZSgmbWVt
bGVha19sb2NrLCBmbGFncyk7Ci0KLQkvKiBkbyBub3QgdHJhY2sgdGhlIGttZW1sZWFrIGFsbG9j
YXRlZCBwb2ludGVycyAqLwotCWNwdV9pZCA9IHNtcF9wcm9jZXNzb3JfaWQoKTsKLQlpZiAoY3B1
X3Rlc3RfYW5kX3NldChjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spKQotCQlCVUcoKTsKLQogCS8q
IHByaW1hcnkgYWxpYXNlcyAtIGNvbnRhaW5lcl9vZihtZW1iZXIpICovCiAJZm9yIChtbF9vZmYg
PSBtbF9vZmZfc3RhcnQ7IG1sX29mZiA8IG1sX29mZl9lbmQ7IG1sX29mZisrKQogCQlpZiAoIWlu
c2VydF9hbGlhcyhtbF9vZmYtPnR5cGVfaWQsIG1sX29mZi0+b2Zmc2V0KSkKQEAgLTI4Niw4NyAr
MzM1LDcwIEBAICNpZmRlZiBDT05GSUdfREVCVUdfTUVNTEVBS19TRUNPTkRBUllfQUwKIAkJc3Ry
dWN0IG1lbWxlYWtfYWxpYXMgKmFsaWFzOwogCQlzdHJ1Y3QgaGxpc3Rfbm9kZSAqZWxlbTsKIAor
CQkvKiB3aXRoIGltcHJlY2lzZSB0eXBlIGlkZW50aWZpY2F0aW9uLCBpdCB0aGUgbWVtYmVyCisJ
CSAqIGlkIGlzIHRoZSBzYW1lIGFzIHRoZSBvdXRlciBzdHJ1Y3R1cmUgaWQsIGp1c3QKKwkJICog
aWdub3JlIGFzIGFueSBwb3RlbnRpYWwgYWxpYXNlcyBhcmUgYWxyZWFkeSBpbiB0aGUKKwkJICog
dHJlZSAqLworCQlpZiAobWxfb2ZmLT5tZW1iZXJfdHlwZV9pZCA9PSBtbF9vZmYtPnR5cGVfaWQp
CisJCQljb250aW51ZTsKKworCQlyZWFkX2xvY2tfaXJxc2F2ZSgmYWxpYXNfdHJlZV9sb2NrLCBm
bGFncyk7CiAJCWFsaWFzX2xpc3QgPSByYWRpeF90cmVlX2xvb2t1cCgmYWxpYXNfdHJlZSwgbWxf
b2ZmLT5tZW1iZXJfdHlwZV9pZCk7CisJCXJlYWRfdW5sb2NrX2lycXJlc3RvcmUoJmFsaWFzX3Ry
ZWVfbG9jaywgZmxhZ3MpOwogCQlpZiAoIWFsaWFzX2xpc3QpCiAJCQljb250aW51ZTsKIAotCQlo
bGlzdF9mb3JfZWFjaF9lbnRyeShhbGlhcywgZWxlbSwgYWxpYXNfbGlzdCwgbm9kZSkKKwkJcmN1
X3JlYWRfbG9jaygpOworCQlobGlzdF9mb3JfZWFjaF9lbnRyeV9yY3UoYWxpYXMsIGVsZW0sIGFs
aWFzX2xpc3QsIG5vZGUpCiAJCQlpZiAoIWluc2VydF9hbGlhcyhtbF9vZmYtPnR5cGVfaWQsIG1s
X29mZi0+b2Zmc2V0ICsgYWxpYXMtPm9mZnNldCkpCiAJCQkJaSsrOworCQlyY3VfcmVhZF91bmxv
Y2soKTsKIAl9CiAJcHJfZGVidWcoImttZW1sZWFrOiBmb3VuZCAlZCBhbGlhcyhlcylcbiIsIGkp
OwogI2VuZGlmCi0KLQljcHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKTsKLQlzcGlu
X3VubG9ja19pcnFyZXN0b3JlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKIH0KIEVYUE9SVF9TWU1C
T0xfR1BMKG1lbWxlYWtfaW5zZXJ0X2FsaWFzZXMpOwogCisvKiBjYWxsZWQgd2l0aCBtZW1sZWFr
X2xvY2sgaGVsZCBhbmQgaW50ZXJydXB0cyBkaXNhYmxlZCAqLwogc3RhdGljIGlubGluZSBzdHJ1
Y3QgbWVtbGVha19wb2ludGVyICpnZXRfY2FjaGVkX3BvaW50ZXIodW5zaWduZWQgbG9uZyBwdHIp
CiB7CisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2NrZWQo
Jm1lbWxlYWtfbG9jaykpOworCiAJaWYgKCFsYXN0X3BvaW50ZXIgfHwgcHRyICE9IGxhc3RfcG9p
bnRlci0+cG9pbnRlcikKIAkJbGFzdF9wb2ludGVyID0gcmFkaXhfdHJlZV9sb29rdXAoJnBvaW50
ZXJfdHJlZSwgcHRyKTsKIAlyZXR1cm4gbGFzdF9wb2ludGVyOwogfQogCi1zdGF0aWMgdm9pZCBj
cmVhdGVfcG9pbnRlcl9hbGlhc2VzKHN0cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXIpCisv
KiBubyBuZWVkIGZvciBhdG9taWMgb3BlcmF0aW9ucyBzaW5jZSBtZW1sZWFrX2xvY2sgaXMgaGVs
ZCBhbmQKKyAqIGludGVycnVwdHMgZGlzYWJsZWQgKi8KK3N0YXRpYyBpbmxpbmUgdm9pZCBnZXRf
cG9pbnRlcihzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQogewotCXN0cnVjdCBtZW1s
ZWFrX2FsaWFzICphbGlhczsKLQlzdHJ1Y3QgaGxpc3Rfbm9kZSAqZWxlbTsKLQl1bnNpZ25lZCBs
b25nIHB0ciA9IHBvaW50ZXItPnBvaW50ZXI7Ci0JaW50IGVycjsKKwlCVUdfT04oIWlycXNfZGlz
YWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CiAKLQlC
VUdfT04ocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFTRVMpOwotCi0JaWYgKHBvaW50ZXIt
Pm9mZnNldCkgewotCQllcnIgPSByYWRpeF90cmVlX2luc2VydCgmcG9pbnRlcl90cmVlLCBwdHIg
KyBwb2ludGVyLT5vZmZzZXQsIHBvaW50ZXIpOwotCQlpZiAoZXJyKSB7Ci0JCQlkdW1wX3N0YWNr
KCk7Ci0JCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBpbnNlcnQgb2Zmc2V0IGludG8gdGhlIHBv
aW50ZXIgcmFkaXggdHJlZTogJWRcbiIsIGVycik7Ci0JCX0KLQl9Ci0KLQlwb2ludGVyLT5hbGlh
c19saXN0ID0gcmFkaXhfdHJlZV9sb29rdXAoJmFsaWFzX3RyZWUsIHBvaW50ZXItPnR5cGVfaWQp
OwotCWlmIChwb2ludGVyLT5hbGlhc19saXN0KSB7Ci0JCWhsaXN0X2Zvcl9lYWNoX2VudHJ5KGFs
aWFzLCBlbGVtLCBwb2ludGVyLT5hbGlhc19saXN0LCBub2RlKSB7Ci0JCQllcnIgPSByYWRpeF90
cmVlX2luc2VydCgmcG9pbnRlcl90cmVlLCBwdHIKLQkJCQkJCSsgcG9pbnRlci0+b2Zmc2V0ICsg
YWxpYXMtPm9mZnNldCwKLQkJCQkJCXBvaW50ZXIpOwotCQkJaWYgKGVycikgewotCQkJCWR1bXBf
c3RhY2soKTsKLQkJCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBpbnNlcnQgYWxpYXMgaW50byB0
aGUgcG9pbnRlciByYWRpeCB0cmVlOiAlZFxuIiwgZXJyKTsKLQkJCX0KLQkJfQotCX0KLQotCXBv
aW50ZXItPmZsYWdzIHw9IFBPSU5URVJfQUxJQVNFUzsKKwlwb2ludGVyLT51c2VfY291bnQrKzsK
IH0KIAotc3RhdGljIHZvaWQgZGVsZXRlX3BvaW50ZXJfYWxpYXNlcyhzdHJ1Y3QgbWVtbGVha19w
b2ludGVyICpwb2ludGVyKQorc3RhdGljIHZvaWQgZnJlZV9wb2ludGVyX3JjdShzdHJ1Y3QgcmN1
X2hlYWQgKnJjdSkKIHsKLQlzdHJ1Y3QgbWVtbGVha19hbGlhcyAqYWxpYXM7Ci0Jc3RydWN0IGhs
aXN0X25vZGUgKmVsZW07Ci0JdW5zaWduZWQgbG9uZyBwdHIgPSBwb2ludGVyLT5wb2ludGVyOwot
Ci0JQlVHX09OKCEocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFTRVMpKTsKLQotCWlmIChw
b2ludGVyLT5vZmZzZXQpCi0JCXJhZGl4X3RyZWVfZGVsZXRlKCZwb2ludGVyX3RyZWUsIHB0ciAr
IHBvaW50ZXItPm9mZnNldCk7CisJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlciA9IGNv
bnRhaW5lcl9vZihyY3UsCisJCQkJCQkgICAgICAgc3RydWN0IG1lbWxlYWtfcG9pbnRlciwKKwkJ
CQkJCSAgICAgICByY3UpOworCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CisJdW5zaWduZWQgaW50IGNw
dV9pZDsKIAotCWlmIChwb2ludGVyLT5hbGlhc19saXN0KSB7Ci0JCWhsaXN0X2Zvcl9lYWNoX2Vu
dHJ5KGFsaWFzLCBlbGVtLCBwb2ludGVyLT5hbGlhc19saXN0LCBub2RlKQotCQkJcmFkaXhfdHJl
ZV9kZWxldGUoJnBvaW50ZXJfdHJlZSwKLQkJCQkJICBwdHIgKyBwb2ludGVyLT5vZmZzZXQgKyBh
bGlhcy0+b2Zmc2V0KTsKLQkJcG9pbnRlci0+YWxpYXNfbGlzdCA9IE5VTEw7Ci0JfQorCS8qIG5v
IHJlY3Vyc2l2ZSByZS1lbnRyYW5jZSBvbiB0aGUgc2FtZSBDUFUgKi8KKwlsb2NhbF9pcnFfc2F2
ZShmbGFncyk7CisJY3B1X2lkID0gZ2V0X2NwdSgpOworCWlmIChjcHVfdGVzdF9hbmRfc2V0KGNw
dV9pZCwgbWVtbGVha19jcHVfbWFzaykpCisJCUJVRygpOwogCi0JcG9pbnRlci0+ZmxhZ3MgJj0g
flBPSU5URVJfQUxJQVNFUzsKLX0KKwlrbWVtX2NhY2hlX2ZyZWUocG9pbnRlcl9jYWNoZSwgcG9p
bnRlcik7CiAKLS8qIG5vIG5lZWQgZm9yIGF0b21pYyBvcGVyYXRpb25zIHNpbmNlIG1lbWxlYWtf
bG9jayBpcyBoZWxkIGFueXdheSAqLwotc3RhdGljIGlubGluZSB2b2lkIGdldF9wb2ludGVyKHN0
cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXIpCi17Ci0JcG9pbnRlci0+dXNlX2NvdW50Kys7
CisJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CisJcHV0X2NwdV9ub19yZXNj
aGVkKCk7CisJbG9jYWxfaXJxX3Jlc3RvcmUoZmxhZ3MpOwogfQogCiAvKiBjYWxsZWQgd2l0aCBt
ZW1sZWFrX2xvY2sgaGVsZCBmb3IgcG9pbnRlcl9saXN0IG1vZGlmaWNhdGlvbiBhbmQKQEAgLTM3
Nyw2ICs0MDksOSBAQCBzdGF0aWMgdm9pZCBfX3B1dF9wb2ludGVyKHN0cnVjdCBtZW1sZWFrCiAJ
c3RydWN0IGhsaXN0X25vZGUgKmVsZW0sICp0bXA7CiAJc3RydWN0IG1lbWxlYWtfc2Nhbl9hcmVh
ICphcmVhOwogCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19s
b2NrZWQoJm1lbWxlYWtfbG9jaykpOworCiAJaWYgKC0tcG9pbnRlci0+dXNlX2NvdW50ID4gMCkK
IAkJcmV0dXJuOwogCkBAIC0zODYsOCArNDIxLDExIEBAIHN0YXRpYyB2b2lkIF9fcHV0X3BvaW50
ZXIoc3RydWN0IG1lbWxlYWsKIAkJa2ZyZWUoYXJlYSk7CiAJfQogCi0JbGlzdF9kZWwoJnBvaW50
ZXItPnBvaW50ZXJfbGlzdCk7Ci0Ja21lbV9jYWNoZV9mcmVlKHBvaW50ZXJfY2FjaGUsIHBvaW50
ZXIpOworCWxpc3RfZGVsX3JjdSgmcG9pbnRlci0+cG9pbnRlcl9saXN0KTsKKwljYWxsX3JjdSgm
cG9pbnRlci0+cmN1LCBmcmVlX3BvaW50ZXJfcmN1KTsKKworCUJVR19PTighaXJxc19kaXNhYmxl
ZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKIH0KIAogc3Rh
dGljIHZvaWQgcHV0X3BvaW50ZXIoc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcikKQEAg
LTM5NSwxNSArNDMzLDEzNiBAQCBzdGF0aWMgdm9pZCBwdXRfcG9pbnRlcihzdHJ1Y3QgbWVtbGVh
a19wCiAJdW5zaWduZWQgbG9uZyBmbGFnczsKIAl1bnNpZ25lZCBpbnQgY3B1X2lkOwogCi0Jc3Bp
bl9sb2NrX2lycXNhdmUoJm1lbWxlYWtfbG9jaywgZmxhZ3MpOwotCWNwdV9pZCA9IHNtcF9wcm9j
ZXNzb3JfaWQoKTsKKwkvKiBubyByZWN1cnNpdmUgcmUtZW50cmFuY2Ugb24gdGhlIHNhbWUgQ1BV
ICovCisJbG9jYWxfaXJxX3NhdmUoZmxhZ3MpOworCWNwdV9pZCA9IGdldF9jcHUoKTsKIAlpZiAo
Y3B1X3Rlc3RfYW5kX3NldChjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spKQogCQlCVUcoKTsKIAor
CXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsKIAlfX3B1dF9wb2ludGVyKHBvaW50ZXIpOworCXNw
aW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOwogCiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19j
cHVfbWFzayk7Ci0Jc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbWVtbGVha19sb2NrLCBmbGFncyk7
CisJcHV0X2NwdV9ub19yZXNjaGVkKCk7CisJbG9jYWxfaXJxX3Jlc3RvcmUoZmxhZ3MpOworfQor
CisvKiBjYWxsZWQgd2l0aCBtZW1sZWFrX2xvY2sgaGVsZCBhbmQgaW50ZXJydXB0cyBkaXNhYmxl
ZCAqLworc3RhdGljIHZvaWQgZGVsZXRlX3BvaW50ZXJfYWxpYXNlcyhzdHJ1Y3QgbWVtbGVha19w
b2ludGVyICpwb2ludGVyKQoreworCXN0cnVjdCBtZW1sZWFrX2FsaWFzICphbGlhczsKKwlzdHJ1
Y3QgaGxpc3Rfbm9kZSAqZWxlbTsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdf
T04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKKworCUJVR19PTighKHBvaW50ZXIt
PmZsYWdzICYgUE9JTlRFUl9BTElBU0VTKSk7CisKKwlpZiAocG9pbnRlci0+b2Zmc2V0KQorCQly
YWRpeF90cmVlX2RlbGV0ZSgmcG9pbnRlcl90cmVlLCBwb2ludGVyLT5wb2ludGVyCisJCQkJICAr
IHBvaW50ZXItPm9mZnNldCk7CisKKwlpZiAocG9pbnRlci0+YWxpYXNfbGlzdCkgeworCQlyY3Vf
cmVhZF9sb2NrKCk7CisJCWhsaXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShhbGlhcywgZWxlbSwgcG9p
bnRlci0+YWxpYXNfbGlzdCwgbm9kZSkKKwkJCXJhZGl4X3RyZWVfZGVsZXRlKCZwb2ludGVyX3Ry
ZWUsIHBvaW50ZXItPnBvaW50ZXIKKwkJCQkJICArIHBvaW50ZXItPm9mZnNldCArIGFsaWFzLT5v
ZmZzZXQpOworCQlyY3VfcmVhZF91bmxvY2soKTsKKwkJcG9pbnRlci0+YWxpYXNfbGlzdCA9IE5V
TEw7CisJfQorCisJcG9pbnRlci0+ZmxhZ3MgJj0gflBPSU5URVJfQUxJQVNFUzsKKworCUJVR19P
TighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xv
Y2spKTsKK30KKworLyogY2FsbGVkIHdpdGggbWVtbGVha19sb2NrIGhlbGQgYnV0IG1heSBiZSBy
ZWxlYXNlZCAqLworc3RhdGljIGlubGluZSBpbnQgaW5zZXJ0X3BvaW50ZXJfYWxpYXMoc3RydWN0
IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlciwKKwkJCQkgICAgICAgdW5zaWduZWQgbG9uZyBhbGlh
cykKK3sKKwlpbnQgcmV0ID0gMDsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdf
T04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKKworCXNwaW5fdW5sb2NrKCZtZW1s
ZWFrX2xvY2spOworCXJldCA9IHJhZGl4X3RyZWVfcHJlbG9hZChHRlBfQVRPTUlDKTsKKwlzcGlu
X2xvY2soJm1lbWxlYWtfbG9jayk7CisJaWYgKHJldCkgeworCQlwcmludGsoS0VSTl9XQVJOSU5H
ICJrbWVtbGVhazogY2Fubm90IHByZWxvYWQgdGhlIHBvaW50ZXIgcmFkaXggdHJlZTogJWRcbiIs
IHJldCk7CisJCWdvdG8gb3V0OworCX0KKworCXJldCA9IHJhZGl4X3RyZWVfaW5zZXJ0KCZwb2lu
dGVyX3RyZWUsIGFsaWFzLCBwb2ludGVyKTsKKwlpZiAocmV0KSB7CisJCWR1bXBfc3RhY2soKTsK
KwkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgaW5zZXJ0IGFsaWFzIGludG8gdGhlIHBvaW50ZXIg
cmFkaXggdHJlZTogJWRcbiIsIHJldCk7CisJfQorCisJcmFkaXhfdHJlZV9wcmVsb2FkX2VuZCgp
OworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2NrZWQo
Jm1lbWxlYWtfbG9jaykpOworCisgb3V0OgorCXJldHVybiByZXQ7Cit9CisKKy8qIGNhbGxlZCB3
aXRoIG1lbWxlYWtfbG9jayBoZWxkIGJ1dCBpdCBtYXkgYmUgcmVsZWFzZWQgaW4KKyAqIGluc2Vy
dF9wb2ludGVyX2FsaWFzKCkuIFRoZSBwb2ludGVyIHN0cnVjdHVyZSBpcyBndWFyYW50ZWVkIG5v
dCB0bworICogYmUgZnJlZWQgYmVmb3JlIHRoaXMgZnVuY3Rpb24gcmV0dXJucyAoZ2V0L3B1dF9w
b2ludGVyKQorICovCitzdGF0aWMgaW5saW5lIHZvaWQgY3JlYXRlX3BvaW50ZXJfYWxpYXNlcyhz
dHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQoreworCXN0cnVjdCBtZW1sZWFrX2FsaWFz
ICphbGlhczsKKwlzdHJ1Y3QgaGxpc3Rfbm9kZSAqZWxlbTsKKwlpbnQgZXJyID0gMDsKKworCUJV
R19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFr
X2xvY2spKTsKKworCUJVR19PTihwb2ludGVyLT5mbGFncyAmIFBPSU5URVJfQUxJQVNFUyk7CisK
KwlnZXRfcG9pbnRlcihwb2ludGVyKTsKKworCWlmIChwb2ludGVyLT5vZmZzZXQpIHsKKwkJZXJy
ID0gaW5zZXJ0X3BvaW50ZXJfYWxpYXMocG9pbnRlciwgcG9pbnRlci0+cG9pbnRlcgorCQkJCQkg
ICArIHBvaW50ZXItPm9mZnNldCk7CisJCWlmIChlcnIpCisJCQlnb3RvIG91dDsKKwl9CisKKwly
ZWFkX2xvY2soJmFsaWFzX3RyZWVfbG9jayk7CisJcG9pbnRlci0+YWxpYXNfbGlzdCA9IHJhZGl4
X3RyZWVfbG9va3VwKCZhbGlhc190cmVlLCBwb2ludGVyLT50eXBlX2lkKTsKKwlyZWFkX3VubG9j
aygmYWxpYXNfdHJlZV9sb2NrKTsKKworCWlmIChwb2ludGVyLT5hbGlhc19saXN0KSB7CisJCXJj
dV9yZWFkX2xvY2soKTsKKwkJaGxpc3RfZm9yX2VhY2hfZW50cnlfcmN1KGFsaWFzLCBlbGVtLCBw
b2ludGVyLT5hbGlhc19saXN0LCBub2RlKSB7CisJCQllcnIgPSBpbnNlcnRfcG9pbnRlcl9hbGlh
cyhwb2ludGVyLCBwb2ludGVyLT5wb2ludGVyCisJCQkJCQkgICArIHBvaW50ZXItPm9mZnNldCAr
IGFsaWFzLT5vZmZzZXQpOworCQkJaWYgKGVycikgeworCQkJCXJjdV9yZWFkX3VubG9jaygpOwor
CQkJCWdvdG8gb3V0OworCQkJfQorCQl9CisJCXJjdV9yZWFkX3VubG9jaygpOworCX0KKworIG91
dDoKKwlwb2ludGVyLT5mbGFncyB8PSBQT0lOVEVSX0FMSUFTRVM7CisKKwkvKiBjaGVjayB3aGV0
aGVyIHRoZSBtZW1vcnkgYmxvY2sgbWlnaHQgaGF2ZSBiZWVuIGZyZWVkIGR1cmluZworCSAqIHRo
ZSB1bmxvY2tlZCBwZXJpb2RzIG9yIGFuIGVycm9yIG9jY3VyZWQgKi8KKwlpZiAoZXJyIHx8ICEo
cG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMTE9DQVRFRCkpCisJCWRlbGV0ZV9wb2ludGVyX2Fs
aWFzZXMocG9pbnRlcik7CisKKwlfX3B1dF9wb2ludGVyKHBvaW50ZXIpOworCisJQlVHX09OKCFp
cnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2NrZWQoJm1lbWxlYWtfbG9jaykp
OwogfQogCiAvKiBJbnNlcnQgYSBwb2ludGVyIGFuZCBpdHMgYWxpYXNlcyBpbnRvIHRoZSBwb2lu
dGVyIHJhZGl4IHRyZWUgKi8KQEAgLTQxNiwxNSArNTc1LDE2IEBAICNpZmRlZiBDT05GSUdfRlJB
TUVfUE9JTlRFUgogCXZvaWQgKmZyYW1lOwogI2VuZGlmCiAKKwlCVUdfT04oIWlycXNfZGlzYWJs
ZWQoKSk7CisKIAlwb2ludGVyID0ga21lbV9jYWNoZV9hbGxvYyhwb2ludGVyX2NhY2hlLCBTTEFC
X0FUT01JQyk7CiAJaWYgKCFwb2ludGVyKQogCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBhbGxv
Y2F0ZSBhIG1lbWxlYWtfcG9pbnRlciBzdHJ1Y3R1cmVcbiIpOwogCi0JbGFzdF9wb2ludGVyID0g
cG9pbnRlcjsKLQogCUlOSVRfTElTVF9IRUFEKCZwb2ludGVyLT5wb2ludGVyX2xpc3QpOwogCUlO
SVRfTElTVF9IRUFEKCZwb2ludGVyLT5ncmF5X2xpc3QpOwogCUlOSVRfSExJU1RfSEVBRCgmcG9p
bnRlci0+YXJlYV9saXN0KTsKKwlJTklUX1JDVV9IRUFEKCZwb2ludGVyLT5yY3UpOwogCXBvaW50
ZXItPmZsYWdzID0gUE9JTlRFUl9BTExPQ0FURUQ7CiAJcG9pbnRlci0+dXNlX2NvdW50ID0gMDsK
IAlwb2ludGVyLT5wb2ludGVyID0gcHRyOwpAQCAtNDU1LDYgKzYxNSwxNiBAQCAjZWxzZQogCXBv
aW50ZXItPnRyYWNlWzBdID0gKHVuc2lnbmVkIGxvbmcpX19idWlsdGluX3JldHVybl9hZGRyZXNz
KDApOwogI2VuZGlmCiAKKwkvKiBhbGxvY2F0ZSBoZXJlIHRvIGF2b2lkIGFjcXVpcmluZyB0aGUg
bGlzdF9sb2NrIGluIG1tL3NsYWIuYworCSAqIHdoaWxlIG1lbWxlYWtfbG9jayBpcyBoZWxkICov
CisJZXJyID0gcmFkaXhfdHJlZV9wcmVsb2FkKEdGUF9BVE9NSUMpOworCWlmIChlcnIpIHsKKwkJ
ZHVtcF9zdGFjaygpOworCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBwcmVsb2FkIHRoZSBwb2lu
dGVyIHJhZGl4IHRyZWU6ICVkXG4iLCBlcnIpOworCX0KKworCXNwaW5fbG9jaygmbWVtbGVha19s
b2NrKTsKKwogCWVyciA9IHJhZGl4X3RyZWVfaW5zZXJ0KCZwb2ludGVyX3RyZWUsIHB0ciwgcG9p
bnRlcik7CiAJaWYgKGVycikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC00NjcsOCArNjM3LDE0IEBA
ICNlbmRpZgogCQkgICAgICBwdHIsIGVycik7CiAJfQogCi0JbGlzdF9hZGRfdGFpbCgmcG9pbnRl
ci0+cG9pbnRlcl9saXN0LCAmcG9pbnRlcl9saXN0KTsKKwlsaXN0X2FkZF90YWlsX3JjdSgmcG9p
bnRlci0+cG9pbnRlcl9saXN0LCAmcG9pbnRlcl9saXN0KTsKIAlnZXRfcG9pbnRlcihwb2ludGVy
KTsKKwlsYXN0X3BvaW50ZXIgPSBwb2ludGVyOworCisJc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9j
ayk7CisJcmFkaXhfdHJlZV9wcmVsb2FkX2VuZCgpOworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVk
KCkpOwogfQogCiAvKiBSZW1vdmUgYSBwb2ludGVyIGFuZCBpdHMgYWxpYXNlcyBmcm9tIHRoZSBw
b2ludGVyIHJhZGl4IHRyZWUgKi8KQEAgLTQ3NiwxMSArNjUyLDE1IEBAIHN0YXRpYyBpbmxpbmUg
dm9pZCBkZWxldGVfcG9pbnRlcih1bnNpZ24KIHsKIAlzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpw
b2ludGVyOwogCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCisJc3Bpbl9sb2NrKCZtZW1s
ZWFrX2xvY2spOworCiAJcG9pbnRlciA9IHJhZGl4X3RyZWVfZGVsZXRlKCZwb2ludGVyX3RyZWUs
IHB0cik7CiAJaWYgKCFwb2ludGVyKSB7CiAJCWR1bXBfc3RhY2soKTsKIAkJcHJpbnRrKEtFUk5f
V0FSTklORyAia21lbWxlYWs6IGZyZWVpbmcgdW5rbm93biBwb2ludGVyIHZhbHVlIDB4JTA4bHhc
biIsIHB0cik7Ci0JCXJldHVybjsKKwkJZ290byBvdXQ7CiAJfQogCWlmIChwb2ludGVyLT5wb2lu
dGVyICE9IHB0cikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC00OTAsNiArNjcwLDcgQEAgc3RhdGlj
IGlubGluZSB2b2lkIGRlbGV0ZV9wb2ludGVyKHVuc2lnbgogCiAJQlVHX09OKCEocG9pbnRlci0+
ZmxhZ3MgJiBQT0lOVEVSX0FMTE9DQVRFRCkpOwogCisJLyogZGVsZXRpbmcgdGhlIGNhY2hlZCBw
b2ludGVyICovCiAJaWYgKGxhc3RfcG9pbnRlciAmJiBwdHIgPT0gbGFzdF9wb2ludGVyLT5wb2lu
dGVyKQogCQlsYXN0X3BvaW50ZXIgPSBOVUxMOwogCkBAIC01MDYsNiArNjg3LDExIEBAICNlbmRp
ZgogCXBvaW50ZXItPmZsYWdzICY9IH5QT0lOVEVSX0FMTE9DQVRFRDsKIAlwb2ludGVyLT5wb2lu
dGVyID0gMDsKIAlfX3B1dF9wb2ludGVyKHBvaW50ZXIpOworCisgb3V0OgorCXNwaW5fdW5sb2Nr
KCZtZW1sZWFrX2xvY2spOworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOwogfQogCiAvKiBS
ZS1jcmVhdGUgdGhlIHBvaW50ZXIgYWxpYXNlcyBhY2NvcmRpbmcgdG8gdGhlIG5ldyBzaXplL29m
ZnNldApAQCAtNTE1LDYgKzcwMSwxMCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgdW5wYWRfcG9pbnRl
cih1bnNpZ25lCiB7CiAJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcjsKIAorCUJVR19P
TighaXJxc19kaXNhYmxlZCgpKTsKKworCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsKKwogCXBv
aW50ZXIgPSBnZXRfY2FjaGVkX3BvaW50ZXIocHRyKTsKIAlpZiAoIXBvaW50ZXIpIHsKIAkJZHVt
cF9zdGFjaygpOwpAQCAtNTMyLDEzICs3MjIsMTggQEAgc3RhdGljIGlubGluZSB2b2lkIHVucGFk
X3BvaW50ZXIodW5zaWduZQogCX0KIAogCWlmIChvZmZzZXQgPT0gcG9pbnRlci0+b2Zmc2V0ICYm
IHNpemUgPT0gcG9pbnRlci0+c2l6ZSkKLQkJcmV0dXJuOworCQlnb3RvIG91dDsKIAogCWlmIChw
b2ludGVyLT5mbGFncyAmIFBPSU5URVJfQUxJQVNFUykKIAkJZGVsZXRlX3BvaW50ZXJfYWxpYXNl
cyhwb2ludGVyKTsKIAogCXBvaW50ZXItPm9mZnNldCA9IG9mZnNldDsKIAlwb2ludGVyLT5zaXpl
ID0gc2l6ZTsKKworIG91dDoKKwlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKKworCUJVR19P
TighaXJxc19kaXNhYmxlZCgpKTsKIH0KIAogLyogTWFrZSBhIHBvaW50ZXIgcGVybWFuZW50bHkg
Z3JheSAoZmFsc2UgcG9zaXRpdmUpICovCkBAIC01NDYsNiArNzQxLDEwIEBAIHN0YXRpYyBpbmxp
bmUgdm9pZCBtYWtlX2dyYXlfcG9pbnRlcih1bnMKIHsKIAlzdHJ1Y3QgbWVtbGVha19wb2ludGVy
ICpwb2ludGVyOwogCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCisJc3Bpbl9sb2NrKCZt
ZW1sZWFrX2xvY2spOworCiAJcG9pbnRlciA9IGdldF9jYWNoZWRfcG9pbnRlcihwdHIpOwogCWlm
ICghcG9pbnRlcikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC01NTgsNiArNzU3LDEwIEBAIHN0YXRp
YyBpbmxpbmUgdm9pZCBtYWtlX2dyYXlfcG9pbnRlcih1bnMKIAl9CiAKIAlwb2ludGVyLT5yZWZf
Y291bnQgPSAwOworCisJc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CisKKwlCVUdfT04oIWly
cXNfZGlzYWJsZWQoKSk7CiB9CiAKIC8qIE1hcmsgdGhlIHBvaW50ZXIgYXMgYmxhY2sgKi8KQEAg
LTU2NSw2ICs3NjgsMTAgQEAgc3RhdGljIGlubGluZSB2b2lkIG1ha2VfYmxhY2tfcG9pbnRlcih1
bgogewogCXN0cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXI7CiAKKwlCVUdfT04oIWlycXNf
ZGlzYWJsZWQoKSk7CisKKwlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CisKIAlwb2ludGVyID0g
Z2V0X2NhY2hlZF9wb2ludGVyKHB0cik7CiAJaWYgKCFwb2ludGVyKSB7CiAJCWR1bXBfc3RhY2so
KTsKQEAgLTU3Nyw2ICs3ODQsMTAgQEAgc3RhdGljIGlubGluZSB2b2lkIG1ha2VfYmxhY2tfcG9p
bnRlcih1bgogCX0KIAogCXBvaW50ZXItPnJlZl9jb3VudCA9IC0xOworCisJc3Bpbl91bmxvY2so
Jm1lbWxlYWtfbG9jayk7CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CiB9CiAKIC8qIEFk
ZCBhIHNjYW5uaW5nIGFyZWEgdG8gdGhlIHBvaW50ZXIgKi8KQEAgLTU4NSw2ICs3OTYsMTggQEAg
c3RhdGljIGlubGluZSB2b2lkIGFkZF9zY2FuX2FyZWEodW5zaWduZQogCXN0cnVjdCBtZW1sZWFr
X3BvaW50ZXIgKnBvaW50ZXI7CiAJc3RydWN0IG1lbWxlYWtfc2Nhbl9hcmVhICphcmVhOwogCisJ
QlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCisJYXJlYSA9IGttYWxsb2Moc2l6ZW9mKCphcmVh
KSwgR0ZQX0FUT01JQyk7CisJaWYgKCFhcmVhKQorCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBh
bGxvY2F0ZSBhIHNjYW4gYXJlYVxuIik7CisKKwlJTklUX0hMSVNUX05PREUoJmFyZWEtPm5vZGUp
OworCWFyZWEtPm9mZnNldCA9IG9mZnNldDsKKwlhcmVhLT5sZW5ndGggPSBsZW5ndGg7CisKKwlz
cGluX2xvY2soJm1lbWxlYWtfbG9jayk7CisKIAlwb2ludGVyID0gZ2V0X2NhY2hlZF9wb2ludGVy
KHB0cik7CiAJaWYgKCFwb2ludGVyKSB7CiAJCWR1bXBfc3RhY2soKTsKQEAgLTYwMSwxNSArODI0
LDExIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBhZGRfc2Nhbl9hcmVhKHVuc2lnbmUKIAkJcGFuaWMo
ImttZW1sZWFrOiBzY2FuIGFyZWEgbGFyZ2VyIHRoYW4gYmxvY2sgMHglMDhseFxuIiwgcHRyKTsK
IAl9CiAKLQlhcmVhID0ga21hbGxvYyhzaXplb2YoKmFyZWEpLCBHRlBfQVRPTUlDKTsKLQlpZiAo
IWFyZWEpCi0JCXBhbmljKCJrbWVtbGVhazogY2Fubm90IGFsbG9jYXRlIGEgc2NhbiBhcmVhXG4i
KTsKKwlobGlzdF9hZGRfaGVhZCgmYXJlYS0+bm9kZSwgJnBvaW50ZXItPmFyZWFfbGlzdCk7CiAK
LQlJTklUX0hMSVNUX05PREUoJmFyZWEtPm5vZGUpOwotCWFyZWEtPm9mZnNldCA9IG9mZnNldDsK
LQlhcmVhLT5sZW5ndGggPSBsZW5ndGg7CisJc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAK
LQlobGlzdF9hZGRfaGVhZCgmYXJlYS0+bm9kZSwgJnBvaW50ZXItPmFyZWFfbGlzdCk7CisJQlVH
X09OKCFpcnFzX2Rpc2FibGVkKCkpOwogfQogCiAvKiBSZS1jcmVhdGUgdGhlIHBvaW50ZXIgYWxp
YXNlcyBhY2NvcmRpbmcgdG8gdGhlIG5ldyB0eXBlIGlkICovCkBAIC02MTcsNiArODM2LDEwIEBA
IHN0YXRpYyBpbmxpbmUgdm9pZCBjaGFuZ2VfdHlwZV9pZCh1bnNpZ24KIHsKIAlzdHJ1Y3QgbWVt
bGVha19wb2ludGVyICpwb2ludGVyOwogCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCisJ
c3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOworCiAJcG9pbnRlciA9IGdldF9jYWNoZWRfcG9pbnRl
cihwdHIpOwogCWlmICghcG9pbnRlcikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC02MzQsMTIgKzg1
NywxNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQgY2hhbmdlX3R5cGVfaWQodW5zaWduCiAJfQogCiAJ
aWYgKCF0eXBlX2lkIHx8IHR5cGVfaWQgPT0gcG9pbnRlci0+dHlwZV9pZCkKLQkJcmV0dXJuOwor
CQlnb3RvIG91dDsKIAogCWlmIChwb2ludGVyLT5mbGFncyAmIFBPSU5URVJfQUxJQVNFUykKIAkJ
ZGVsZXRlX3BvaW50ZXJfYWxpYXNlcyhwb2ludGVyKTsKIAogCXBvaW50ZXItPnR5cGVfaWQgPSB0
eXBlX2lkOworCisgb3V0OgorCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOworCisJQlVHX09O
KCFpcnFzX2Rpc2FibGVkKCkpOwogfQogCiAvKiBBbGxvY2F0aW9uIGZ1bmN0aW9uIGhvb2sgKi8K
QEAgLTY3MSwyMSArODk5LDIwIEBAIHZvaWQgbWVtbGVha19hbGxvYyhjb25zdCB2b2lkICpwdHIs
IHNpemUKIAogCQlCVUdfT04oY3B1X2lkICE9IDApOwogCi0JCWlmIChwcmVpbml0X3BvcyA+PSBQ
UkVJTklUX1BPSU5URVJTKQotCQkJcGFuaWMoImttZW1sZWFrOiBwcmVpbml0IHBvaW50ZXJzIGJ1
ZmZlciBvdmVyZmxvd1xuIik7Ci0JCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0
X3BvcysrXTsKKwkJaWYgKHByZWluaXRfcG9zIDwgUFJFSU5JVF9QT0lOVEVSUykgeworCQkJcG9p
bnRlciA9ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zXTsKIAotCQlwb2ludGVyLT50eXBl
ID0gTUVNTEVBS19BTExPQzsKLQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKLQkJcG9pbnRlci0+
c2l6ZSA9IHNpemU7Ci0JCXBvaW50ZXItPnJlZl9jb3VudCA9IHJlZl9jb3VudDsKKwkJCXBvaW50
ZXItPnR5cGUgPSBNRU1MRUFLX0FMTE9DOworCQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKKwkJ
CXBvaW50ZXItPnNpemUgPSBzaXplOworCQkJcG9pbnRlci0+cmVmX2NvdW50ID0gcmVmX2NvdW50
OworCQl9CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290byB1bm1hc2s7CiAJfQogCi0Jc3Bpbl9s
b2NrKCZtZW1sZWFrX2xvY2spOwogCWNyZWF0ZV9wb2ludGVyKCh1bnNpZ25lZCBsb25nKXB0ciwg
c2l6ZSwgcmVmX2NvdW50KTsKLQlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKIAogIHVubWFz
azoKIAljcHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKTsKQEAgLTcxOCwxOSArOTQ1
LDE4IEBAIHZvaWQgbWVtbGVha19mcmVlKGNvbnN0IHZvaWQgKnB0cikKIAogCQlCVUdfT04oY3B1
X2lkICE9IDApOwogCi0JCWlmIChwcmVpbml0X3BvcyA+PSBQUkVJTklUX1BPSU5URVJTKQotCQkJ
cGFuaWMoImttZW1sZWFrOiBwcmVpbml0IHBvaW50ZXJzIGJ1ZmZlciBvdmVyZmxvd1xuIik7Ci0J
CXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3BvcysrXTsKKwkJaWYgKHByZWlu
aXRfcG9zIDwgUFJFSU5JVF9QT0lOVEVSUykgeworCQkJcG9pbnRlciA9ICZwcmVpbml0X3BvaW50
ZXJzW3ByZWluaXRfcG9zXTsKIAotCQlwb2ludGVyLT50eXBlID0gTUVNTEVBS19GUkVFOwotCQlw
b2ludGVyLT5wb2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfRlJFRTsK
KwkJCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7CisJCX0KKwkJcHJlaW5pdF9wb3MrKzsKIAogCQln
b3RvIHVubWFzazsKIAl9CiAKLQlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CiAJZGVsZXRlX3Bv
aW50ZXIoKHVuc2lnbmVkIGxvbmcpcHRyKTsKLQlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsK
IAogIHVubWFzazoKIAljcHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKTsKQEAgLTc2
NCwyMSArOTkwLDIwIEBAIHZvaWQgbWVtbGVha19wYWRkaW5nKGNvbnN0IHZvaWQgKnB0ciwgdW4K
IAogCQlCVUdfT04oY3B1X2lkICE9IDApOwogCi0JCWlmIChwcmVpbml0X3BvcyA+PSBQUkVJTklU
X1BPSU5URVJTKQotCQkJcGFuaWMoImttZW1sZWFrOiBwcmVpbml0IHBvaW50ZXJzIGJ1ZmZlciBv
dmVyZmxvd1xuIik7Ci0JCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvcysr
XTsKKwkJaWYgKHByZWluaXRfcG9zIDwgUFJFSU5JVF9QT0lOVEVSUykgeworCQkJcG9pbnRlciA9
ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zXTsKIAotCQlwb2ludGVyLT50eXBlID0gTUVN
TEVBS19QQURESU5HOwotCQlwb2ludGVyLT5wb2ludGVyID0gcHRyOwotCQlwb2ludGVyLT5vZmZz
ZXQgPSBvZmZzZXQ7Ci0JCXBvaW50ZXItPnNpemUgPSBzaXplOworCQkJcG9pbnRlci0+dHlwZSA9
IE1FTUxFQUtfUEFERElORzsKKwkJCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7CisJCQlwb2ludGVy
LT5vZmZzZXQgPSBvZmZzZXQ7CisJCQlwb2ludGVyLT5zaXplID0gc2l6ZTsKKwkJfQorCQlwcmVp
bml0X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNwaW5fbG9jaygmbWVtbGVha19s
b2NrKTsKIAl1bnBhZF9wb2ludGVyKCh1bnNpZ25lZCBsb25nKXB0ciwgb2Zmc2V0LCBzaXplKTsK
LQlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKIAogIHVubWFzazoKIAljcHVfY2xlYXIoY3B1
X2lkLCBtZW1sZWFrX2NwdV9tYXNrKTsKQEAgLTgxMSwxOSArMTAzNiwxOCBAQCB2b2lkIG1lbWxl
YWtfbm90X2xlYWsoY29uc3Qgdm9pZCAqcHRyKQogCiAJCUJVR19PTihjcHVfaWQgIT0gMCk7CiAK
LQkJaWYgKHByZWluaXRfcG9zID49IFBSRUlOSVRfUE9JTlRFUlMpCi0JCQlwYW5pYygia21lbWxl
YWs6IHByZWluaXQgcG9pbnRlcnMgYnVmZmVyIG92ZXJmbG93XG4iKTsKLQkJcG9pbnRlciA9ICZw
cmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zKytdOworCQlpZiAocHJlaW5pdF9wb3MgPCBQUkVJ
TklUX1BPSU5URVJTKSB7CisJCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9w
b3NdOwogCi0JCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX05PVF9MRUFLOwotCQlwb2ludGVyLT5w
b2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfTk9UX0xFQUs7CisJCQlw
b2ludGVyLT5wb2ludGVyID0gcHRyOworCQl9CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290byB1
bm1hc2s7CiAJfQogCi0Jc3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOwogCW1ha2VfZ3JheV9wb2lu
dGVyKCh1bnNpZ25lZCBsb25nKXB0cik7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAK
ICB1bm1hc2s6CiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC04NTYs
MTkgKzEwODAsMTggQEAgdm9pZCBtZW1sZWFrX2lnbm9yZShjb25zdCB2b2lkICpwdHIpCiAKIAkJ
QlVHX09OKGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lO
VEVSUykKLQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZs
b3dcbiIpOwotCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJ
CWlmIChwcmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJl
aW5pdF9wb2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtf
SUdOT1JFOwotCQlwb2ludGVyLT5wb2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+dHlwZSA9IE1F
TUxFQUtfSUdOT1JFOworCQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKKwkJfQorCQlwcmVpbml0
X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNwaW5fbG9jaygmbWVtbGVha19sb2Nr
KTsKIAltYWtlX2JsYWNrX3BvaW50ZXIoKHVuc2lnbmVkIGxvbmcpcHRyKTsKLQlzcGluX3VubG9j
aygmbWVtbGVha19sb2NrKTsKIAogIHVubWFzazoKIAljcHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFr
X2NwdV9tYXNrKTsKQEAgLTkwMSwyMSArMTEyNCwyMCBAQCB2b2lkIG1lbWxlYWtfc2Nhbl9hcmVh
KGNvbnN0IHZvaWQgKnB0ciwgCiAKIAkJQlVHX09OKGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJl
aW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKLQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5p
dCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIpOwotCQlwb2ludGVyID0gJnByZWluaXRfcG9p
bnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChwcmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRF
UlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJ
cG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfU0NBTl9BUkVBOwotCQlwb2ludGVyLT5wb2ludGVyID0g
cHRyOwotCQlwb2ludGVyLT5vZmZzZXQgPSBvZmZzZXQ7Ci0JCXBvaW50ZXItPnNpemUgPSBsZW5n
dGg7CisJCQlwb2ludGVyLT50eXBlID0gTUVNTEVBS19TQ0FOX0FSRUE7CisJCQlwb2ludGVyLT5w
b2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+b2Zmc2V0ID0gb2Zmc2V0OworCQkJcG9pbnRlci0+
c2l6ZSA9IGxlbmd0aDsKKwkJfQorCQlwcmVpbml0X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwog
CX0KIAotCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsKIAlhZGRfc2Nhbl9hcmVhKCh1bnNpZ25l
ZCBsb25nKXB0ciwgb2Zmc2V0LCBsZW5ndGgpOwotCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2sp
OwogCiAgdW5tYXNrOgogCWNwdV9jbGVhcihjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spOwpAQCAt
OTQ4LDIwICsxMTcwLDE5IEBAIHZvaWQgbWVtbGVha190eXBlaWRfcmF3KGNvbnN0IHZvaWQgKnB0
ciwKIAogCQlCVUdfT04oY3B1X2lkICE9IDApOwogCi0JCWlmIChwcmVpbml0X3BvcyA+PSBQUkVJ
TklUX1BPSU5URVJTKQotCQkJcGFuaWMoImttZW1sZWFrOiBwcmVpbml0IHBvaW50ZXJzIGJ1ZmZl
ciBvdmVyZmxvd1xuIik7Ci0JCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bv
cysrXTsKKwkJaWYgKHByZWluaXRfcG9zIDwgUFJFSU5JVF9QT0lOVEVSUykgeworCQkJcG9pbnRl
ciA9ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zXTsKIAotCQlwb2ludGVyLT50eXBlID0g
TUVNTEVBS19UWVBFSUQ7Ci0JCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7Ci0JCXBvaW50ZXItPnR5
cGVfaWQgPSB0eXBlX2lkOworCQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfVFlQRUlEOworCQkJ
cG9pbnRlci0+cG9pbnRlciA9IHB0cjsKKwkJCXBvaW50ZXItPnR5cGVfaWQgPSB0eXBlX2lkOwor
CQl9CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290byB1bm1hc2s7CiAJfQogCi0Jc3Bpbl9sb2Nr
KCZtZW1sZWFrX2xvY2spOwogCWNoYW5nZV90eXBlX2lkKCh1bnNpZ25lZCBsb25nKXB0ciwgdHlw
ZV9pZCk7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1bm1hc2s6CiAJY3B1X2Ns
ZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC05NzMsNyArMTE5NCw3IEBAIEVYUE9S
VF9TWU1CT0wobWVtbGVha190eXBlaWRfcmF3KTsKIAogLyogU2NhbiBhIGJsb2NrIG9mIG1lbW9y
eSAoZXhjbHVzaXZlIHJhbmdlKSBmb3IgcG9pbnRlcnMgYW5kIG1vdmUKICAqIHRob3NlIGZvdW5k
IHRvIHRoZSBncmF5IGxpc3QuIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGgKLSAqIG1lbWxl
YWtfbG9jayBoZWxkCisgKiBtZW1sZWFrX2xvY2sgaGVsZCBhbmQgaW50ZXJydXB0cyBkaXNhYmxl
ZAogICovCiBzdGF0aWMgdm9pZCBfX3NjYW5fYmxvY2sodm9pZCAqX3N0YXJ0LCB2b2lkICpfZW5k
KQogewpAQCAtOTgyLDYgKzEyMDMsOSBAQCBzdGF0aWMgdm9pZCBfX3NjYW5fYmxvY2sodm9pZCAq
X3N0YXJ0LCB2CiAJCQkJCQkgICAgICBCWVRFU19QRVJfV09SRCk7CiAJdW5zaWduZWQgbG9uZyAq
ZW5kID0gX2VuZDsKIAorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5f
aXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKKwogCWZvciAocHRyID0gc3RhcnQ7IHB0ciA8IGVu
ZDsgcHRyKyspIHsKIAkJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlciA9CiAJCQlyYWRp
eF90cmVlX2xvb2t1cCgmcG9pbnRlcl90cmVlLApAQCAtOTk4LDYgKzEyMjIsOSBAQCBzdGF0aWMg
dm9pZCBfX3NjYW5fYmxvY2sodm9pZCAqX3N0YXJ0LCB2CiAJCQlsaXN0X2FkZF90YWlsX3JjdSgm
cG9pbnRlci0+Z3JheV9saXN0LCAmZ3JheV9saXN0KTsKIAkJfQogCX0KKworCUJVR19PTighaXJx
c19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsK
IH0KIAogc3RhdGljIHZvaWQgc2Nhbl9ibG9jayh2b2lkICpzdGFydCwgdm9pZCAqZW5kKQpAQCAt
MTAyNyw3ICsxMjU0LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIHNjYW5fcG9pbnRlcihzdHJ1Y3Qg
bQogCXNwaW5fbG9ja19pcnFzYXZlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKIAogCS8qIGZyZWVk
IHBvaW50ZXIgKi8KLQlpZiAoIXBvaW50ZXItPnBvaW50ZXIpCisJaWYgKCFwb2ludGVyLT5mbGFn
cyAmIFBPSU5URVJfQUxMT0NBVEVEKQogCQlnb3RvIG91dDsKIAogCWlmIChobGlzdF9lbXB0eSgm
cG9pbnRlci0+YXJlYV9saXN0KSkKQEAgLTEwNTYsMTQgKzEyODMsMjEgQEAgI2VuZGlmCiAJdW5z
aWduZWQgaW50IGNwdV9pZDsKIAogCS8qIGluaXRpYWxpemUgcG9pbnRlcnMgKG1ha2UgdGhlbSB3
aGl0ZSkgYW5kIGJ1aWxkIHRoZSBpbml0aWFsCi0JICogZ3JheSBsaXN0LiBOb3RlIHRoYXQgY3Jl
YXRlX3BvaW50ZXJfYWxpYXNlcyBtaWdodCBhbGxvY2F0ZQotCSAqIG1lbW9yeSAqLwotCXNwaW5f
bG9ja19pcnFzYXZlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKLQljcHVfaWQgPSBzbXBfcHJvY2Vz
c29yX2lkKCk7CisJICogZ3JheSBsaXN0LiBtZW1sZWFrX2NwdV9tYXNrIGlzIHNldCBhcyB3ZSBk
b24ndCB0cmFjayB0aGUKKwkgKiBrbWVtbGVhayBhbGxvY2F0aW9ucyAqLworCWxvY2FsX2lycV9z
YXZlKGZsYWdzKTsKKwljcHVfaWQgPSBnZXRfY3B1KCk7CiAJaWYgKGNwdV90ZXN0X2FuZF9zZXQo
Y3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKSkKIAkJQlVHKCk7CiAKLQlsaXN0X2Zvcl9lYWNoX2Vu
dHJ5KHBvaW50ZXIsICZwb2ludGVyX2xpc3QsIHBvaW50ZXJfbGlzdCkgeworCS8qIHVzZSB0aGUg
X3JjdSB2YXJpYW50IHNpbmNlIHBvaW50ZXJfbGlzdCBjYW4gY2hhbmdlICovCisJcmN1X3JlYWRf
bG9jaygpOworCS8qIG1lbWxlYWtfbG9jayBuZWVkZWQgdG8gZW5zdXJlIHRoYXQgdGhlIHBvaW50
ZXIgc3RydWN0dXJlIGlzCisJICogbm90IGZyZWVkIG9uIGEgZGlmZmVyZW50IENQVSAoY3JlYXRl
X3BvaW50ZXJfYWxpYXNlcyBtYXkKKwkgKiByZWxlYXNlIHRoZSBsb2NrKSAqLworCXNwaW5fbG9j
aygmbWVtbGVha19sb2NrKTsKKworCWxpc3RfZm9yX2VhY2hfZW50cnlfcmN1KHBvaW50ZXIsICZw
b2ludGVyX2xpc3QsIHBvaW50ZXJfbGlzdCkgewogCQkvKiBsYXp5IGluc2VydGlvbiBvZiB0aGUg
cG9pbnRlciBhbGlhc2VzIGludG8gdGhlIHJhZGl4IHRyZWUgKi8KIAkJaWYgKChwb2ludGVyLT5m
bGFncyAmIFBPSU5URVJfQUxMT0NBVEVEKQogCQkgICAgJiYgIShwb2ludGVyLT5mbGFncyAmIFBP
SU5URVJfQUxJQVNFUykpCkBAIC0xMDcxLDEzICsxMzA1LDE5IEBAICNlbmRpZgogCiAJCXBvaW50
ZXItPmNvdW50ID0gMDsKIAkJaWYgKGNvbG9yX2dyYXkocG9pbnRlcikpIHsKKwkJCS8qIHRoZSBw
b2ludGVyIHdpbGwgYmUgcHV0IGJhY2sgb25jZSBpdCBpcworCQkJICogc2Nhbm5lZCB2aWEgdGhl
IGdyYXlfbGlzdCAqLwogCQkJZ2V0X3BvaW50ZXIocG9pbnRlcik7CiAJCQlsaXN0X2FkZF90YWls
KCZwb2ludGVyLT5ncmF5X2xpc3QsICZncmF5X2xpc3QpOwogCQl9CiAJfQogCisJc3Bpbl91bmxv
Y2soJm1lbWxlYWtfbG9jayk7CisJcmN1X3JlYWRfdW5sb2NrKCk7CisKIAljcHVfY2xlYXIoY3B1
X2lkLCBtZW1sZWFrX2NwdV9tYXNrKTsKLQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtZW1sZWFr
X2xvY2ssIGZsYWdzKTsKKwlwdXRfY3B1X25vX3Jlc2NoZWQoKTsKKwlsb2NhbF9pcnFfcmVzdG9y
ZShmbGFncyk7CiAKIAkvKiBkYXRhL2JzcyBzY2FubmluZyAqLwogCXNjYW5fYmxvY2soX3NkYXRh
LCBfZWRhdGEpOwpAQCAtMTI2Miw2ICsxNTAyLDEwIEBAIHZvaWQgX19pbml0IG1lbWxlYWtfaW5p
dCh2b2lkKQogCiAJYXRvbWljX3NldCgmbWVtbGVha19pbml0aWFsaXplZCwgMSk7CiAKKwlpZiAo
cHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKKwkJcGFuaWMoImttZW1sZWFrOiBwcmVp
bml0IHBvaW50ZXJzIGJ1ZmZlciBvdmVyZmxvdzogJWRcbiIsCisJCSAgICAgIHByZWluaXRfcG9z
KTsKKwogCS8qIGV4ZWN1dGUgdGhlIGJ1ZmZlcmVkIG1lbWxlYWsgYWN0aW9ucyAqLwogCXByX2Rl
YnVnKCJrbWVtbGVhazogJWQgcHJlaW5pdCBhY3Rpb25zXG4iLCBwcmVpbml0X3Bvcyk7CiAJZm9y
IChpID0gMDsgaSA8IHByZWluaXRfcG9zOyBpKyspIHsK
------=_Part_35814_14599875.1155937638711--
