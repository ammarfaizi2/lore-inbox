Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261900AbULOGIa@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261900AbULOGIa (ORCPT <rfc822;willy@w.ods.org>);
	Wed, 15 Dec 2004 01:08:30 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261904AbULOGIa
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Wed, 15 Dec 2004 01:08:30 -0500
Received: from rwcrmhc11.comcast.net ([204.127.198.35]:52420 "EHLO
	rwcrmhc11.comcast.net") by vger.kernel.org with ESMTP
	id S261900AbULOGGr (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Wed, 15 Dec 2004 01:06:47 -0500
Message-ID: <41BFD4A5.8020404@comcast.net>
Date: Wed, 15 Dec 2004 01:07:33 -0500
From: John Richard Moser <nigelenki@comcast.net>
User-Agent: Mozilla Thunderbird 1.0 (X11/20041211)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: John Richard Moser <nigelenki@comcast.net>
CC: linux-kernel@vger.kernel.org
Subject: Re: Montavista Realtime compilation failures
References: <41BFD327.3000408@comcast.net>
In-Reply-To: <41BFD327.3000408@comcast.net>
X-Enigmail-Version: 0.89.5.0
X-Enigmail-Supports: pgp-inline, pgp-mime
Content-Type: multipart/mixed;
 boundary="------------010108070807040701070208"
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

This is a multi-part message in MIME format.
--------------010108070807040701070208
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Here's another one, after disabling "Kernel mutexes replace spinlocks"



~  CC      arch/x86_64/kernel/asm-offsets.s
In file included from include/linux/sched.h:7,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/capability.h:47: error: parse error before
"task_capability_lock"
include/linux/capability.h:47: warning: type defaults to `int' in
declaration of `task_capability_lock'
include/linux/capability.h:47: warning: data definition has no type or
storage class
In file included from include/linux/rwsem.h:25,
~                 from include/asm/semaphore.h:43,
~                 from include/linux/sched.h:18,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/rwsem-spinlock.h:33: error: parse error before "spinlock_t"
include/linux/rwsem-spinlock.h:33: warning: no semicolon at end of
struct or union
include/linux/rwsem-spinlock.h:38: error: parse error before '}' token
In file included from include/linux/sem.h:4,
~                 from include/linux/sched.h:24,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/ipc.h:59: error: parse error before "spinlock_t"
include/linux/ipc.h:59: warning: no semicolon at end of struct or union
include/linux/ipc.h:69: error: parse error before '}' token
In file included from include/linux/sched.h:24,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/sem.h:90: error: field `sem_perm' has incomplete type
include/linux/sem.h:129: error: parse error before "spinlock_t"
include/linux/ipc.h:59: warning: no semicolon at end of struct or union
include/linux/ipc.h:69: error: parse error before '}' token
In file included from include/linux/sched.h:24,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/sem.h:90: error: field `sem_perm' has incomplete type
include/linux/sem.h:129: error: parse error before "spinlock_t"
include/linux/sem.h:129: warning: no semicolon at end of struct or union
include/linux/sem.h:131: error: parse error before '}' token
In file included from include/linux/gfp.h:4,
~                 from include/linux/slab.h:15,
~                 from include/linux/percpu.h:4,
~                 from include/linux/sched.h:31,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/mmzone.h:114: error: parse error before "spinlock_t"
include/linux/mmzone.h:114: warning: no semicolon at end of struct or union
include/linux/mmzone.h:215: error: parse error before '}' token
include/linux/mmzone.h:254: error: field `node_zones' has incomplete type
include/linux/mmzone.h: In function `next_zone':
include/linux/mmzone.h:307: error: dereferencing pointer to incomplete type
include/linux/mmzone.h:310: error: increment of pointer to unknown structure
include/linux/mmzone.h:310: error: arithmetic on pointer to an
incomplete type
include/linux/mmzone.h: In function `is_highmem':
include/linux/mmzone.h:355: error: dereferencing pointer to incomplete type
include/linux/mmzone.h: In function `is_normal':
include/linux/mmzone.h:360: error: dereferencing pointer to incomplete type
In file included from include/linux/slab.h:15,
~                 from include/linux/percpu.h:4,
~                 from include/linux/sched.h:31,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/gfp.h: At top level:
include/linux/gfp.h:124: error: 'free_pages' redeclared as different
kind of symbol
include/linux/mmzone.h:115: error: previous declaration of 'free_pages'
was here
In file included from include/linux/sched.h:102,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/timer.h:15: error: parse error before "spinlock_t"
include/linux/timer.h:15: warning: no semicolon at end of struct or union
include/linux/timer.h:22: error: parse error before '}' token
include/linux/timer.h: In function `init_timer':
include/linux/timer.h:44: error: dereferencing pointer to incomplete type
include/linux/timer.h:45: error: dereferencing pointer to incomplete type
include/linux/timer.h:46: warning: implicit declaration of function
`spin_lock_init'
include/linux/timer.h:46: error: dereferencing pointer to incomplete type
include/linux/timer.h: In function `timer_pending':
include/linux/timer.h:61: error: dereferencing pointer to incomplete type
include/linux/timer.h: In function `add_timer':
include/linux/timer.h:87: error: dereferencing pointer to incomplete type
In file included from include/linux/aio.h:5,
~                 from include/linux/sched.h:194,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/workqueue.h: At top level:
include/linux/workqueue.h:20: error: field `timer' has incomplete type
In file included from include/linux/sched.h:194,
~                 from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/aio.h:122: error: parse error before "spinlock_t"
include/linux/aio.h:122: warning: no semicolon at end of struct or union
include/linux/aio.h:128: error: parse error before '}' token
include/linux/aio.h:141: error: parse error before "spinlock_t"
include/linux/aio.h:141: warning: no semicolon at end of struct or union
include/linux/aio.h:152: error: parse error before '}' token
In file included from arch/x86_64/kernel/asm-offsets.c:7:
include/linux/sched.h:221: error: field `mmap_sem' has incomplete type
include/linux/sched.h:254: error: field `default_kioctx' has incomplete type
include/linux/sched.h:385: error: parse error before "spinlock_t"
include/linux/sched.h:385: warning: no semicolon at end of struct or union
include/linux/sched.h:400: error: parse error before '}' token
include/linux/sched.h:530: error: field `real_timer' has incomplete type
include/linux/sched.h:579: error: parse error before "spinlock_t"
include/linux/sched.h:579: warning: no semicolon at end of struct or union
include/linux/sched.h:581: warning: type defaults to `int' in
declaration of `proc_lock'
include/linux/sched.h:581: warning: data definition has no type or
storage class
include/linux/sched.h:583: error: parse error before "switch_lock"
include/linux/sched.h:583: warning: type defaults to `int' in
declaration of `switch_lock'
include/linux/sched.h:583: warning: data definition has no type or
storage class
include/linux/sched.h:609: error: parse error before '}' token
include/linux/sched.h: In function `process_group':
include/linux/sched.h:613: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `dequeue_signal_lock':
include/linux/sched.h:782: error: dereferencing pointer to incomplete type
include/linux/sched.h:784: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `on_sig_stack':
include/linux/sched.h:825: error: dereferencing pointer to incomplete type
include/linux/sched.h:825: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `sas_ss_flags':
include/linux/sched.h:830: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `capable':
include/linux/sched.h:841: error: dereferencing pointer to incomplete type
include/linux/sched.h:842: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `thread_group_empty':
include/linux/sched.h:939: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `task_lock':
include/linux/sched.h:960: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `task_unlock':
include/linux/sched.h:965: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `set_tsk_thread_flag':
include/linux/sched.h:973: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `clear_tsk_thread_flag':
include/linux/sched.h:978: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `test_and_set_tsk_thread_flag':
include/linux/sched.h:983: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `test_and_clear_tsk_thread_flag':
include/linux/sched.h:988: error: dereferencing pointer to incomplete type
include/linux/sched.h: In function `test_tsk_thread_flag':
include/linux/sched.h:993: error: dereferencing pointer to incomplete type
include/linux/sched.h: At top level:
include/linux/sched.h:1034: error: parse error before '*' token
include/linux/sched.h:1036: warning: function declaration isn't a prototype
include/linux/sched.h: In function `cond_resched_lock':
include/linux/sched.h:1038: error: `lock' undeclared (first use in this
function)
include/linux/sched.h:1038: error: (Each undeclared identifier is
reported only once
include/linux/sched.h:1038: error: for each function it appears in.)
include/linux/sched.h: In function `arch_pick_mmap_layout':
include/linux/sched.h:1087: error: dereferencing pointer to incomplete type
include/linux/sched.h:1090: error: dereferencing pointer to incomplete type
include/linux/sched.h:1091: error: dereferencing pointer to incomplete type
In file included from include/linux/compat.h:15,
~                 from include/asm/ia32.h:8,
~                 from arch/x86_64/kernel/asm-offsets.c:15:
include/asm/compat.h: In function `compat_alloc_user_space':
include/asm/compat.h:196: error: dereferencing pointer to incomplete type
arch/x86_64/kernel/asm-offsets.c: In function `main':
arch/x86_64/kernel/asm-offsets.c:25: error: dereferencing pointer to
incomplete type
arch/x86_64/kernel/asm-offsets.c:26: error: dereferencing pointer to
incomplete type
arch/x86_64/kernel/asm-offsets.c:27: error: dereferencing pointer to
incomplete type
arch/x86_64/kernel/asm-offsets.c:28: error: dereferencing pointer to
incomplete type
arch/x86_64/kernel/asm-offsets.c: At top level:
include/linux/aio.h:149: error: storage size of `ring_info' isn't known
include/linux/sched.h:396: error: storage size of `it_timer' isn't known
make[1]: *** [arch/x86_64/kernel/asm-offsets.s] Error 1
make: *** [arch/x86_64/kernel/asm-offsets.s] Error 2


- --
All content of all messages exchanged herein are left in the
Public Domain, unless otherwise explicitly stated.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.6 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBv9SihDd4aOud5P8RAkjmAKCKiKnuJpfpJCmHgpQPzAAgCaQsqgCeKuVp
L9tf6V3C9jGJ4T9MDyjq/dc=
=KY+J
-----END PGP SIGNATURE-----

--------------010108070807040701070208
Content-Type: text/plain;
 name=".config"
Content-Transfer-Encoding: base64
Content-Disposition: inline;
 filename=".config"

IwojIEF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIG1ha2UgY29uZmlnOiBkb24ndCBlZGl0CiMg
TGludXgga2VybmVsIHZlcnNpb246IDIuNi45LXBheC1ydAojIFdlZCBEZWMgMTUgMDE6MDE6
MjYgMjAwNAojCkNPTkZJR19YODZfNjQ9eQpDT05GSUdfNjRCSVQ9eQpDT05GSUdfWDg2PXkK
Q09ORklHX01NVT15CkNPTkZJR19SV1NFTV9HRU5FUklDX1NQSU5MT0NLPXkKQ09ORklHX1g4
Nl9DTVBYQ0hHPXkKQ09ORklHX0VBUkxZX1BSSU5USz15CkNPTkZJR19IUEVUX1RJTUVSPXkK
IyBDT05GSUdfSFBFVF9FTVVMQVRFX1JUQyBpcyBub3Qgc2V0CkNPTkZJR19HRU5FUklDX0lT
QV9ETUE9eQpDT05GSUdfR0VORVJJQ19JT01BUD15CgojCiMgQ29kZSBtYXR1cml0eSBsZXZl
bCBvcHRpb25zCiMKQ09ORklHX0VYUEVSSU1FTlRBTD15CkNPTkZJR19DTEVBTl9DT01QSUxF
PXkKQ09ORklHX0JST0tFTl9PTl9TTVA9eQoKIwojIEdlbmVyYWwgc2V0dXAKIwpDT05GSUdf
TE9DQUxWRVJTSU9OPSIiCkNPTkZJR19TV0FQPXkKQ09ORklHX1NZU1ZJUEM9eQpDT05GSUdf
UE9TSVhfTVFVRVVFPXkKQ09ORklHX0JTRF9QUk9DRVNTX0FDQ1Q9eQojIENPTkZJR19CU0Rf
UFJPQ0VTU19BQ0NUX1YzIGlzIG5vdCBzZXQKQ09ORklHX1NZU0NUTD15CiMgQ09ORklHX0FV
RElUIGlzIG5vdCBzZXQKQ09ORklHX0xPR19CVUZfU0hJRlQ9MTQKQ09ORklHX0hPVFBMVUc9
eQpDT05GSUdfSUtDT05GSUc9eQpDT05GSUdfSUtDT05GSUdfUFJPQz15CiMgQ09ORklHX0tN
VVRFWCBpcyBub3Qgc2V0CkNPTkZJR19LTVVURVhfU1RBVFM9eQojIENPTkZJR19LTVVURVhf
REVCVUcgaXMgbm90IHNldApDT05GSUdfSU5HT19CS0w9eQojIENPTkZJR19CS0xfU0VNIGlz
IG5vdCBzZXQKQ09ORklHX0JLTF9NVFg9eQojIENPTkZJR19GTVVURVggaXMgbm90IHNldApD
T05GSUdfUE1VVEVYPXkKQ09ORklHX1BNVVRFWF9ERUFETE9DS19ERVRFQ1RJT049eQpDT05G
SUdfUE1VVEVYX1BJPXkKIyBDT05GSUdfUE1VVEVYX1BJX0RFQlVHIGlzIG5vdCBzZXQKQ09O
RklHX0VNQkVEREVEPXkKIyBDT05GSUdfS0FMTFNZTVMgaXMgbm90IHNldApDT05GSUdfRlVU
RVg9eQpDT05GSUdfRVBPTEw9eQojIENPTkZJR19JT1NDSEVEX05PT1AgaXMgbm90IHNldApD
T05GSUdfSU9TQ0hFRF9BUz15CiMgQ09ORklHX0lPU0NIRURfREVBRExJTkUgaXMgbm90IHNl
dApDT05GSUdfSU9TQ0hFRF9DRlE9eQpDT05GSUdfU09GVElSUV9USFJFQURTPXkKQ09ORklH
X0lOR09fSVJRX1RIUkVBRFM9eQojIENPTkZJR19JUlFfVEhSRUFEUyBpcyBub3Qgc2V0CiMg
Q09ORklHX0NDX09QVElNSVpFX0ZPUl9TSVpFIGlzIG5vdCBzZXQKQ09ORklHX1NITUVNPXkK
IyBDT05GSUdfVElOWV9TSE1FTSBpcyBub3Qgc2V0CgojCiMgTG9hZGFibGUgbW9kdWxlIHN1
cHBvcnQKIwpDT05GSUdfTU9EVUxFUz15CkNPTkZJR19NT0RVTEVfVU5MT0FEPXkKQ09ORklH
X01PRFVMRV9GT1JDRV9VTkxPQUQ9eQpDT05GSUdfT0JTT0xFVEVfTU9EUEFSTT15CiMgQ09O
RklHX01PRFZFUlNJT05TIGlzIG5vdCBzZXQKQ09ORklHX0tNT0Q9eQoKIwojIFByb2Nlc3Nv
ciB0eXBlIGFuZCBmZWF0dXJlcwojCkNPTkZJR19NSzg9eQojIENPTkZJR19NUFNDIGlzIG5v
dCBzZXQKIyBDT05GSUdfR0VORVJJQ19DUFUgaXMgbm90IHNldApDT05GSUdfWDg2X0wxX0NB
Q0hFX0JZVEVTPTY0CkNPTkZJR19YODZfTDFfQ0FDSEVfU0hJRlQ9NgpDT05GSUdfWDg2X1RT
Qz15CkNPTkZJR19YODZfR09PRF9BUElDPXkKIyBDT05GSUdfTUlDUk9DT0RFIGlzIG5vdCBz
ZXQKQ09ORklHX1g4Nl9NU1I9eQojIENPTkZJR19YODZfQ1BVSUQgaXMgbm90IHNldApDT05G
SUdfWDg2X0lPX0FQSUM9eQpDT05GSUdfWDg2X0xPQ0FMX0FQSUM9eQpDT05GSUdfTVRSUj15
CiMgQ09ORklHX1NNUCBpcyBub3Qgc2V0CkNPTkZJR19QUkVFTVBUPXkKQ09ORklHX0dBUlRf
SU9NTVU9eQpDT05GSUdfU1dJT1RMQj15CkNPTkZJR19YODZfTUNFPXkKCiMKIyBQb3dlciBt
YW5hZ2VtZW50IG9wdGlvbnMKIwpDT05GSUdfUE09eQojIENPTkZJR19QTV9ERUJVRyBpcyBu
b3Qgc2V0CkNPTkZJR19TT0ZUV0FSRV9TVVNQRU5EPXkKQ09ORklHX1BNX1NURF9QQVJUSVRJ
T049IiIKCiMKIyBBQ1BJIChBZHZhbmNlZCBDb25maWd1cmF0aW9uIGFuZCBQb3dlciBJbnRl
cmZhY2UpIFN1cHBvcnQKIwpDT05GSUdfQUNQST15CkNPTkZJR19BQ1BJX0JPT1Q9eQpDT05G
SUdfQUNQSV9JTlRFUlBSRVRFUj15CkNPTkZJR19BQ1BJX1NMRUVQPXkKQ09ORklHX0FDUElf
U0xFRVBfUFJPQ19GUz15CkNPTkZJR19BQ1BJX0FDPXkKQ09ORklHX0FDUElfQkFUVEVSWT15
CkNPTkZJR19BQ1BJX0JVVFRPTj15CkNPTkZJR19BQ1BJX0ZBTj15CkNPTkZJR19BQ1BJX1BS
T0NFU1NPUj15CkNPTkZJR19BQ1BJX1RIRVJNQUw9eQojIENPTkZJR19BQ1BJX0FTVVMgaXMg
bm90IHNldAojIENPTkZJR19BQ1BJX1RPU0hJQkEgaXMgbm90IHNldApDT05GSUdfQUNQSV9C
TEFDS0xJU1RfWUVBUj0wCiMgQ09ORklHX0FDUElfREVCVUcgaXMgbm90IHNldApDT05GSUdf
QUNQSV9CVVM9eQpDT05GSUdfQUNQSV9FQz15CkNPTkZJR19BQ1BJX1BPV0VSPXkKQ09ORklH
X0FDUElfUENJPXkKQ09ORklHX0FDUElfU1lTVEVNPXkKCiMKIyBDUFUgRnJlcXVlbmN5IHNj
YWxpbmcKIwpDT05GSUdfQ1BVX0ZSRVE9eQpDT05GSUdfQ1BVX0ZSRVFfUFJPQ19JTlRGPXkK
Q09ORklHX0NQVV9GUkVRX0RFRkFVTFRfR09WX1BFUkZPUk1BTkNFPXkKIyBDT05GSUdfQ1BV
X0ZSRVFfREVGQVVMVF9HT1ZfVVNFUlNQQUNFIGlzIG5vdCBzZXQKQ09ORklHX0NQVV9GUkVR
X0dPVl9QRVJGT1JNQU5DRT15CkNPTkZJR19DUFVfRlJFUV9HT1ZfUE9XRVJTQVZFPXkKQ09O
RklHX0NQVV9GUkVRX0dPVl9VU0VSU1BBQ0U9eQojIENPTkZJR19DUFVfRlJFUV9HT1ZfT05E
RU1BTkQgaXMgbm90IHNldApDT05GSUdfQ1BVX0ZSRVFfMjRfQVBJPXkKQ09ORklHX0NQVV9G
UkVRX1RBQkxFPXkKCiMKIyBDUFVGcmVxIHByb2Nlc3NvciBkcml2ZXJzCiMKQ09ORklHX1g4
Nl9QT1dFUk5PV19LOD15CkNPTkZJR19YODZfUE9XRVJOT1dfSzhfQUNQST15CiMgQ09ORklH
X1g4Nl9TUEVFRFNURVBfQ0VOVFJJTk8gaXMgbm90IHNldAojIENPTkZJR19YODZfQUNQSV9D
UFVGUkVRIGlzIG5vdCBzZXQKCiMKIyBCdXMgb3B0aW9ucyAoUENJIGV0Yy4pCiMKQ09ORklH
X1BDST15CkNPTkZJR19QQ0lfRElSRUNUPXkKQ09ORklHX1BDSV9NTUNPTkZJRz15CkNPTkZJ
R19VTk9SREVSRURfSU89eQojIENPTkZJR19QQ0lfTVNJIGlzIG5vdCBzZXQKQ09ORklHX1BD
SV9MRUdBQ1lfUFJPQz15CkNPTkZJR19QQ0lfTkFNRVM9eQoKIwojIFBDTUNJQS9DYXJkQnVz
IHN1cHBvcnQKIwojIENPTkZJR19QQ01DSUEgaXMgbm90IHNldAoKIwojIFBDSSBIb3RwbHVn
IFN1cHBvcnQKIwojIENPTkZJR19IT1RQTFVHX1BDSSBpcyBub3Qgc2V0CgojCiMgRXhlY3V0
YWJsZSBmaWxlIGZvcm1hdHMgLyBFbXVsYXRpb25zCiMKQ09ORklHX0JJTkZNVF9FTEY9eQpD
T05GSUdfQklORk1UX01JU0M9eQpDT05GSUdfSUEzMl9FTVVMQVRJT049eQpDT05GSUdfSUEz
Ml9BT1VUPXkKQ09ORklHX0NPTVBBVD15CkNPTkZJR19TWVNWSVBDX0NPTVBBVD15CkNPTkZJ
R19VSUQxNj15CgojCiMgRGV2aWNlIERyaXZlcnMKIwoKIwojIEdlbmVyaWMgRHJpdmVyIE9w
dGlvbnMKIwpDT05GSUdfU1RBTkRBTE9ORT15CkNPTkZJR19QUkVWRU5UX0ZJUk1XQVJFX0JV
SUxEPXkKQ09ORklHX0ZXX0xPQURFUj15CiMgQ09ORklHX0RFQlVHX0RSSVZFUiBpcyBub3Qg
c2V0CgojCiMgTWVtb3J5IFRlY2hub2xvZ3kgRGV2aWNlcyAoTVREKQojCiMgQ09ORklHX01U
RCBpcyBub3Qgc2V0CgojCiMgUGFyYWxsZWwgcG9ydCBzdXBwb3J0CiMKQ09ORklHX1BBUlBP
UlQ9bQpDT05GSUdfUEFSUE9SVF9QQz1tCkNPTkZJR19QQVJQT1JUX1BDX0NNTDE9bQojIENP
TkZJR19QQVJQT1JUX1NFUklBTCBpcyBub3Qgc2V0CiMgQ09ORklHX1BBUlBPUlRfUENfRklG
TyBpcyBub3Qgc2V0CiMgQ09ORklHX1BBUlBPUlRfUENfU1VQRVJJTyBpcyBub3Qgc2V0CkNP
TkZJR19QQVJQT1JUX09USEVSPXkKQ09ORklHX1BBUlBPUlRfMTI4ND15CgojCiMgUGx1ZyBh
bmQgUGxheSBzdXBwb3J0CiMKCiMKIyBCbG9jayBkZXZpY2VzCiMKQ09ORklHX0JMS19ERVZf
RkQ9bQojIENPTkZJR19QQVJJREUgaXMgbm90IHNldAojIENPTkZJR19CTEtfQ1BRX0RBIGlz
IG5vdCBzZXQKIyBDT05GSUdfQkxLX0NQUV9DSVNTX0RBIGlzIG5vdCBzZXQKIyBDT05GSUdf
QkxLX0RFVl9EQUM5NjAgaXMgbm90IHNldAojIENPTkZJR19CTEtfREVWX1VNRU0gaXMgbm90
IHNldApDT05GSUdfQkxLX0RFVl9MT09QPW0KIyBDT05GSUdfQkxLX0RFVl9DUllQVE9MT09Q
IGlzIG5vdCBzZXQKQ09ORklHX0JMS19ERVZfTkJEPW0KIyBDT05GSUdfQkxLX0RFVl9TWDgg
aXMgbm90IHNldAojIENPTkZJR19CTEtfREVWX1VCIGlzIG5vdCBzZXQKQ09ORklHX0JMS19E
RVZfUkFNPXkKQ09ORklHX0JMS19ERVZfUkFNX1NJWkU9MzI3NjgKQ09ORklHX0JMS19ERVZf
SU5JVFJEPXkKQ09ORklHX0xCRD15CgojCiMgQVRBL0FUQVBJL01GTS9STEwgc3VwcG9ydAoj
CkNPTkZJR19JREU9eQpDT05GSUdfQkxLX0RFVl9JREU9eQoKIwojIFBsZWFzZSBzZWUgRG9j
dW1lbnRhdGlvbi9pZGUudHh0IGZvciBoZWxwL2luZm8gb24gSURFIGRyaXZlcwojCiMgQ09O
RklHX0JMS19ERVZfSURFX1NBVEEgaXMgbm90IHNldAojIENPTkZJR19CTEtfREVWX0hEX0lE
RSBpcyBub3Qgc2V0CkNPTkZJR19CTEtfREVWX0lERURJU0s9eQpDT05GSUdfSURFRElTS19N
VUxUSV9NT0RFPXkKQ09ORklHX0JMS19ERVZfSURFQ0Q9bQojIENPTkZJR19CTEtfREVWX0lE
RVRBUEUgaXMgbm90IHNldApDT05GSUdfQkxLX0RFVl9JREVGTE9QUFk9bQpDT05GSUdfQkxL
X0RFVl9JREVTQ1NJPW0KQ09ORklHX0lERV9UQVNLX0lPQ1RMPXkKQ09ORklHX0lERV9UQVNL
RklMRV9JTz15CgojCiMgSURFIGNoaXBzZXQgc3VwcG9ydC9idWdmaXhlcwojCkNPTkZJR19J
REVfR0VORVJJQz15CkNPTkZJR19CTEtfREVWX0NNRDY0MD15CiMgQ09ORklHX0JMS19ERVZf
Q01ENjQwX0VOSEFOQ0VEIGlzIG5vdCBzZXQKQ09ORklHX0JMS19ERVZfSURFUENJPXkKQ09O
RklHX0lERVBDSV9TSEFSRV9JUlE9eQojIENPTkZJR19CTEtfREVWX09GRkJPQVJEIGlzIG5v
dCBzZXQKQ09ORklHX0JMS19ERVZfR0VORVJJQz15CiMgQ09ORklHX0JMS19ERVZfT1BUSTYy
MSBpcyBub3Qgc2V0CkNPTkZJR19CTEtfREVWX1JaMTAwMD15CkNPTkZJR19CTEtfREVWX0lE
RURNQV9QQ0k9eQojIENPTkZJR19CTEtfREVWX0lERURNQV9GT1JDRUQgaXMgbm90IHNldApD
T05GSUdfSURFRE1BX1BDSV9BVVRPPXkKIyBDT05GSUdfSURFRE1BX09OTFlESVNLIGlzIG5v
dCBzZXQKIyBDT05GSUdfQkxLX0RFVl9BRUM2MlhYIGlzIG5vdCBzZXQKIyBDT05GSUdfQkxL
X0RFVl9BTEkxNVgzIGlzIG5vdCBzZXQKIyBDT05GSUdfQkxLX0RFVl9BTUQ3NFhYIGlzIG5v
dCBzZXQKIyBDT05GSUdfQkxLX0RFVl9BVElJWFAgaXMgbm90IHNldAojIENPTkZJR19CTEtf
REVWX0NNRDY0WCBpcyBub3Qgc2V0CiMgQ09ORklHX0JMS19ERVZfVFJJRkxFWCBpcyBub3Qg
c2V0CiMgQ09ORklHX0JMS19ERVZfQ1k4MkM2OTMgaXMgbm90IHNldAojIENPTkZJR19CTEtf
REVWX0NTNTUyMCBpcyBub3Qgc2V0CiMgQ09ORklHX0JMS19ERVZfQ1M1NTMwIGlzIG5vdCBz
ZXQKIyBDT05GSUdfQkxLX0RFVl9IUFQzNFggaXMgbm90IHNldAojIENPTkZJR19CTEtfREVW
X0hQVDM2NiBpcyBub3Qgc2V0CiMgQ09ORklHX0JMS19ERVZfU0MxMjAwIGlzIG5vdCBzZXQK
IyBDT05GSUdfQkxLX0RFVl9QSUlYIGlzIG5vdCBzZXQKIyBDT05GSUdfQkxLX0RFVl9OUzg3
NDE1IGlzIG5vdCBzZXQKIyBDT05GSUdfQkxLX0RFVl9QREMyMDJYWF9PTEQgaXMgbm90IHNl
dAojIENPTkZJR19CTEtfREVWX1BEQzIwMlhYX05FVyBpcyBub3Qgc2V0CiMgQ09ORklHX0JM
S19ERVZfU1ZXS1MgaXMgbm90IHNldAojIENPTkZJR19CTEtfREVWX1NJSU1BR0UgaXMgbm90
IHNldAojIENPTkZJR19CTEtfREVWX1NJUzU1MTMgaXMgbm90IHNldAojIENPTkZJR19CTEtf
REVWX1NMQzkwRTY2IGlzIG5vdCBzZXQKIyBDT05GSUdfQkxLX0RFVl9UUk0yOTAgaXMgbm90
IHNldApDT05GSUdfQkxLX0RFVl9WSUE4MkNYWFg9eQojIENPTkZJR19JREVfQVJNIGlzIG5v
dCBzZXQKQ09ORklHX0JMS19ERVZfSURFRE1BPXkKIyBDT05GSUdfSURFRE1BX0lWQiBpcyBu
b3Qgc2V0CkNPTkZJR19JREVETUFfQVVUTz15CiMgQ09ORklHX0JMS19ERVZfSEQgaXMgbm90
IHNldAoKIwojIFNDU0kgZGV2aWNlIHN1cHBvcnQKIwpDT05GSUdfU0NTST15CkNPTkZJR19T
Q1NJX1BST0NfRlM9eQoKIwojIFNDU0kgc3VwcG9ydCB0eXBlIChkaXNrLCB0YXBlLCBDRC1S
T00pCiMKQ09ORklHX0JMS19ERVZfU0Q9bQpDT05GSUdfQ0hSX0RFVl9TVD1tCiMgQ09ORklH
X0NIUl9ERVZfT1NTVCBpcyBub3Qgc2V0CkNPTkZJR19CTEtfREVWX1NSPW0KQ09ORklHX0JM
S19ERVZfU1JfVkVORE9SPXkKQ09ORklHX0NIUl9ERVZfU0c9bQoKIwojIFNvbWUgU0NTSSBk
ZXZpY2VzIChlLmcuIENEIGp1a2Vib3gpIHN1cHBvcnQgbXVsdGlwbGUgTFVOcwojCiMgQ09O
RklHX1NDU0lfTVVMVElfTFVOIGlzIG5vdCBzZXQKIyBDT05GSUdfU0NTSV9DT05TVEFOVFMg
aXMgbm90IHNldAojIENPTkZJR19TQ1NJX0xPR0dJTkcgaXMgbm90IHNldAoKIwojIFNDU0kg
VHJhbnNwb3J0IEF0dHJpYnV0ZXMKIwojIENPTkZJR19TQ1NJX1NQSV9BVFRSUyBpcyBub3Qg
c2V0CiMgQ09ORklHX1NDU0lfRkNfQVRUUlMgaXMgbm90IHNldAoKIwojIFNDU0kgbG93LWxl
dmVsIGRyaXZlcnMKIwojIENPTkZJR19CTEtfREVWXzNXX1hYWFhfUkFJRCBpcyBub3Qgc2V0
CiMgQ09ORklHX1NDU0lfM1dfOVhYWCBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfQUNBUkQg
aXMgbm90IHNldAojIENPTkZJR19TQ1NJX0FBQ1JBSUQgaXMgbm90IHNldAojIENPTkZJR19T
Q1NJX0FJQzdYWFggaXMgbm90IHNldAojIENPTkZJR19TQ1NJX0FJQzdYWFhfT0xEIGlzIG5v
dCBzZXQKIyBDT05GSUdfU0NTSV9BSUM3OVhYIGlzIG5vdCBzZXQKIyBDT05GSUdfTUVHQVJB
SURfTkVXR0VOIGlzIG5vdCBzZXQKIyBDT05GSUdfTUVHQVJBSURfTEVHQUNZIGlzIG5vdCBz
ZXQKQ09ORklHX1NDU0lfU0FUQT15CiMgQ09ORklHX1NDU0lfU0FUQV9TVlcgaXMgbm90IHNl
dAojIENPTkZJR19TQ1NJX0FUQV9QSUlYIGlzIG5vdCBzZXQKIyBDT05GSUdfU0NTSV9TQVRB
X05WIGlzIG5vdCBzZXQKIyBDT05GSUdfU0NTSV9TQVRBX1BST01JU0UgaXMgbm90IHNldAoj
IENPTkZJR19TQ1NJX1NBVEFfU1g0IGlzIG5vdCBzZXQKIyBDT05GSUdfU0NTSV9TQVRBX1NJ
TCBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfU0FUQV9TSVMgaXMgbm90IHNldApDT05GSUdf
U0NTSV9TQVRBX1ZJQT15CiMgQ09ORklHX1NDU0lfU0FUQV9WSVRFU1NFIGlzIG5vdCBzZXQK
IyBDT05GSUdfU0NTSV9CVVNMT0dJQyBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfRE1YMzE5
MUQgaXMgbm90IHNldAojIENPTkZJR19TQ1NJX0VBVEEgaXMgbm90IHNldAojIENPTkZJR19T
Q1NJX0VBVEFfUElPIGlzIG5vdCBzZXQKIyBDT05GSUdfU0NTSV9GVVRVUkVfRE9NQUlOIGlz
IG5vdCBzZXQKIyBDT05GSUdfU0NTSV9HRFRIIGlzIG5vdCBzZXQKIyBDT05GSUdfU0NTSV9J
UFMgaXMgbm90IHNldAojIENPTkZJR19TQ1NJX0lOSUExMDAgaXMgbm90IHNldAojIENPTkZJ
R19TQ1NJX1BQQSBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfSU1NIGlzIG5vdCBzZXQKIyBD
T05GSUdfU0NTSV9TWU01M0M4WFhfMiBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfSVBSIGlz
IG5vdCBzZXQKIyBDT05GSUdfU0NTSV9RTE9HSUNfSVNQIGlzIG5vdCBzZXQKIyBDT05GSUdf
U0NTSV9RTE9HSUNfRkMgaXMgbm90IHNldAojIENPTkZJR19TQ1NJX1FMT0dJQ18xMjgwIGlz
IG5vdCBzZXQKQ09ORklHX1NDU0lfUUxBMlhYWD15CiMgQ09ORklHX1NDU0lfUUxBMjFYWCBp
cyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfUUxBMjJYWCBpcyBub3Qgc2V0CiMgQ09ORklHX1ND
U0lfUUxBMjMwMCBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfUUxBMjMyMiBpcyBub3Qgc2V0
CiMgQ09ORklHX1NDU0lfUUxBNjMxMiBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfUUxBNjMy
MiBpcyBub3Qgc2V0CiMgQ09ORklHX1NDU0lfREMzOTV4IGlzIG5vdCBzZXQKIyBDT05GSUdf
U0NTSV9EQzM5MFQgaXMgbm90IHNldAojIENPTkZJR19TQ1NJX0RFQlVHIGlzIG5vdCBzZXQK
CiMKIyBNdWx0aS1kZXZpY2Ugc3VwcG9ydCAoUkFJRCBhbmQgTFZNKQojCiMgQ09ORklHX01E
IGlzIG5vdCBzZXQKCiMKIyBGdXNpb24gTVBUIGRldmljZSBzdXBwb3J0CiMKIyBDT05GSUdf
RlVTSU9OIGlzIG5vdCBzZXQKCiMKIyBJRUVFIDEzOTQgKEZpcmVXaXJlKSBzdXBwb3J0CiMK
Q09ORklHX0lFRUUxMzk0PW0KCiMKIyBTdWJzeXN0ZW0gT3B0aW9ucwojCiMgQ09ORklHX0lF
RUUxMzk0X1ZFUkJPU0VERUJVRyBpcyBub3Qgc2V0CkNPTkZJR19JRUVFMTM5NF9PVUlfREI9
eQpDT05GSUdfSUVFRTEzOTRfRVhUUkFfQ09ORklHX1JPTVM9eQpDT05GSUdfSUVFRTEzOTRf
Q09ORklHX1JPTV9JUDEzOTQ9eQoKIwojIERldmljZSBEcml2ZXJzCiMKIyBDT05GSUdfSUVF
RTEzOTRfUENJTFlOWCBpcyBub3Qgc2V0CkNPTkZJR19JRUVFMTM5NF9PSENJMTM5ND1tCgoj
CiMgUHJvdG9jb2wgRHJpdmVycwojCkNPTkZJR19JRUVFMTM5NF9WSURFTzEzOTQ9bQpDT05G
SUdfSUVFRTEzOTRfU0JQMj1tCiMgQ09ORklHX0lFRUUxMzk0X1NCUDJfUEhZU19ETUEgaXMg
bm90IHNldApDT05GSUdfSUVFRTEzOTRfRVRIMTM5ND1tCkNPTkZJR19JRUVFMTM5NF9EVjEz
OTQ9bQpDT05GSUdfSUVFRTEzOTRfUkFXSU89bQpDT05GSUdfSUVFRTEzOTRfQ01QPW0KQ09O
RklHX0lFRUUxMzk0X0FNRFRQPW0KCiMKIyBJMk8gZGV2aWNlIHN1cHBvcnQKIwojIENPTkZJ
R19JMk8gaXMgbm90IHNldAoKIwojIE5ldHdvcmtpbmcgc3VwcG9ydAojCkNPTkZJR19ORVQ9
eQoKIwojIE5ldHdvcmtpbmcgb3B0aW9ucwojCkNPTkZJR19QQUNLRVQ9bQpDT05GSUdfUEFD
S0VUX01NQVA9eQojIENPTkZJR19ORVRMSU5LX0RFViBpcyBub3Qgc2V0CkNPTkZJR19VTklY
PW0KQ09ORklHX05FVF9LRVk9bQpDT05GSUdfSU5FVD15CkNPTkZJR19JUF9NVUxUSUNBU1Q9
eQpDT05GSUdfSVBfQURWQU5DRURfUk9VVEVSPXkKQ09ORklHX0lQX01VTFRJUExFX1RBQkxF
Uz15CiMgQ09ORklHX0lQX1JPVVRFX0ZXTUFSSyBpcyBub3Qgc2V0CkNPTkZJR19JUF9ST1VU
RV9NVUxUSVBBVEg9eQpDT05GSUdfSVBfUk9VVEVfVkVSQk9TRT15CiMgQ09ORklHX0lQX1BO
UCBpcyBub3Qgc2V0CkNPTkZJR19ORVRfSVBJUD1tCkNPTkZJR19ORVRfSVBHUkU9bQpDT05G
SUdfTkVUX0lQR1JFX0JST0FEQ0FTVD15CkNPTkZJR19JUF9NUk9VVEU9eQpDT05GSUdfSVBf
UElNU01fVjE9eQpDT05GSUdfSVBfUElNU01fVjI9eQojIENPTkZJR19BUlBEIGlzIG5vdCBz
ZXQKQ09ORklHX1NZTl9DT09LSUVTPXkKQ09ORklHX0lORVRfQUg9bQpDT05GSUdfSU5FVF9F
U1A9bQpDT05GSUdfSU5FVF9JUENPTVA9bQpDT05GSUdfSU5FVF9UVU5ORUw9bQoKIwojIElQ
OiBWaXJ0dWFsIFNlcnZlciBDb25maWd1cmF0aW9uCiMKIyBDT05GSUdfSVBfVlMgaXMgbm90
IHNldApDT05GSUdfSVBWNj1tCkNPTkZJR19JUFY2X1BSSVZBQ1k9eQpDT05GSUdfSU5FVDZf
QUg9bQpDT05GSUdfSU5FVDZfRVNQPW0KQ09ORklHX0lORVQ2X0lQQ09NUD1tCkNPTkZJR19J
TkVUNl9UVU5ORUw9bQpDT05GSUdfSVBWNl9UVU5ORUw9bQpDT05GSUdfTkVURklMVEVSPXkK
IyBDT05GSUdfTkVURklMVEVSX0RFQlVHIGlzIG5vdCBzZXQKCiMKIyBJUDogTmV0ZmlsdGVy
IENvbmZpZ3VyYXRpb24KIwpDT05GSUdfSVBfTkZfQ09OTlRSQUNLPW0KIyBDT05GSUdfSVBf
TkZfQ1RfQUNDVCBpcyBub3Qgc2V0CkNPTkZJR19JUF9ORl9DVF9QUk9UT19TQ1RQPW0KQ09O
RklHX0lQX05GX0ZUUD1tCkNPTkZJR19JUF9ORl9JUkM9bQpDT05GSUdfSVBfTkZfVEZUUD1t
CkNPTkZJR19JUF9ORl9BTUFOREE9bQpDT05GSUdfSVBfTkZfUVVFVUU9bQpDT05GSUdfSVBf
TkZfSVBUQUJMRVM9bQpDT05GSUdfSVBfTkZfTUFUQ0hfTElNSVQ9bQpDT05GSUdfSVBfTkZf
TUFUQ0hfSVBSQU5HRT1tCkNPTkZJR19JUF9ORl9NQVRDSF9NQUM9bQpDT05GSUdfSVBfTkZf
TUFUQ0hfUEtUVFlQRT1tCkNPTkZJR19JUF9ORl9NQVRDSF9NQVJLPW0KQ09ORklHX0lQX05G
X01BVENIX01VTFRJUE9SVD1tCkNPTkZJR19JUF9ORl9NQVRDSF9UT1M9bQpDT05GSUdfSVBf
TkZfTUFUQ0hfUkVDRU5UPW0KQ09ORklHX0lQX05GX01BVENIX0VDTj1tCkNPTkZJR19JUF9O
Rl9NQVRDSF9EU0NQPW0KQ09ORklHX0lQX05GX01BVENIX0FIX0VTUD1tCkNPTkZJR19JUF9O
Rl9NQVRDSF9MRU5HVEg9bQpDT05GSUdfSVBfTkZfTUFUQ0hfVFRMPW0KQ09ORklHX0lQX05G
X01BVENIX1RDUE1TUz1tCkNPTkZJR19JUF9ORl9NQVRDSF9IRUxQRVI9bQpDT05GSUdfSVBf
TkZfTUFUQ0hfU1RBVEU9bQpDT05GSUdfSVBfTkZfTUFUQ0hfQ09OTlRSQUNLPW0KQ09ORklH
X0lQX05GX01BVENIX09XTkVSPW0KQ09ORklHX0lQX05GX01BVENIX0FERFJUWVBFPW0KQ09O
RklHX0lQX05GX01BVENIX1JFQUxNPW0KQ09ORklHX0lQX05GX01BVENIX1NDVFA9bQpDT05G
SUdfSVBfTkZfTUFUQ0hfQ09NTUVOVD1tCkNPTkZJR19JUF9ORl9GSUxURVI9bQpDT05GSUdf
SVBfTkZfVEFSR0VUX1JFSkVDVD1tCkNPTkZJR19JUF9ORl9UQVJHRVRfTE9HPW0KQ09ORklH
X0lQX05GX1RBUkdFVF9VTE9HPW0KQ09ORklHX0lQX05GX1RBUkdFVF9UQ1BNU1M9bQpDT05G
SUdfSVBfTkZfTkFUPW0KQ09ORklHX0lQX05GX05BVF9ORUVERUQ9eQpDT05GSUdfSVBfTkZf
VEFSR0VUX01BU1FVRVJBREU9bQpDT05GSUdfSVBfTkZfVEFSR0VUX1JFRElSRUNUPW0KQ09O
RklHX0lQX05GX1RBUkdFVF9ORVRNQVA9bQpDT05GSUdfSVBfTkZfVEFSR0VUX1NBTUU9bQpD
T05GSUdfSVBfTkZfTkFUX0xPQ0FMPXkKIyBDT05GSUdfSVBfTkZfTkFUX1NOTVBfQkFTSUMg
aXMgbm90IHNldApDT05GSUdfSVBfTkZfTkFUX0lSQz1tCkNPTkZJR19JUF9ORl9OQVRfRlRQ
PW0KQ09ORklHX0lQX05GX05BVF9URlRQPW0KQ09ORklHX0lQX05GX05BVF9BTUFOREE9bQpD
T05GSUdfSVBfTkZfTUFOR0xFPW0KQ09ORklHX0lQX05GX1RBUkdFVF9UT1M9bQpDT05GSUdf
SVBfTkZfVEFSR0VUX0VDTj1tCkNPTkZJR19JUF9ORl9UQVJHRVRfRFNDUD1tCkNPTkZJR19J
UF9ORl9UQVJHRVRfTUFSSz1tCkNPTkZJR19JUF9ORl9UQVJHRVRfQ0xBU1NJRlk9bQpDT05G
SUdfSVBfTkZfUkFXPW0KQ09ORklHX0lQX05GX1RBUkdFVF9OT1RSQUNLPW0KQ09ORklHX0lQ
X05GX0FSUFRBQkxFUz1tCkNPTkZJR19JUF9ORl9BUlBGSUxURVI9bQpDT05GSUdfSVBfTkZf
QVJQX01BTkdMRT1tCiMgQ09ORklHX0lQX05GX0NPTVBBVF9JUENIQUlOUyBpcyBub3Qgc2V0
CiMgQ09ORklHX0lQX05GX0NPTVBBVF9JUEZXQURNIGlzIG5vdCBzZXQKCiMKIyBJUHY2OiBO
ZXRmaWx0ZXIgQ29uZmlndXJhdGlvbgojCiMgQ09ORklHX0lQNl9ORl9RVUVVRSBpcyBub3Qg
c2V0CiMgQ09ORklHX0lQNl9ORl9JUFRBQkxFUyBpcyBub3Qgc2V0CkNPTkZJR19YRlJNPXkK
Q09ORklHX1hGUk1fVVNFUj1tCgojCiMgU0NUUCBDb25maWd1cmF0aW9uIChFWFBFUklNRU5U
QUwpCiMKIyBDT05GSUdfSVBfU0NUUCBpcyBub3Qgc2V0CiMgQ09ORklHX0FUTSBpcyBub3Qg
c2V0CiMgQ09ORklHX0JSSURHRSBpcyBub3Qgc2V0CiMgQ09ORklHX1ZMQU5fODAyMVEgaXMg
bm90IHNldAojIENPTkZJR19ERUNORVQgaXMgbm90IHNldApDT05GSUdfTExDPW0KQ09ORklH
X0xMQzI9bQpDT05GSUdfSVBYPW0KIyBDT05GSUdfSVBYX0lOVEVSTiBpcyBub3Qgc2V0CiMg
Q09ORklHX0FUQUxLIGlzIG5vdCBzZXQKIyBDT05GSUdfWDI1IGlzIG5vdCBzZXQKIyBDT05G
SUdfTEFQQiBpcyBub3Qgc2V0CiMgQ09ORklHX05FVF9ESVZFUlQgaXMgbm90IHNldAojIENP
TkZJR19FQ09ORVQgaXMgbm90IHNldAojIENPTkZJR19XQU5fUk9VVEVSIGlzIG5vdCBzZXQK
IyBDT05GSUdfTkVUX0hXX0ZMT1dDT05UUk9MIGlzIG5vdCBzZXQKCiMKIyBRb1MgYW5kL29y
IGZhaXIgcXVldWVpbmcKIwpDT05GSUdfTkVUX1NDSEVEPXkKQ09ORklHX05FVF9TQ0hfQ0xL
X0pJRkZJRVM9eQojIENPTkZJR19ORVRfU0NIX0NMS19HRVRUSU1FT0ZEQVkgaXMgbm90IHNl
dAojIENPTkZJR19ORVRfU0NIX0NMS19DUFUgaXMgbm90IHNldApDT05GSUdfTkVUX1NDSF9D
QlE9eQpDT05GSUdfTkVUX1NDSF9IVEI9eQpDT05GSUdfTkVUX1NDSF9IRlNDPXkKQ09ORklH
X05FVF9TQ0hfUFJJTz15CkNPTkZJR19ORVRfU0NIX1JFRD15CkNPTkZJR19ORVRfU0NIX1NG
UT15CkNPTkZJR19ORVRfU0NIX1RFUUw9eQpDT05GSUdfTkVUX1NDSF9UQkY9eQpDT05GSUdf
TkVUX1NDSF9HUkVEPXkKQ09ORklHX05FVF9TQ0hfRFNNQVJLPXkKIyBDT05GSUdfTkVUX1ND
SF9ORVRFTSBpcyBub3Qgc2V0CkNPTkZJR19ORVRfU0NIX0lOR1JFU1M9eQpDT05GSUdfTkVU
X1FPUz15CkNPTkZJR19ORVRfRVNUSU1BVE9SPXkKQ09ORklHX05FVF9DTFM9eQpDT05GSUdf
TkVUX0NMU19UQ0lOREVYPXkKQ09ORklHX05FVF9DTFNfUk9VVEU0PXkKQ09ORklHX05FVF9D
TFNfUk9VVEU9eQpDT05GSUdfTkVUX0NMU19GVz15CkNPTkZJR19ORVRfQ0xTX1UzMj15CiMg
Q09ORklHX0NMU19VMzJfUEVSRiBpcyBub3Qgc2V0CiMgQ09ORklHX05FVF9DTFNfSU5EIGlz
IG5vdCBzZXQKQ09ORklHX05FVF9DTFNfUlNWUD15CkNPTkZJR19ORVRfQ0xTX1JTVlA2PXkK
IyBDT05GSUdfTkVUX0NMU19BQ1QgaXMgbm90IHNldApDT05GSUdfTkVUX0NMU19QT0xJQ0U9
eQoKIwojIE5ldHdvcmsgdGVzdGluZwojCiMgQ09ORklHX05FVF9QS1RHRU4gaXMgbm90IHNl
dAojIENPTkZJR19ORVRQT0xMIGlzIG5vdCBzZXQKIyBDT05GSUdfTkVUX1BPTExfQ09OVFJP
TExFUiBpcyBub3Qgc2V0CiMgQ09ORklHX0hBTVJBRElPIGlzIG5vdCBzZXQKIyBDT05GSUdf
SVJEQSBpcyBub3Qgc2V0CiMgQ09ORklHX0JUIGlzIG5vdCBzZXQKQ09ORklHX05FVERFVklD
RVM9eQpDT05GSUdfRFVNTVk9bQojIENPTkZJR19CT05ESU5HIGlzIG5vdCBzZXQKIyBDT05G
SUdfRVFVQUxJWkVSIGlzIG5vdCBzZXQKIyBDT05GSUdfVFVOIGlzIG5vdCBzZXQKCiMKIyBB
UkNuZXQgZGV2aWNlcwojCiMgQ09ORklHX0FSQ05FVCBpcyBub3Qgc2V0CgojCiMgRXRoZXJu
ZXQgKDEwIG9yIDEwME1iaXQpCiMKQ09ORklHX05FVF9FVEhFUk5FVD15CkNPTkZJR19NSUk9
eQojIENPTkZJR19IQVBQWU1FQUwgaXMgbm90IHNldAojIENPTkZJR19TVU5HRU0gaXMgbm90
IHNldAojIENPTkZJR19ORVRfVkVORE9SXzNDT00gaXMgbm90IHNldAoKIwojIFR1bGlwIGZh
bWlseSBuZXR3b3JrIGRldmljZSBzdXBwb3J0CiMKIyBDT05GSUdfTkVUX1RVTElQIGlzIG5v
dCBzZXQKIyBDT05GSUdfSFAxMDAgaXMgbm90IHNldApDT05GSUdfTkVUX1BDST15CiMgQ09O
RklHX1BDTkVUMzIgaXMgbm90IHNldAojIENPTkZJR19BTUQ4MTExX0VUSCBpcyBub3Qgc2V0
CiMgQ09ORklHX0FEQVBURUNfU1RBUkZJUkUgaXMgbm90IHNldAojIENPTkZJR19CNDQgaXMg
bm90IHNldAojIENPTkZJR19GT1JDRURFVEggaXMgbm90IHNldAojIENPTkZJR19ER1JTIGlz
IG5vdCBzZXQKIyBDT05GSUdfRUVQUk8xMDAgaXMgbm90IHNldAojIENPTkZJR19FMTAwIGlz
IG5vdCBzZXQKIyBDT05GSUdfRkVBTE5YIGlzIG5vdCBzZXQKIyBDT05GSUdfTkFUU0VNSSBp
cyBub3Qgc2V0CkNPTkZJR19ORTJLX1BDST1tCiMgQ09ORklHXzgxMzlDUCBpcyBub3Qgc2V0
CkNPTkZJR184MTM5VE9PPW0KIyBDT05GSUdfODEzOVRPT19QSU8gaXMgbm90IHNldAojIENP
TkZJR184MTM5VE9PX1RVTkVfVFdJU1RFUiBpcyBub3Qgc2V0CiMgQ09ORklHXzgxMzlUT09f
ODEyOSBpcyBub3Qgc2V0CiMgQ09ORklHXzgxMzlfT0xEX1JYX1JFU0VUIGlzIG5vdCBzZXQK
IyBDT05GSUdfU0lTOTAwIGlzIG5vdCBzZXQKIyBDT05GSUdfRVBJQzEwMCBpcyBub3Qgc2V0
CiMgQ09ORklHX1NVTkRBTkNFIGlzIG5vdCBzZXQKIyBDT05GSUdfVklBX1JISU5FIGlzIG5v
dCBzZXQKIyBDT05GSUdfVklBX1ZFTE9DSVRZIGlzIG5vdCBzZXQKCiMKIyBFdGhlcm5ldCAo
MTAwMCBNYml0KQojCiMgQ09ORklHX0FDRU5JQyBpcyBub3Qgc2V0CiMgQ09ORklHX0RMMksg
aXMgbm90IHNldAojIENPTkZJR19FMTAwMCBpcyBub3Qgc2V0CiMgQ09ORklHX05TODM4MjAg
aXMgbm90IHNldAojIENPTkZJR19IQU1BQ0hJIGlzIG5vdCBzZXQKIyBDT05GSUdfWUVMTE9X
RklOIGlzIG5vdCBzZXQKQ09ORklHX1I4MTY5PW0KIyBDT05GSUdfUjgxNjlfTkFQSSBpcyBu
b3Qgc2V0CiMgQ09ORklHX1NLOThMSU4gaXMgbm90IHNldAojIENPTkZJR19USUdPTjMgaXMg
bm90IHNldAoKIwojIEV0aGVybmV0ICgxMDAwMCBNYml0KQojCiMgQ09ORklHX0lYR0IgaXMg
bm90IHNldAojIENPTkZJR19TMklPIGlzIG5vdCBzZXQKCiMKIyBUb2tlbiBSaW5nIGRldmlj
ZXMKIwojIENPTkZJR19UUiBpcyBub3Qgc2V0CgojCiMgV2lyZWxlc3MgTEFOIChub24taGFt
cmFkaW8pCiMKIyBDT05GSUdfTkVUX1JBRElPIGlzIG5vdCBzZXQKCiMKIyBXYW4gaW50ZXJm
YWNlcwojCiMgQ09ORklHX1dBTiBpcyBub3Qgc2V0CiMgQ09ORklHX0ZEREkgaXMgbm90IHNl
dAojIENPTkZJR19ISVBQSSBpcyBub3Qgc2V0CiMgQ09ORklHX1BMSVAgaXMgbm90IHNldAoj
IENPTkZJR19QUFAgaXMgbm90IHNldAojIENPTkZJR19TTElQIGlzIG5vdCBzZXQKIyBDT05G
SUdfTkVUX0ZDIGlzIG5vdCBzZXQKIyBDT05GSUdfU0hBUEVSIGlzIG5vdCBzZXQKIyBDT05G
SUdfTkVUQ09OU09MRSBpcyBub3Qgc2V0CgojCiMgSVNETiBzdWJzeXN0ZW0KIwojIENPTkZJ
R19JU0ROIGlzIG5vdCBzZXQKCiMKIyBUZWxlcGhvbnkgU3VwcG9ydAojCiMgQ09ORklHX1BI
T05FIGlzIG5vdCBzZXQKCiMKIyBJbnB1dCBkZXZpY2Ugc3VwcG9ydAojCkNPTkZJR19JTlBV
VD15CgojCiMgVXNlcmxhbmQgaW50ZXJmYWNlcwojCkNPTkZJR19JTlBVVF9NT1VTRURFVj1t
CkNPTkZJR19JTlBVVF9NT1VTRURFVl9QU0FVWD15CkNPTkZJR19JTlBVVF9NT1VTRURFVl9T
Q1JFRU5fWD0xMDI0CkNPTkZJR19JTlBVVF9NT1VTRURFVl9TQ1JFRU5fWT03NjgKQ09ORklH
X0lOUFVUX0pPWURFVj1tCiMgQ09ORklHX0lOUFVUX1RTREVWIGlzIG5vdCBzZXQKQ09ORklH
X0lOUFVUX0VWREVWPW0KIyBDT05GSUdfSU5QVVRfRVZCVUcgaXMgbm90IHNldAoKIwojIElu
cHV0IEkvTyBkcml2ZXJzCiMKQ09ORklHX0dBTUVQT1JUPW0KQ09ORklHX1NPVU5EX0dBTUVQ
T1JUPW0KIyBDT05GSUdfR0FNRVBPUlRfTlM1NTggaXMgbm90IHNldAojIENPTkZJR19HQU1F
UE9SVF9MNCBpcyBub3Qgc2V0CkNPTkZJR19HQU1FUE9SVF9FTVUxMEsxPW0KIyBDT05GSUdf
R0FNRVBPUlRfVk9SVEVYIGlzIG5vdCBzZXQKIyBDT05GSUdfR0FNRVBPUlRfRk04MDEgaXMg
bm90IHNldAojIENPTkZJR19HQU1FUE9SVF9DUzQ2MXggaXMgbm90IHNldApDT05GSUdfU0VS
SU89eQpDT05GSUdfU0VSSU9fSTgwNDI9eQojIENPTkZJR19TRVJJT19TRVJQT1JUIGlzIG5v
dCBzZXQKIyBDT05GSUdfU0VSSU9fQ1Q4MkM3MTAgaXMgbm90IHNldAojIENPTkZJR19TRVJJ
T19QQVJLQkQgaXMgbm90IHNldApDT05GSUdfU0VSSU9fUENJUFMyPW0KIyBDT05GSUdfU0VS
SU9fUkFXIGlzIG5vdCBzZXQKCiMKIyBJbnB1dCBEZXZpY2UgRHJpdmVycwojCkNPTkZJR19J
TlBVVF9LRVlCT0FSRD15CkNPTkZJR19LRVlCT0FSRF9BVEtCRD15CiMgQ09ORklHX0tFWUJP
QVJEX1NVTktCRCBpcyBub3Qgc2V0CiMgQ09ORklHX0tFWUJPQVJEX0xLS0JEIGlzIG5vdCBz
ZXQKIyBDT05GSUdfS0VZQk9BUkRfWFRLQkQgaXMgbm90IHNldAojIENPTkZJR19LRVlCT0FS
RF9ORVdUT04gaXMgbm90IHNldApDT05GSUdfSU5QVVRfTU9VU0U9eQpDT05GSUdfTU9VU0Vf
UFMyPW0KQ09ORklHX01PVVNFX1NFUklBTD1tCiMgQ09ORklHX01PVVNFX1ZTWFhYQUEgaXMg
bm90IHNldAojIENPTkZJR19JTlBVVF9KT1lTVElDSyBpcyBub3Qgc2V0CiMgQ09ORklHX0lO
UFVUX1RPVUNIU0NSRUVOIGlzIG5vdCBzZXQKQ09ORklHX0lOUFVUX01JU0M9eQpDT05GSUdf
SU5QVVRfUENTUEtSPW0KQ09ORklHX0lOUFVUX1VJTlBVVD1tCgojCiMgQ2hhcmFjdGVyIGRl
dmljZXMKIwpDT05GSUdfVlQ9eQpDT05GSUdfVlRfQ09OU09MRT15CkNPTkZJR19IV19DT05T
T0xFPXkKIyBDT05GSUdfU0VSSUFMX05PTlNUQU5EQVJEIGlzIG5vdCBzZXQKCiMKIyBTZXJp
YWwgZHJpdmVycwojCkNPTkZJR19TRVJJQUxfODI1MD1tCkNPTkZJR19TRVJJQUxfODI1MF9B
Q1BJPXkKQ09ORklHX1NFUklBTF84MjUwX05SX1VBUlRTPTQKQ09ORklHX1NFUklBTF84MjUw
X0VYVEVOREVEPXkKIyBDT05GSUdfU0VSSUFMXzgyNTBfTUFOWV9QT1JUUyBpcyBub3Qgc2V0
CkNPTkZJR19TRVJJQUxfODI1MF9TSEFSRV9JUlE9eQojIENPTkZJR19TRVJJQUxfODI1MF9E
RVRFQ1RfSVJRIGlzIG5vdCBzZXQKIyBDT05GSUdfU0VSSUFMXzgyNTBfTVVMVElQT1JUIGlz
IG5vdCBzZXQKIyBDT05GSUdfU0VSSUFMXzgyNTBfUlNBIGlzIG5vdCBzZXQKCiMKIyBOb24t
ODI1MCBzZXJpYWwgcG9ydCBzdXBwb3J0CiMKQ09ORklHX1NFUklBTF9DT1JFPW0KQ09ORklH
X1VOSVg5OF9QVFlTPXkKQ09ORklHX0xFR0FDWV9QVFlTPXkKQ09ORklHX0xFR0FDWV9QVFlf
Q09VTlQ9MjU2CkNPTkZJR19QUklOVEVSPW0KIyBDT05GSUdfTFBfQ09OU09MRSBpcyBub3Qg
c2V0CkNPTkZJR19QUERFVj1tCiMgQ09ORklHX1RJUEFSIGlzIG5vdCBzZXQKCiMKIyBJUE1J
CiMKIyBDT05GSUdfSVBNSV9IQU5ETEVSIGlzIG5vdCBzZXQKCiMKIyBXYXRjaGRvZyBDYXJk
cwojCiMgQ09ORklHX1dBVENIRE9HIGlzIG5vdCBzZXQKQ09ORklHX0hXX1JBTkRPTT1tCkNP
TkZJR19OVlJBTT1tCkNPTkZJR19SVEM9bQpDT05GSUdfR0VOX1JUQz1tCkNPTkZJR19HRU5f
UlRDX1g9eQojIENPTkZJR19EVExLIGlzIG5vdCBzZXQKIyBDT05GSUdfUjM5NjQgaXMgbm90
IHNldAojIENPTkZJR19BUFBMSUNPTSBpcyBub3Qgc2V0CgojCiMgRnRhcGUsIHRoZSBmbG9w
cHkgdGFwZSBkZXZpY2UgZHJpdmVyCiMKIyBDT05GSUdfRlRBUEUgaXMgbm90IHNldApDT05G
SUdfQUdQPXkKQ09ORklHX0FHUF9BTUQ2ND15CiMgQ09ORklHX0FHUF9JTlRFTF9NQ0ggaXMg
bm90IHNldApDT05GSUdfRFJNPXkKQ09ORklHX0RSTV9UREZYPW0KQ09ORklHX0RSTV9SMTI4
PW0KQ09ORklHX0RSTV9SQURFT049bQpDT05GSUdfRFJNX1NJUz1tCiMgQ09ORklHX01XQVZF
IGlzIG5vdCBzZXQKIyBDT05GSUdfUkFXX0RSSVZFUiBpcyBub3Qgc2V0CkNPTkZJR19IUEVU
PXkKIyBDT05GSUdfSFBFVF9SVENfSVJRIGlzIG5vdCBzZXQKQ09ORklHX0hQRVRfTU1BUD15
CiMgQ09ORklHX0hBTkdDSEVDS19USU1FUiBpcyBub3Qgc2V0CgojCiMgSTJDIHN1cHBvcnQK
IwpDT05GSUdfSTJDPXkKQ09ORklHX0kyQ19DSEFSREVWPXkKCiMKIyBJMkMgQWxnb3JpdGht
cwojCkNPTkZJR19JMkNfQUxHT0JJVD15CkNPTkZJR19JMkNfQUxHT1BDRj1tCiMgQ09ORklH
X0kyQ19BTEdPUENBIGlzIG5vdCBzZXQKCiMKIyBJMkMgSGFyZHdhcmUgQnVzIHN1cHBvcnQK
IwpDT05GSUdfSTJDX0FMSTE1MzU9bQpDT05GSUdfSTJDX0FMSTE1NjM9bQpDT05GSUdfSTJD
X0FMSTE1WDM9bQpDT05GSUdfSTJDX0FNRDc1Nj1tCkNPTkZJR19JMkNfQU1EODExMT1tCkNP
TkZJR19JMkNfSTgwMT1tCkNPTkZJR19JMkNfSTgxMD1tCkNPTkZJR19JMkNfSVNBPXkKQ09O
RklHX0kyQ19ORk9SQ0UyPW0KQ09ORklHX0kyQ19QQVJQT1JUPW0KIyBDT05GSUdfSTJDX1BB
UlBPUlRfTElHSFQgaXMgbm90IHNldApDT05GSUdfSTJDX1BST1NBVkFHRT1tCkNPTkZJR19J
MkNfU0FWQUdFND1tCkNPTkZJR19TQ3gyMDBfQUNCPW0KQ09ORklHX0kyQ19TSVM1NTk1PW0K
Q09ORklHX0kyQ19TSVM2MzA9bQpDT05GSUdfSTJDX1NJUzk2WD1tCkNPTkZJR19JMkNfVklB
PW0KQ09ORklHX0kyQ19WSUFQUk89bQpDT05GSUdfSTJDX1ZPT0RPTzM9bQojIENPTkZJR19J
MkNfUENBX0lTQSBpcyBub3Qgc2V0CgojCiMgSGFyZHdhcmUgU2Vuc29ycyBDaGlwIHN1cHBv
cnQKIwpDT05GSUdfSTJDX1NFTlNPUj1tCkNPTkZJR19TRU5TT1JTX0FETTEwMjE9bQojIENP
TkZJR19TRU5TT1JTX0FETTEwMjUgaXMgbm90IHNldAojIENPTkZJR19TRU5TT1JTX0FETTEw
MzEgaXMgbm90IHNldApDT05GSUdfU0VOU09SU19BU0IxMDA9bQpDT05GSUdfU0VOU09SU19E
UzE2MjE9bQpDT05GSUdfU0VOU09SU19GU0NIRVI9bQpDT05GSUdfU0VOU09SU19HTDUxOFNN
PW0KQ09ORklHX1NFTlNPUlNfSVQ4Nz1tCkNPTkZJR19TRU5TT1JTX0xNNzU9bQojIENPTkZJ
R19TRU5TT1JTX0xNNzcgaXMgbm90IHNldApDT05GSUdfU0VOU09SU19MTTc4PW0KQ09ORklH
X1NFTlNPUlNfTE04MD1tCkNPTkZJR19TRU5TT1JTX0xNODM9bQpDT05GSUdfU0VOU09SU19M
TTg1PW0KQ09ORklHX1NFTlNPUlNfTE05MD1tCkNPTkZJR19TRU5TT1JTX01BWDE2MTk9bQoj
IENPTkZJR19TRU5TT1JTX1NNU0M0N00xIGlzIG5vdCBzZXQKQ09ORklHX1NFTlNPUlNfVklB
Njg2QT1tCkNPTkZJR19TRU5TT1JTX1c4Mzc4MUQ9bQpDT05GSUdfU0VOU09SU19XODNMNzg1
VFM9bQpDT05GSUdfU0VOU09SU19XODM2MjdIRj1tCgojCiMgT3RoZXIgSTJDIENoaXAgc3Vw
cG9ydAojCkNPTkZJR19TRU5TT1JTX0VFUFJPTT1tCkNPTkZJR19TRU5TT1JTX1BDRjg1NzQ9
bQpDT05GSUdfU0VOU09SU19QQ0Y4NTkxPW0KQ09ORklHX1NFTlNPUlNfUlRDODU2ND1tCiMg
Q09ORklHX0kyQ19ERUJVR19DT1JFIGlzIG5vdCBzZXQKIyBDT05GSUdfSTJDX0RFQlVHX0FM
R08gaXMgbm90IHNldAojIENPTkZJR19JMkNfREVCVUdfQlVTIGlzIG5vdCBzZXQKIyBDT05G
SUdfSTJDX0RFQlVHX0NISVAgaXMgbm90IHNldAoKIwojIERhbGxhcydzIDEtd2lyZSBidXMK
IwojIENPTkZJR19XMSBpcyBub3Qgc2V0CgojCiMgTWlzYyBkZXZpY2VzCiMKIyBDT05GSUdf
SUJNX0FTTSBpcyBub3Qgc2V0CgojCiMgTXVsdGltZWRpYSBkZXZpY2VzCiMKQ09ORklHX1ZJ
REVPX0RFVj1tCgojCiMgVmlkZW8gRm9yIExpbnV4CiMKCiMKIyBWaWRlbyBBZGFwdGVycwoj
CkNPTkZJR19WSURFT19CVDg0OD1tCkNPTkZJR19WSURFT19CV1FDQU09bQpDT05GSUdfVklE
RU9fQ1FDQU09bQpDT05GSUdfVklERU9fVzk5NjY9bQpDT05GSUdfVklERU9fQ1BJQT1tCkNP
TkZJR19WSURFT19DUElBX1BQPW0KQ09ORklHX1ZJREVPX0NQSUFfVVNCPW0KQ09ORklHX1ZJ
REVPX1NBQTUyNDZBPW0KQ09ORklHX1ZJREVPX1NBQTUyNDk9bQpDT05GSUdfVFVORVJfMzAz
Nj1tCkNPTkZJR19WSURFT19TVFJBRElTPW0KQ09ORklHX1ZJREVPX1pPUkFOPW0KQ09ORklH
X1ZJREVPX1pPUkFOX0JVWj1tCkNPTkZJR19WSURFT19aT1JBTl9EQzEwPW0KQ09ORklHX1ZJ
REVPX1pPUkFOX0RDMzA9bQpDT05GSUdfVklERU9fWk9SQU5fTE1MMzM9bQpDT05GSUdfVklE
RU9fWk9SQU5fTE1MMzNSMTA9bQpDT05GSUdfVklERU9fU0FBNzEzND1tCkNPTkZJR19WSURF
T19NWEI9bQpDT05GSUdfVklERU9fRFBDPW0KQ09ORklHX1ZJREVPX0hFWElVTV9PUklPTj1t
CkNPTkZJR19WSURFT19IRVhJVU1fR0VNSU5JPW0KQ09ORklHX1ZJREVPX0NYODg9bQpDT05G
SUdfVklERU9fT1ZDQU1DSElQPW0KCiMKIyBSYWRpbyBBZGFwdGVycwojCiMgQ09ORklHX1JB
RElPX0dFTVRFS19QQ0kgaXMgbm90IHNldAojIENPTkZJR19SQURJT19NQVhJUkFESU8gaXMg
bm90IHNldAojIENPTkZJR19SQURJT19NQUVTVFJPIGlzIG5vdCBzZXQKCiMKIyBEaWdpdGFs
IFZpZGVvIEJyb2FkY2FzdGluZyBEZXZpY2VzCiMKIyBDT05GSUdfRFZCIGlzIG5vdCBzZXQK
Q09ORklHX1ZJREVPX1NBQTcxNDY9bQpDT05GSUdfVklERU9fU0FBNzE0Nl9WVj1tCkNPTkZJ
R19WSURFT19WSURFT0JVRj1tCkNPTkZJR19WSURFT19UVU5FUj1tCkNPTkZJR19WSURFT19C
VUY9bQpDT05GSUdfVklERU9fQlRDWD1tCkNPTkZJR19WSURFT19JUj1tCgojCiMgR3JhcGhp
Y3Mgc3VwcG9ydAojCkNPTkZJR19GQj15CkNPTkZJR19GQl9NT0RFX0hFTFBFUlM9eQojIENP
TkZJR19GQl9DSVJSVVMgaXMgbm90IHNldAojIENPTkZJR19GQl9QTTIgaXMgbm90IHNldAoj
IENPTkZJR19GQl9DWUJFUjIwMDAgaXMgbm90IHNldAojIENPTkZJR19GQl9BU0lMSUFOVCBp
cyBub3Qgc2V0CiMgQ09ORklHX0ZCX0lNU1RUIGlzIG5vdCBzZXQKIyBDT05GSUdfRkJfVkdB
MTYgaXMgbm90IHNldApDT05GSUdfRkJfVkVTQT15CkNPTkZJR19WSURFT19TRUxFQ1Q9eQoj
IENPTkZJR19GQl9IR0EgaXMgbm90IHNldAojIENPTkZJR19GQl9SSVZBIGlzIG5vdCBzZXQK
IyBDT05GSUdfRkJfTUFUUk9YIGlzIG5vdCBzZXQKIyBDT05GSUdfRkJfUkFERU9OX09MRCBp
cyBub3Qgc2V0CiMgQ09ORklHX0ZCX1JBREVPTiBpcyBub3Qgc2V0CiMgQ09ORklHX0ZCX0FU
WTEyOCBpcyBub3Qgc2V0CiMgQ09ORklHX0ZCX0FUWSBpcyBub3Qgc2V0CiMgQ09ORklHX0ZC
X1NJUyBpcyBub3Qgc2V0CiMgQ09ORklHX0ZCX05FT01BR0lDIGlzIG5vdCBzZXQKIyBDT05G
SUdfRkJfS1lSTyBpcyBub3Qgc2V0CiMgQ09ORklHX0ZCXzNERlggaXMgbm90IHNldAojIENP
TkZJR19GQl9WT09ET08xIGlzIG5vdCBzZXQKIyBDT05GSUdfRkJfVFJJREVOVCBpcyBub3Qg
c2V0CiMgQ09ORklHX0ZCX1ZJUlRVQUwgaXMgbm90IHNldAoKIwojIENvbnNvbGUgZGlzcGxh
eSBkcml2ZXIgc3VwcG9ydAojCkNPTkZJR19WR0FfQ09OU09MRT15CkNPTkZJR19EVU1NWV9D
T05TT0xFPXkKQ09ORklHX0ZSQU1FQlVGRkVSX0NPTlNPTEU9eQpDT05GSUdfRk9OVFM9eQoj
IENPTkZJR19GT05UXzh4OCBpcyBub3Qgc2V0CkNPTkZJR19GT05UXzh4MTY9eQojIENPTkZJ
R19GT05UXzZ4MTEgaXMgbm90IHNldAojIENPTkZJR19GT05UX1BFQVJMXzh4OCBpcyBub3Qg
c2V0CiMgQ09ORklHX0ZPTlRfQUNPUk5fOHg4IGlzIG5vdCBzZXQKIyBDT05GSUdfRk9OVF9N
SU5JXzR4NiBpcyBub3Qgc2V0CiMgQ09ORklHX0ZPTlRfU1VOOHgxNiBpcyBub3Qgc2V0CiMg
Q09ORklHX0ZPTlRfU1VOMTJ4MjIgaXMgbm90IHNldAoKIwojIExvZ28gY29uZmlndXJhdGlv
bgojCkNPTkZJR19MT0dPPXkKQ09ORklHX0xPR09fTElOVVhfTU9OTz15CkNPTkZJR19MT0dP
X0xJTlVYX1ZHQTE2PXkKQ09ORklHX0xPR09fTElOVVhfQ0xVVDIyND15CgojCiMgU291bmQK
IwpDT05GSUdfU09VTkQ9bQoKIwojIEFkdmFuY2VkIExpbnV4IFNvdW5kIEFyY2hpdGVjdHVy
ZQojCkNPTkZJR19TTkQ9bQpDT05GSUdfU05EX1RJTUVSPW0KQ09ORklHX1NORF9QQ009bQpD
T05GSUdfU05EX0hXREVQPW0KQ09ORklHX1NORF9SQVdNSURJPW0KQ09ORklHX1NORF9TRVFV
RU5DRVI9bQpDT05GSUdfU05EX1NFUV9EVU1NWT1tCkNPTkZJR19TTkRfT1NTRU1VTD15CkNP
TkZJR19TTkRfTUlYRVJfT1NTPW0KQ09ORklHX1NORF9QQ01fT1NTPW0KQ09ORklHX1NORF9T
RVFVRU5DRVJfT1NTPXkKQ09ORklHX1NORF9CSVQzMl9FTVVMPW0KQ09ORklHX1NORF9SVENU
SU1FUj1tCiMgQ09ORklHX1NORF9WRVJCT1NFX1BSSU5USyBpcyBub3Qgc2V0CiMgQ09ORklH
X1NORF9ERUJVRyBpcyBub3Qgc2V0CgojCiMgR2VuZXJpYyBkZXZpY2VzCiMKQ09ORklHX1NO
RF9NUFU0MDFfVUFSVD1tCkNPTkZJR19TTkRfRFVNTVk9bQpDT05GSUdfU05EX1ZJUk1JREk9
bQpDT05GSUdfU05EX01UUEFWPW0KQ09ORklHX1NORF9TRVJJQUxfVTE2NTUwPW0KQ09ORklH
X1NORF9NUFU0MDE9bQoKIwojIFBDSSBkZXZpY2VzCiMKQ09ORklHX1NORF9BQzk3X0NPREVD
PW0KQ09ORklHX1NORF9BTEk1NDUxPW0KIyBDT05GSUdfU05EX0FUSUlYUCBpcyBub3Qgc2V0
CiMgQ09ORklHX1NORF9BVElJWFBfTU9ERU0gaXMgbm90IHNldAojIENPTkZJR19TTkRfQVU4
ODEwIGlzIG5vdCBzZXQKIyBDT05GSUdfU05EX0FVODgyMCBpcyBub3Qgc2V0CiMgQ09ORklH
X1NORF9BVTg4MzAgaXMgbm90IHNldAojIENPTkZJR19TTkRfQVpUMzMyOCBpcyBub3Qgc2V0
CiMgQ09ORklHX1NORF9CVDg3WCBpcyBub3Qgc2V0CiMgQ09ORklHX1NORF9DUzQ2WFggaXMg
bm90IHNldAojIENPTkZJR19TTkRfQ1M0MjgxIGlzIG5vdCBzZXQKQ09ORklHX1NORF9FTVUx
MEsxPW0KIyBDT05GSUdfU05EX0tPUkcxMjEyIGlzIG5vdCBzZXQKIyBDT05GSUdfU05EX01J
WEFSVCBpcyBub3Qgc2V0CiMgQ09ORklHX1NORF9OTTI1NiBpcyBub3Qgc2V0CiMgQ09ORklH
X1NORF9STUUzMiBpcyBub3Qgc2V0CiMgQ09ORklHX1NORF9STUU5NiBpcyBub3Qgc2V0CiMg
Q09ORklHX1NORF9STUU5NjUyIGlzIG5vdCBzZXQKIyBDT05GSUdfU05EX0hEU1AgaXMgbm90
IHNldAojIENPTkZJR19TTkRfVFJJREVOVCBpcyBub3Qgc2V0CiMgQ09ORklHX1NORF9ZTUZQ
Q0kgaXMgbm90IHNldAojIENPTkZJR19TTkRfQUxTNDAwMCBpcyBub3Qgc2V0CiMgQ09ORklH
X1NORF9DTUlQQ0kgaXMgbm90IHNldAojIENPTkZJR19TTkRfRU5TMTM3MCBpcyBub3Qgc2V0
CiMgQ09ORklHX1NORF9FTlMxMzcxIGlzIG5vdCBzZXQKIyBDT05GSUdfU05EX0VTMTkzOCBp
cyBub3Qgc2V0CiMgQ09ORklHX1NORF9FUzE5NjggaXMgbm90IHNldAojIENPTkZJR19TTkRf
TUFFU1RSTzMgaXMgbm90IHNldAojIENPTkZJR19TTkRfRk04MDEgaXMgbm90IHNldAojIENP
TkZJR19TTkRfSUNFMTcxMiBpcyBub3Qgc2V0CiMgQ09ORklHX1NORF9JQ0UxNzI0IGlzIG5v
dCBzZXQKQ09ORklHX1NORF9JTlRFTDhYMD1tCiMgQ09ORklHX1NORF9JTlRFTDhYME0gaXMg
bm90IHNldAojIENPTkZJR19TTkRfU09OSUNWSUJFUyBpcyBub3Qgc2V0CiMgQ09ORklHX1NO
RF9WSUE4MlhYIGlzIG5vdCBzZXQKIyBDT05GSUdfU05EX1ZYMjIyIGlzIG5vdCBzZXQKCiMK
IyBBTFNBIFVTQiBkZXZpY2VzCiMKQ09ORklHX1NORF9VU0JfQVVESU89bQojIENPTkZJR19T
TkRfVVNCX1VTWDJZIGlzIG5vdCBzZXQKCiMKIyBPcGVuIFNvdW5kIFN5c3RlbQojCiMgQ09O
RklHX1NPVU5EX1BSSU1FIGlzIG5vdCBzZXQKCiMKIyBVU0Igc3VwcG9ydAojCkNPTkZJR19V
U0I9bQojIENPTkZJR19VU0JfREVCVUcgaXMgbm90IHNldAoKIwojIE1pc2NlbGxhbmVvdXMg
VVNCIG9wdGlvbnMKIwpDT05GSUdfVVNCX0RFVklDRUZTPXkKIyBDT05GSUdfVVNCX0JBTkRX
SURUSCBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9EWU5BTUlDX01JTk9SUyBpcyBub3Qgc2V0
CiMgQ09ORklHX1VTQl9TVVNQRU5EIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX09URyBpcyBu
b3Qgc2V0CgojCiMgVVNCIEhvc3QgQ29udHJvbGxlciBEcml2ZXJzCiMKQ09ORklHX1VTQl9F
SENJX0hDRD1tCiMgQ09ORklHX1VTQl9FSENJX1NQTElUX0lTTyBpcyBub3Qgc2V0CiMgQ09O
RklHX1VTQl9FSENJX1JPT1RfSFVCX1RUIGlzIG5vdCBzZXQKQ09ORklHX1VTQl9PSENJX0hD
RD1tCkNPTkZJR19VU0JfVUhDSV9IQ0Q9bQoKIwojIFVTQiBEZXZpY2UgQ2xhc3MgZHJpdmVy
cwojCkNPTkZJR19VU0JfQVVESU89bQpDT05GSUdfVVNCX0JMVUVUT09USF9UVFk9bQpDT05G
SUdfVVNCX01JREk9bQpDT05GSUdfVVNCX0FDTT1tCkNPTkZJR19VU0JfUFJJTlRFUj1tCkNP
TkZJR19VU0JfU1RPUkFHRT1tCiMgQ09ORklHX1VTQl9TVE9SQUdFX0RFQlVHIGlzIG5vdCBz
ZXQKIyBDT05GSUdfVVNCX1NUT1JBR0VfUldfREVURUNUIGlzIG5vdCBzZXQKIyBDT05GSUdf
VVNCX1NUT1JBR0VfREFUQUZBQiBpcyBub3Qgc2V0CkNPTkZJR19VU0JfU1RPUkFHRV9GUkVF
Q09NPXkKQ09ORklHX1VTQl9TVE9SQUdFX0lTRDIwMD15CkNPTkZJR19VU0JfU1RPUkFHRV9E
UENNPXkKIyBDT05GSUdfVVNCX1NUT1JBR0VfSFA4MjAwZSBpcyBub3Qgc2V0CiMgQ09ORklH
X1VTQl9TVE9SQUdFX1NERFIwOSBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TVE9SQUdFX1NE
RFI1NSBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TVE9SQUdFX0pVTVBTSE9UIGlzIG5vdCBz
ZXQKCiMKIyBVU0IgSHVtYW4gSW50ZXJmYWNlIERldmljZXMgKEhJRCkKIwpDT05GSUdfVVNC
X0hJRD1tCkNPTkZJR19VU0JfSElESU5QVVQ9eQojIENPTkZJR19ISURfRkYgaXMgbm90IHNl
dAojIENPTkZJR19VU0JfSElEREVWIGlzIG5vdCBzZXQKCiMKIyBVU0IgSElEIEJvb3QgUHJv
dG9jb2wgZHJpdmVycwojCkNPTkZJR19VU0JfS0JEPW0KQ09ORklHX1VTQl9NT1VTRT1tCiMg
Q09ORklHX1VTQl9BSVBURUsgaXMgbm90IHNldAojIENPTkZJR19VU0JfV0FDT00gaXMgbm90
IHNldAojIENPTkZJR19VU0JfS0JUQUIgaXMgbm90IHNldAojIENPTkZJR19VU0JfUE9XRVJN
QVRFIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX01UT1VDSCBpcyBub3Qgc2V0CiMgQ09ORklH
X1VTQl9FR0FMQVggaXMgbm90IHNldAojIENPTkZJR19VU0JfWFBBRCBpcyBub3Qgc2V0CiMg
Q09ORklHX1VTQl9BVElfUkVNT1RFIGlzIG5vdCBzZXQKCiMKIyBVU0IgSW1hZ2luZyBkZXZp
Y2VzCiMKIyBDT05GSUdfVVNCX01EQzgwMCBpcyBub3Qgc2V0CkNPTkZJR19VU0JfTUlDUk9U
RUs9bQojIENPTkZJR19VU0JfSFBVU0JTQ1NJIGlzIG5vdCBzZXQKCiMKIyBVU0IgTXVsdGlt
ZWRpYSBkZXZpY2VzCiMKQ09ORklHX1VTQl9EQUJVU0I9bQojIENPTkZJR19VU0JfVklDQU0g
aXMgbm90IHNldAojIENPTkZJR19VU0JfRFNCUiBpcyBub3Qgc2V0CkNPTkZJR19VU0JfSUJN
Q0FNPW0KQ09ORklHX1VTQl9LT05JQ0FXQz1tCkNPTkZJR19VU0JfT1Y1MTE9bQpDT05GSUdf
VVNCX1NFNDAxPW0KIyBDT05GSUdfVVNCX1NOOUMxMDIgaXMgbm90IHNldApDT05GSUdfVVNC
X1NUVjY4MD1tCiMgQ09ORklHX1VTQl9XOTk2OENGIGlzIG5vdCBzZXQKCiMKIyBVU0IgTmV0
d29yayBhZGFwdG9ycwojCiMgQ09ORklHX1VTQl9DQVRDIGlzIG5vdCBzZXQKIyBDT05GSUdf
VVNCX0tBV0VUSCBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9QRUdBU1VTIGlzIG5vdCBzZXQK
IyBDT05GSUdfVVNCX1JUTDgxNTAgaXMgbm90IHNldApDT05GSUdfVVNCX1VTQk5FVD1tCgoj
CiMgVVNCIEhvc3QtdG8tSG9zdCBDYWJsZXMKIwpDT05GSUdfVVNCX0FMSV9NNTYzMj15CkNP
TkZJR19VU0JfQU4yNzIwPXkKQ09ORklHX1VTQl9CRUxLSU49eQpDT05GSUdfVVNCX0dFTkVT
WVM9eQpDT05GSUdfVVNCX05FVDEwODA9eQpDT05GSUdfVVNCX1BMMjMwMT15CgojCiMgSW50
ZWxsaWdlbnQgVVNCIERldmljZXMvR2FkZ2V0cwojCkNPTkZJR19VU0JfQVJNTElOVVg9eQpD
T05GSUdfVVNCX0VQU09OMjg4OD15CkNPTkZJR19VU0JfWkFVUlVTPXkKQ09ORklHX1VTQl9D
RENFVEhFUj15CgojCiMgVVNCIE5ldHdvcmsgQWRhcHRlcnMKIwpDT05GSUdfVVNCX0FYODgx
N1g9eQoKIwojIFVTQiBwb3J0IGRyaXZlcnMKIwojIENPTkZJR19VU0JfVVNTNzIwIGlzIG5v
dCBzZXQKCiMKIyBVU0IgU2VyaWFsIENvbnZlcnRlciBzdXBwb3J0CiMKQ09ORklHX1VTQl9T
RVJJQUw9bQojIENPTkZJR19VU0JfU0VSSUFMX0dFTkVSSUMgaXMgbm90IHNldAojIENPTkZJ
R19VU0JfU0VSSUFMX0JFTEtJTiBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxfV0hJ
VEVIRUFUIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX1NFUklBTF9ESUdJX0FDQ0VMRVBPUlQg
aXMgbm90IHNldAojIENPTkZJR19VU0JfU0VSSUFMX0VNUEVHIGlzIG5vdCBzZXQKIyBDT05G
SUdfVVNCX1NFUklBTF9GVERJX1NJTyBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxf
VklTT1IgaXMgbm90IHNldApDT05GSUdfVVNCX1NFUklBTF9JUEFRPW0KIyBDT05GSUdfVVNC
X1NFUklBTF9JUiBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxfRURHRVBPUlQgaXMg
bm90IHNldAojIENPTkZJR19VU0JfU0VSSUFMX0VER0VQT1JUX1RJIGlzIG5vdCBzZXQKIyBD
T05GSUdfVVNCX1NFUklBTF9LRVlTUEFOX1BEQSBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9T
RVJJQUxfS0VZU1BBTiBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxfS0xTSSBpcyBu
b3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxfS09CSUxfU0NUIGlzIG5vdCBzZXQKIyBDT05G
SUdfVVNCX1NFUklBTF9NQ1RfVTIzMiBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxf
UEwyMzAzIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX1NFUklBTF9TQUZFIGlzIG5vdCBzZXQK
IyBDT05GSUdfVVNCX1NFUklBTF9DWUJFUkpBQ0sgaXMgbm90IHNldAojIENPTkZJR19VU0Jf
U0VSSUFMX1hJUkNPTSBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9TRVJJQUxfT01OSU5FVCBp
cyBub3Qgc2V0CgojCiMgVVNCIE1pc2NlbGxhbmVvdXMgZHJpdmVycwojCkNPTkZJR19VU0Jf
RU1JNjI9bQpDT05GSUdfVVNCX0VNSTI2PW0KIyBDT05GSUdfVVNCX1RJR0wgaXMgbm90IHNl
dAojIENPTkZJR19VU0JfQVVFUlNXQUxEIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX1JJTzUw
MCBpcyBub3Qgc2V0CiMgQ09ORklHX1VTQl9MRUdPVE9XRVIgaXMgbm90IHNldAojIENPTkZJ
R19VU0JfTENEIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX0xFRCBpcyBub3Qgc2V0CiMgQ09O
RklHX1VTQl9DWVRIRVJNIGlzIG5vdCBzZXQKIyBDT05GSUdfVVNCX1BISURHRVRTRVJWTyBp
cyBub3Qgc2V0CiMgQ09ORklHX1VTQl9URVNUIGlzIG5vdCBzZXQKCiMKIyBVU0IgR2FkZ2V0
IFN1cHBvcnQKIwojIENPTkZJR19VU0JfR0FER0VUIGlzIG5vdCBzZXQKCiMKIyBGaXJtd2Fy
ZSBEcml2ZXJzCiMKIyBDT05GSUdfRUREIGlzIG5vdCBzZXQKCiMKIyBGaWxlIHN5c3RlbXMK
IwpDT05GSUdfRVhUMl9GUz1tCkNPTkZJR19FWFQyX0ZTX1hBVFRSPXkKQ09ORklHX0VYVDJf
RlNfUE9TSVhfQUNMPXkKQ09ORklHX0VYVDJfRlNfU0VDVVJJVFk9eQpDT05GSUdfRVhUM19G
Uz1tCkNPTkZJR19FWFQzX0ZTX1hBVFRSPXkKQ09ORklHX0VYVDNfRlNfUE9TSVhfQUNMPXkK
Q09ORklHX0VYVDNfRlNfU0VDVVJJVFk9eQpDT05GSUdfSkJEPW0KIyBDT05GSUdfSkJEX0RF
QlVHIGlzIG5vdCBzZXQKQ09ORklHX0ZTX01CQ0FDSEU9bQpDT05GSUdfUkVJU0VSRlNfRlM9
eQojIENPTkZJR19SRUlTRVJGU19DSEVDSyBpcyBub3Qgc2V0CkNPTkZJR19SRUlTRVJGU19Q
Uk9DX0lORk89eQpDT05GSUdfUkVJU0VSRlNfRlNfWEFUVFI9eQpDT05GSUdfUkVJU0VSRlNf
RlNfUE9TSVhfQUNMPXkKIyBDT05GSUdfUkVJU0VSRlNfRlNfU0VDVVJJVFkgaXMgbm90IHNl
dAojIENPTkZJR19KRlNfRlMgaXMgbm90IHNldApDT05GSUdfRlNfUE9TSVhfQUNMPXkKQ09O
RklHX1hGU19GUz15CiMgQ09ORklHX1hGU19SVCBpcyBub3Qgc2V0CkNPTkZJR19YRlNfUVVP
VEE9eQpDT05GSUdfWEZTX1NFQ1VSSVRZPXkKQ09ORklHX1hGU19QT1NJWF9BQ0w9eQpDT05G
SUdfTUlOSVhfRlM9bQojIENPTkZJR19ST01GU19GUyBpcyBub3Qgc2V0CkNPTkZJR19RVU9U
QT15CkNPTkZJR19RRk1UX1YxPW0KQ09ORklHX1FGTVRfVjI9bQpDT05GSUdfUVVPVEFDVEw9
eQojIENPTkZJR19BVVRPRlNfRlMgaXMgbm90IHNldApDT05GSUdfQVVUT0ZTNF9GUz1tCgoj
CiMgQ0QtUk9NL0RWRCBGaWxlc3lzdGVtcwojCkNPTkZJR19JU085NjYwX0ZTPW0KQ09ORklH
X0pPTElFVD15CkNPTkZJR19aSVNPRlM9eQpDT05GSUdfWklTT0ZTX0ZTPW0KQ09ORklHX1VE
Rl9GUz1tCkNPTkZJR19VREZfTkxTPXkKCiMKIyBET1MvRkFUL05UIEZpbGVzeXN0ZW1zCiMK
Q09ORklHX0ZBVF9GUz1tCiMgQ09ORklHX01TRE9TX0ZTIGlzIG5vdCBzZXQKQ09ORklHX1ZG
QVRfRlM9bQpDT05GSUdfRkFUX0RFRkFVTFRfQ09ERVBBR0U9NDM3CkNPTkZJR19GQVRfREVG
QVVMVF9JT0NIQVJTRVQ9Imlzbzg4NTktMSIKIyBDT05GSUdfTlRGU19GUyBpcyBub3Qgc2V0
CgojCiMgUHNldWRvIGZpbGVzeXN0ZW1zCiMKQ09ORklHX1BST0NfRlM9eQpDT05GSUdfUFJP
Q19LQ09SRT15CkNPTkZJR19TWVNGUz15CkNPTkZJR19ERVZGU19GUz15CiMgQ09ORklHX0RF
VkZTX01PVU5UIGlzIG5vdCBzZXQKIyBDT05GSUdfREVWRlNfREVCVUcgaXMgbm90IHNldApD
T05GSUdfREVWUFRTX0ZTX1hBVFRSPXkKQ09ORklHX0RFVlBUU19GU19TRUNVUklUWT15CkNP
TkZJR19UTVBGUz15CkNPTkZJR19IVUdFVExCRlM9eQpDT05GSUdfSFVHRVRMQl9QQUdFPXkK
Q09ORklHX1JBTUZTPXkKCiMKIyBNaXNjZWxsYW5lb3VzIGZpbGVzeXN0ZW1zCiMKIyBDT05G
SUdfQURGU19GUyBpcyBub3Qgc2V0CiMgQ09ORklHX0FGRlNfRlMgaXMgbm90IHNldAojIENP
TkZJR19IRlNfRlMgaXMgbm90IHNldAojIENPTkZJR19IRlNQTFVTX0ZTIGlzIG5vdCBzZXQK
IyBDT05GSUdfQkVGU19GUyBpcyBub3Qgc2V0CiMgQ09ORklHX0JGU19GUyBpcyBub3Qgc2V0
CiMgQ09ORklHX0VGU19GUyBpcyBub3Qgc2V0CiMgQ09ORklHX0NSQU1GUyBpcyBub3Qgc2V0
CiMgQ09ORklHX1ZYRlNfRlMgaXMgbm90IHNldAojIENPTkZJR19IUEZTX0ZTIGlzIG5vdCBz
ZXQKIyBDT05GSUdfUU5YNEZTX0ZTIGlzIG5vdCBzZXQKIyBDT05GSUdfU1lTVl9GUyBpcyBu
b3Qgc2V0CiMgQ09ORklHX1VGU19GUyBpcyBub3Qgc2V0CgojCiMgTmV0d29yayBGaWxlIFN5
c3RlbXMKIwpDT05GSUdfTkZTX0ZTPXkKQ09ORklHX05GU19WMz15CiMgQ09ORklHX05GU19W
NCBpcyBub3Qgc2V0CiMgQ09ORklHX05GU19ESVJFQ1RJTyBpcyBub3Qgc2V0CkNPTkZJR19O
RlNEPXkKQ09ORklHX05GU0RfVjM9eQojIENPTkZJR19ORlNEX1Y0IGlzIG5vdCBzZXQKIyBD
T05GSUdfTkZTRF9UQ1AgaXMgbm90IHNldApDT05GSUdfTE9DS0Q9eQpDT05GSUdfTE9DS0Rf
VjQ9eQpDT05GSUdfRVhQT1JURlM9eQpDT05GSUdfU1VOUlBDPXkKIyBDT05GSUdfUlBDU0VD
X0dTU19LUkI1IGlzIG5vdCBzZXQKIyBDT05GSUdfUlBDU0VDX0dTU19TUEtNMyBpcyBub3Qg
c2V0CkNPTkZJR19TTUJfRlM9bQojIENPTkZJR19TTUJfTkxTX0RFRkFVTFQgaXMgbm90IHNl
dApDT05GSUdfQ0lGUz1tCkNPTkZJR19DSUZTX1NUQVRTPXkKIyBDT05GSUdfQ0lGU19YQVRU
UiBpcyBub3Qgc2V0CiMgQ09ORklHX0NJRlNfUE9TSVggaXMgbm90IHNldAojIENPTkZJR19O
Q1BfRlMgaXMgbm90IHNldApDT05GSUdfQ09EQV9GUz1tCiMgQ09ORklHX0NPREFfRlNfT0xE
X0FQSSBpcyBub3Qgc2V0CiMgQ09ORklHX0FGU19GUyBpcyBub3Qgc2V0CgojCiMgUGFydGl0
aW9uIFR5cGVzCiMKIyBDT05GSUdfUEFSVElUSU9OX0FEVkFOQ0VEIGlzIG5vdCBzZXQKQ09O
RklHX01TRE9TX1BBUlRJVElPTj15CgojCiMgTmF0aXZlIExhbmd1YWdlIFN1cHBvcnQKIwpD
T05GSUdfTkxTPXkKQ09ORklHX05MU19ERUZBVUxUPSJ1dGY4IgpDT05GSUdfTkxTX0NPREVQ
QUdFXzQzNz1tCiMgQ09ORklHX05MU19DT0RFUEFHRV83MzcgaXMgbm90IHNldAojIENPTkZJ
R19OTFNfQ09ERVBBR0VfNzc1IGlzIG5vdCBzZXQKIyBDT05GSUdfTkxTX0NPREVQQUdFXzg1
MCBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19DT0RFUEFHRV84NTIgaXMgbm90IHNldAojIENP
TkZJR19OTFNfQ09ERVBBR0VfODU1IGlzIG5vdCBzZXQKIyBDT05GSUdfTkxTX0NPREVQQUdF
Xzg1NyBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19DT0RFUEFHRV84NjAgaXMgbm90IHNldAoj
IENPTkZJR19OTFNfQ09ERVBBR0VfODYxIGlzIG5vdCBzZXQKIyBDT05GSUdfTkxTX0NPREVQ
QUdFXzg2MiBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19DT0RFUEFHRV84NjMgaXMgbm90IHNl
dAojIENPTkZJR19OTFNfQ09ERVBBR0VfODY0IGlzIG5vdCBzZXQKIyBDT05GSUdfTkxTX0NP
REVQQUdFXzg2NSBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19DT0RFUEFHRV84NjYgaXMgbm90
IHNldAojIENPTkZJR19OTFNfQ09ERVBBR0VfODY5IGlzIG5vdCBzZXQKIyBDT05GSUdfTkxT
X0NPREVQQUdFXzkzNiBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19DT0RFUEFHRV85NTAgaXMg
bm90IHNldAojIENPTkZJR19OTFNfQ09ERVBBR0VfOTMyIGlzIG5vdCBzZXQKIyBDT05GSUdf
TkxTX0NPREVQQUdFXzk0OSBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19DT0RFUEFHRV84NzQg
aXMgbm90IHNldAojIENPTkZJR19OTFNfSVNPODg1OV84IGlzIG5vdCBzZXQKIyBDT05GSUdf
TkxTX0NPREVQQUdFXzEyNTAgaXMgbm90IHNldAojIENPTkZJR19OTFNfQ09ERVBBR0VfMTI1
MSBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19BU0NJSSBpcyBub3Qgc2V0CkNPTkZJR19OTFNf
SVNPODg1OV8xPW0KIyBDT05GSUdfTkxTX0lTTzg4NTlfMiBpcyBub3Qgc2V0CiMgQ09ORklH
X05MU19JU084ODU5XzMgaXMgbm90IHNldAojIENPTkZJR19OTFNfSVNPODg1OV80IGlzIG5v
dCBzZXQKIyBDT05GSUdfTkxTX0lTTzg4NTlfNSBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19J
U084ODU5XzYgaXMgbm90IHNldAojIENPTkZJR19OTFNfSVNPODg1OV83IGlzIG5vdCBzZXQK
IyBDT05GSUdfTkxTX0lTTzg4NTlfOSBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19JU084ODU5
XzEzIGlzIG5vdCBzZXQKIyBDT05GSUdfTkxTX0lTTzg4NTlfMTQgaXMgbm90IHNldAojIENP
TkZJR19OTFNfSVNPODg1OV8xNSBpcyBub3Qgc2V0CiMgQ09ORklHX05MU19LT0k4X1IgaXMg
bm90IHNldAojIENPTkZJR19OTFNfS09JOF9VIGlzIG5vdCBzZXQKQ09ORklHX05MU19VVEY4
PW0KCiMKIyBQcm9maWxpbmcgc3VwcG9ydAojCiMgQ09ORklHX1BST0ZJTElORyBpcyBub3Qg
c2V0CgojCiMgS2VybmVsIGhhY2tpbmcKIwpDT05GSUdfREVCVUdfS0VSTkVMPXkKQ09ORklH
X01BR0lDX1NZU1JRPXkKIyBDT05GSUdfREVCVUdfU0xBQiBpcyBub3Qgc2V0CiMgQ09ORklH
X0RFQlVHX1NQSU5MT0NLIGlzIG5vdCBzZXQKIyBDT05GSUdfREVCVUdfU1BJTkxPQ0tfU0xF
RVAgaXMgbm90IHNldAojIENPTkZJR19ERUJVR19JTkZPIGlzIG5vdCBzZXQKIyBDT05GSUdf
Q0hFQ0tJTkcgaXMgbm90IHNldAojIENPTkZJR19JTklUX0RFQlVHIGlzIG5vdCBzZXQKIyBD
T05GSUdfU0NIRURTVEFUUyBpcyBub3Qgc2V0CiMgQ09ORklHX0lPTU1VX0RFQlVHIGlzIG5v
dCBzZXQKCiMKIyBTZWN1cml0eSBvcHRpb25zCiMKCiMKIyBQYVgKIwpDT05GSUdfUEFYPXkK
CiMKIyBQYVggQ29udHJvbAojCkNPTkZJR19QQVhfU09GVE1PREU9eQpDT05GSUdfUEFYX0VJ
X1BBWD15CkNPTkZJR19QQVhfUFRfUEFYX0ZMQUdTPXkKQ09ORklHX1BBWF9OT19BQ0xfRkxB
R1M9eQojIENPTkZJR19QQVhfSEFWRV9BQ0xfRkxBR1MgaXMgbm90IHNldAojIENPTkZJR19Q
QVhfSE9PS19BQ0xfRkxBR1MgaXMgbm90IHNldAoKIwojIE5vbi1leGVjdXRhYmxlIHBhZ2Vz
CiMKQ09ORklHX1BBWF9OT0VYRUM9eQpDT05GSUdfUEFYX1BBR0VFWEVDPXkKQ09ORklHX1BB
WF9NUFJPVEVDVD15CiMgQ09ORklHX1BBWF9OT0VMRlJFTE9DUyBpcyBub3Qgc2V0CgojCiMg
QWRkcmVzcyBTcGFjZSBMYXlvdXQgUmFuZG9taXphdGlvbgojCkNPTkZJR19QQVhfQVNMUj15
CkNPTkZJR19QQVhfUkFORFVTVEFDSz15CkNPTkZJR19QQVhfUkFORE1NQVA9eQojIENPTkZJ
R19QQVhfUkFOREVYRUMgaXMgbm90IHNldAojIENPTkZJR19TRUNVUklUWSBpcyBub3Qgc2V0
CgojCiMgQ3J5cHRvZ3JhcGhpYyBvcHRpb25zCiMKQ09ORklHX0NSWVBUTz15CkNPTkZJR19D
UllQVE9fSE1BQz15CkNPTkZJR19DUllQVE9fTlVMTD1tCkNPTkZJR19DUllQVE9fTUQ0PW0K
Q09ORklHX0NSWVBUT19NRDU9bQpDT05GSUdfQ1JZUFRPX1NIQTE9bQpDT05GSUdfQ1JZUFRP
X1NIQTI1Nj15CkNPTkZJR19DUllQVE9fU0hBNTEyPW0KQ09ORklHX0NSWVBUT19XUDUxMj1t
CkNPTkZJR19DUllQVE9fREVTPW0KQ09ORklHX0NSWVBUT19CTE9XRklTSD1tCkNPTkZJR19D
UllQVE9fVFdPRklTSD1tCkNPTkZJR19DUllQVE9fU0VSUEVOVD1tCkNPTkZJR19DUllQVE9f
QUVTPW0KQ09ORklHX0NSWVBUT19DQVNUNT1tCkNPTkZJR19DUllQVE9fQ0FTVDY9bQpDT05G
SUdfQ1JZUFRPX1RFQT1tCkNPTkZJR19DUllQVE9fQVJDND1tCkNPTkZJR19DUllQVE9fS0hB
WkFEPW0KQ09ORklHX0NSWVBUT19ERUZMQVRFPW0KQ09ORklHX0NSWVBUT19NSUNIQUVMX01J
Qz1tCkNPTkZJR19DUllQVE9fQ1JDMzJDPW0KIyBDT05GSUdfQ1JZUFRPX1RFU1QgaXMgbm90
IHNldAoKIwojIExpYnJhcnkgcm91dGluZXMKIwpDT05GSUdfQ1JDX0NDSVRUPW0KQ09ORklH
X0NSQzMyPW0KQ09ORklHX0xJQkNSQzMyQz1tCkNPTkZJR19aTElCX0lORkxBVEU9bQpDT05G
SUdfWkxJQl9ERUZMQVRFPW0K
--------------010108070807040701070208--
