Return-Path: <linux-kernel-owner+willy=40w.ods.org@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S264740AbTFQOXs (ORCPT <rfc822;willy@w.ods.org>);
	Tue, 17 Jun 2003 10:23:48 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S264738AbTFQOXr
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Tue, 17 Jun 2003 10:23:47 -0400
Received: from pub237.cambridge.redhat.com ([213.86.99.237]:13050 "EHLO
	warthog.warthog") by vger.kernel.org with ESMTP id S264751AbTFQOWw
	(ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Tue, 17 Jun 2003 10:22:52 -0400
From: David Howells <dhowells@redhat.com>
To: Linus Torvalds <torvalds@transmeta.com>
cc: Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: [PATCH] disentangle printk's whilst oopsing on SMP
User-Agent: EMH/1.14.1 SEMI/1.14.4 (Hosorogi) FLIM/1.14.4
 (=?ISO-8859-4?Q?Kashiharajing=FE-mae?=) APEL/10.4 Emacs/21.2
 (i386-redhat-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.4 - "Hosorogi")
Content-Type: text/plain; charset=US-ASCII
Date: Tue, 17 Jun 2003 15:36:43 +0100
Message-ID: <6452.1055860603@warthog.warthog>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


Hi Linus,

The attached patch stops printk's issued on different processors from becoming
char-by-char interleaved whilst one of them is oopsing.

David

diff -uNr linux-2.5.72/kernel/printk.c linux-2.5.72-auto/kernel/printk.c
--- linux-2.5.72/kernel/printk.c	2003-06-17 15:01:58.000000000 +0100
+++ linux-2.5.72-auto/kernel/printk.c	2003-06-17 15:06:31.000000000 +0100
@@ -373,6 +373,9 @@
 		logged_chars++;
 }
 
+/* cpu currently holding logbuf_lock */
+static volatile int printk_cpu = -1;
+
 /*
  * This is printk.  It can be called from any context.  We want it to work.
  * 
@@ -395,8 +398,9 @@
 	static char printk_buf[1024];
 	static int log_level_unknown = 1;
 
-	if (oops_in_progress) {
-		/* If a crash is occurring, make sure we can't deadlock */
+	if (oops_in_progress && printk_cpu==smp_processor_id()) {
+		/* If a crash is occurring during printk() on this CPU,
+		 * make sure we can't deadlock */
 		spin_lock_init(&logbuf_lock);
 		/* And make sure that we print immediately */
 		init_MUTEX(&console_sem);
@@ -404,6 +408,7 @@
 
 	/* This stops the holder of console_sem just where we want him */
 	spin_lock_irqsave(&logbuf_lock, flags);
+	printk_cpu = smp_processor_id();
 
 	/* Emit the output into the temporary buffer */
 	va_start(args, fmt);
