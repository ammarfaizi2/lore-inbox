Return-Path: <linux-kernel-owner+willy=40w.ods.org@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261314AbTJCVrJ (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 3 Oct 2003 17:47:09 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261321AbTJCVrI
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 3 Oct 2003 17:47:08 -0400
Received: from fmr01.intel.com ([192.55.52.18]:41903 "EHLO hermes.fm.intel.com")
	by vger.kernel.org with ESMTP id S261314AbTJCVqi (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Fri, 3 Oct 2003 17:46:38 -0400
content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----_=_NextPart_001_01C389F7.CFD6E55E"
X-MimeOLE: Produced By Microsoft Exchange V6.0.6487.1
Subject: [updated patch] for efi support in ia32 kernels
Date: Fri, 3 Oct 2003 14:46:33 -0700
Message-ID: <D36CE1FCEFD3524B81CA12C6FE5BCAB002FFE713@fmsmsx406.fm.intel.com>
X-MS-Has-Attach: yes
X-MS-TNEF-Correlator: 
Thread-Topic: [updated patch] for efi support in ia32 kernels
Thread-Index: AcOJ982387JieVGzScu44AqK+2nXCQ==
From: "Tolentino, Matthew E" <matthew.e.tolentino@intel.com>
To: <akpm@osdl.org>, <ebiederm@xmission.com>
Cc: <linux-kernel@vger.kernel.org>
X-OriginalArrivalTime: 03 Oct 2003 21:46:34.0080 (UTC) FILETIME=[D047CE00:01C389F7]
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

This is a multi-part message in MIME format.

------_=_NextPart_001_01C389F7.CFD6E55E
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Attached is another patch that enables EFI boot-up support in ia32 =
kernels.  This one has numerous changes based on the various comments =
and suggestions made on the last one several weeks ago.  The patch is =
against 2.6.0-test6-mm2. =20

This patch departs from the last in that I am no longer adding separate =
boot parameters at the end of the the empty_zero_page; rather, based on =
Eric's suggestion, I've added EFI parameters via offset grouped with the =
rest of the existing boot parameters.  This allows the reuse of several =
parameters which were redundant (command-line, initrd, etc.).  This also =
simplifies some of the code in setup_arch(). =20

In order to continue to determine whether the kernel should initialize =
using EFI tables, I've temporarily added a check on the LOADER_TYPE boot =
parameter.  Although I haven't requested that elilo be assigned an id =
for this yet, I've used this to determine whether the kernel should use =
the EFI initialization path as well as a check to see if the EFI_SYSTAB =
boot parameter contains anything.  If someone has a better suggestion =
for determining this, I'm open...

This patch also uses the existing ioremapping functions to map the efi =
tables into kernel virtual address space.  I've added an option such =
that I could use Dave Hansen's boot_ioremap() before paging_init().  =
After paging_init, I then remap the efi memmap using bt_ioremap for use =
later.  This has eliminated the need for several functions...thanks for =
the suggestions and thanks for your help Dave.  Still this could use a =
look-see. =20

Something else that I'd like to solicit suggestions on is how to deal =
with CONFIG_ACPI_EFI.  One of the goals of this patch is to enable the =
kernel to "just know" at boot time when to use EFI information to =
initialize.  That way, the same kernel image would theoretically still =
boot on existing systems with a different BIOS.  I think this patch =
accomplishes that goal to some degree, but how best to deal with =
when/when not to look at the EFI config table for the RSDP is still =
dealt with at compile time.  I'd like to dynamically determine this as =
well, but am not sure of the best way...suggestions?  Len? Andrew?

Note, I'm still working on verifying this works properly on a system =
with >4GB system memory, as well as with the 4G/4G split (hence the =
reason this is against the -mm kernel)...hopefully, I'll be able to =
steal some time on one of those monsters next week.

Comments and suggestions are welcome...

thanks,
matt



=20





=20

------_=_NextPart_001_01C389F7.CFD6E55E
Content-Type: application/octet-stream;
	name="linux-2.6.0-test6-mm2-efi.patch"
Content-Transfer-Encoding: base64
Content-Description: linux-2.6.0-test6-mm2-efi.patch
Content-Disposition: attachment;
	filename="linux-2.6.0-test6-mm2-efi.patch"

ZGlmZiAtdXJOIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi9hcmNoL2kzODYvS2NvbmZpZyBsaW51eC0y
LjYuMC10ZXN0Ni1tbTItZWZpL2FyY2gvaTM4Ni9LY29uZmlnCi0tLSBsaW51eC0yLjYuMC10ZXN0
Ni1tbTIvYXJjaC9pMzg2L0tjb25maWcJMjAwMy0xMC0wMyAxMTo1MDo0NC4wMDAwMDAwMDAgLTA3
MDAKKysrIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi1lZmkvYXJjaC9pMzg2L0tjb25maWcJMjAwMy0x
MC0wMyAxMDoxMDo0MC4wMDAwMDAwMDAgLTA3MDAKQEAgLTg0MCw4ICs4NDAsOSBAQAogIyB0dXJu
aW5nIHRoaXMgb24gd2FzdGVzIGEgYnVuY2ggb2Ygc3BhY2UuCiAjIFN1bW1pdCBuZWVkcyBpdCBv
bmx5IHdoZW4gTlVNQSBpcyBvbgogY29uZmlnIEJPT1RfSU9SRU1BUAotCWJvb2wKLQlkZXBlbmRz
IG9uICgoWDg2X1NVTU1JVCB8fCBYODZfR0VORVJJQ0FSQ0gpICYmIE5VTUEpCisJYm9vbCAKKwlk
ZXBlbmRzIG9uICgoKFg4Nl9TVU1NSVQgfHwgWDg2X0dFTkVSSUNBUkNIKSAmJiBOVU1BKSkgfHwg
WDg2X0dFTkVSSUNBUkNICiAJZGVmYXVsdCB5CiAKIGVuZG1lbnUKZGlmZiAtdXJOIGxpbnV4LTIu
Ni4wLXRlc3Q2LW1tMi9hcmNoL2kzODYva2VybmVsL2FjcGkvYm9vdC5jIGxpbnV4LTIuNi4wLXRl
c3Q2LW1tMi1lZmkvYXJjaC9pMzg2L2tlcm5lbC9hY3BpL2Jvb3QuYwotLS0gbGludXgtMi42LjAt
dGVzdDYtbW0yL2FyY2gvaTM4Ni9rZXJuZWwvYWNwaS9ib290LmMJMjAwMy0xMC0wMyAxMTo1MDo0
NC4wMDAwMDAwMDAgLTA3MDAKKysrIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi1lZmkvYXJjaC9pMzg2
L2tlcm5lbC9hY3BpL2Jvb3QuYwkyMDAzLTEwLTAzIDEwOjEwOjQwLjAwMDAwMDAwMCAtMDcwMApA
QCAtMjYsNiArMjYsNyBAQAogI2luY2x1ZGUgPGxpbnV4L2luaXQuaD4KICNpbmNsdWRlIDxsaW51
eC9jb25maWcuaD4KICNpbmNsdWRlIDxsaW51eC9hY3BpLmg+CisjaW5jbHVkZSA8bGludXgvZWZp
Lmg+CiAjaW5jbHVkZSA8YXNtL3BnYWxsb2MuaD4KICNpbmNsdWRlIDxhc20vaW9fYXBpYy5oPgog
I2luY2x1ZGUgPGFzbS9hcGljLmg+CkBAIC0yOTUsNyArMjk2LDExIEBACiBhY3BpX2ZpbmRfcnNk
cCAodm9pZCkKIHsKIAl1bnNpZ25lZCBsb25nCQlyc2RwX3BoeXMgPSAwOwotCisJCisJaWYgKGVm
aS5hY3BpMjApCisJCXJldHVybiBfX3BhKGVmaS5hY3BpMjApOworCWVsc2UgaWYgKGVmaS5hY3Bp
KQorCQlyZXR1cm4gX19wYShlZmkuYWNwaSk7CiAJLyoKIAkgKiBTY2FuIG1lbW9yeSBsb29raW5n
IGZvciB0aGUgUlNEUCBzaWduYXR1cmUuIEZpcnN0IHNlYXJjaCBFQkRBIChsb3cKIAkgKiBtZW1v
cnkpIHBhcmFncmFwaHMgYW5kIHRoZW4gc2VhcmNoIHVwcGVyIG1lbW9yeSAoRTAwMDAtRkZGRkYp
LgpkaWZmIC11ck4gbGludXgtMi42LjAtdGVzdDYtbW0yL2FyY2gvaTM4Ni9rZXJuZWwvZWZpLmMg
bGludXgtMi42LjAtdGVzdDYtbW0yLWVmaS9hcmNoL2kzODYva2VybmVsL2VmaS5jCi0tLSBsaW51
eC0yLjYuMC10ZXN0Ni1tbTIvYXJjaC9pMzg2L2tlcm5lbC9lZmkuYwkxOTY5LTEyLTMxIDE2OjAw
OjAwLjAwMDAwMDAwMCAtMDgwMAorKysgbGludXgtMi42LjAtdGVzdDYtbW0yLWVmaS9hcmNoL2kz
ODYva2VybmVsL2VmaS5jCTIwMDMtMTAtMDMgMTE6NDQ6NDUuMDAwMDAwMDAwIC0wNzAwCkBAIC0w
LDAgKzEsNjA2IEBACisvKgorICogRXh0ZW5zaWJsZSBGaXJtd2FyZSBJbnRlcmZhY2UKKyAqCisg
KiBCYXNlZCBvbiBFeHRlbnNpYmxlIEZpcm13YXJlIEludGVyZmFjZSBTcGVjaWZpY2F0aW9uIHZl
cnNpb24gMS4wIAorICoKKyAqIENvcHlyaWdodCAoQykgMTk5OSBWQSBMaW51eCBTeXN0ZW1zCisg
KiBDb3B5cmlnaHQgKEMpIDE5OTkgV2FsdCBEcnVtbW9uZCA8ZHJ1bW1vbmRAdmFsaW51eC5jb20+
CisgKiBDb3B5cmlnaHQgKEMpIDE5OTktMjAwMiBIZXdsZXR0LVBhY2thcmQgQ28uCisgKglEYXZp
ZCBNb3NiZXJnZXItVGFuZyA8ZGF2aWRtQGhwbC5ocC5jb20+CisgKglTdGVwaGFuZSBFcmFuaWFu
IDxlcmFuaWFuQGhwbC5ocC5jb20+CisgKgorICogQWxsIEVGSSBSdW50aW1lIFNlcnZpY2VzIGFy
ZSBub3QgaW1wbGVtZW50ZWQgeWV0IGFzIEVGSSBvbmx5CisgKiBzdXBwb3J0cyBwaHlzaWNhbCBt
b2RlIGFkZHJlc3Npbmcgb24gU29mdFNEVi4gVGhpcyBpcyB0byBiZSBmaXhlZAorICogaW4gYSBm
dXR1cmUgdmVyc2lvbi4gIC0tZHJ1bW1vbmQgMTk5OS0wNy0yMAorICoKKyAqIEltcGxlbWVudGVk
IEVGSSBydW50aW1lIHNlcnZpY2VzIGFuZCB2aXJ0dWFsIG1vZGUgY2FsbHMuICAtLWRhdmlkbQor
ICoKKyAqIEdvdXRoYW0gUmFvOiA8Z291dGhhbS5yYW9AaW50ZWwuY29tPgorICoJU2tpcCBub24t
V0IgbWVtb3J5IGFuZCBpZ25vcmUgZW1wdHkgbWVtb3J5IHJhbmdlcy4KKyAqLworCisjaW5jbHVk
ZSA8bGludXgvY29uZmlnLmg+CisjaW5jbHVkZSA8bGludXgva2VybmVsLmg+CisjaW5jbHVkZSA8
bGludXgvaW5pdC5oPgorI2luY2x1ZGUgPGxpbnV4L21tLmg+CisjaW5jbHVkZSA8bGludXgvdHlw
ZXMuaD4KKyNpbmNsdWRlIDxsaW51eC90aW1lLmg+CisjaW5jbHVkZSA8bGludXgvc3BpbmxvY2su
aD4KKyNpbmNsdWRlIDxsaW51eC9ib290bWVtLmg+CisjaW5jbHVkZSA8bGludXgvaW9wb3J0Lmg+
CisjaW5jbHVkZSA8bGludXgvcHJvY19mcy5oPgorI2luY2x1ZGUgPGxpbnV4L2VmaS5oPgorCisj
aW5jbHVkZSA8YXNtL3NldHVwLmg+CisjaW5jbHVkZSA8YXNtL2lvLmg+CisjaW5jbHVkZSA8YXNt
L3BhZ2UuaD4KKyNpbmNsdWRlIDxhc20vcGd0YWJsZS5oPgorI2luY2x1ZGUgPGFzbS9wcm9jZXNz
b3IuaD4KKyNpbmNsdWRlIDxhc20vZGVzYy5oPgorI2luY2x1ZGUgPGFzbS9wZ2FsbG9jLmg+Cisj
aW5jbHVkZSA8YXNtL3RsYmZsdXNoLmg+CisKKyNkZWZpbmUgRUZJX0RFQlVHCTAKKyNkZWZpbmUg
UEZYIAkJIkVGSTogIgorCitleHRlcm4gZWZpX3N0YXR1c190IGFzbWxpbmthZ2UgZWZpX2NhbGxf
cGh5cyh2b2lkICosIC4uLik7CisKK3N0cnVjdCBlZmkgZWZpOworc3RydWN0IGVmaSBlZmlfcGh5
cyBfX2luaXRkYXRhOworc3RydWN0IGVmaV9tZW1vcnlfbWFwIG1lbW1hcCBfX2luaXRkYXRhOwor
CisvKiAKKyAqIFdlIHJlcXVpcmUgYW4gZWFybHkgYm9vdF9pb3JlbWFwIG1hcHBpbmcgbWVjaGFu
aXNtIGluaXRpYWxseSAKKyAqLworZXh0ZXJuIHZvaWQgKiBib290X2lvcmVtYXAodW5zaWduZWQg
bG9uZywgdW5zaWduZWQgbG9uZyk7CisKKy8qCisgKiBlZmlfZGlyIGlzIGFsbG9jYXRlZCBoZXJl
LCBidXQgdGhlIGRpcmVjdG9yeSBpc24ndCBjcmVhdGVkIAorICogaGVyZSwgYXMgcHJvY19ta2Rp
cigpIGRvZXNuJ3Qgd29yayB0aGlzIGVhcmx5IGluIHRoZSBib290dXAKKyAqIHByb2Nlc3MuICBU
aGVyZWZvcmUsIGVhY2ggbW9kdWxlLCBsaWtlIGVmaXZhcnMsIG11c3QgdGVzdCBmb3IKKyAqICAg
IGlmICghZWZpX2RpcikgZWZpX2RpciA9IHByb2NfbWtkaXIoImVmaSIsIE5VTEwpOworICogcHJp
b3IgdG8gY3JlYXRpbmcgdGhlaXIgb3duIGVudHJpZXMgdW5kZXIgL3Byb2MvZWZpLgorICovCisj
aWZkZWYgQ09ORklHX1BST0NfRlMKK3N0cnVjdCBwcm9jX2Rpcl9lbnRyeSAqZWZpX2RpcjsKKyNl
bmRpZgorCisKKy8qCisgKiBUbyBtYWtlIEVGSSBjYWxsIEVGSSBydW50aW1lIHNlcnZpY2UgaW4g
cGh5c2ljYWwgYWRkcmVzc2luZyBtb2RlIHdlIG5lZWQKKyAqIHByZWxvZy9lcGlsb2cgYmVmb3Jl
L2FmdGVyIHRoZSBpbnZvY2F0aW9uIHRvIGRpc2FibGUgaW50ZXJydXB0LCB0byAKKyAqIGNsYWlt
IEVGSSBydW50aW1lIHNlcnZpY2UgaGFuZGxlciBleGNsdXNpdmVseSBhbmQgdG8gZHVwbGljYXRl
IGEgbWVtb3J5IGluCisgKiBsb3cgbWVtb3J5IHNwYWNlIHNheSAwIC0gM0cuCisgKi8KKworc3Rh
dGljIHVuc2lnbmVkIGxvbmcgZWZpX3J0X2VmbGFnczsKK3N0YXRpYyBzcGlubG9ja190IGVmaV9y
dF9sb2NrID0gU1BJTl9MT0NLX1VOTE9DS0VEOworc3RhdGljIHBnZF90IGVmaV9iYWtfcGdfZGly
X3BvaW50ZXJbMl07CisKK3N0YXRpYyB2b2lkIGVmaV9jYWxsX3BoeXNfcHJlbG9nKHZvaWQpCit7
CisJdW5zaWduZWQgbG9uZyBjcjQ7CisJdW5zaWduZWQgbG9uZyB0ZW1wOworCisJc3Bpbl9sb2Nr
KCZlZmlfcnRfbG9jayk7CisJbG9jYWxfaXJxX3NhdmUoZWZpX3J0X2VmbGFncyk7CisJCisJLyoK
KwkgKiBJZiBJIGRvbid0IGhhdmUgUFNFLCBJIHNob3VsZCBqdXN0IGR1cGxpY2F0ZSB0d28gZW50
cmllcyBpbiBwYWdlCisJICogZGlyZWN0b3J5LiBJZiBJIGhhdmUgUFNFLCBJIGp1c3QgbmVlZCB0
byBkdXBsaWNhdGUgb25lIGVudHJ5IGluCisJICogcGFnZSBkaXJlY3RvcnkuCisJICovCisJX19h
c21fXyBfX3ZvbGF0aWxlX18oIm1vdmwgJSVjcjQsICUwIjoiPXIiKGNyNCkpOworCisJaWYgKGNy
NCAmIFg4Nl9DUjRfUFNFKSB7CisJCWVmaV9iYWtfcGdfZGlyX3BvaW50ZXJbMF0ucGdkID0KKwkJ
ICAgIHN3YXBwZXJfcGdfZGlyW3BnZF9pbmRleCgwKV0ucGdkOworCQlzd2FwcGVyX3BnX2Rpclsw
XS5wZ2QgPQorCQkgICAgc3dhcHBlcl9wZ19kaXJbcGdkX2luZGV4KFBBR0VfT0ZGU0VUKV0ucGdk
OworCX0gZWxzZSB7CisJCWVmaV9iYWtfcGdfZGlyX3BvaW50ZXJbMF0ucGdkID0KKwkJICAgIHN3
YXBwZXJfcGdfZGlyW3BnZF9pbmRleCgwKV0ucGdkOworCQllZmlfYmFrX3BnX2Rpcl9wb2ludGVy
WzFdLnBnZCA9CisJCSAgICBzd2FwcGVyX3BnX2RpcltwZ2RfaW5kZXgoMHg0MDAwMDApXS5wZ2Q7
CisJCXN3YXBwZXJfcGdfZGlyW3BnZF9pbmRleCgwKV0ucGdkID0KKwkJICAgIHN3YXBwZXJfcGdf
ZGlyW3BnZF9pbmRleChQQUdFX09GRlNFVCldLnBnZDsKKwkJdGVtcCA9IFBBR0VfT0ZGU0VUICsg
MHg0MDAwMDA7CisJCXN3YXBwZXJfcGdfZGlyW3BnZF9pbmRleCgweDQwMDAwMCldLnBnZCA9CisJ
CSAgICBzd2FwcGVyX3BnX2RpcltwZ2RfaW5kZXgodGVtcCldLnBnZDsKKwl9CisKKwkvKgorCSAq
IEFmdGVyIHRoZSBsb2NrIGlzIHJlbGVhc2VkLCB0aGUgb3JpZ2luYWwgcGFnZSB0YWJsZSBpcyBy
ZXN0b3JlZC4KKwkgKi8KKwlsb2NhbF9mbHVzaF90bGIoKTsKKworCWNwdV9nZHRfZGVzY3JbMF0u
YWRkcmVzcyA9IF9fcGEoY3B1X2dkdF9kZXNjclswXS5hZGRyZXNzKTsKKwlfX2FzbV9fIF9fdm9s
YXRpbGVfXygibGdkdCAlMCI6Ij1tIgorCQkJICAgICgqKHN0cnVjdCBYZ3RfZGVzY19zdHJ1Y3Qg
KikgX19wYSgmY3B1X2dkdF9kZXNjclswXSkpKTsKK30KKworc3RhdGljIHZvaWQgZWZpX2NhbGxf
cGh5c19lcGlsb2codm9pZCkKK3sKKwl1bnNpZ25lZCBsb25nIGNyNDsKKworCWNwdV9nZHRfZGVz
Y3JbMF0uYWRkcmVzcyA9IAorCQkodW5zaWduZWQgbG9uZykgX192YShjcHVfZ2R0X2Rlc2NyWzBd
LmFkZHJlc3MpOworCV9fYXNtX18gX192b2xhdGlsZV9fKCJsZ2R0ICUwIjoiPW0iKGNwdV9nZHRf
ZGVzY3IpKTsKKwlfX2FzbV9fIF9fdm9sYXRpbGVfXygibW92bCAlJWNyNCwgJTAiOiI9ciIoY3I0
KSk7CisKKwlpZiAoY3I0ICYgWDg2X0NSNF9QU0UpIHsKKwkJc3dhcHBlcl9wZ19kaXJbcGdkX2lu
ZGV4KDApXS5wZ2QgPQorCQkgICAgZWZpX2Jha19wZ19kaXJfcG9pbnRlclswXS5wZ2Q7CisJfSBl
bHNlIHsKKwkJc3dhcHBlcl9wZ19kaXJbcGdkX2luZGV4KDApXS5wZ2QgPQorCQkgICAgZWZpX2Jh
a19wZ19kaXJfcG9pbnRlclswXS5wZ2Q7CisJCXN3YXBwZXJfcGdfZGlyW3BnZF9pbmRleCgweDQw
MDAwMCldLnBnZCA9CisJCSAgICBlZmlfYmFrX3BnX2Rpcl9wb2ludGVyWzFdLnBnZDsKKwl9CisK
KwkvKgorCSAqIEFmdGVyIHRoZSBsb2NrIGlzIHJlbGVhc2VkLCB0aGUgb3JpZ2luYWwgcGFnZSB0
YWJsZSBpcyByZXN0b3JlZC4KKwkgKi8KKwlsb2NhbF9mbHVzaF90bGIoKTsKKworCWxvY2FsX2ly
cV9yZXN0b3JlKGVmaV9ydF9lZmxhZ3MpOworCXNwaW5fdW5sb2NrKCZlZmlfcnRfbG9jayk7Cit9
CisKK3N0YXRpYyBlZmlfc3RhdHVzX3QgCitwaHlzX2VmaV9zZXRfdmlydHVhbF9hZGRyZXNzX21h
cCh1bnNpZ25lZCBsb25nIG1lbW9yeV9tYXBfc2l6ZSwgCisJCQkJIHVuc2lnbmVkIGxvbmcgZGVz
Y3JpcHRvcl9zaXplLAorCQkJCSB1MzIgZGVzY3JpcHRvcl92ZXJzaW9uLCAKKwkJCQkgZWZpX21l
bW9yeV9kZXNjX3QgKnZpcnR1YWxfbWFwKQoreworCWVmaV9zdGF0dXNfdCBzdGF0dXM7CisJCisJ
ZWZpX2NhbGxfcGh5c19wcmVsb2coKTsKKwlzdGF0dXMgPSBlZmlfY2FsbF9waHlzKGVmaV9waHlz
LnNldF92aXJ0dWFsX2FkZHJlc3NfbWFwLCAKKwkJCQkgICAgIG1lbW9yeV9tYXBfc2l6ZSwgZGVz
Y3JpcHRvcl9zaXplLAorCQkJCSAgICAgZGVzY3JpcHRvcl92ZXJzaW9uLCB2aXJ0dWFsX21hcCk7
CisJZWZpX2NhbGxfcGh5c19lcGlsb2coKTsKKwlyZXR1cm4gc3RhdHVzOworfQorCitlZmlfc3Rh
dHVzX3QgCitwaHlzX2VmaV9nZXRfdGltZShlZmlfdGltZV90ICp0bSwgZWZpX3RpbWVfY2FwX3Qg
KnRjKQoreworCWVmaV9zdGF0dXNfdCBzdGF0dXM7CisKKwllZmlfY2FsbF9waHlzX3ByZWxvZygp
OworCXN0YXR1cyA9IGVmaV9jYWxsX3BoeXMoZWZpX3BoeXMuZ2V0X3RpbWUsIHRtLCB0Yyk7CisJ
ZWZpX2NhbGxfcGh5c19lcGlsb2coKTsKKwlyZXR1cm4gc3RhdHVzOyAKK30KKwordm9pZCBlZmlf
Z2V0dGltZW9mZGF5KHN0cnVjdCB0aW1lc3BlYyAqdHYpCit7CisJZWZpX3RpbWVfdCB0bTsKKwor
CW1lbXNldCh0diwgMCwgc2l6ZW9mKCp0dikpOworCWlmICgoKmVmaS5nZXRfdGltZSkgKCZ0bSwg
MCkgIT0gRUZJX1NVQ0NFU1MpCisJCXJldHVybjsKKworCXR2LT50dl9zZWMgPSBta3RpbWUodG0u
eWVhciwgdG0ubW9udGgsIHRtLmRheSwgdG0uaG91ciwgdG0ubWludXRlLAorCQkgICAgICAgICAg
ICB0bS5zZWNvbmQpOworCXR2LT50dl9uc2VjID0gdG0ubmFub3NlY29uZDsKK30KKworaW50IGlz
X2F2YWlsYWJsZV9tZW1vcnkoZWZpX21lbW9yeV9kZXNjX3QgKiBtZCkKK3sKKwlpZiAoIShtZC0+
YXR0cmlidXRlICYgRUZJX01FTU9SWV9XQikpCisJCXJldHVybiAwOworCisJc3dpdGNoIChtZC0+
dHlwZSkgeworCQljYXNlIEVGSV9MT0FERVJfQ09ERToKKwkJY2FzZSBFRklfTE9BREVSX0RBVEE6
CisJCWNhc2UgRUZJX0JPT1RfU0VSVklDRVNfQ09ERToKKwkJY2FzZSBFRklfQk9PVF9TRVJWSUNF
U19EQVRBOgorCQljYXNlIEVGSV9DT05WRU5USU9OQUxfTUVNT1JZOgorCQkJcmV0dXJuIDE7CisJ
fQorCXJldHVybiAwOworfQorCisvKiAKKyAqIFdlIG5lZWQgdG8gbWFwIHRoZSBFRkkgbWVtb3J5
IG1hcCBhZ2FpbiBhZnRlciBwYWdpbmdfaW5pdCgpLiAgCisgKi8KK3ZvaWQgX19pbml0IGVmaV9t
YXBfbWVtbWFwKHZvaWQpCit7CisJbWVtbWFwLm1hcCA9IE5VTEw7CisJCisJbWVtbWFwLm1hcCA9
IChlZmlfbWVtb3J5X2Rlc2NfdCAqKQorCQlidF9pb3JlbWFwKCh1bnNpZ25lZCBsb25nKSBtZW1t
YXAucGh5c19tYXAsCisJCQkobWVtbWFwLm5yX21hcCAqIHNpemVvZihlZmlfbWVtb3J5X2Rlc2Nf
dCkpKTsKKworCWlmIChtZW1tYXAubWFwID09IE5VTEwpCisJCXByaW50ayhLRVJOX0VSUiBQRlgg
IkNvdWxkIG5vdCByZW1hcCB0aGUgRUZJIG1lbW1hcCFcbiIpOworfQkKKwordm9pZCBfX2luaXQg
cHJpbnRfZWZpX21lbW1hcCh2b2lkKQoreworCWVmaV9tZW1vcnlfZGVzY190ICptZDsKKwlpbnQg
aTsKKwkKKwlmb3IgKGkgPSAwOyBpIDwgbWVtbWFwLm5yX21hcDsgaSsrKSB7CisJCW1kID0gJm1l
bW1hcC5tYXBbaV07CisJCXByaW50ayhLRVJOX0lORk8gIm1lbSUwMnU6IHR5cGU9JXUsIGF0dHI9
MHglbGx4LCAiCisJCQkicmFuZ2U9WzB4JTAxNmxseC0weCUwMTZsbHgpICglbGx1TUIpXG4iLAor
CQkJaSwgbWQtPnR5cGUsIG1kLT5hdHRyaWJ1dGUsIG1kLT5waHlzX2FkZHIsCisJCQltZC0+cGh5
c19hZGRyICsgKG1kLT5udW1fcGFnZXMgPDwgRUZJX1BBR0VfU0hJRlQpLAorCQkJKG1kLT5udW1f
cGFnZXMgPj4gKDIwIC0gRUZJX1BBR0VfU0hJRlQpKSk7CisJfQorfQorCisvKgorICogV2Fsa3Mg
dGhlIEVGSSBtZW1vcnkgbWFwIGFuZCBjYWxscyBDQUxMQkFDSyBvbmNlIGZvciBlYWNoIEVGSQor
ICogbWVtb3J5IGRlc2NyaXB0b3IgdGhhdCBoYXMgbWVtb3J5IHRoYXQgaXMgYXZhaWxhYmxlIGZv
ciBrZXJuZWwgdXNlLgorICovCit2b2lkIGVmaV9tZW1tYXBfd2FsayhlZmlfZnJlZW1lbV9jYWxs
YmFja190IGNhbGxiYWNrLCB2b2lkICphcmcpCit7CisJaW50IHByZXZfdmFsaWQgPSAwOworCXN0
cnVjdCByYW5nZSB7CisJCXVuc2lnbmVkIGxvbmcgc3RhcnQ7CisJCXVuc2lnbmVkIGxvbmcgZW5k
OworCX0gcHJldiwgY3VycjsKKwllZmlfbWVtb3J5X2Rlc2NfdCAqbWQ7CisJdW5zaWduZWQgbG9u
ZyBzdGFydCwgZW5kOworCWludCBpOworCisJZm9yIChpID0gMDsgaSA8IG1lbW1hcC5ucl9tYXA7
IGkrKykgeworCQltZCA9ICZtZW1tYXAubWFwW2ldOworCisJCWlmICgobWQtPm51bV9wYWdlcyA9
PSAwKSB8fCAoIWlzX2F2YWlsYWJsZV9tZW1vcnkobWQpKSkJCisJCQljb250aW51ZTsKKworCQlj
dXJyLnN0YXJ0ID0gbWQtPnBoeXNfYWRkcjsKKwkJY3Vyci5lbmQgPSBjdXJyLnN0YXJ0ICsgKG1k
LT5udW1fcGFnZXMgPDwgRUZJX1BBR0VfU0hJRlQpOworCisJCWlmICghcHJldl92YWxpZCkgewor
CQkJcHJldiA9IGN1cnI7CisJCQlwcmV2X3ZhbGlkID0gMTsKKwkJfSBlbHNlIHsKKwkJCWlmIChj
dXJyLnN0YXJ0IDwgcHJldi5zdGFydCkKKwkJCQlwcmludGsoS0VSTl9JTkZPIFBGWCAiVW5vcmRl
cmVkIG1lbW9yeSBtYXBcbiIpOworCQkJaWYgKHByZXYuZW5kID09IGN1cnIuc3RhcnQpCisJCQkJ
cHJldi5lbmQgPSBjdXJyLmVuZDsKKwkJCWVsc2UgeworCQkJCXN0YXJ0ID0KKwkJCQkgICAgKHVu
c2lnbmVkIGxvbmcpIChQQUdFX0FMSUdOKHByZXYuc3RhcnQpKTsKKwkJCQllbmQgPSAodW5zaWdu
ZWQgbG9uZykgKHByZXYuZW5kICYgUEFHRV9NQVNLKTsKKwkJCQlpZiAoKGVuZCA+IHN0YXJ0KQor
CQkJCSAgICAmJiAoKmNhbGxiYWNrKSAoc3RhcnQsIGVuZCwgYXJnKSA8IDApCisJCQkJCXJldHVy
bjsKKwkJCQlwcmV2ID0gY3VycjsKKwkJCX0KKwkJfQorCX0KKwlpZiAocHJldl92YWxpZCkgewor
CQlzdGFydCA9ICh1bnNpZ25lZCBsb25nKSBQQUdFX0FMSUdOKHByZXYuc3RhcnQpOworCQllbmQg
PSAodW5zaWduZWQgbG9uZykgKHByZXYuZW5kICYgUEFHRV9NQVNLKTsKKwkJaWYgKGVuZCA+IHN0
YXJ0KQorCQkJKCpjYWxsYmFjaykgKHN0YXJ0LCBlbmQsIGFyZyk7CisJfQorfQorCit2b2lkIF9f
aW5pdCBlZmlfaW5pdCh2b2lkKQoreworCWVmaV9jb25maWdfdGFibGVfdCAqY29uZmlnX3RhYmxl
czsKKwllZmlfcnVudGltZV9zZXJ2aWNlc190ICpydW50aW1lOworCWVmaV9jaGFyMTZfdCAqYzE2
OworCWNoYXIgdmVuZG9yWzEwMF0gPSAidW5rbm93biI7CisJdW5zaWduZWQgbG9uZyBudW1fY29u
ZmlnX3RhYmxlczsKKwlpbnQgaSA9IDA7CisKKwltZW1zZXQoJmVmaSwgMCwgc2l6ZW9mKGVmaSkg
KTsKKwltZW1zZXQoJmVmaV9waHlzLCAwLCBzaXplb2YoZWZpX3BoeXMpKTsKKworCWVmaV9waHlz
LnN5c3RhYiA9IEVGSV9TWVNUQUI7CisJbWVtbWFwLnBoeXNfbWFwID0gRUZJX01FTU1BUDsKKwlt
ZW1tYXAubnJfbWFwID0gRUZJX01FTU1BUF9TSVpFL0VGSV9NRU1ERVNDX1NJWkU7CisJbWVtbWFw
LmRlc2NfdmVyc2lvbiA9IEVGSV9NRU1ERVNDX1ZFUlNJT047CisKKwllZmkuc3lzdGFiID0gKGVm
aV9zeXN0ZW1fdGFibGVfdCAqKQorCQlib290X2lvcmVtYXAoKHVuc2lnbmVkIGxvbmcpIGVmaV9w
aHlzLnN5c3RhYiwKKwkJCXNpemVvZihlZmlfc3lzdGVtX3RhYmxlX3QpKTsKKwkvKgorCSAqIFZl
cmlmeSB0aGUgRUZJIFRhYmxlCisJICovCisJaWYgKGVmaS5zeXN0YWIgPT0gTlVMTCkgCisJCXBy
aW50ayhLRVJOX0VSUiBQRlggIldvYWghIENvdWxkbid0IG1hcCB0aGUgRUZJIHN5c3RlbSB0YWJs
ZS5cbiIpOworCWlmIChlZmkuc3lzdGFiLT5oZHIuc2lnbmF0dXJlICE9IEVGSV9TWVNURU1fVEFC
TEVfU0lHTkFUVVJFKQorCQlwcmludGsoS0VSTl9FUlIgUEZYICJXb2FoISBFRkkgc3lzdGVtIHRh
YmxlIHNpZ25hdHVyZSBpbmNvcnJlY3RcbiIpOworCWlmICgoZWZpLnN5c3RhYi0+aGRyLnJldmlz
aW9uIF4gRUZJX1NZU1RFTV9UQUJMRV9SRVZJU0lPTikgPj4gMTYgIT0gMCkKKwkJcHJpbnRrKEtF
Uk5fRVJSIFBGWAorCQkgICAgICAgIldhcm5pbmc6IEVGSSBzeXN0ZW0gdGFibGUgbWFqb3IgdmVy
c2lvbiBtaXNtYXRjaDogIgorCQkgICAgICAgImdvdCAlZC4lMDJkLCBleHBlY3RlZCAlZC4lMDJk
XG4iLAorCQkgICAgICAgZWZpLnN5c3RhYi0+aGRyLnJldmlzaW9uID4+IDE2LAorCQkgICAgICAg
ZWZpLnN5c3RhYi0+aGRyLnJldmlzaW9uICYgMHhmZmZmLAorCQkgICAgICAgRUZJX1NZU1RFTV9U
QUJMRV9SRVZJU0lPTiA+PiAxNiwKKwkJICAgICAgIEVGSV9TWVNURU1fVEFCTEVfUkVWSVNJT04g
JiAweGZmZmYpOworCS8qIAorCSAqIEdyYWIgc29tZSBkZXRhaWxzIGZyb20gdGhlIHN5c3RlbSB0
YWJsZSAKKwkgKi8KKwludW1fY29uZmlnX3RhYmxlcyA9IGVmaS5zeXN0YWItPm5yX3RhYmxlczsK
Kwljb25maWdfdGFibGVzID0gKGVmaV9jb25maWdfdGFibGVfdCAqKWVmaS5zeXN0YWItPnRhYmxl
czsKKwlydW50aW1lID0gZWZpLnN5c3RhYi0+cnVudGltZTsKKworCS8qIAorCSAqIFNob3cgd2hh
dCB3ZSBrbm93IGZvciBwb3N0ZXJpdHkgCisJICovCisJYzE2ID0gKGVmaV9jaGFyMTZfdCAqKSBi
b290X2lvcmVtYXAoZWZpLnN5c3RhYi0+ZndfdmVuZG9yLCAyKTsKKwlpZiAoYzE2KSB7CisJCWZv
ciAoaSA9IDA7IGkgPCBzaXplb2YodmVuZG9yKSAmJiAqYzE2OyArK2kpIAorCQkJdmVuZG9yW2ld
ID0gKmMxNisrOworCQl2ZW5kb3JbaV0gPSAnXDAnOworCX0gZWxzZQorCQlwcmludGsoS0VSTl9F
UlIgUEZYICJDb3VsZCBub3QgbWFwIHRoZSBmaXJtd2FyZSB2ZW5kb3IhXG4iKTsKKworCXByaW50
ayhLRVJOX0lORk8gUEZYICJFRkkgdiV1LiUuMDJ1IGJ5ICVzIFxuIiwKKwkgICAgICAgZWZpLnN5
c3RhYi0+aGRyLnJldmlzaW9uID4+IDE2LAorCSAgICAgICBlZmkuc3lzdGFiLT5oZHIucmV2aXNp
b24gJiAweGZmZmYsIHZlbmRvcik7CisKKwkvKgorCSAqIExldCdzIHNlZSB3aGF0IGNvbmZpZyB0
YWJsZXMgdGhlIGZpcm13YXJlIHBhc3NlZCB0byB1cy4KKwkgKi8KKwljb25maWdfdGFibGVzID0g
KGVmaV9jb25maWdfdGFibGVfdCAqKQorCQkJCWJvb3RfaW9yZW1hcCgodW5zaWduZWQgbG9uZykg
Y29uZmlnX3RhYmxlcywKKwkJCSAgICAgICAgbnVtX2NvbmZpZ190YWJsZXMgKiBzaXplb2YoZWZp
X2NvbmZpZ190YWJsZV90KSk7CisKKwlpZiAoY29uZmlnX3RhYmxlcyA9PSBOVUxMKQorCQlwcmlu
dGsoS0VSTl9FUlIgUEZYICJDb3VsZCBub3QgbWFwIEVGSSBDb25maWd1cmF0aW9uIFRhYmxlIVxu
Iik7CisKKwlmb3IgKGkgPSAwOyBpIDwgbnVtX2NvbmZpZ190YWJsZXM7IGkrKykgeworCQlpZiAo
ZWZpX2d1aWRjbXAoY29uZmlnX3RhYmxlc1tpXS5ndWlkLCBNUFNfVEFCTEVfR1VJRCkgPT0gMCkg
eworCQkJZWZpLm1wcyA9ICh2b2lkICopY29uZmlnX3RhYmxlc1tpXS50YWJsZTsKKwkJCXByaW50
ayhLRVJOX0lORk8gIiBNUFM9MHglbHggIiwgY29uZmlnX3RhYmxlc1tpXS50YWJsZSk7CisJCX0g
ZWxzZQorCQkgICAgaWYgKGVmaV9ndWlkY21wKGNvbmZpZ190YWJsZXNbaV0uZ3VpZCwgQUNQSV8y
MF9UQUJMRV9HVUlEKSA9PSAwKSB7CisJCQllZmkuYWNwaTIwID0gX192YShjb25maWdfdGFibGVz
W2ldLnRhYmxlKTsKKwkJCXByaW50ayhLRVJOX0lORk8gIiBBQ1BJIDIuMD0weCVseCAiLCBjb25m
aWdfdGFibGVzW2ldLnRhYmxlKTsKKwkJfSBlbHNlCisJCSAgICBpZiAoZWZpX2d1aWRjbXAoY29u
ZmlnX3RhYmxlc1tpXS5ndWlkLCBBQ1BJX1RBQkxFX0dVSUQpID09IDApIHsKKwkJCWVmaS5hY3Bp
ID0gX192YShjb25maWdfdGFibGVzW2ldLnRhYmxlKTsKKwkJCXByaW50ayhLRVJOX0lORk8gIiBB
Q1BJPTB4JWx4ICIsIGNvbmZpZ190YWJsZXNbaV0udGFibGUpOworCQl9IGVsc2UKKwkJICAgIGlm
IChlZmlfZ3VpZGNtcChjb25maWdfdGFibGVzW2ldLmd1aWQsIFNNQklPU19UQUJMRV9HVUlEKSA9
PSAwKSB7CisJCQllZmkuc21iaW9zID0gKHZvaWQgKikgY29uZmlnX3RhYmxlc1tpXS50YWJsZTsK
KwkJCXByaW50ayhLRVJOX0lORk8gIiBTTUJJT1M9MHglbHggIiwgY29uZmlnX3RhYmxlc1tpXS50
YWJsZSk7CisJCX0gZWxzZQorCQkgICAgaWYgKGVmaV9ndWlkY21wKGNvbmZpZ190YWJsZXNbaV0u
Z3VpZCwgSENEUF9UQUJMRV9HVUlEKSA9PSAwKSB7CisJCQllZmkuaGNkcCA9ICh2b2lkICopY29u
ZmlnX3RhYmxlc1tpXS50YWJsZTsKKwkJCXByaW50ayhLRVJOX0lORk8gIiBIQ0RQPTB4JWx4ICIs
IGNvbmZpZ190YWJsZXNbaV0udGFibGUpOworCQl9IGVsc2UKKwkJICAgIGlmIChlZmlfZ3VpZGNt
cChjb25maWdfdGFibGVzW2ldLmd1aWQsIFVHQV9JT19QUk9UT0NPTF9HVUlEKSA9PSAwKSB7CisJ
CQllZmkudWdhID0gKHZvaWQgKiljb25maWdfdGFibGVzW2ldLnRhYmxlOworCQkJcHJpbnRrKEtF
Uk5fSU5GTyAiIFVHQT0weCVseCAiLCBjb25maWdfdGFibGVzW2ldLnRhYmxlKTsKKwkJfSAKKwl9
CisJcHJpbnRrKCJcbiIpOworCQkJCisJLyoKKwkgKiBDaGVjayBvdXQgdGhlIHJ1bnRpbWUgc2Vy
dmljZXMgdGFibGUuIFdlIG5lZWQgdG8gbWFwIAorCSAqIHRoZSBydW50aW1lIHNlcnZpY2VzIHRh
YmxlIHNvIHRoYXQgd2UgY2FuIGdyYWIgdGhlIHBoeXNpY2FsIAorCSAqIGFkZHJlc3Mgb2Ygc2V2
ZXJhbCBvZiB0aGUgRUZJIHJ1bnRpbWUgZnVuY3Rpb25zLCBuZWVkZWQgdG8gCisJICogc2V0IHRo
ZSBmaXJtd2FyZSBpbnRvIHZpcnR1YWwgbW9kZS4KKwkgKi8KKwkgICAgCisJcnVudGltZSA9IChl
ZmlfcnVudGltZV9zZXJ2aWNlc190ICopIGJvb3RfaW9yZW1hcCgodW5zaWduZWQgbG9uZykgCisJ
CQkJCQlydW50aW1lLAorCQkJCSAgICAgIAkJc2l6ZW9mKGVmaV9ydW50aW1lX3NlcnZpY2VzX3Qp
KTsKKwlpZiAocnVudGltZSAhPSBOVUxMKSB7CisJCS8qIAorCSAJICogV2Ugd2lsbCBvbmx5IG5l
ZWQgKmVhcmx5KiBhY2Nlc3MgdG8gdGhlIGZvbGxvd2luZyAKKwkJICogdHdvIEVGSSBydW50aW1l
IHNlcnZpY2VzIGJlZm9yZSBzZXRfdmlydHVhbF9hZGRyZXNzX21hcCAKKwkJICogaXMgaW52b2tl
ZC4gIAorIAkgCSAqLworCQllZmlfcGh5cy5nZXRfdGltZSA9IChlZmlfZ2V0X3RpbWVfdCAqKSBy
dW50aW1lLT5nZXRfdGltZTsKKwkJZWZpX3BoeXMuc2V0X3ZpcnR1YWxfYWRkcmVzc19tYXAgPSAK
KwkJCShlZmlfc2V0X3ZpcnR1YWxfYWRkcmVzc19tYXBfdCAqKSAKKwkJCQlydW50aW1lLT5zZXRf
dmlydHVhbF9hZGRyZXNzX21hcDsKKwl9IGVsc2UKKwkJcHJpbnRrKEtFUk5fRVJSIFBGWCAiQ291
bGQgbm90IG1hcCB0aGUgcnVudGltZSBzZXJ2aWNlIHRhYmxlIVxuIik7CisKKwkvKiBNYXAgdGhl
IEVGSSBtZW1vcnkgbWFwIGZvciB1c2UgdW50aWwgcGFnaW5nX2luaXQoKSAqLworCisJbWVtbWFw
Lm1hcCA9IChlZmlfbWVtb3J5X2Rlc2NfdCAqKSAKKwkJYm9vdF9pb3JlbWFwKCh1bnNpZ25lZCBs
b25nKSBFRklfTUVNTUFQLCBFRklfTUVNTUFQX1NJWkUpOworCQorCWlmIChtZW1tYXAubWFwID09
IE5VTEwpCisJCXByaW50ayhLRVJOX0VSUiBQRlggIkNvdWxkIG5vdCBtYXAgdGhlIEVGSSBtZW1v
cnkgbWFwIVxuIik7CisKKwlpZiAoRUZJX01FTURFU0NfU0laRSAhPSBzaXplb2YoZWZpX21lbW9y
eV9kZXNjX3QpKSB7CisJCXByaW50ayhLRVJOX1dBUk5JTkcgUEZYICJXYXJuaW5nISBLZXJuZWwt
ZGVmaW5lZCBtZW1kZXNjIGRvZXNuJ3QgIgorCQkJICAgIm1hdGNoIHRoZSBvbmUgZnJvbSBFRkkh
XG4iKTsKKwl9CisjaWYgRUZJX0RFQlVHCisJcHJpbnRfZWZpX21lbW1hcCgpOworI2VuZGlmCit9
CisKKy8qIAorICogVGhpcyBmdW5jdGlvbiB3aWxsIHN3aXRjaCB0aGUgRUZJIHJ1bnRpbWUgc2Vy
dmljZXMgdG8gdmlydHVhbCBtb2RlLiAgCisgKiBFc3NlbnRpYWxseSwgbG9vayB0aHJvdWdoIHRo
ZSBFRkkgbWVtbWFwIGFuZCBtYXAgZXZlcnkgcmVnaW9uIHRoYXQKKyAqIGhhcyB0aGUgcnVudGlt
ZSBhdHRyaWJ1dGUgYml0IHNldCBpbiBpdHMgbWVtb3J5IGRlc2NyaXB0b3IgYW5kIHVwZGF0ZQor
ICogdGhhdCBtZW1vcnkgZGVzY3JpcHRvciB3aXRoIHRoZSB2aXJ0dWFsIGFkZHJlc3Mgb2J0YWlu
ZWQgZnJvbSBpb3JlbWFwKCkuCisgKiBUaGlzIGVuYWJsZXMgdGhlIHJ1bnRpbWUgc2VydmljZXMg
dG8gYmUgY2FsbGVkIHdpdGhvdXQgaGF2aW5nIHRvIAorICogdGh1bmsgYmFjayBpbnRvIHBoeXNp
Y2FsIG1vZGUgZm9yIGV2ZXJ5IGludm9jYXRpb24uICAKKyAqLworCit2b2lkIF9faW5pdCBlZmlf
ZW50ZXJfdmlydHVhbF9tb2RlKHZvaWQpCit7CisJZWZpX21lbW9yeV9kZXNjX3QgKm1kOworCWVm
aV9zdGF0dXNfdCBzdGF0dXM7CisJaW50IGk7CisKKwllZmkuc3lzdGFiID0gTlVMTDsKKwkJCisJ
Zm9yIChpID0gMDsgaSA8IG1lbW1hcC5ucl9tYXA7IGkrKykgeworCQltZCA9ICZtZW1tYXAubWFw
W2ldOworCQkKKwkJaWYgKG1kLT5hdHRyaWJ1dGUgJiBFRklfTUVNT1JZX1JVTlRJTUUpIHsKKwkJ
CW1kLT52aXJ0X2FkZHIgPSAKKwkJCQkodTY0KSBpb3JlbWFwKCh1bnNpZ25lZCBsb25nKSBtZC0+
cGh5c19hZGRyLAorCQkJCQkgICAgICAodW5zaWduZWQgbG9uZykgKG1kLT5udW1fcGFnZXMgCisJ
CQkJCQk8PCBFRklfUEFHRV9TSElGVCkpOworCQkJaWYgKCEodW5zaWduZWQgbG9uZykgbWQtPnZp
cnRfYWRkcikgeworCQkJCXByaW50ayhLRVJOX0VSUiBQRlggImlvcmVtYXAgb2YgbWQ6IDB4JWxY
IGZhaWxlZCBcbiIsIAorCQkJCQkodW5zaWduZWQgbG9uZykgbWQtPnBoeXNfYWRkcik7CisJCQl9
CisKKwkJCWlmICgoKHVuc2lnbmVkIGxvbmcpbWQtPnBoeXNfYWRkciA8PSAodW5zaWduZWQgbG9u
ZyllZmlfcGh5cy5zeXN0YWIpICYmICgodW5zaWduZWQgbG9uZyllZmlfcGh5cy5zeXN0YWIgPCBt
ZC0+cGh5c19hZGRyICsgKCh1bnNpZ25lZCBsb25nKSBtZC0+bnVtX3BhZ2VzIDw8IEVGSV9QQUdF
X1NISUZUKSkpIHsKKwkJCQllZmkuc3lzdGFiID0gKGVmaV9zeXN0ZW1fdGFibGVfdCAqKSAKKwkJ
CQkJKChtZC0+dmlydF9hZGRyIC0gbWQtPnBoeXNfYWRkcikgKyAKKwkJCQkJKHU2NCllZmlfcGh5
cy5zeXN0YWIpOyAKKwkJCX0KKwkJfQorCX0KKworCWlmICghZWZpLnN5c3RhYikKKwkJQlVHKCk7
CisJCisJc3RhdHVzID0gcGh5c19lZmlfc2V0X3ZpcnR1YWxfYWRkcmVzc19tYXAoCisJCQlzaXpl
b2YoZWZpX21lbW9yeV9kZXNjX3QpICogbWVtbWFwLm5yX21hcCwgCisJCQlzaXplb2YoZWZpX21l
bW9yeV9kZXNjX3QpLAorCQkJbWVtbWFwLmRlc2NfdmVyc2lvbiwKKwkJICAgICAgIAltZW1tYXAu
cGh5c19tYXApOworCQorCWlmIChzdGF0dXMgIT0gRUZJX1NVQ0NFU1MpIHsKKwkJcHJpbnRrIChL
RVJOX0FMRVJUICJZb3UgYXJlIHNjcmV3ZWQhICIKKwkJCSJVbmFibGUgdG8gc3dpdGNoIEVGSSBp
bnRvIHZpcnR1YWwgbW9kZSAiCisJCQkiKHN0YXR1cz0lbHgpXG4iLCBzdGF0dXMpOworCQlwYW5p
YygiRUZJIGNhbGwgdG8gU2V0VmlydHVhbEFkZHJlc3NNYXAoKSBmYWlsZWQhIik7CisJfQorCisJ
LyoKKwkgKiBOb3cgdGhhdCBFRkkgaXMgaW4gdmlydHVhbCBtb2RlLCB1cGRhdGUgdGhlIGZ1bmN0
aW9uCisJICogcG9pbnRlcnMgaW4gdGhlIHJ1bnRpbWUgc2VydmljZSB0YWJsZSB0byB0aGUgbmV3
IHZpcnR1YWwgYWRkcmVzc2VzLgorCSAqLworCisJZWZpLmdldF90aW1lID0gKGVmaV9nZXRfdGlt
ZV90ICopIGVmaS5zeXN0YWItPnJ1bnRpbWUtPmdldF90aW1lOworCWVmaS5zZXRfdGltZSA9IChl
Zmlfc2V0X3RpbWVfdCAqKSBlZmkuc3lzdGFiLT5ydW50aW1lLT5zZXRfdGltZTsKKwllZmkuZ2V0
X3dha2V1cF90aW1lID0gKGVmaV9nZXRfd2FrZXVwX3RpbWVfdCAqKQorCQkJCQllZmkuc3lzdGFi
LT5ydW50aW1lLT5nZXRfd2FrZXVwX3RpbWU7CisJZWZpLnNldF93YWtldXBfdGltZSA9IChlZmlf
c2V0X3dha2V1cF90aW1lX3QgKikKKwkJCQkJZWZpLnN5c3RhYi0+cnVudGltZS0+c2V0X3dha2V1
cF90aW1lOworCWVmaS5nZXRfdmFyaWFibGUgPSAoZWZpX2dldF92YXJpYWJsZV90ICopCisJCQkJ
CWVmaS5zeXN0YWItPnJ1bnRpbWUtPmdldF92YXJpYWJsZTsKKwllZmkuZ2V0X25leHRfdmFyaWFi
bGUgPSAoZWZpX2dldF9uZXh0X3ZhcmlhYmxlX3QgKikKKwkJCQkJZWZpLnN5c3RhYi0+cnVudGlt
ZS0+Z2V0X25leHRfdmFyaWFibGU7CisJZWZpLnNldF92YXJpYWJsZSA9IChlZmlfc2V0X3Zhcmlh
YmxlX3QgKikKKwkJCQkJZWZpLnN5c3RhYi0+cnVudGltZS0+c2V0X3ZhcmlhYmxlOworCWVmaS5n
ZXRfbmV4dF9oaWdoX21vbm9fY291bnQgPSAoZWZpX2dldF9uZXh0X2hpZ2hfbW9ub19jb3VudF90
ICopCisJCQkJCWVmaS5zeXN0YWItPnJ1bnRpbWUtPmdldF9uZXh0X2hpZ2hfbW9ub19jb3VudDsK
KwllZmkucmVzZXRfc3lzdGVtID0gKGVmaV9yZXNldF9zeXN0ZW1fdCAqKQorCQkJCQllZmkuc3lz
dGFiLT5ydW50aW1lLT5yZXNldF9zeXN0ZW07Cit9CisKK3ZvaWQgX19pbml0IAorZWZpX2luaXRp
YWxpemVfaW9tZW1fcmVzb3VyY2VzKHN0cnVjdCByZXNvdXJjZSAqY29kZV9yZXNvdXJjZSwKKwkJ
CSAgICAgICBzdHJ1Y3QgcmVzb3VyY2UgKmRhdGFfcmVzb3VyY2UpCit7CisJc3RydWN0IHJlc291
cmNlICpyZXM7CisJZWZpX21lbW9yeV9kZXNjX3QgKm1kOworCWludCBpOworCisJZm9yIChpID0g
MDsgaSA8IG1lbW1hcC5ucl9tYXA7IGkrKykgeworCQltZCA9ICZtZW1tYXAubWFwW2ldOworCQor
CQlpZiAoKG1kLT5waHlzX2FkZHIgKyAobWQtPm51bV9wYWdlcyA8PCBFRklfUEFHRV9TSElGVCkp
ID4KKwkJICAgIDB4MTAwMDAwMDAwVUxMKQorCQkJY29udGludWU7CisJCXJlcyA9IGFsbG9jX2Jv
b3RtZW1fbG93KHNpemVvZihzdHJ1Y3QgcmVzb3VyY2UpKTsKKwkJc3dpdGNoIChtZC0+dHlwZSkg
eworCQljYXNlIEVGSV9SRVNFUlZFRF9UWVBFOgorCQkJcmVzLT5uYW1lID0gIlJlc2VydmVkIE1l
bW9yeSI7CisJCQlicmVhazsKKwkJY2FzZSBFRklfTE9BREVSX0NPREU6CisJCQlyZXMtPm5hbWUg
PSAiTG9hZGVyIENvZGUiOworCQkJYnJlYWs7CisJCWNhc2UgRUZJX0xPQURFUl9EQVRBOgorCQkJ
cmVzLT5uYW1lID0gIkxvYWRlciBEYXRhIjsKKwkJCWJyZWFrOworCQljYXNlIEVGSV9CT09UX1NF
UlZJQ0VTX0RBVEE6CisJCQlyZXMtPm5hbWUgPSAiQm9vdFNlcnZpY2VzIERhdGEiOworCQkJYnJl
YWs7CisJCWNhc2UgRUZJX0JPT1RfU0VSVklDRVNfQ09ERToKKwkJCXJlcy0+bmFtZSA9ICJCb290
U2VydmljZXMgQ29kZSI7CisJCQlicmVhazsKKwkJY2FzZSBFRklfUlVOVElNRV9TRVJWSUNFU19D
T0RFOgorCQkJcmVzLT5uYW1lID0gIlJ1bnRpbWUgU2VydmljZSBDb2RlIjsKKwkJCWJyZWFrOwor
CQljYXNlIEVGSV9SVU5USU1FX1NFUlZJQ0VTX0RBVEE6CisJCQlyZXMtPm5hbWUgPSAiUnVudGlt
ZSBTZXJ2aWNlIERhdGEiOworCQkJYnJlYWs7CisJCWNhc2UgRUZJX0NPTlZFTlRJT05BTF9NRU1P
Ulk6CisJCQlyZXMtPm5hbWUgPSAiQ29udmVudGlvbmFsIE1lbW9yeSI7CisJCQlicmVhazsKKwkJ
Y2FzZSBFRklfVU5VU0FCTEVfTUVNT1JZOgorCQkJcmVzLT5uYW1lID0gIlVudXNhYmxlIE1lbW9y
eSI7CisJCQlicmVhazsKKwkJY2FzZSBFRklfQUNQSV9SRUNMQUlNX01FTU9SWToKKwkJCXJlcy0+
bmFtZSA9ICJBQ1BJIFJlY2xhaW0iOworCQkJYnJlYWs7CisJCWNhc2UgRUZJX0FDUElfTUVNT1JZ
X05WUzoKKwkJCXJlcy0+bmFtZSA9ICJBQ1BJIE5WUyI7CisJCQlicmVhazsKKwkJY2FzZSBFRklf
TUVNT1JZX01BUFBFRF9JTzoKKwkJCXJlcy0+bmFtZSA9ICJNZW1vcnkgTWFwcGVkIElPIjsKKwkJ
CWJyZWFrOworCQljYXNlIEVGSV9NRU1PUllfTUFQUEVEX0lPX1BPUlRfU1BBQ0U6CisJCQlyZXMt
Pm5hbWUgPSAiTWVtb3J5IE1hcHBlZCBJTyBQb3J0IFNwYWNlIjsKKwkJCWJyZWFrOworCQlkZWZh
dWx0OgorCQkJcmVzLT5uYW1lID0gIlJlc2VydmVkIjsKKwkJCWJyZWFrOworCQl9CisJCXJlcy0+
c3RhcnQgPSBtZC0+cGh5c19hZGRyOworCQlyZXMtPmVuZCA9IHJlcy0+c3RhcnQgKyAoKG1kLT5u
dW1fcGFnZXMgPDwgRUZJX1BBR0VfU0hJRlQpIC0gMSk7CisJCXJlcy0+ZmxhZ3MgPSBJT1JFU09V
UkNFX01FTSB8IElPUkVTT1VSQ0VfQlVTWTsKKwkJaWYgKHJlcXVlc3RfcmVzb3VyY2UoJmlvbWVt
X3Jlc291cmNlLCByZXMpIDwgMCkKKwkJCXByaW50ayhLRVJOX0VSUiBQRlggIkZhaWxlZCB0byBh
bGxvY2F0ZSByZXMgJXMgOiAweCVseC0weCVseFxuIiwKKwkJCQlyZXMtPm5hbWUsIHJlcy0+c3Rh
cnQsIHJlcy0+ZW5kKTsKKwkJLyogCisJCSAqIFdlIGRvbid0IGtub3cgd2hpY2ggcmVnaW9uIGNv
bnRhaW5zIGtlcm5lbCBkYXRhIHNvIHdlIHRyeQorCQkgKiBpdCByZXBlYXRlZGx5IGFuZCBsZXQg
dGhlIHJlc291cmNlIG1hbmFnZXIgdGVzdCBpdC4KKwkJICovCisJCWlmIChtZC0+dHlwZSA9PSBF
RklfQ09OVkVOVElPTkFMX01FTU9SWSkgeworCQkJcmVxdWVzdF9yZXNvdXJjZShyZXMsIGNvZGVf
cmVzb3VyY2UpOworCQkJcmVxdWVzdF9yZXNvdXJjZShyZXMsIGRhdGFfcmVzb3VyY2UpOworCQl9
CisJfQorfQorCisvKgorICogQ29udmVuaWVuY2UgZnVuY3Rpb25zIHRvIG9idGFpbiBtZW1vcnkg
dHlwZXMgYW5kIGF0dHJpYnV0ZXMKKyAqLworCit1MzIgZWZpX21lbV90eXBlKHVuc2lnbmVkIGxv
bmcgcGh5c19hZGRyKQoreworCWVmaV9tZW1vcnlfZGVzY190ICptZDsKKwlpbnQgaTsKKwkKKwlm
b3IgKGkgPSAwOyBpIDwgbWVtbWFwLm5yX21hcDsgaSsrKSB7CisJCW1kID0gJm1lbW1hcC5tYXBb
aV07CisJCWlmICgobWQtPnBoeXNfYWRkciA8PSBwaHlzX2FkZHIpICYmIChwaHlzX2FkZHIgPAor
CQkJKG1kLT5waHlzX2FkZHIgKyAobWQtPiBudW1fcGFnZXMgPDwgRUZJX1BBR0VfU0hJRlQpKSAp
KQorCQkJcmV0dXJuIG1kLT50eXBlOworCX0KKwlyZXR1cm4gMDsKK30KKwordTY0IGVmaV9tZW1f
YXR0cmlidXRlcyh1bnNpZ25lZCBsb25nIHBoeXNfYWRkcikKK3sKKwllZmlfbWVtb3J5X2Rlc2Nf
dCAqbWQ7CisJaW50IGk7CisKKwlmb3IgKGkgPSAwOyBpIDwgbWVtbWFwLm5yX21hcDsgaSsrKSB7
CisJCW1kID0gJm1lbW1hcC5tYXBbaV07CisJCWlmICgobWQtPnBoeXNfYWRkciA8PSBwaHlzX2Fk
ZHIpICYmIChwaHlzX2FkZHIgPAorCQkJKG1kLT5waHlzX2FkZHIgKyAobWQtPiBudW1fcGFnZXMg
PDwgRUZJX1BBR0VfU0hJRlQpKSApKQorCQkJcmV0dXJuIG1kLT5hdHRyaWJ1dGU7CisJfQorCXJl
dHVybiAwOworfQorCmRpZmYgLXVyTiBsaW51eC0yLjYuMC10ZXN0Ni1tbTIvYXJjaC9pMzg2L2tl
cm5lbC9lZmlfc3R1Yi5TIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi1lZmkvYXJjaC9pMzg2L2tlcm5l
bC9lZmlfc3R1Yi5TCi0tLSBsaW51eC0yLjYuMC10ZXN0Ni1tbTIvYXJjaC9pMzg2L2tlcm5lbC9l
Zmlfc3R1Yi5TCTE5NjktMTItMzEgMTY6MDA6MDAuMDAwMDAwMDAwIC0wODAwCisrKyBsaW51eC0y
LjYuMC10ZXN0Ni1tbTItZWZpL2FyY2gvaTM4Ni9rZXJuZWwvZWZpX3N0dWIuUwkyMDAzLTEwLTAz
IDEwOjEwOjQwLjAwMDAwMDAwMCAtMDcwMApAQCAtMCwwICsxLDEyNSBAQAorLyoKKyAqIEVGSSBj
YWxsIHN0dWIgZm9yIElBMzIuCisgKgorICogVGhpcyBzdHViIGFsbG93cyB1cyB0byBtYWtlIEVG
SSBjYWxscyBpbiBwaHlzaWNhbCBtb2RlIHdpdGggaW50ZXJydXB0cworICogdHVybmVkIG9mZi4K
KyAqLworCisjaW5jbHVkZSA8bGludXgvY29uZmlnLmg+CisjaW5jbHVkZSA8bGludXgvbGlua2Fn
ZS5oPgorI2luY2x1ZGUgPGFzbS9wYWdlLmg+CisjaW5jbHVkZSA8YXNtL3BndGFibGUuaD4KKwor
LyoKKyAqIGVmaV9jYWxsX3BoeXModm9pZCAqLCAuLi4pIGlzIGEgZnVuY3Rpb24gd2l0aCB2YXJp
YWJsZSBwYXJhbWV0ZXJzLgorICogQWxsIHRoZSBjYWxsZXJzIG9mIHRoaXMgZnVuY3Rpb24gYXNz
dXJlIHRoYXQgYWxsIHRoZSBwYXJhbWV0ZXJzIGFyZSA0LWJ5dGVzLgorICovCisKKy8qCisgKiBJ
biBnY2MgY2FsbGluZyBjb252ZW50aW9uLCBFQlgsIEVTUCwgRUJQLCBFU0kgYW5kIEVESSBhcmUg
YWxsIGNhbGxlZSBzYXZlLgorICogU28gd2UnZCBiZXR0ZXIgc2F2ZSBhbGwgb2YgdGhlbSBhdCB0
aGUgYmVnaW5uaW5nIG9mIHRoaXMgZnVuY3Rpb24gYW5kIHJlc3RvcmUKKyAqIGF0IHRoZSBlbmQg
bm8gbWF0dGVyIGhvdyBtYW55IHdlIHVzZSwgYmVjYXVzZSB3ZSBjYW4gbm90IGFzc3VyZSBFRkkg
cnVudGltZSAKKyAqIHNlcnZpY2UgZnVuY3Rpb25zIHdpbGwgY29tcGx5IHdpdGggZ2NjIGNhbGxp
bmcgY29udmVudGlvbiwgdG9vLgorICovCisKKy50ZXh0Cisuc2VjdGlvbiAudGV4dCwgImEiCitF
TlRSWShlZmlfY2FsbF9waHlzKQorCS8qIAorCSAqIDAuIFRoZSBmdW5jdGlvbiBjYW4gb25seSBi
ZSBjYWxsZWQgaW4gTGludXgga2VybmVsLiBTbyBDUyBoYXMgYmVlbgorCSAqIHNldCB0byAweDAw
MTAsIERTIGFuZCBTUyBoYXZlIGJlZW4gc2V0IHRvIDB4MDAxOC4gSW4gRUZJLCBJIGZvdW5kCisJ
ICogdGhlIHZhbHVlcyBvZiB0aGVzZSByZWdpc3RlcnMgYXJlIHRoZSBzYW1lLiBBbmQsIHRoZSBj
b3JyZXNwb25kaW5nIAorCSAqIEdEVCBlbnRyaWVzIGFyZSBpZGVudGljYWwuIFNvIEkgd2lsbCBk
byBub3RoaW5nIGFib3V0IHNlZ21lbnQgcmVnCisJICogYW5kIEdEVCwgYnV0IGNoYW5nZSBHRFQg
YmFzZSByZWdpc3RlciBpbiBwcmVsb2cgYW5kIGVwaWxvZy4KKwkgKi8KKworCS8qCisJICogMS4g
Tm93IEkgYW0gcnVubmluZyB3aXRoIEVJUCA9IDxwaHlzaWNhbCBhZGRyZXNzPiArIFBBR0VfT0ZG
U0VULgorCSAqIEJ1dCB0byBtYWtlIGl0IHNtb290aGx5IHN3aXRjaCBmcm9tIHZpcnR1YWwgbW9k
ZSB0byBmbGF0IG1vZGUuCisJICogVGhlIG1hcHBpbmcgb2YgbG93ZXIgdmlydHVhbCBtZW1vcnkg
aGFzIGJlZW4gY3JlYXRlZCBpbiBwcmVsb2cgYW5kCisJICogZXBpbG9nLgorCSAqLworCW1vdmwJ
JDFmLCAlZWR4CisJc3VibAkkX19QQUdFX09GRlNFVCwgJWVkeAorCWptcAkqJWVkeAorMToKKwor
CS8qCisJICogMi4gTm93IG9uIHRoZSB0b3Agb2Ygc3RhY2sgaXMgdGhlIHJldHVybiAKKwkgKiBh
ZGRyZXNzIGluIHRoZSBjYWxsZXIgb2YgZWZpX2NhbGxfcGh5cygpLCB0aGVuIHBhcmFtZXRlciAx
LAorCSAqIHBhcmFtZXRlciAyLCAuLi4sIHBhcmFtIG4uIFRvIG1ha2UgdGhpbmdzIGVhc3ksIHdl
IHNhdmUgdGhlIHJldHVybiAKKwkgKiBhZGRyZXNzIG9mIGVmaV9jYWxsX3BoeXMgaW4gYSBnbG9i
YWwgdmFyaWFibGUuCisJICovCisJcG9wbAklZWR4CisJbW92bAklZWR4LCBzYXZlZF9yZXR1cm5f
YWRkcgorCS8qIGdldCB0aGUgZnVuY3Rpb24gcG9pbnRlciBpbnRvIEVDWCovCisJcG9wbAklZWN4
CisJbW92bAklZWN4LCBlZmlfcnRfZnVuY3Rpb25fcHRyCisJbW92bAkkMmYsICVlZHgKKwlzdWJs
CSRfX1BBR0VfT0ZGU0VULCAlZWR4CisJcHVzaGwJJWVkeAorCisJLyoKKwkgKiAzLiBDbGVhciBQ
RyBiaXQgaW4gJUNSMC4KKwkgKi8KKwltb3ZsCSVjcjAsICVlZHgKKwlhbmRsCSQweDdmZmZmZmZm
LCAlZWR4CisJbW92bAklZWR4LCAlY3IwCisJam1wCTFmCisxOgorCisJLyoKKwkgKiA0LiBBZGp1
c3Qgc3RhY2sgcG9pbnRlci4KKwkgKi8KKwlzdWJsCSRfX1BBR0VfT0ZGU0VULCAlZXNwCisJCisJ
LyoKKwkgKiA1LiBDYWxsIHRoZSBwaHlzaWNhbCBmdW5jdGlvbi4KKwkgKi8KKwlqbXAJKiVlY3gK
KworMjoKKwkvKgorCSAqIDYuIEFmdGVyIEVGSSBydW50aW1lIHNlcnZpY2UgcmV0dXJucywgY29u
dHJvbCB3aWxsIHJldHVybiB0byAKKwkgKiBmb2xsb3dpbmcgaW5zdHJ1Y3Rpb24uIFdlJ2QgYmV0
dGVyIHJlYWRqdXN0IHN0YWNrIHBvaW50ZXIgZmlyc3QuCisJICovCisJYWRkbAkkX19QQUdFX09G
RlNFVCwgJWVzcAorCisJLyoKKwkgKiA3LiBSZXN0b3JlIFBHIGJpdAorCSAqLworCW1vdmwJJWNy
MCwgJWVkeAorCW9ybAkkMHg4MDAwMDAwMCwgJWVkeAorCW1vdmwJJWVkeCwgJWNyMAorCWptcAkx
ZgorMToKKwkvKgorCSAqIDguIE5vdyByZXN0b3JlIHRoZSB2aXJ0dWFsIG1vZGUgZnJvbSBmbGF0
IG1vZGUgYnkKKwkgKiBhZGRpbmcgRUlQIHdpdGggUEFHRV9PRkZTRVQuCisJICovCisJbW92bAkk
MWYsICVlZHgKKwlqbXAJKiVlZHgKKzE6CisKKwkvKiAKKwkgKiA5LiBCYWxhbmNlIHRoZSBzdGFj
ay4gQW5kIGJlY2F1c2UgRUFYIGNvbnRhaW4gdGhlIHJldHVybiB2YWx1ZSwKKwkgKiB3ZSdkIGJl
dHRlciBub3QgY2xvYmJlciBpdC4KKwkgKi8KKwlsZWFsCWVmaV9ydF9mdW5jdGlvbl9wdHIsICVl
ZHgKKwltb3ZsCSglZWR4KSwgJWVjeAorCXB1c2hsCSVlY3gKKworCS8qCisJICogMTAuIFB1c2gg
dGhlIHNhdmVkIHJldHVybiBhZGRyZXNzIG9udG8gdGhlIHN0YWNrIGFuZCByZXR1cm4uCisJICov
CisJbGVhbAlzYXZlZF9yZXR1cm5fYWRkciwgJWVkeAorCW1vdmwJKCVlZHgpLCAlZWN4CisJcHVz
aGwJJWVjeAorCXJldAorLnByZXZpb3VzCisKKy5kYXRhCitzYXZlZF9yZXR1cm5fYWRkcjoKKwku
bG9uZyAwCitlZmlfcnRfZnVuY3Rpb25fcHRyOgorCS5sb25nIDAKZGlmZiAtdXJOIGxpbnV4LTIu
Ni4wLXRlc3Q2LW1tMi9hcmNoL2kzODYva2VybmVsL01ha2VmaWxlIGxpbnV4LTIuNi4wLXRlc3Q2
LW1tMi1lZmkvYXJjaC9pMzg2L2tlcm5lbC9NYWtlZmlsZQotLS0gbGludXgtMi42LjAtdGVzdDYt
bW0yL2FyY2gvaTM4Ni9rZXJuZWwvTWFrZWZpbGUJMjAwMy0xMC0wMyAxMTo1MDo0NC4wMDAwMDAw
MDAgLTA3MDAKKysrIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi1lZmkvYXJjaC9pMzg2L2tlcm5lbC9N
YWtlZmlsZQkyMDAzLTEwLTAzIDEwOjEwOjQwLjAwMDAwMDAwMCAtMDcwMApAQCAtNyw3ICs3LDcg
QEAKIG9iai15CTo9IHByb2Nlc3MubyBzZW1hcGhvcmUubyBzaWduYWwubyBlbnRyeS5vIHRyYXBz
Lm8gaXJxLm8gdm04Ni5vIFwKIAkJcHRyYWNlLm8gaTgyNTkubyBpb3BvcnQubyBsZHQubyBzZXR1
cC5vIHRpbWUubyBzeXNfaTM4Ni5vIFwKIAkJcGNpLWRtYS5vIGkzODZfa3N5bXMubyBpMzg3Lm8g
ZG1pX3NjYW4ubyBib290ZmxhZy5vIFwKLQkJZG91YmxlZmF1bHQubyBlbnRyeV90cmFtcG9saW5l
Lm8KKwkJZG91YmxlZmF1bHQubyBlZmkubyBlZmlfc3R1Yi5vIGVudHJ5X3RyYW1wb2xpbmUubwog
CiBvYmoteQkJCQkrPSBjcHUvCiBvYmoteQkJCQkrPSB0aW1lcnMvCmRpZmYgLXVyTiBsaW51eC0y
LjYuMC10ZXN0Ni1tbTIvYXJjaC9pMzg2L2tlcm5lbC9yZWJvb3QuYyBsaW51eC0yLjYuMC10ZXN0
Ni1tbTItZWZpL2FyY2gvaTM4Ni9rZXJuZWwvcmVib290LmMKLS0tIGxpbnV4LTIuNi4wLXRlc3Q2
LW1tMi9hcmNoL2kzODYva2VybmVsL3JlYm9vdC5jCTIwMDMtMTAtMDMgMTE6NTA6NDQuMDAwMDAw
MDAwIC0wNzAwCisrKyBsaW51eC0yLjYuMC10ZXN0Ni1tbTItZWZpL2FyY2gvaTM4Ni9rZXJuZWwv
cmVib290LmMJMjAwMy0xMC0wMyAxMDoxMDo0MC4wMDAwMDAwMDAgLTA3MDAKQEAgLTcsNiArNyw3
IEBACiAjaW5jbHVkZSA8bGludXgvaW5pdC5oPgogI2luY2x1ZGUgPGxpbnV4L2ludGVycnVwdC5o
PgogI2luY2x1ZGUgPGxpbnV4L21jMTQ2ODE4cnRjLmg+CisjaW5jbHVkZSA8bGludXgvZWZpLmg+
CiAjaW5jbHVkZSA8YXNtL3VhY2Nlc3MuaD4KICNpbmNsdWRlIDxhc20vYXBpYy5oPgogI2luY2x1
ZGUgIm1hY2hfcmVib290LmgiCkBAIC0yNjEsNyArMjYyLDEyIEBACiAJZGlzYWJsZV9JT19BUElD
KCk7CiAjZW5kaWYKIAotCWlmKCFyZWJvb3RfdGhydV9iaW9zKSB7CisJaWYgKCFyZWJvb3RfdGhy
dV9iaW9zKSB7CisJCWlmIChlZmlfZW5hYmxlZCkgeworCQkJZWZpLnJlc2V0X3N5c3RlbShFRklf
UkVTRVRfQ09MRCwgRUZJX1NVQ0NFU1MsIDAsIDApOworCQkJX19hc21fXyBfX3ZvbGF0aWxlX18o
ImxpZHQgJTAiOiA6Im0iIChub19pZHQpKTsKKwkJCV9fYXNtX18gX192b2xhdGlsZV9fKCJpbnQz
Iik7CisJCX0KIAkJLyogcmVib290aW5nIG5lZWRzIHRvIHRvdWNoIHRoZSBwYWdlIGF0IGFic29s
dXRlIGFkZHIgMCAqLwogCQkqKCh1bnNpZ25lZCBzaG9ydCAqKV9fdmEoMHg0NzIpKSA9IHJlYm9v
dF9tb2RlOwogCQlmb3IgKDs7KSB7CkBAIC0yNzEsNiArMjc3LDggQEAKIAkJCV9fYXNtX18gX192
b2xhdGlsZV9fKCJpbnQzIik7CiAJCX0KIAl9CisJaWYgKGVmaV9lbmFibGVkKQorCQllZmkucmVz
ZXRfc3lzdGVtKEVGSV9SRVNFVF9XQVJNLCBFRklfU1VDQ0VTUywgMCwgMCk7CiAKIAltYWNoaW5l
X3JlYWxfcmVzdGFydChqdW1wX3RvX2Jpb3MsIHNpemVvZihqdW1wX3RvX2Jpb3MpKTsKIH0KQEAg
LTI4MSw2ICsyODksOCBAQAogCiB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiB7CisJaWYg
KGVmaV9lbmFibGVkKQorCQllZmkucmVzZXRfc3lzdGVtKEVGSV9SRVNFVF9TSFVURE9XTiwgRUZJ
X1NVQ0NFU1MsIDAsIDApOwogCWlmIChwbV9wb3dlcl9vZmYpCiAJCXBtX3Bvd2VyX29mZigpOwog
fQpkaWZmIC11ck4gbGludXgtMi42LjAtdGVzdDYtbW0yL2FyY2gvaTM4Ni9rZXJuZWwvc2V0dXAu
YyBsaW51eC0yLjYuMC10ZXN0Ni1tbTItZWZpL2FyY2gvaTM4Ni9rZXJuZWwvc2V0dXAuYwotLS0g
bGludXgtMi42LjAtdGVzdDYtbW0yL2FyY2gvaTM4Ni9rZXJuZWwvc2V0dXAuYwkyMDAzLTEwLTAz
IDExOjUwOjQ0LjAwMDAwMDAwMCAtMDcwMAorKysgbGludXgtMi42LjAtdGVzdDYtbW0yLWVmaS9h
cmNoL2kzODYva2VybmVsL3NldHVwLmMJMjAwMy0xMC0wMyAxMTozNjoyMi4wMDAwMDAwMDAgLTA3
MDAKQEAgLTM2LDYgKzM2LDggQEAKICNpbmNsdWRlIDxsaW51eC9yb290X2Rldi5oPgogI2luY2x1
ZGUgPGxpbnV4L2hpZ2htZW0uaD4KICNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4KKyNpbmNsdWRl
IDxsaW51eC9lZmkuaD4KKyNpbmNsdWRlIDxsaW51eC9pbml0Lmg+CiAjaW5jbHVkZSA8dmlkZW8v
ZWRpZC5oPgogI2luY2x1ZGUgPGFzbS9lODIwLmg+CiAjaW5jbHVkZSA8YXNtL21wc3BlYy5oPgpA
QCAtNTYsNiArNTgsOCBAQAogICogTWFjaGluZSBzZXR1cC4uCiAgKi8KIAoraW50IGVmaV9lbmFi
bGVkID0gMDsKKwogLyogY3B1IGRhdGEgYXMgZGV0ZWN0ZWQgYnkgdGhlIGFzc2VtYmx5IGNvZGUg
aW4gaGVhZC5TICovCiBzdHJ1Y3QgY3B1aW5mb194ODYgbmV3X2NwdV9kYXRhIF9faW5pdGRhdGEg
PSB7IDAsIDAsIDAsIDAsIC0xLCAxLCAwLCAwLCAtMSB9OwogLyogY29tbW9uIGNwdSBkYXRhIGZv
ciBhbGwgY3B1cyAqLwpAQCAtMTQ0LDYgKzE0OCwyMCBAQAogCWludCBpOwogCXVuc2lnbmVkIGxv
bmcgbG9uZyBjdXJyZW50X3NpemUgPSAwOwogCisJaWYgKGVmaV9lbmFibGVkKSB7CisJCWZvciAo
aSA9IDA7IGkgPCBtZW1tYXAubnJfbWFwOyBpKyspIHsKKwkJCWN1cnJlbnRfc2l6ZSA9IG1lbW1h
cC5tYXBbaV0ucGh5c19hZGRyICsKKwkJCQkgICAgICAgKG1lbW1hcC5tYXBbaV0ubnVtX3BhZ2Vz
IDw8IDEyKTsKKwkJCWlmIChtZW1tYXAubWFwW2ldLnR5cGUgPT0gRUZJX0NPTlZFTlRJT05BTF9N
RU1PUlkpIHsKKwkJCQlpZiAoY3VycmVudF9zaXplID4gc2l6ZSkgeworCQkJCQltZW1tYXAubWFw
W2ldLm51bV9wYWdlcyAtPQorCQkJCQkJKCgoY3VycmVudF9zaXplLXNpemUpICsgUEFHRV9TSVpF
LTEpID4+IFBBR0VfU0hJRlQpOworCQkJCQltZW1tYXAubnJfbWFwID0gaSArIDE7CisJCQkJCXJl
dHVybjsKKwkJCQl9CisJCQl9CisJCX0KKwl9IAogCWZvciAoaSA9IDA7IGkgPCBlODIwLm5yX21h
cDsgaSsrKSB7CiAJCWlmIChlODIwLm1hcFtpXS50eXBlID09IEU4MjBfUkFNKSB7CiAJCQljdXJy
ZW50X3NpemUgKz0gZTgyMC5tYXBbaV0uc2l6ZTsKQEAgLTE1OCwxNyArMTc2LDIxIEBACiBzdGF0
aWMgdm9pZCBfX2luaXQgYWRkX21lbW9yeV9yZWdpb24odW5zaWduZWQgbG9uZyBsb25nIHN0YXJ0
LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2lnbmVkIGxvbmcgbG9uZyBz
aXplLCBpbnQgdHlwZSkKIHsKLQlpbnQgeCA9IGU4MjAubnJfbWFwOworCWludCB4OworCQorCWlm
ICghZWZpX2VuYWJsZWQpIHsKKyAgICAgICAJCXggPSBlODIwLm5yX21hcDsKIAotCWlmICh4ID09
IEU4MjBNQVgpIHsKLQkgICAgcHJpbnRrKEtFUk5fRVJSICJPb29wcyEgVG9vIG1hbnkgZW50cmll
cyBpbiB0aGUgbWVtb3J5IG1hcCFcbiIpOwotCSAgICByZXR1cm47Ci0JfQorCQlpZiAoeCA9PSBF
ODIwTUFYKSB7CisJCSAgICBwcmludGsoS0VSTl9FUlIgIk9vb3BzISBUb28gbWFueSBlbnRyaWVz
IGluIHRoZSBtZW1vcnkgbWFwIVxuIik7CisJCSAgICByZXR1cm47CisJCX0KIAotCWU4MjAubWFw
W3hdLmFkZHIgPSBzdGFydDsKLQllODIwLm1hcFt4XS5zaXplID0gc2l6ZTsKLQllODIwLm1hcFt4
XS50eXBlID0gdHlwZTsKLQllODIwLm5yX21hcCsrOworCQllODIwLm1hcFt4XS5hZGRyID0gc3Rh
cnQ7CisJCWU4MjAubWFwW3hdLnNpemUgPSBzaXplOworCQllODIwLm1hcFt4XS50eXBlID0gdHlw
ZTsKKwkJZTgyMC5ucl9tYXArKzsKKwl9CiB9IC8qIGFkZF9tZW1vcnlfcmVnaW9uICovCiAKICNk
ZWZpbmUgRTgyMF9ERUJVRwkxCkBAIC00NDUsNyArNDY3LDYgQEAKIHN0YXRpYyB2b2lkIF9faW5p
dCBzZXR1cF9tZW1vcnlfcmVnaW9uKHZvaWQpCiB7CiAJY2hhciAqd2hvID0gbWFjaGluZV9zcGVj
aWZpY19tZW1vcnlfc2V0dXAoKTsKLQogCXByaW50ayhLRVJOX0lORk8gIkJJT1MtcHJvdmlkZWQg
cGh5c2ljYWwgUkFNIG1hcDpcbiIpOwogCXByaW50X21lbW9yeV9tYXAod2hvKTsKIH0gLyogc2V0
dXBfbWVtb3J5X3JlZ2lvbiAqLwpAQCAtNTgzLDYgKzYwNCwyMyBAQAogfQogCiAvKgorICogQ2Fs
bGJhY2sgZm9yIGVmaV9tZW1vcnlfd2Fsay4KKyAqLworc3RhdGljIGludCBfX2luaXQgCitlZmlf
ZmluZF9tYXhfcGZuKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLCB2b2lk
ICphcmcpCit7CisJdW5zaWduZWQgbG9uZyAqbWF4X3BmbiA9IGFyZywgcGZuOworCisJaWYgKHN0
YXJ0IDwgZW5kKSB7CisJCXBmbiA9IFBGTl9VUChlbmQgLTEpOworCQlpZiAocGZuID4gKm1heF9w
Zm4pCisJCQkqbWF4X3BmbiA9IHBmbjsKKwl9CisJcmV0dXJuIDA7Cit9CisKKworLyoKICAqIEZp
bmQgdGhlIGhpZ2hlc3QgcGFnZSBmcmFtZSBudW1iZXIgd2UgaGF2ZSBhdmFpbGFibGUKICAqLwog
dm9pZCBfX2luaXQgZmluZF9tYXhfcGZuKHZvaWQpCkBAIC01OTAsNiArNjI4LDExIEBACiAJaW50
IGk7CiAKIAltYXhfcGZuID0gMDsKKwlpZiAoZWZpX2VuYWJsZWQpIHsKKwkJZWZpX21lbW1hcF93
YWxrKGVmaV9maW5kX21heF9wZm4sICZtYXhfcGZuKTsKKwkJcmV0dXJuOworCX0KKwogCWZvciAo
aSA9IDA7IGkgPCBlODIwLm5yX21hcDsgaSsrKSB7CiAJCXVuc2lnbmVkIGxvbmcgc3RhcnQsIGVu
ZDsKIAkJLyogUkFNPyAqLwpAQCAtNjY0LDYgKzcwNywyNSBAQAogfQogCiAjaWZuZGVmIENPTkZJ
R19ESVNDT05USUdNRU0KKworLyogCisgKiBGcmVlIGFsbCBhdmFpbGFibGUgbWVtb3J5IGZvciBi
b290IHRpbWUgYWxsb2NhdGlvbi4gIFVzZWQKKyAqIGFzIGEgY2FsbGJhY2sgZnVuY3Rpb24gYnkg
ZWZpX21lbW9yeV93YWxrKCkKKyAqLworCitzdGF0aWMgaW50IF9faW5pdCAKK2ZyZWVfYXZhaWxh
YmxlX21lbW9yeSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwgdm9pZCAq
YXJnKQoreworCS8qIGNoZWNrIG1heF9sb3dfcGZuICovCisJaWYgKHN0YXJ0ID49ICgobWF4X2xv
d19wZm4gKyAxKSA8PCBQQUdFX1NISUZUKSkKKwkJcmV0dXJuIDA7CisJaWYgKGVuZCA+PSAoKG1h
eF9sb3dfcGZuICsgMSkgPDwgUEFHRV9TSElGVCkpCisJCWVuZCA9IChtYXhfbG93X3BmbiArIDEp
IDw8IFBBR0VfU0hJRlQ7CisJaWYgKHN0YXJ0IDwgZW5kKQorCQlmcmVlX2Jvb3RtZW0oc3RhcnQs
IGVuZCAtIHN0YXJ0KTsKKworCXJldHVybiAwOworfQogLyoKICAqIFJlZ2lzdGVyIGZ1bGx5IGF2
YWlsYWJsZSBsb3cgUkFNIHBhZ2VzIHdpdGggdGhlIGJvb3RtZW0gYWxsb2NhdG9yLgogICovCkBA
IC02NzEsNiArNzMzLDEwIEBACiB7CiAJaW50IGk7CiAKKwlpZiAoZWZpX2VuYWJsZWQpIHsKKwkJ
ZWZpX21lbW1hcF93YWxrKGZyZWVfYXZhaWxhYmxlX21lbW9yeSwgTlVMTCk7CisJCXJldHVybjsK
Kwl9CiAJZm9yIChpID0gMDsgaSA8IGU4MjAubnJfbWFwOyBpKyspIHsKIAkJdW5zaWduZWQgbG9u
ZyBjdXJyX3BmbiwgbGFzdF9wZm4sIHNpemU7CiAJCS8qCkBAIC03OTgsMTEgKzg2NCwxMSBAQAog
ICogUmVxdWVzdCBhZGRyZXNzIHNwYWNlIGZvciBhbGwgc3RhbmRhcmQgUkFNIGFuZCBST00gcmVz
b3VyY2VzCiAgKiBhbmQgYWxzbyBmb3IgcmVnaW9ucyByZXBvcnRlZCBhcyByZXNlcnZlZCBieSB0
aGUgZTgyMC4KICAqLwotc3RhdGljIHZvaWQgX19pbml0IHJlZ2lzdGVyX21lbW9yeSh1bnNpZ25l
ZCBsb25nIG1heF9sb3dfcGZuKQorc3RhdGljIHZvaWQgX19pbml0IAorbGVnYWN5X2luaXRfaW9t
ZW1fcmVzb3VyY2VzKHN0cnVjdCByZXNvdXJjZSAqY29kZV9yZXNvdXJjZSwgc3RydWN0IHJlc291
cmNlICpkYXRhX3Jlc291cmNlKQogewotCXVuc2lnbmVkIGxvbmcgbG93X21lbV9zaXplOwogCWlu
dCBpOwotCisJCiAJcHJvYmVfcm9tcygpOwogCWZvciAoaSA9IDA7IGkgPCBlODIwLm5yX21hcDsg
aSsrKSB7CiAJCXN0cnVjdCByZXNvdXJjZSAqcmVzOwpAQCAtODI1LDExICs4OTEsMjYgQEAKIAkJ
CSAqICBzbyB3ZSB0cnkgaXQgcmVwZWF0ZWRseSBhbmQgbGV0IHRoZSByZXNvdXJjZSBtYW5hZ2Vy
CiAJCQkgKiAgdGVzdCBpdC4KIAkJCSAqLwotCQkJcmVxdWVzdF9yZXNvdXJjZShyZXMsICZjb2Rl
X3Jlc291cmNlKTsKLQkJCXJlcXVlc3RfcmVzb3VyY2UocmVzLCAmZGF0YV9yZXNvdXJjZSk7CisJ
CQlyZXF1ZXN0X3Jlc291cmNlKHJlcywgY29kZV9yZXNvdXJjZSk7CisJCQlyZXF1ZXN0X3Jlc291
cmNlKHJlcywgZGF0YV9yZXNvdXJjZSk7CiAJCX0KIAl9Cit9CiAKKy8qCisgKiBSZXF1ZXN0IGFk
ZHJlc3Mgc3BhY2UgZm9yIGFsbCBzdGFuZGFyZCByZXNvdXJjZXMKKyAqLworc3RhdGljIHZvaWQg
X19pbml0IHJlZ2lzdGVyX21lbW9yeSh1bnNpZ25lZCBsb25nIG1heF9sb3dfcGZuKQoreworCXVu
c2lnbmVkIGxvbmcgbG93X21lbV9zaXplOworCWludCBpOworCisJaWYgKGVmaV9lbmFibGVkKQor
CQllZmlfaW5pdGlhbGl6ZV9pb21lbV9yZXNvdXJjZXMoJmNvZGVfcmVzb3VyY2UsICZkYXRhX3Jl
c291cmNlKTsKKwllbHNlIAorCQlsZWdhY3lfaW5pdF9pb21lbV9yZXNvdXJjZXMoJmNvZGVfcmVz
b3VyY2UsICZkYXRhX3Jlc291cmNlKTsKKworIAkgLyogRUZJIHN5c3RlbXMgbWF5IHN0aWxsIGhh
dmUgVkdBICovCiAJcmVxdWVzdF9ncmFwaGljc19yZXNvdXJjZSgpOwogCiAJLyogcmVxdWVzdCBJ
L08gc3BhY2UgZm9yIGRldmljZXMgdXNlZCBvbiBhbGwgaVszNDVdODYgUENzICovCkBAIC05NDks
NiArMTAzMCwxMyBAQAogCiBfX3NldHVwKCJub3JlcGxhY2VtZW50Iiwgbm9yZXBsYWNlbWVudF9z
ZXR1cCk7IAogCisvKiAKKyAqIERldGVybWluZSBpZiB3ZSB3ZXJlIGxvYWRlZCBieSBhbiBFRkkg
bG9hZGVyLiAgSWYgc28sIHRoZW4gd2UgaGF2ZSBhbHNvIGJlZW4gCisgKiBwYXNzZWQgdGhlIGVm
aSBtZW1tYXAsIHN5c3RhYiwgZXRjLiwgc28gd2Ugc2hvdWxkIHVzZSB0aGVzZSBkYXRhIHN0cnVj
dHVyZXMgCisgKiBmb3IgaW5pdGlhbGl6YXRpb24uICBOb3RlLCB0aGUgZWZpIGluaXQgY29kZSBw
YXRoIGlzIGRldGVybWluZWQgYnkgdGhlIAorICogZ2xvYmFsIGVmaV9lbmFibGVkLiBUaGlzIGFs
bG93cyB0aGUgc2FtZSBrZXJuZWwgaW1hZ2UgdG8gYmUgdXNlZCBvbiBleGlzdGluZyAKKyAqIHN5
c3RlbXMgKHdpdGggYSB0cmFkaXRpb25hbCBCSU9TKSBhcyB3ZWxsIGFzIG9uIEVGSSBzeXN0ZW1z
LiAgCisgKi8KIHZvaWQgX19pbml0IHNldHVwX2FyY2goY2hhciAqKmNtZGxpbmVfcCkKIHsKIAl1
bnNpZ25lZCBsb25nIG1heF9sb3dfcGZuOwpAQCAtOTU3LDYgKzEwNDUsMTIgQEAKIAlwcmVfc2V0
dXBfYXJjaF9ob29rKCk7CiAJZWFybHlfY3B1X2luaXQoKTsKIAorCS8qIEZJWE1FOiBUaGlzIGlz
bid0IGFuIG9mZmljaWFsIGxvYWRlcl90eXBlIHJpZ2h0IAorCSAqIG5vdyBidXQgZG9lcyBjdXJy
ZW50bHkgd29yayB3aXRoIGVsaWxvLiAKKwkgKi8KKwlpZiAoKExPQURFUl9UWVBFID09IDB4NTAp
ICYmIEVGSV9TWVNUQUIpCisJCWVmaV9lbmFibGVkID0gMTsKKwogIAlST09UX0RFViA9IG9sZF9k
ZWNvZGVfZGV2KE9SSUdfUk9PVF9ERVYpOwogIAlkcml2ZV9pbmZvID0gRFJJVkVfSU5GTzsKICAJ
c2NyZWVuX2luZm8gPSBTQ1JFRU5fSU5GTzsKQEAgLTk3OSw3ICsxMDczLDExIEBACiAJcmRfZG9s
b2FkID0gKChSQU1ESVNLX0ZMQUdTICYgUkFNRElTS19MT0FEX0ZMQUcpICE9IDApOwogI2VuZGlm
CiAJQVJDSF9TRVRVUAotCXNldHVwX21lbW9yeV9yZWdpb24oKTsKKwlpZiAoZWZpX2VuYWJsZWQp
CisJCWVmaV9pbml0KCk7CisJZWxzZQorCQlzZXR1cF9tZW1vcnlfcmVnaW9uKCk7CisKIAljb3B5
X2VkZCgpOwogCiAJaWYgKCFNT1VOVF9ST09UX1JET05MWSkKQEAgLTEwMTMsNiArMTExMSw4IEBA
CiAjaWZkZWYgQ09ORklHX1g4Nl9HRU5FUklDQVJDSAogCWdlbmVyaWNfYXBpY19wcm9iZSgqY21k
bGluZV9wKTsKICNlbmRpZgkKKwlpZiAoZWZpX2VuYWJsZWQpCisJCWVmaV9tYXBfbWVtbWFwKCk7
CiAKIAkvKgogCSAqIFBhcnNlIHRoZSBBQ1BJIHRhYmxlcyBmb3IgcG9zc2libGUgYm9vdC10aW1l
IFNNUCBjb25maWd1cmF0aW9uLgpAQCAtMTAyOCw3ICsxMTI4LDggQEAKIAogI2lmZGVmIENPTkZJ
R19WVAogI2lmIGRlZmluZWQoQ09ORklHX1ZHQV9DT05TT0xFKQotCWNvbnN3aXRjaHAgPSAmdmdh
X2NvbjsKKwlpZiAoIWVmaV9lbmFibGVkIHx8IChlZmlfbWVtX3R5cGUoMHhhMDAwMCkgIT0gRUZJ
X0NPTlZFTlRJT05BTF9NRU1PUlkpKQorCQljb25zd2l0Y2hwID0gJnZnYV9jb247CiAjZWxpZiBk
ZWZpbmVkKENPTkZJR19EVU1NWV9DT05TT0xFKQogCWNvbnN3aXRjaHAgPSAmZHVtbXlfY29uOwog
I2VuZGlmCmRpZmYgLXVyTiBsaW51eC0yLjYuMC10ZXN0Ni1tbTIvYXJjaC9pMzg2L2tlcm5lbC90
aW1lLmMgbGludXgtMi42LjAtdGVzdDYtbW0yLWVmaS9hcmNoL2kzODYva2VybmVsL3RpbWUuYwot
LS0gbGludXgtMi42LjAtdGVzdDYtbW0yL2FyY2gvaTM4Ni9rZXJuZWwvdGltZS5jCTIwMDMtMDkt
MjcgMTc6NTA6MjAuMDAwMDAwMDAwIC0wNzAwCisrKyBsaW51eC0yLjYuMC10ZXN0Ni1tbTItZWZp
L2FyY2gvaTM4Ni9rZXJuZWwvdGltZS5jCTIwMDMtMTAtMDMgMTA6MTA6NDAuMDAwMDAwMDAwIC0w
NzAwCkBAIC00NCw2ICs0NCw3IEBACiAjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+CiAjaW5jbHVk
ZSA8bGludXgvc3lzZGV2Lmg+CiAjaW5jbHVkZSA8bGludXgvYmNkLmg+CisjaW5jbHVkZSA8bGlu
dXgvZWZpLmg+CiAKICNpbmNsdWRlIDxhc20vaW8uaD4KICNpbmNsdWRlIDxhc20vc21wLmg+CkBA
IC0xNjAsNiArMTYxLDM3IEBACiAJcmV0dXJuIHJldHZhbDsKIH0KIAorc3RhdGljIGludCBlZmlf
c2V0X3J0Y19tbXNzKHVuc2lnbmVkIGxvbmcgbm93dGltZSkKK3sKKwlpbnQgcmVhbF9zZWNvbmRz
LCByZWFsX21pbnV0ZXM7CisJdW5zaWduZWQgbG9uZyAJZmxhZ3M7CisJZWZpX3N0YXR1c190IAlz
dGF0dXM7CisJZWZpX3RpbWVfdCAJZWZ0OworCWVmaV90aW1lX2NhcF90IAljYXA7CisKKwlzcGlu
X2xvY2tfaXJxc2F2ZSgmcnRjX2xvY2ssIGZsYWdzKTsKKworCXN0YXR1cyA9IGVmaS5nZXRfdGlt
ZSgmZWZ0LCAmY2FwKTsKKwlpZiAoc3RhdHVzICE9IEVGSV9TVUNDRVNTKQorCQlwYW5pYygiT29v
cHMsIGVmaXRpbWU6IGNhbid0IHJlYWQgdGltZSFcbiIpOworCXJlYWxfc2Vjb25kcyA9IG5vd3Rp
bWUgJSA2MDsKKwlyZWFsX21pbnV0ZXMgPSBub3d0aW1lIC8gNjA7CisKKwlpZiAoKChhYnMocmVh
bF9taW51dGVzIC0gZWZ0Lm1pbnV0ZSkgKyAxNSkvMzApICYgMSkKKwkJcmVhbF9taW51dGVzICs9
IDMwOworCXJlYWxfbWludXRlcyAlPSA2MDsKKworCWVmdC5taW51dGUgPSByZWFsX21pbnV0ZXM7
CisJZWZ0LnNlY29uZCA9IHJlYWxfc2Vjb25kczsKKworCXN0YXR1cyA9IGVmaS5zZXRfdGltZSgm
ZWZ0KTsKKwlpZiAoc3RhdHVzICE9IEVGSV9TVUNDRVNTKQorCQlwYW5pYygiT29vcHM6IGVmaXRp
bWU6IGNhbid0IHJlYWQgdGltZSFcbiIpOworCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmcnRj
X2xvY2ssIGZsYWdzKTsKKwlyZXR1cm4gMDsKK30KKwogLyogbGFzdCB0aW1lIHRoZSBjbW9zIGNs
b2NrIGdvdCB1cGRhdGVkICovCiBzdGF0aWMgbG9uZyBsYXN0X3J0Y191cGRhdGU7CiAKQEAgLTIx
Miw3ICsyNDQsNyBAQAogCQkJPj0gVVNFQ19BRlRFUiAtICgodW5zaWduZWQpIFRJQ0tfU0laRSkg
LyAyICYmCiAJICAgICh4dGltZS50dl9uc2VjIC8gMTAwMCkKIAkJCTw9IFVTRUNfQkVGT1JFICsg
KCh1bnNpZ25lZCkgVElDS19TSVpFKSAvIDIpIHsKLQkJaWYgKHNldF9ydGNfbW1zcyh4dGltZS50
dl9zZWMpID09IDApCisJCWlmICgoZWZpX2VuYWJsZWQgJiYgKCFlZmlfc2V0X3J0Y19tbXNzKHh0
aW1lLnR2X3NlYykgKSkgfHwgKHNldF9ydGNfbW1zcyh4dGltZS50dl9zZWMpID09IDApKQogCQkJ
bGFzdF9ydGNfdXBkYXRlID0geHRpbWUudHZfc2VjOwogCQllbHNlCiAJCQlsYXN0X3J0Y191cGRh
dGUgPSB4dGltZS50dl9zZWMgLSA2MDA7IC8qIGRvIGl0IGFnYWluIGluIDYwIHMgKi8KQEAgLTI3
Nyw2ICszMDksMjcgQEAKIAlzZXRfa3NldF9uYW1lKCJwaXQiKSwKIH07CiAKKy8qCisgKiBUaGlz
IGlzIGNhbGxlZCBiZWZvcmUgdGhlIFJUIG1hcHBpbmdzIGFyZSBpbiBwbGFjZSwgc28gd2UKKyAq
IG5lZWQgdG8gYmUgYWJsZSB0byBnZXQgdGhlIHRpbWUgaW4gcGh5c2ljYWwgbW9kZS4KKyAqLwor
dW5zaWduZWQgbG9uZyBlZmlfZ2V0X3RpbWUodm9pZCkKK3sKKwllZmlfc3RhdHVzX3Qgc3RhdHVz
OworCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CisJZWZpX3RpbWVfdCBlZnQ7CisJZWZpX3RpbWVfY2Fw
X3QgY2FwOworCisJc3Bpbl9sb2NrX2lycXNhdmUoJnJ0Y19sb2NrLCBmbGFncyk7CisJc3RhdHVz
ID0gcGh5c19lZmlfZ2V0X3RpbWUoJmVmdCwgJmNhcCk7CisJaWYgKHN0YXR1cyAhPSBFRklfU1VD
Q0VTUykKKwkJcHJpbnRrKCJPb3BzOiBlZml0aW1lOiBjYW4ndCByZWFkIHRpbWUgc3RhdHVzOiAw
eCVseFxuIiwgc3RhdHVzKTsKKworCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnJ0Y19sb2NrLCBm
bGFncyk7CisJCisJcmV0dXJuIG1rdGltZShlZnQueWVhciwgZWZ0Lm1vbnRoLCBlZnQuZGF5LCBl
ZnQuaG91ciwgZWZ0Lm1pbnV0ZSwgZWZ0LnNlY29uZCk7Cit9CisKIC8qIFhYWCB0aGlzIGRyaXZl
cmZzIHN0dWZmIHNob3VsZCBwcm9iYWJseSBnbyBlbHNld2hlcmUgbGF0ZXIgLWpvaG4gKi8KIHN0
YXRpYyBzdHJ1Y3Qgc3lzX2RldmljZSBkZXZpY2VfaTgyNTMgPSB7CiAJLmlkCT0gMCwKQEAgLTI5
OCw3ICszNTEsMTAgQEAKIC8qIER1cGxpY2F0ZSBvZiB0aW1lX2luaXQoKSBiZWxvdywgd2l0aCBo
cGV0X2VuYWJsZSBwYXJ0IGFkZGVkICovCiB2b2lkIF9faW5pdCBocGV0X3RpbWVfaW5pdCh2b2lk
KQogewotCXh0aW1lLnR2X3NlYyA9IGdldF9jbW9zX3RpbWUoKTsKKwlpZiAoZWZpX2VuYWJsZWQp
CisJCXh0aW1lLnR2X3NlYyA9IGVmaV9nZXRfdGltZSgpOworCWVsc2UKKwkJeHRpbWUudHZfc2Vj
ID0gZ2V0X2Ntb3NfdGltZSgpOwogCXdhbGxfdG9fbW9ub3RvbmljLnR2X3NlYyA9IC14dGltZS50
dl9zZWM7CiAJeHRpbWUudHZfbnNlYyA9IChJTklUSUFMX0pJRkZJRVMgJSBIWikgKiAoTlNFQ19Q
RVJfU0VDIC8gSFopOwogCXdhbGxfdG9fbW9ub3RvbmljLnR2X25zZWMgPSAteHRpbWUudHZfbnNl
YzsKQEAgLTMyNCw4ICszODAsMTAgQEAKIAkJcmV0dXJuOwogCX0KICNlbmRpZgotCi0JeHRpbWUu
dHZfc2VjID0gZ2V0X2Ntb3NfdGltZSgpOworCWlmIChlZmlfZW5hYmxlZCkKKwkJeHRpbWUudHZf
c2VjID0gZWZpX2dldF90aW1lKCk7CisJZWxzZQorCQl4dGltZS50dl9zZWMgPSBnZXRfY21vc190
aW1lKCk7CiAJd2FsbF90b19tb25vdG9uaWMudHZfc2VjID0gLXh0aW1lLnR2X3NlYzsKIAl4dGlt
ZS50dl9uc2VjID0gKElOSVRJQUxfSklGRklFUyAlIEhaKSAqIChOU0VDX1BFUl9TRUMgLyBIWik7
CiAJd2FsbF90b19tb25vdG9uaWMudHZfbnNlYyA9IC14dGltZS50dl9uc2VjOwpkaWZmIC11ck4g
bGludXgtMi42LjAtdGVzdDYtbW0yL2FyY2gvaTM4Ni9tbS9pbml0LmMgbGludXgtMi42LjAtdGVz
dDYtbW0yLWVmaS9hcmNoL2kzODYvbW0vaW5pdC5jCi0tLSBsaW51eC0yLjYuMC10ZXN0Ni1tbTIv
YXJjaC9pMzg2L21tL2luaXQuYwkyMDAzLTEwLTAzIDExOjUwOjQ0LjAwMDAwMDAwMCAtMDcwMAor
KysgbGludXgtMi42LjAtdGVzdDYtbW0yLWVmaS9hcmNoL2kzODYvbW0vaW5pdC5jCTIwMDMtMTAt
MDMgMTA6MTA6NDAuMDAwMDAwMDAwIC0wNzAwCkBAIC0yNSw2ICsyNSw3IEBACiAjaW5jbHVkZSA8
bGludXgvYm9vdG1lbS5oPgogI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4KICNpbmNsdWRlIDxsaW51
eC9wcm9jX2ZzLmg+CisjaW5jbHVkZSA8bGludXgvZWZpLmg+CiAKICNpbmNsdWRlIDxhc20vcHJv
Y2Vzc29yLmg+CiAjaW5jbHVkZSA8YXNtL3N5c3RlbS5oPgpAQCAtNTIsMTIgKzUzLDMwIEBACiAJ
cmV0dXJuIDA7CiB9CiAKK2V4dGVybiBpbnQgaXNfYXZhaWxhYmxlX21lbW9yeShlZmlfbWVtb3J5
X2Rlc2NfdCAqKTsKKwogc3RhdGljIGlubGluZSBpbnQgcGFnZV9pc19yYW0odW5zaWduZWQgbG9u
ZyBwYWdlbnIpCiB7CiAJaW50IGk7CisJdW5zaWduZWQgbG9uZyBhZGRyLCBlbmQ7CisKKwlpZiAo
ZWZpX2VuYWJsZWQpIHsKKwkJZWZpX21lbW9yeV9kZXNjX3QgKm1kOworCQkKKwkJZm9yIChpID0g
MDsgaSA8IG1lbW1hcC5ucl9tYXA7IGkrKykgeworCQkJbWQgPSAmbWVtbWFwLm1hcFtpXTsKKwkJ
CWlmICghaXNfYXZhaWxhYmxlX21lbW9yeShtZCkpCisJCQkJY29udGludWU7CisJCQlhZGRyID0g
KG1kLT5waHlzX2FkZHIrUEFHRV9TSVpFLTEpID4+IFBBR0VfU0hJRlQ7CisJCQllbmQgPSAobWQt
PnBoeXNfYWRkciArIChtZC0+bnVtX3BhZ2VzIDw8IEVGSV9QQUdFX1NISUZUKSkgPj4gUEFHRV9T
SElGVDsKKworCQkJaWYgKChwYWdlbnIgPj0gYWRkcikgJiYgKHBhZ2VuciA8IGVuZCkpCisJCQkJ
cmV0dXJuIDE7CisJCX0KKwkJcmV0dXJuIDA7CisJfQogCiAJZm9yIChpID0gMDsgaSA8IGU4MjAu
bnJfbWFwOyBpKyspIHsKLQkJdW5zaWduZWQgbG9uZyBhZGRyLCBlbmQ7CiAKIAkJaWYgKGU4MjAu
bWFwW2ldLnR5cGUgIT0gRTgyMF9SQU0pCS8qIG5vdCB1c2FibGUgbWVtb3J5ICovCiAJCQljb250
aW51ZTsKZGlmZiAtdXJOIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi9kcml2ZXJzL2FjcGkvS2NvbmZp
ZyBsaW51eC0yLjYuMC10ZXN0Ni1tbTItZWZpL2RyaXZlcnMvYWNwaS9LY29uZmlnCi0tLSBsaW51
eC0yLjYuMC10ZXN0Ni1tbTIvZHJpdmVycy9hY3BpL0tjb25maWcJMjAwMy0xMC0wMyAxMTo1MDo0
NS4wMDAwMDAwMDAgLTA3MDAKKysrIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi1lZmkvZHJpdmVycy9h
Y3BpL0tjb25maWcJMjAwMy0xMC0wMyAxMTo0ODoxOC4wMDAwMDAwMDAgLTA3MDAKQEAgLTI1Miwx
MCArMjUyLDE2IEBACiAJICBkdW1wIHlvdXIgQUNQSSBEU0RUIHRhYmxlIHVzaW5nIC9wcm9jL2Fj
cGkvZHNkdC4KIAogY29uZmlnIEFDUElfRUZJCi0JYm9vbAorIAlib29sICJPYnRhaW4gUlNEUCBm
cm9tIEVGSSBDb25maWd1cmF0aW9uIFRhYmxlIiAKIAlkZXBlbmRzIG9uIEFDUElfSU5URVJQUkVU
RVIKLQlkZXBlbmRzIG9uIElBNjQKLQlkZWZhdWx0IHkKKwlkZXBlbmRzIG9uIElBNjQgfHwgWDg2
CisgIAlkZWZhdWx0IHkKKyAJaGVscAorIAkgICBPbiBFRkkgU3lzdGVtcyB0aGUgUlNEUCBwb2lu
dGVyIGlzIHBhc3NlZCB0byB0aGUga2VybmVsIHZpYQorIAkgICB0aGUgRUZJIENvbmZpZ3VyYXRp
b24gVGFibGUuICBPbiBJdGFuaXVtIHN5c3RlbXMgdGhpcyBpcyAKKyAJICAgc3RhbmRhcmQgYW5k
IHJlcXVpcmVkLiAgRm9yIElBLTMyLCBzeXN0ZW1zIHRoYXQgaGF2ZQorIAkgICBFRkkgZmlybXdh
cmUgc2hvdWxkIGxlYXZlIHRoaXMgZW5hYmxlZC4gIFBsYXRmb3JtcyB3aXRoIAorIAkgICB0cmFk
aXRpb25hbCBsZWdhY3kgQklPUyBzaG91bGQgZGlzYWJsZSB0aGlzIG9wdGlvbi4KIAogY29uZmln
IEFDUElfUkVMQVhFRF9BTUwKIAlib29sICJSZWxheGVkIEFNTCIKZGlmZiAtdXJOIGxpbnV4LTIu
Ni4wLXRlc3Q2LW1tMi9kcml2ZXJzL2FjcGkvb3NsLmMgbGludXgtMi42LjAtdGVzdDYtbW0yLWVm
aS9kcml2ZXJzL2FjcGkvb3NsLmMKLS0tIGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi9kcml2ZXJzL2Fj
cGkvb3NsLmMJMjAwMy0wOS0yNyAxNzo1MDo0OC4wMDAwMDAwMDAgLTA3MDAKKysrIGxpbnV4LTIu
Ni4wLXRlc3Q2LW1tMi1lZmkvZHJpdmVycy9hY3BpL29zbC5jCTIwMDMtMTAtMDMgMTA6MTA6NDAu
MDAwMDAwMDAwIC0wNzAwCkBAIC00Myw3ICs0Myw2IEBACiAKICNpZmRlZiBDT05GSUdfQUNQSV9F
RkkKICNpbmNsdWRlIDxsaW51eC9lZmkuaD4KLXU2NCBlZmlfbWVtX2F0dHJpYnV0ZXMgKHU2NCBw
aHlzX2FkZHIpOwogI2VuZGlmCiAKIApkaWZmIC11ck4gbGludXgtMi42LjAtdGVzdDYtbW0yL2lu
Y2x1ZGUvYXNtLWkzODYvc2V0dXAuaCBsaW51eC0yLjYuMC10ZXN0Ni1tbTItZWZpL2luY2x1ZGUv
YXNtLWkzODYvc2V0dXAuaAotLS0gbGludXgtMi42LjAtdGVzdDYtbW0yL2luY2x1ZGUvYXNtLWkz
ODYvc2V0dXAuaAkyMDAzLTA5LTI3IDE3OjUwOjMxLjAwMDAwMDAwMCAtMDcwMAorKysgbGludXgt
Mi42LjAtdGVzdDYtbW0yLWVmaS9pbmNsdWRlL2FzbS1pMzg2L3NldHVwLmgJMjAwMy0xMC0wMyAx
MDoxMDo0MC4wMDAwMDAwMDAgLTA3MDAKQEAgLTI5LDYgKzI5LDExIEBACiAjZGVmaW5lIElTVF9J
TkZPICAgKCooc3RydWN0IGlzdF9pbmZvICopIChQQVJBTSsweDYwKSkKICNkZWZpbmUgRFJJVkVf
SU5GTyAoKihzdHJ1Y3QgZHJpdmVfaW5mb19zdHJ1Y3QgKikgKFBBUkFNKzB4ODApKQogI2RlZmlu
ZSBTWVNfREVTQ19UQUJMRSAoKihzdHJ1Y3Qgc3lzX2Rlc2NfdGFibGVfc3RydWN0KikoUEFSQU0r
MHhhMCkpCisjZGVmaW5lIEVGSV9TWVNUQUIgKChlZmlfc3lzdGVtX3RhYmxlX3QgKikgKigodW5z
aWduZWQgbG9uZyAqKShQQVJBTSsweDFjNCkpKQorI2RlZmluZSBFRklfTUVNREVTQ19TSVpFICgq
KCh1bnNpZ25lZCBsb25nICopIChQQVJBTSsweDFjOCkpKQorI2RlZmluZSBFRklfTUVNREVTQ19W
RVJTSU9OICgqKCh1bnNpZ25lZCBsb25nICopIChQQVJBTSsweDFjYykpKQorI2RlZmluZSBFRklf
TUVNTUFQICgoZWZpX21lbW9yeV9kZXNjX3QgKikgKigodW5zaWduZWQgbG9uZyAqKShQQVJBTSsw
eDFkMCkpKQorI2RlZmluZSBFRklfTUVNTUFQX1NJWkUgKCooKHVuc2lnbmVkIGxvbmcgKikgKFBB
UkFNKzB4MWQ0KSkpCiAjZGVmaW5lIE1PVU5UX1JPT1RfUkRPTkxZICgqKHVuc2lnbmVkIHNob3J0
ICopIChQQVJBTSsweDFGMikpCiAjZGVmaW5lIFJBTURJU0tfRkxBR1MgKCoodW5zaWduZWQgc2hv
cnQgKikgKFBBUkFNKzB4MUY4KSkKICNkZWZpbmUgVklERU9fTU9ERSAoKih1bnNpZ25lZCBzaG9y
dCAqKSAoUEFSQU0rMHgxRkEpKQpkaWZmIC11ck4gbGludXgtMi42LjAtdGVzdDYtbW0yL2luY2x1
ZGUvbGludXgvZWZpLmggbGludXgtMi42LjAtdGVzdDYtbW0yLWVmaS9pbmNsdWRlL2xpbnV4L2Vm
aS5oCi0tLSBsaW51eC0yLjYuMC10ZXN0Ni1tbTIvaW5jbHVkZS9saW51eC9lZmkuaAkyMDAzLTA5
LTI3IDE3OjUxOjAzLjAwMDAwMDAwMCAtMDcwMAorKysgbGludXgtMi42LjAtdGVzdDYtbW0yLWVm
aS9pbmNsdWRlL2xpbnV4L2VmaS5oCTIwMDMtMTAtMDMgMTM6MjE6MDUuMDAwMDAwMDAwIC0wNzAw
CkBAIC0xNiw2ICsxNiw4IEBACiAjaW5jbHVkZSA8bGludXgvdGltZS5oPgogI2luY2x1ZGUgPGxp
bnV4L3R5cGVzLmg+CiAjaW5jbHVkZSA8bGludXgvcHJvY19mcy5oPgorI2luY2x1ZGUgPGxpbnV4
L3J0Yy5oPgorI2luY2x1ZGUgPGxpbnV4L2lvcG9ydC5oPgogCiAjaW5jbHVkZSA8YXNtL3BhZ2Uu
aD4KICNpbmNsdWRlIDxhc20vc3lzdGVtLmg+CkBAIC04OSw2ICs5MSwxMSBAQAogCiAjZGVmaW5l
IEVGSV9QQUdFX1NISUZUCQkxMgogCisvKiAKKyAqIEZvciBjdXJyZW50IHg4NiBpbXBsZW1lbnRh
dGlvbnMgb2YgRUZJLCB0aGVyZSBpcyAKKyAqIGFkZGl0aW9uYWwgcGFkZGluZyBpbiB0aGUgbWVt
IGRlc2NyaXB0b3JzLiAgVGhpcyBpcyBub3QKKyAqIHRoZSBjYXNlIGluIGlhNjQuICBOZWVkIHRv
IGhhdmUgdGhpcyBmaXhlZCBpbiB0aGUgZi93LgorICovCiB0eXBlZGVmIHN0cnVjdCB7CiAJdTMy
IHR5cGU7CiAJdTMyIHBhZDsKQEAgLTk2LDYgKzEwMyw5IEBACiAJdTY0IHZpcnRfYWRkcjsKIAl1
NjQgbnVtX3BhZ2VzOwogCXU2NCBhdHRyaWJ1dGU7CisjaWYgZGVmaW5lZCAoX19pMzg2X18pCisJ
dTY0IHBhZDE7CisjZW5kaWYKIH0gZWZpX21lbW9yeV9kZXNjX3Q7CiAKIHR5cGVkZWYgaW50IGVm
aV9mcmVlbWVtX2NhbGxiYWNrX3QgKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcg
ZW5kLCB2b2lkICphcmcpOwpAQCAtMTMyLDYgKzE0Miw3IEBACiAgKi8KICNkZWZpbmUgRUZJX1JF
U0VUX0NPTEQgMAogI2RlZmluZSBFRklfUkVTRVRfV0FSTSAxCisjZGVmaW5lIEVGSV9SRVNFVF9T
SFVURE9XTiAyCiAKIC8qCiAgKiBFRkkgUnVudGltZSBTZXJ2aWNlcyB0YWJsZQpAQCAtMTY5LDYg
KzE4MCwxMCBAQAogdHlwZWRlZiBlZmlfc3RhdHVzX3QgZWZpX2dldF9uZXh0X2hpZ2hfbW9ub19j
b3VudF90ICh1MzIgKmNvdW50KTsKIHR5cGVkZWYgdm9pZCBlZmlfcmVzZXRfc3lzdGVtX3QgKGlu
dCByZXNldF90eXBlLCBlZmlfc3RhdHVzX3Qgc3RhdHVzLAogCQkJCSB1bnNpZ25lZCBsb25nIGRh
dGFfc2l6ZSwgZWZpX2NoYXIxNl90ICpkYXRhKTsKK3R5cGVkZWYgZWZpX3N0YXR1c190IGVmaV9z
ZXRfdmlydHVhbF9hZGRyZXNzX21hcF90ICh1bnNpZ25lZCBsb25nIG1lbW9yeV9tYXBfc2l6ZSwK
KwkJCQkJCXVuc2lnbmVkIGxvbmcgZGVzY3JpcHRvcl9zaXplLAorCQkJCQkJdTMyIGRlc2NyaXB0
b3JfdmVyc2lvbiwKKwkJCQkJCWVmaV9tZW1vcnlfZGVzY190ICp2aXJ0dWFsX21hcCk7CiAKIC8q
CiAgKiAgRUZJIENvbmZpZ3VyYXRpb24gVGFibGUgYW5kIEdVSUQgZGVmaW5pdGlvbnMKQEAgLTE5
NCw2ICsyMDksOSBAQAogI2RlZmluZSBIQ0RQX1RBQkxFX0dVSUQJXAogICAgIEVGSV9HVUlEKCAg
MHhmOTUxOTM4ZCwgMHg2MjBiLCAweDQyZWYsIDB4ODIsIDB4NzksIDB4YTgsIDB4NGIsIDB4Nzks
IDB4NjEsIDB4NzgsIDB4OTggKQogCisjZGVmaW5lIFVHQV9JT19QUk9UT0NPTF9HVUlEIFwKKyAg
ICBFRklfR1VJRCggIDB4NjFhNGQ0OWUsIDB4NmY2OCwgMHg0ZjFiLCAweGI5LCAweDIyLCAweGE4
LCAweDZlLCAweGVkLCAweGIsIDB4NywgMHhhMiApCisKIHR5cGVkZWYgc3RydWN0IHsKIAllZmlf
Z3VpZF90IGd1aWQ7CiAJdW5zaWduZWQgbG9uZyB0YWJsZTsKQEAgLTIxOCw2ICsyMzYsMTMgQEAK
IAl1bnNpZ25lZCBsb25nIHRhYmxlczsKIH0gZWZpX3N5c3RlbV90YWJsZV90OwogCitzdHJ1Y3Qg
ZWZpX21lbW9yeV9tYXAgeworCWVmaV9tZW1vcnlfZGVzY190ICpwaHlzX21hcDsKKwllZmlfbWVt
b3J5X2Rlc2NfdCAqbWFwOworCWludCBucl9tYXA7CisJdW5zaWduZWQgbG9uZyBkZXNjX3ZlcnNp
b247Cit9OworCiAvKgogICogQWxsIHJ1bnRpbWUgYWNjZXNzIHRvIEVGSSBnb2VzIHRocm91Z2gg
dGhpcyBzdHJ1Y3R1cmU6CiAgKi8KQEAgLTIzMCw2ICsyNTUsNyBAQAogCXZvaWQgKnNhbF9zeXN0
YWI7CQkvKiBTQUwgc3lzdGVtIHRhYmxlICovCiAJdm9pZCAqYm9vdF9pbmZvOwkJLyogYm9vdCBp
bmZvIHRhYmxlICovCiAJdm9pZCAqaGNkcDsJCQkvKiBIQ0RQIHRhYmxlICovCisJdm9pZCAqdWdh
OwkJCS8qIFVHQSB0YWJsZSAqLwogCWVmaV9nZXRfdGltZV90ICpnZXRfdGltZTsKIAllZmlfc2V0
X3RpbWVfdCAqc2V0X3RpbWU7CiAJZWZpX2dldF93YWtldXBfdGltZV90ICpnZXRfd2FrZXVwX3Rp
bWU7CkBAIC0yMzksNiArMjY1LDcgQEAKIAllZmlfc2V0X3ZhcmlhYmxlX3QgKnNldF92YXJpYWJs
ZTsKIAllZmlfZ2V0X25leHRfaGlnaF9tb25vX2NvdW50X3QgKmdldF9uZXh0X2hpZ2hfbW9ub19j
b3VudDsKIAllZmlfcmVzZXRfc3lzdGVtX3QgKnJlc2V0X3N5c3RlbTsKKwllZmlfc2V0X3ZpcnR1
YWxfYWRkcmVzc19tYXBfdCAqc2V0X3ZpcnR1YWxfYWRkcmVzc19tYXA7CiB9IGVmaTsKIAogc3Rh
dGljIGlubGluZSBpbnQKQEAgLTI2MCwxMiArMjg3LDIwIEBACiAKIGV4dGVybiB2b2lkIGVmaV9p
bml0ICh2b2lkKTsKIGV4dGVybiB2b2lkIGVmaV9tYXBfcGFsX2NvZGUgKHZvaWQpOworZXh0ZXJu
IHZvaWQgZWZpX21hcF9tZW1tYXAodm9pZCk7CiBleHRlcm4gdm9pZCBlZmlfbWVtbWFwX3dhbGsg
KGVmaV9mcmVlbWVtX2NhbGxiYWNrX3QgY2FsbGJhY2ssIHZvaWQgKmFyZyk7CiBleHRlcm4gdm9p
ZCBlZmlfZ2V0dGltZW9mZGF5IChzdHJ1Y3QgdGltZXNwZWMgKnRzKTsKIGV4dGVybiB2b2lkIGVm
aV9lbnRlcl92aXJ0dWFsX21vZGUgKHZvaWQpOwkvKiBzd2l0Y2ggRUZJIHRvIHZpcnR1YWwgbW9k
ZSwgaWYgcG9zc2libGUgKi8KIGV4dGVybiB1NjQgZWZpX2dldF9pb2Jhc2UgKHZvaWQpOwogZXh0
ZXJuIHUzMiBlZmlfbWVtX3R5cGUgKHVuc2lnbmVkIGxvbmcgcGh5c19hZGRyKTsKIGV4dGVybiB1
NjQgZWZpX21lbV9hdHRyaWJ1dGVzICh1bnNpZ25lZCBsb25nIHBoeXNfYWRkcik7CitleHRlcm4g
dm9pZCBlZmlfaW5pdGlhbGl6ZV9pb21lbV9yZXNvdXJjZXMoc3RydWN0IHJlc291cmNlICpjb2Rl
X3Jlc291cmNlLAorCQkJCQlzdHJ1Y3QgcmVzb3VyY2UgKmRhdGFfcmVzb3VyY2UpOworZXh0ZXJu
IGVmaV9zdGF0dXNfdCBwaHlzX2VmaV9nZXRfdGltZShlZmlfdGltZV90ICp0bSwgZWZpX3RpbWVf
Y2FwX3QgKnRjKTsKK2V4dGVybiBzdHJ1Y3QgZWZpX21lbW9yeV9tYXAgbWVtbWFwOworZXh0ZXJu
IGludCBlZmlfZW5hYmxlZDsKIAogLyoKICAqIFZhcmlhYmxlIEF0dHJpYnV0ZXMKZGlmZiAtdXJO
IGxpbnV4LTIuNi4wLXRlc3Q2LW1tMi9pbml0L21haW4uYyBsaW51eC0yLjYuMC10ZXN0Ni1tbTIt
ZWZpL2luaXQvbWFpbi5jCi0tLSBsaW51eC0yLjYuMC10ZXN0Ni1tbTIvaW5pdC9tYWluLmMJMjAw
My0wOS0yNyAxNzo1MDoxMC4wMDAwMDAwMDAgLTA3MDAKKysrIGxpbnV4LTIuNi4wLXRlc3Q2LW1t
Mi1lZmkvaW5pdC9tYWluLmMJMjAwMy0xMC0wMyAxMDoxMDo0MC4wMDAwMDAwMDAgLTA3MDAKQEAg
LTM3LDYgKzM3LDcgQEAKICNpbmNsdWRlIDxsaW51eC9tb2R1bGVwYXJhbS5oPgogI2luY2x1ZGUg
PGxpbnV4L3dyaXRlYmFjay5oPgogI2luY2x1ZGUgPGxpbnV4L2NwdS5oPgorI2luY2x1ZGUgPGxp
bnV4L2VmaS5oPgogCiAjaW5jbHVkZSA8YXNtL2lvLmg+CiAjaW5jbHVkZSA8YXNtL2J1Z3MuaD4K
QEAgLTQzNiw2ICs0MzcsOCBAQAogCXBpZG1hcF9pbml0KCk7CiAJcGd0YWJsZV9jYWNoZV9pbml0
KCk7CiAJcHRlX2NoYWluX2luaXQoKTsKKwlpZiAoZWZpX2VuYWJsZWQpCisJCWVmaV9lbnRlcl92
aXJ0dWFsX21vZGUoKTsKIAlmb3JrX2luaXQobnVtX3BoeXNwYWdlcyk7CiAJcHJvY19jYWNoZXNf
aW5pdCgpOwogCWJ1ZmZlcl9pbml0KCk7Cg==

------_=_NextPart_001_01C389F7.CFD6E55E--
