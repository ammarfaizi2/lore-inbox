Return-Path: <linux-kernel-owner+willy=40w.ods.org-S263971AbUFXHUS@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S263971AbUFXHUS (ORCPT <rfc822;willy@w.ods.org>);
	Thu, 24 Jun 2004 03:20:18 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S263979AbUFXHUS
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Thu, 24 Jun 2004 03:20:18 -0400
Received: from sv1.valinux.co.jp ([210.128.90.2]:55991 "EHLO sv1.valinux.co.jp")
	by vger.kernel.org with ESMTP id S263971AbUFXHUC (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 24 Jun 2004 03:20:02 -0400
Date: Thu, 24 Jun 2004 16:19:59 +0900
From: IWAMOTO Toshihiro <iwamoto@valinux.co.jp>
To: Dave Hansen <haveblue@us.ibm.com>
Cc: Hirokazu Takahashi <taka@valinux.co.jp>, ashwin_s_rao@yahoo.com,
       Valdis.Kletnieks@vt.edu,
       Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
       linux-mm <linux-mm@kvack.org>
Subject: Re: Atomic operation for physically moving a page (for memory	defragmentation)
In-Reply-To: <1088024190.28102.24.camel@nighthawk>
References: <20040619031536.61508.qmail@web10902.mail.yahoo.com>
	<1087619137.4921.93.camel@nighthawk>
	<20040623.205906.71913783.taka@valinux.co.jp>
	<1088024190.28102.24.camel@nighthawk>
User-Agent: Wanderlust/2.10.1 (Watching The Wheels) SEMI/1.14.6 (Maruoka) FLIM/1.14.6 (Marutamachi) APEL/10.6 Emacs/21.3 (i386-pc-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Message-Id: <20040624071959.B76D970A2D@sv1.valinux.co.jp>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

At Wed, 23 Jun 2004 13:56:30 -0700,
Dave Hansen wrote:
> 
> On Wed, 2004-06-23 at 04:59, Hirokazu Takahashi wrote:
> > We should know that many part of kernel code will access the page
> > without holding a lock_page(). The lock_page() can't block them.
> 
> No, but it will block them from establishing a new PTE to the page.  You
> need to:
> 
> 1. make sure no new PTEs can be established to the page
> 2. make sure there are no valid PTEs to the page.
> 3. do the move
> 
> My suggestion relates to 1, only.

I wonder if you are talking exclusively about swap (anonymous) pages,
where lock_page() might work.

(I wonder why lock_page() is needed in do_swap_page(), btw.)

For page caches, usually lock_page() cannot prevent accesses to them,
and there are several kernel functions which don't need PTE mappings
for access.  One of such functions is do_generic_mapping_read().

--
IWAMOTO Toshihiro
