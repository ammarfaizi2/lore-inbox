Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261323AbVAGJOZ@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261323AbVAGJOZ (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 7 Jan 2005 04:14:25 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261328AbVAGJOY
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 7 Jan 2005 04:14:24 -0500
Received: from vds-320151.amen-pro.com ([62.193.204.86]:52612 "EHLO
	vds-320151.amen-pro.com") by vger.kernel.org with ESMTP
	id S261323AbVAGJKe (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 7 Jan 2005 04:10:34 -0500
Subject: [PATCH] Trusted Path Execution LSM 0.2 (20050107)
From: Lorenzo =?ISO-8859-1?Q?Hern=E1ndez_?=
	 =?ISO-8859-1?Q?Garc=EDa-Hierro?= <lorenzo@gnu.org>
To: linux-kernel@vger.kernel.org
Cc: narahimi@us.ibm.com, Chris Wright <chrisw@osdl.org>,
       Stephen Smalley <sds@epoch.ncsc.mil>,
       "Serge E.Hallyn" <serue@us.ibm.com>
Content-Type: multipart/signed; micalg=pgp-sha1; protocol="application/pgp-signature"; boundary="=-tVI6wma4GZcMTjjiTbo6"
Date: Fri, 07 Jan 2005 10:09:49 +0100
Message-Id: <1105088989.3751.10.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.2 
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


--=-tVI6wma4GZcMTjjiTbo6
Content-Type: multipart/mixed; boundary="=-5qqeNFykNeGPiP1gZ981"


--=-5qqeNFykNeGPiP1gZ981
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi,

As Chris Wright suggested, the old limitations of the module are not
existing anymore, and the protection hooks are now based on memory
mappings of executables, which means, you can't bypass it by using the
old ld-linux shared library wrapping trick.

Also, many fixes for the module memory use and management, that also
prevent a possible overflowing in read functions of acl management code,
reported by Brad Spengler (a.k.a. spender) when we were revising it
yesterday night.

Also Seth Arnold helped me with some fixes and recommendations.
Anyway, feel free to try to mess it up, i would appreciate any
information about possible vulnerabilities, unexpected behaviors,
stinking buffers...whatever else ;)
Those who have contributed to this little project are listed in the
tpe.c source file.

The patch is attached, but i encourage to check out the
http://selinux.tuxedo-es.org/tpe-lsm/ site, as there you can find two
regression tests, one to try to bypass the engine and the other one for
trigger a basic overflow in the acl read functions (results can be found
at http://selinux.tuxedo-es.org/tpe-lsm/rtest2-log.txt).

The current limitations are described in the tpe-lsm.txt file,
inside ./Documentation/ and a few examples can be found at
http://selinux.tuxedo-es.org/tpe-lsm/0.2-TPE-LSM-Demonstration.txt )

Now i think it could have a chance for mainline inclusion.

Cheers,
--=20
Lorenzo Hern=E1ndez Garc=EDa-Hierro <lorenzo@gnu.org> [1024D/6F2B2DEC]
[2048g/9AE91A22] Hardened Debian head developer & project manager

--=-5qqeNFykNeGPiP1gZ981
Content-Disposition: attachment; filename=tpe-20050107.patch
Content-Type: text/x-patch; name=tpe-20050107.patch; charset=ISO-8859-1
Content-Transfer-Encoding: base64

ZGlmZiAtTnVyIC4uL2xpbnV4LTIuNi4xMC9Eb2N1bWVudGF0aW9uL3RwZS1sc20udHh0IGxpbnV4
LTIuNi4xMC10cGUvRG9jdW1lbnRhdGlvbi90cGUtbHNtLnR4dA0KLS0tIC4uL2xpbnV4LTIuNi4x
MC9Eb2N1bWVudGF0aW9uL3RwZS1sc20udHh0CTE5NzAtMDEtMDEgMDE6MDA6MDAuMDAwMDAwMDAw
ICswMTAwDQorKysgbGludXgtMi42LjEwLXRwZS9Eb2N1bWVudGF0aW9uL3RwZS1sc20udHh0CTIw
MDUtMDEtMDcgMDE6MzY6MzUuMDAwMDAwMDAwICswMTAwDQpAQCAtMCwwICsxLDEwMyBAQA0KK1Ry
dXN0ZWQgUGF0aCBFeGVjdXRpb24gTGludXggU2VjdXJpdHkgTW9kdWxlDQorQ29weXJpZ2h0IChD
KSAyMDAzIElCTSBDb3JwLiA8bmFyYWhpbWlAdXMuaWJtLmNvbT4NCitDb3B5cmlnaHQgKEMpIDIw
MDUgTG9yZW56byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyA8bG9yZW56b0BnbnUub3JnPg0KK0F1
dGhvcjogTG9yZW56byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyAoT3JpZ2luYWw6IE5pa2kgUmFo
aW1pKQ0KK1RoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBhY2NvcmRpbmcgdG8gdGhlIEdOVSBHZW5l
cmFsIFB1YmxpYyBMaWNlbnNlLg0KK1RoaXMgbW9kdWxlIHdhcyB0ZXN0ZWQgb24gdGhlIExpbnV4
IGtlcm5lbCAyLjYuOSBhbmQgMi42LjEwLg0KKw0KK1RoZSBwdXJwb3NlIG9mIHRoZSBUcnVzdGVk
IFBhdGggRXhlY3V0aW9uIExpbnV4IFNlY3VyaXR5IE1vZHVsZSBpcyB0byBlbmFibGUgYQ0KK2No
ZWNrIGluIHRoZSBMaW51eCBrZXJuZWwgdG8gbGltaXQgdGhlIHJ1bm5pbmcgb2YgZXhlY3V0YWJs
ZXMgaW4gdHJ1c3RlZCBwYXRocw0KK3NvIHRoYXQgdGhlIHBvdGVudGlhbCBmb3IgbWFsaWNpb3Vz
IGNvZGUgdG8gYmUgcnVuIG9uIHRoZSBzeXN0ZW0gaXMgcmVkdWNlZC4NCitBIHRydXN0ZWQgcGF0
aCBpcyBvbmUgaW4gd2hpY2ggdGhlIHBhcmVudCBkaXJlY3Rvcnkgb2YgYSBmaWxlIGlzIG93bmVk
IGJ5IHJvb3QNCithbmQgaXMgbmVpdGhlciBncm91cCBub3Igb3RoZXIgd3JpdGVhYmxlLiANCitU
aGUgbW9kdWxlIHJlbGllcyBvbiBhIGtlcm5lbCBob29rIHdoaWNoIGNoZWNrcyB0byBzZWUgaWYg
dGhlIGdpdmVuIHBhdGggaXMNCit0cnVzdGVkIG9yIG5vdCBhbmQgd2hvIGlzIHRoZSB1c2VyIChv
ciBncm91cCBtZW1iZXIpIHRoYXQgY2F1c2VkIHRoZSBldmVudCAoZXhlY3V0aW9uKS4NCitUaGlz
IGNoZWNrIHRha2VzIHBsYWNlIGRpcmVjdGx5IHVwb24gYW4gYXR0ZW1wdCB0byBleGVjdXRlIHRo
ZSBjb2RlIGJ5IHVzaW5nIHRoZSANCitmaWxlX21tYXAgYW5kIGZpbGVfbXByb3RlY3QgaG9va3Mg
d2hpY2ggY29udHJvbCBob3cgbW1hcCgpIGNhbiBkbyB0aGUgbWVtb3J5IG1hcHBpbmcNCitmb3Ig
YW4gZXhlY3V0YWJsZSwgcHJldmVudGluZyB0aGUgZW5naW5lIHRvIGJlIGJ5cGFzc2VkIGJ5IHVz
aW5nIHRyaWNrcyBsaWtlIHRoZQ0KK2xkLWxpbnV4LnNvLjIgb25lIG9yIGFueSBvdGhlciBzaGFy
ZWQtbGlicmFyeS13cmFwcGluZyB0cmljay5BbHNvLCB0aGUgZmlsZV9tcHJvdGVjdA0KK2hvb2sg
cHJldmVudHMgbXByb3RlY3QoKSBvZiBiZWluZyBhYnVzZWQgZm9yIGJ5cGFzcyB0aGUgVFBFIGVu
Z2luZS4NCitPbGQgYnBybV9jaGVja19zZWN1cml0eSBiZWhhdmlvciBpcyBub3QgYW55bW9yZSB1
c2VkIGFuZCBpcyBkcm9wcGVkIGluIHRoZSBzb3VyY2UuIA0KKw0KK0xpbWl0YXRpb25zOiANCitS
aWdodCBub3csIHRoZSBlbmdpbmUgZG9lcyBub3QgdXNlIHRoZSBicHJtX3NlY3VyZWV4ZWMgaG9v
ayB0byANCitwcmV2ZW50IHVzZSBvZiBzZW5zaXRpdmUgTERfe1BSRUxPQUQsREVCVUd9IHZhcmlh
YmxlcyBieSB1bnRydXN0ZWQgdXNlcnMgb3IgZ3JvdXBzLCBidXQNCittYWtpbmcgdGhlc2UgY2hl
Y2tzIHJlbHlpbmcgaW4ga2VybmVsIHNwYWNlIGhhcyBiZWVuIGRlbW9uc3RyYXRlZCBiZWluZyBs
ZXNzIGVmZmljaWVudA0KK3RoYW4gc2ltcGx5IGNoZWNraW5nIGFuZCBoYXZpbmcgYSB3ZWxsLWNv
bmZpZ3VyZWQgdXNlciBzcGFjZS4NCitBbHNvLCBzY3JpcHQgb3Igc291cmNlIGludGVycHJldGVy
cyBsaWtlIHNoIGZvciBzaGVsbCBzY3JpcHRzLCBweXRob24sIGV0YyBjb3VsZCBzdGlsbA0KK2V4
ZWN1dGUgY29kZSBhcyB0aGV5IHJ1biBub3JtYWxseSBmcm9tIHRydXN0ZWQgcGF0aHMsIHRoZSBz
b2x1dGlvbiByZWxpZXMgb24gaGF2aW5nIHRoZW0NCitpbiBub24gdHJ1c3RlZCBwYXRocyBvciBl
dmVuIGltcGxlbWVudGluZyBhbiB1c2VyIHNwYWNlIGNvbnRyb2wgdG9vbCwgdXNlIFNFTGludXgg
b3INCithbiBhZHZhbmNlZCBtZXRob2QgZm9yIG1lbW9yeSBtYXBwaW5ncyBleGVjdXRpb24uDQor
VGhpcyBmZWF0dXJlcyBjb3VsZCBiZSBkZXZlbG9wZWQsIGJ1dCBpdCdzIG5vdCBhIGNyaXRpY2Fs
LCBibG9ja2luZyBpc3N1ZSBhbmQgaW4gbXkgb3BpbmlvbiwNCit0aGV5IHNob3VsZG4ndCByZWx5
IG9uIHRoZSBrZXJuZWwgc3BhY2UuDQorDQorVGhlIG1vZHVsZSBhbHNvIGNyZWF0ZXMgdHdvIFRy
dXN0ZWQgUGF0aCBhY2Nlc3MgY29udHJvbCBsaXN0cyB3aGljaCBjYW4gYmUgYWNjZXNzZWQNCiti
eSBhIHN5c2ZzIG1vdW50cG9pbnQsIGluc2lkZSB0aGUgLi90cGVmcy8gc3ViZGlyIChpZTogL3N5
cy90cGVmcyksIHdyaXRlYWJsZSBieSByb290LA0KK3dobyBjYW4gYWRkIGFuZCBkZWxldGUgdWlk
cyAodXNlciBpZCdzKSBhbmQgYSBlbnRpcmUgcmFuZ2Ugb2YgdXNlcnMgdXNpbmcgdGhlIChuZXcp
IG5hdGl2ZQ0KK3N1cHBvcnQgZm9yIHBlci1naWQgKGdyb3VwIGlkKSBiYXNpcyBhY2Nlc3MgY29u
dHJvbCBsaXN0cy4gQSB1c2VyIG9uIHRoZSBsaXN0IGlzIA0KK2NvbnNpZGVyZWQgdHJ1c3RlZC4N
CitBbHNvLCBpdCBjcmVhdGVzIGEgcHJvY2ZzIGVudHJ5IGNhbGxlZCAidHBlIiAoaWU6IC9wcm9j
L3RwZSkgd2hpY2ggcHJvdmlkZXMNCit2ZXJzaW9uIGluZm9ybWF0aW9uLCB0b3RhbCBhbW91bnQg
b2YgdHJ1c3RlZCB1c2VycywgdG90YWwgYW1vdW50IG9mIHRydXN0ZWQgZ3JvdXBzIGFuZA0KK290
aGVyIGluZm9ybWF0aW9uLCBkZXBlbmRpbmcgb24gdGhlIGNvZGUgcmV2aXNpb24pLCBhbmQgdGhv
c2Ugd2hvIHdhbnQgZXh0cmEgZ2FyYmFnZQ0KK2Zyb20gdGhlIGtlcm5lbCB3aWxsIGxpa2UgdG8g
ZW5hYmxlZCBkZWJ1Z2dpbmcgYnkgcGFzc2luZyBkZWJ1Zz0xIHRvIHRoZSBtb2R1bGUgcGFyYW1l
dGVycy4NCitCeSBkZWZhdWx0LCByb290IGlzIGhhcmQgY29kZWQgb250byB0aGlzIGxpc3Qgd2l0
aCBhbHNvIGEgdHJ1c3RlZCBnaWQNCit3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgd2hl
biBzZWxlY3RpbmcgdGhlICJHSUQgZm9yIHRydXN0ZWQgdXNlcnMiIG9wdGlvbiBpbiBrZXJuZWwN
Citjb25maWd1cmF0aW9uIChTRUNVUklUWV9UUEVfVFJVU1RFRF9HSUQpLg0KKw0KK1RodXMgaWYg
dXNlciBBIGF0dGVtcHRzIHRvIHJ1biBhbiBleGVjdXRhYmxlIGluIHBhdGggQSwgdGhlIGZvbGxv
d2luZyBzY2VuYXJpb3MNCitjYW4gcGxheSBvdXQ6DQorDQorMS4gVHJ1c3RlZCB1c2VyLHRydXN0
ZWQgcGF0aCAJCQk9IFVzZXIgaXMgYWJsZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuDQorMi4gVHJ1
c3RlZCB1c2VyLHRydXN0ZWQgcGF0aCx0cnVzdGVkIGdyb3VwCT0gVXNlciBpcyBhYmxlIHRvIHJ1
biB0aGUgZXhlY3V0YWJsZS4NCiszLiBUcnVzdGVkIHVzZXIsdW50cnVzdGVkIHBhdGggIAkJPSBV
c2VyIGlzIGFibGUgdG8gcnVuIHRoZSBleGVjdXRhYmxlLg0KKzQuIFRydXN0ZWQgdXNlcix1bnRy
dXN0ZWQgcGF0aCx0cnVzdGVkIGdyb3VwCT0gVXNlciBpcyBhYmxlIHRvIHJ1biB0aGUgZXhlY3V0
YWJsZS4NCis1LiBUcnVzdGVkIHVzZXIsdW50cnVzdGVkIHBhdGgsdW50cnVzdGVkIGdyb3VwCT0g
VXNlciBpcyBhYmxlIHRvIHJ1biB0aGUgZXhlY3V0YWJsZS4NCis2LiBVbnRydXN0ZWQgdXNlcix0
cnVzdGVkIHBhdGgJIAkJPSBVc2VyIGlzIGFibGUgdG8gcnVuIHRoZSBleGVjdXRhYmxlLg0KKzcu
IFVudHJ1c3RlZCB1c2VyLHRydXN0ZWQgcGF0aCx0cnVzdGVkIGdyb3VwIAk9IFVzZXIgaXMgYWJs
ZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuDQorOC4gVW50cnVzdGVkIHVzZXIsdHJ1c3RlZCBwYXRo
LHVudHJ1c3RlZCBncm91cCAJPSBVc2VyIGlzIGFibGUgdG8gcnVuIHRoZSBleGVjdXRhYmxlLg0K
KzkuIFVudHJ1c3RlZCB1c2VyLHVudHJ1c3RlZCBwYXRoCQk9IFVzZXIgaXMgbm90IGFibGUgdG8g
cnVuIHRoZSBleGVjdXRhYmxlLiMNCisxMC4gVW50cnVzdGVkIHVzZXIsdW50cnVzdGVkIHBhdGgs
dHJ1c3RlZCBncm91cAk9IFVzZXIgaXMgYWJsZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuDQorMTEu
IFVudHJ1c3RlZCB1c2VyLHVudHJ1c3RlZCBwYXRoLHVudHJ1c3RlZCBncm91cD0gVXNlciBpcyBu
b3QgYWJsZSB0byBydW4gdGhlIGV4ZWN1dGFibGUuIw0KKw0KK0luIGV4ZWN1dGlvbiB0ZXJtcywg
dW50cnVzdGVkIHVzZXJzIHVuZGVyIHVudHJ1c3RlZCBncm91cHMgYW5kIHBhdGhzIHdvdWxkbid0
DQorYmUgYWJsZSB0byBjaGFuZ2Ugb3IgYWx0ZXIgdGhlIG1lbW9yeSBsYXlvdXQgbm9yIG1tYXAo
KSBleGVjdXRhYmxlcyBpbiBtZW1vcnksDQorcHJldmVudGluZyBhbnkgdHlwZSBvZiB1bnRydXN0
ZWQgZXhlY3V0aW9uLg0KKw0KK0luIHNob3J0LCBpZiB0aGUgcGF0aCBhbmQgdXNlciBhcmUgYm90
aCB1bnRydXN0ZWQgKGFuZCBpZiB0aGUgZ3JvdXAgaXMgdW50cnVzdGVkKSwNCitleGVjdXRpb24g
d2lsbCBiZSBkZW5pZWQgc2VuZGluZyBhIG1lc3NhZ2Ugd2l0aCB0aGUgdWlkLGdpZCxldWlkLGVn
aWQscGlkIGFuZCBmdWxsIHBhdGgNCit0byBiaW5hcnkgdGhhdCBjYXVzZWQgdGhlIGV2ZW50Lg0K
Kw0KK0luIG9yZGVyIHRvIGFjdHVhbGx5IG1vZGlmeSB0aGUgYWNjZXNzIGNvbnRyb2wgbGlzdCBm
b3IgVFBFLCB0aGUgbW9kdWxlIHVzZXMNCithIHN5c2ZzIHN1YnN5c3RlbSBjYWxsZWQgdHBlZnMu
IFRoZSB0cGVmcyBjb250YWlucyBmb3VyIGZpbGVzOyBhZGQsIGRlbCwgYWRkLWdyb3VwDQorYW5k
IGRlbC1ncm91cC4NCitQZXJmb3JtaW5nIHJlYWQgYW5kIHdyaXRlIG9wZXJhdGlvbnMgb24gdGhl
IGFmb3JlbWVudGlvbmVkIGZpbGVzIGNyZWF0ZXMgYSB1c2VyDQordG8gc3lzdGVtIGludGVyZmFj
ZSB0aGF0IHdpbGwgYWx0ZXIgdGhlIFRQRSBhY2Nlc3MgY29udHJvbCBsaXN0LiBTZWUgDQorIk1v
ZGlmeWluZyB0aGUgVFBFIEFjY2VzcyBDb250cm9sIExpc3RzIiBiZWxvdyBmb3IgdGhlIG1ldGhv
ZHMgb2YgYWx0ZXJpbmcgdGhlIGxpc3QgDQordXNpbmcgdGhlc2UgZmlsZXMuDQorTm90ZTogVGhl
IG9yaWdpbmFsIHR3byBmaWxlIGFwcHJvYWNoIHdhcyB1dGlsaXplZCByYXRoZXIgdGhhbiBhIHNp
bmdsZSBmaWxlIGluIG9yZGVyIHRvDQora2VlcCB0aGUgY29kZSBhbmQgYWRtaW5pc3RyYXRpb24g
b2YgdGhlIG1vZHVsZSBzaW1wbGUgZm9yIGJvdGggdGhlIGtlcm5lbCBhbmQNCit0aGUgdXNlciwg
YW5kIGl0IHdhcyB3aGVuIG9ubHkgdWlkLWJhc2VkIGFjY2VzcyBjb250cm9sIGxpc3RzIHdlcmUg
c3VwcG9ydGVkLCBub3cNCitpJ3ZlIGZvbGxvd2VkIHRoZSBzYW1lIHN0eWxlIHRvIHByb3ZpZGUg
YmFja3dhcmRzIGNvbXBhdGliaWxpdHkuDQorDQorSW5zdGFsbGF0aW9uOiANCisxLiBSZWNvbXBp
bGUgdGhlIGtlcm5lbCB0byBpbmNsdWRlIExTTSBhbmQgVFBFIGFzIGEgbW9kdWxlIChvciBldmVu
IGdldCBhDQorICAga2VybmVsLWluZGVwZW5kZW50IHBhY2thZ2VkIFRQRSBtb2R1bGUuDQorMi4g
bW91bnQgLXQgc3lzZnMgc3lzZnMgPG1vdW50cG9pbnQ+DQorMy4gbW9kcHJvYmUgdHBlIGRlYnVn
PTEvMCAoaWYgeW91IHdhbnQgdG8gdXNlIGRlYnVnZ2luZyBzZXQgdG8gMSkNCis0LiBTZWUgIk1v
ZGlmeWluZyB0aGUgVFBFIEFjY2VzcyBDb250cm9sIExpc3RzIiBiZWxvdyAgZm9yIGluc3RydWN0
aW9ucyBvbiBob3cgdG8gDQorYWRkL2RlbGV0ZSB1c2VycyBhbmQgZ3JvdXBzIHRvL2Zyb20gdGhl
IGxpc3QuDQorDQorTW9kaWZ5aW5nIHRoZSBUUEUgQWNjZXNzIENvbnRyb2wgTGlzdHM6DQorDQor
LSBBZGRpbmcgYSB1c2VyCQk6IGVjaG8gPHVpZD4gPiA8bW91bnRwb2ludD4vdHBlZnMvYWRkDQor
LSBEZWxldGluZyBhIHVzZXIJOiBlY2hvIDx1aWQ+ID4gPG1vdW50cG9pbnQ+L3RwZWZzL2RlbA0K
Ky0gQWRkaW5nIGEgZ3JvdXAJOiBlY2hvIDxnaWQ+ID4gPG1vdW50cG9pbnQ+L3RwZWZzL2FkZC1n
cm91cA0KKy0gRGVsZXRpbmcgYSBncm91cAk6IGVjaG8gPGdpZD4gPiA8bW91bnRwb2ludD4vdHBl
ZnMvZGVsLWdyb3VwDQorLSBTaG93IHVpZCBsaXN0IHRvIHVzZXJzcGFjZTogY2F0IDxtb3VudHBv
aW50Pi90cGVmcy9hZGQNCistIFNob3cgZ2lkIGxpc3QgdG8gdXNlcnNwYWNlOiBjYXQgPG1vdW50
cG9pbnQ+L3RwZWZzL2FkZC1ncm91cA0KKy0gU2hvdyB2ZXJzaW9uIGFuZCBzdGF0aXN0aWNzIGlu
Zm9ybWF0aW9uOiBjYXQgL3Byb2MvdHBlDQorDQorTm90ZTogQWR2YW5jZWQgdXNlcnMgd291bGQg
YmUgaW50ZXJlc3RlZCBpbiB3cml0aW5nIGEgc2NyaXB0IG9yIHNvbWV0aGluZw0KK3RvIG1vZGlm
eSB0aGUgYWNjZXNzIGNvbnRyb2wgbGlzdHMgaW4gYSBmaW5lLWdyYWluZWQgbWFubmVyLCBidXQg
dGhpcyBpcyBvdXQNCitvZiB0aGUgZ29hbHMgb2YgdGhlIFRQRSBkZXZlbG9wbWVudCwgYW55d2F5
LCBmZWVsIGZyZWUgdG8gc2VuZCB5b3VyIGNvbnRyaWJ1dGlvbnMNCit0byBsb3JlbnpvQGdudS5v
cmcuDQpkaWZmIC1OdXIgLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L0tjb25maWcgbGludXgtMi42
LjEwLXRwZS9zZWN1cml0eS9LY29uZmlnDQotLS0gLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L0tj
b25maWcJMjAwNS0wMS0wMyAxOTo0MzowNS4wMDAwMDAwMDAgKzAxMDANCisrKyBsaW51eC0yLjYu
MTAtdHBlL3NlY3VyaXR5L0tjb25maWcJMjAwNS0wMS0wNyAwMDo0ODoyOS4wMDAwMDAwMDAgKzAx
MDANCkBAIC04NCw2ICs4NCwzNiBAQA0KIA0KIAkgIElmIHlvdSBhcmUgdW5zdXJlIGhvdyB0byBh
bnN3ZXIgdGhpcyBxdWVzdGlvbiwgYW5zd2VyIE4uDQogDQorY29uZmlnIFNFQ1VSSVRZX1RQRQ0K
Kwl0cmlzdGF0ZSAiVHJ1c3RlZCBQYXRoIEV4ZWN1dGlvbiAoRVhQRVJJTUVOVEFMKSINCisJZGVw
ZW5kcyBvbiBTRUNVUklUWSAmJiBFWFBFUklNRU5UQUwNCisJaGVscA0KKwkgIFRoZSBUUEUgbW9k
dWxlIGVuZm9yY2VzIGEgY2hlY2sgb24gdGhlIHJ1bm5pbmcgb2YgZXhlY3V0YWJsZXMuDQorCSAg
SXQgd2lsbCBub3QgYWxsb3cgZXhlY3V0aW9uIGlmIHRoZSBwcm9ncmFtIGlzIGxvY2F0ZWQgaW4g
YSANCisJICAidHJ1c3RlZCBwYXRoIiBhbmQgdGhlIGN1cnJlbnQgdXNlciBpcyAidW50cnVzdGVk
Ii4gQSB0cnVzdGVkDQorCSAgcGF0aCBpcyBvbmUgd2hpY2ggaXMgcm9vdCBvd25lZCBhbmQgbmVp
dGhlciBncm91cCBub3Igb3RoZXIgDQorICAgCSAgd3JpdGVhYmxlLiBBIHVzZXIgaXMgY29uc2lk
ZXJlZCB0cnVzdGVkIGlmIHRoZWlyIHVpZCBpcyBhZGRlZA0KKyAJICB0byBhIHRydXN0ZWQgbGlz
dCBpbiBtZW1vcnksIGFsc28sIHVzZXIgZ3JvdXBzIGNhbiBiZSB0cnVzdGVkDQorIAkgIGluIGtl
cm5lbCBjb21waWxlLXRpbWUgYW5kIHJ1bnRpbWUgYnkgYWRkaW5nIHRoZW0gdG8gdGhlIGdpZC1i
YXNpcw0KKyAJICBhY2Nlc3MgY29udHJvbCBsaXN0LlJvb3QgaXMgdHJ1c3RlZCwgYnkgZGVmYXVs
dC5BIHByb2MgaW50ZXJmYWNlDQorIAkgIC9wcm9jL3RwZSBpcyBjcmVhdGVkIHdoZW4gbW9kdWxl
IGxvYWRzLCBpdCBzaG93cyB2ZXJzaW9uIGFuZCBBQ0wNCisgCSAgaW5mb3JtYXRpb24gdG8gdXNl
IHRoaXJkLXBhcnR5IGNoZWNrZXJzIG9yIHNjcmlwdHMuDQorIAkgIA0KKwkgIChjKSAyMDA1LCBM
b3JlbnpvIEhlcm5hbmRleiBHYXJjaWEtSGllcnJvIDxsb3JlbnpvQGdudS5vcmc+Lg0KKwkgIA0K
KwkgIElmIHlvdSBhcmUgdW5zdXJlIGhvdyB0byBhbnN3ZXIgdGhpcyBxdWVzdGlvbiwgYW5zd2Vy
IE4uDQorDQorY29uZmlnIFNFQ1VSSVRZX1RQRV9UUlVTVEVEX0dJRA0KKwlpbnQgIkdJRCBmb3Ig
dHJ1c3RlZCB1c2VycyINCisJZGVwZW5kcyBvbiBTRUNVUklUWV9UUEUNCisJZGVmYXVsdCAxMzM3
DQorCWhlbHANCisJICBIZXJlIHlvdSBjYW4gY2hvb3NlIHRoZSBHSUQgdG8gZGlzYWJsZSB0cnVz
dGVkIHBhdGggcHJvdGVjdGlvbiBmb3IuDQorCSAgVXNlcnMgcmVseWluZyB1bmRlciB0aGUgZ3Jv
dXAgd2l0aCBpZCBzcGVjaWZpZWQgaGVyZSB3aWxsIGhhdmUgVFBFDQorCSAgZGlzYWJsZWQgYnkg
ZGVmYXVsdCwgc28sIHRoZXkgY291bGQgcmVwcmVzZW50IGEgc2VjdXJpdHkgcmlzayBmb3IgDQor
CSAgdGhlIHJlc3Qgb2YgdXNlcnMuUGxlYXNlLCBiZSBzdXJlIHRoYXQgeW91IGNhbiByZWFsbHkg
dHJ1c3QgaW4gdGhlDQorCSAgbWVtYmVycyBvZiB0aGlzIGdyb3VwLgkgIA0KKw0KIHNvdXJjZSBz
ZWN1cml0eS9zZWxpbnV4L0tjb25maWcNCiANCiBlbmRtZW51DQpkaWZmIC1OdXIgLi4vbGludXgt
Mi42LjEwL3NlY3VyaXR5L01ha2VmaWxlIGxpbnV4LTIuNi4xMC10cGUvc2VjdXJpdHkvTWFrZWZp
bGUNCi0tLSAuLi9saW51eC0yLjYuMTAvc2VjdXJpdHkvTWFrZWZpbGUJMjAwNS0wMS0wMyAxOTo0
MzowNS4wMDAwMDAwMDAgKzAxMDANCisrKyBsaW51eC0yLjYuMTAtdHBlL3NlY3VyaXR5L01ha2Vm
aWxlCTIwMDUtMDEtMDQgMDI6MTA6NDUuMDAwMDAwMDAwICswMTAwDQpAQCAtMTcsMyArMTcsNCBA
QA0KIG9iai0kKENPTkZJR19TRUNVUklUWV9DQVBBQklMSVRJRVMpCSs9IGNvbW1vbmNhcC5vIGNh
cGFiaWxpdHkubw0KIG9iai0kKENPTkZJR19TRUNVUklUWV9ST09UUExVRykJCSs9IGNvbW1vbmNh
cC5vIHJvb3RfcGx1Zy5vDQogb2JqLSQoQ09ORklHX1NFQ1VSSVRZX1NFQ0xWTCkJCSs9IHNlY2x2
bC5vDQorb2JqLSQoQ09ORklHX1NFQ1VSSVRZX1RQRSkJCSs9IHRwZS5vDQpkaWZmIC1OdXIgLi4v
bGludXgtMi42LjEwL3NlY3VyaXR5L3RwZS5jIGxpbnV4LTIuNi4xMC10cGUvc2VjdXJpdHkvdHBl
LmMNCi0tLSAuLi9saW51eC0yLjYuMTAvc2VjdXJpdHkvdHBlLmMJMTk3MC0wMS0wMSAwMTowMDow
MC4wMDAwMDAwMDAgKzAxMDANCisrKyBsaW51eC0yLjYuMTAtdHBlL3NlY3VyaXR5L3RwZS5jCTIw
MDUtMDEtMDcgMDQ6MDM6NTQuMDMwMTc2MTM2ICswMTAwDQpAQCAtMCwwICsxLDczNSBAQA0KKy8q
DQorICogVHJ1c3RlZCBQYXRoIEV4ZWN1dGlvbiBTZWN1cml0eSBNb2R1bGUNCisgKg0KKyAqIFRo
aXMgbW9kdWxlIHByb3ZpZGVzIGEgVHJ1c3RlZCBQYXRoIEV4ZWN1dGlvbiAoVFBFKSBlbmdpbmUg
dG8gdGhlDQorICogTGludXgga2VybmVsLiBUUEUgb3JpZ2luYXRlZCBhcyBhIGtlcm5lbCBwYXRj
aCB0byBPcGVuQlNEIDIuNCBieQ0KKyAqIHJvdXRlfGRhZW1vbjkgYW5kIE1pa2UgU2NoaWZtYW4g
KHNlZSBQaHJhY2sgNTQpLiBJQk0gb3JpZ2luYWxseSBtb2RpZmllZA0KKyAqIHRoZSBvcmlnaW5h
bCBwcm9qZWN0IHRvIGZpdCB3aXRoaW4gdGhlIGNvbnN0cmFpbnRzIG9mIHRoZSBMU00gZnJhbWV3
b3JrDQorICogYW5kIHNvIGl0IHNob3VsZCBiZSBub3RlZCB0aGF0IHRoaXMgaXMgbm90IHRoZSBz
YW1lIHByb2plY3QuIEFsc28sDQorICogdGhlIG1vZHVsZSBtYWtlcyB1c2Ugb2YgdGhlIHN5c2Zz
IGZpbGVzeXN0ZW0uIA0KKyAqIFRoaXMgbW9kdWxlIGlzIGEgcmV3cml0ZSBvZiB0aGUgSUJNJ3Mg
b3JpZ2luYWwgY29kZSBpbiBvcmRlciB0byBhZGQgDQorICogZGVidWdnaW5nLCBiZXR0ZXIgaW5m
b3JtYXRpb24gb3V0cHV0dGluZywgc3VwcG9ydCBmb3IgcGVyLVVzZXItR3JvdXBzIA0KKyAqIGFj
Y2VzcyBjb250cm9sIGxpc3RzIGF0IHJ1bnRpbWUgYW5kIGtlcm5lbC1jb25maWd1cmF0aW9uIGxl
dmVsLCBhIHByb2NmcyANCisgKiBpbnRlcmZhY2UgZm9yIGdlbmVyYWwgaW5mb3JtYXRpb24gZ2F0
aGVyaW5nIGZyb20gdGhlIFRQRSBzdWJzeXN0ZW0gYW5kIHRoZQ0KKyAqIHByb3RlY3Rpb24gZW5n
aW5lIHdoaWNoIGluIHRoZSBvcmlnaW5hbCBJQk0ncyBjb2RlIHdhcyByZWx5aW5nIGluIGJwcm1f
c2V0X3NlY3VyaXR5DQorICogaXMgbm93IGJhc2VkIGluIGV4ZWN1dGFibGVzIG1lbW9yeSBtYXBw
aW5ncywgd2hpY2ggbWFrZXMgaXQgc2VjdXJlIGFnYWluc3QNCisgKiBzaGFyZWQgbGlicmFyaWVz
IHRoYXQgY2FuIHdyYXAgdW50cnVzdGVkIGV4ZWN1dGFibGVzIGFuZCBieXBhc3MgdGhlIFRQRQ0K
KyAqIHN1YnN5c3RlbSwgYWxzbyBhZGRpbmcgYSBzZWNvbmRhcnkgcHJvdGVjdGlvbiBhZ2FpbnN0
IHBvc3NpYmxlIGF0dGVtcHRzIHRvDQorICogYnlwYXNzIHRoZSBtbWFwKCknaW5nIGNoZWNrcyBi
eSB1c2luZyBQUk9UX1JFQUQgaW5zdGVhZCBvZiBQUk9UX0VYRUMgaW4NCisgKiBtcHJvdGVjdCgp
IGNhbGxzLg0KKyAqDQorICogQ29weXJpZ2h0IChDKSAxOTk4IHJvdXRlfGRhZW1vbjkgYW5kIE1p
a2UgRC4gU2NoaWZmbWFuDQorICogQ29weXJpZ2h0IChDKSAyMDAxLTIwMDIgIEdyZWcgS3JvYWgt
SGFydG1hbiA8Z3JlZ2toQHVzLmlibS5jb20+DQorICogQ29weXJpZ2h0IChDKSAyMDAzIElCTSBD
b3JwLiA8bmFyYWhpbWlAdXMuaWJtLmNvbT4NCisgKiBDb3B5cmlnaHQgKEMpIDIwMDUgTG9yZW56
byBIZXJuYW5kZXogR2FyY2lhLUhpZXJybyA8bG9yZW56b0BnbnUub3JnPg0KKyAqIEFsbCByaWdo
dHMgcmV2ZXJzZWQuDQorICoNCisgKiBTdGVwaGVuIFNtYWxsZXkgPHNkc0BlcG9jaC5uY3NjLm1p
bD4gY29udHJpYnV0ZWQgdGhlIG1tYXAvbXByb3RlY3QNCisgKiBwcm90ZWN0aW9ucyBpZGVhIGFu
ZCBjb21tZW50ZWQgaXRzIGxpbWl0YXRpb25zLCBiZW5lZml0cywgZXRjLg0KKyAqDQorICogQ2hy
aXMgV3JpZ2h0IDxjaHJpc3dAb3NkbC5vcmc+IGhlbHBlZCBtZSB1bmRlcnN0YW5kaW5nIHRoZSBm
dWxscGF0aA0KKyAqIHVuY292ZXJpbmcgaGFja3MgYW5kIHRoZSB2bWEgc3RydWN0cyB1c2VkIGlu
IHRoZSBmaWxlX21wcm90ZWN0IGhvb2suDQorICoNCisgKiBCcmFkIFNwZW5nbGVyIDxzcGVuZGVy
QGdyc2VjdXJpdHkubmV0PiBhbmQgU2V0aCBBcm5vbGQgPHNhcm5vbGRAaW1tdW5peC5jb20+IA0K
KyAqIHJlcG9ydGVkIG1lbW9yeSB1c2UgcG9zc2libGUgcHJvYmxlbXMsIG1pc3NpbmcgZnJlZV9w
YWdlKCkgY2FsbHMgYW5kDQorICogb3RoZXIgcmVsYXRlZCBidWdzLg0KKyAqDQorICogVGhpcyBw
cm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcg0K
KyAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBM
aWNlbnNlDQorICogYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247
IGVpdGhlciB2ZXJzaW9uIDINCisgKiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9u
KSBhbnkgbGF0ZXIgdmVyc2lvbi4NCisgKg0KKyAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRl
ZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KKyAqIGJ1dCBXSVRIT1VUIEFO
WSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQorICogTUVS
Q0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRo
ZQ0KKyAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQorICov
DQorDQorI2luY2x1ZGUgPGxpbnV4L2NvbmZpZy5oPg0KKyNpbmNsdWRlIDxsaW51eC9tb2R1bGUu
aD4NCisjaW5jbHVkZSA8bGludXgvc2xhYi5oPg0KKyNpbmNsdWRlIDxsaW51eC9zbXBfbG9jay5o
Pg0KKyNpbmNsdWRlIDxsaW51eC9pbml0Lmg+DQorI2luY2x1ZGUgPGxpbnV4L2tlcm5lbC5oPg0K
KyNpbmNsdWRlIDxsaW51eC9zZWN1cml0eS5oPg0KKyNpbmNsdWRlIDxsaW51eC9za2J1ZmYuaD4N
CisjaW5jbHVkZSA8bGludXgvbmV0bGluay5oPg0KKyNpbmNsdWRlIDxsaW51eC90eXBlcy5oPg0K
KyNpbmNsdWRlIDxsaW51eC9mcy5oPg0KKyNpbmNsdWRlIDxhc20vdWFjY2Vzcy5oPg0KKyNpbmNs
dWRlIDxsaW51eC9wYWdlbWFwLmg+DQorI2luY2x1ZGUgPGxpbnV4L25hbWVpLmg+DQorI2luY2x1
ZGUgPGxpbnV4L3Zmcy5oPg0KKyNpbmNsdWRlIDxsaW51eC9tb3VudC5oPg0KKyNpbmNsdWRlIDxs
aW51eC9zdHJpbmcuaD4NCisjaW5jbHVkZSA8bGludXgvc3lzZnMuaD4NCisjaW5jbHVkZSA8bGlu
dXgvcHJvY19mcy5oPg0KKyNpbmNsdWRlIDxsaW51eC9tbS5oPg0KKyNpbmNsdWRlIDxsaW51eC9t
bWFuLmg+DQorI2luY2x1ZGUgPGxpbnV4L2VsZi5oPg0KKyNpbmNsdWRlIDxsaW51eC9maWxlLmg+
DQorI2luY2x1ZGUgInRwZS5oIg0KKw0KK3N0YXRpYyBpbnQgc2Vjb25kYXJ5Ow0KK3N0YXRpYyBz
cGlubG9ja190IHRwZV9hY2xfbG9jayA9IFNQSU5fTE9DS19VTkxPQ0tFRDsNCitzdGF0aWMgc3Bp
bmxvY2tfdCB0cGVfZ3JvdXBfYWNsX2xvY2sgPSBTUElOX0xPQ0tfVU5MT0NLRUQ7DQorDQorLyog
ZGVidWdnaW5nICovDQorc3RhdGljIGludCBkZWJ1ZyA9IDA7DQorDQorLyogZ2V0IGRlYnVnPTEv
MCBwYXJhbSAqLw0KK21vZHVsZV9wYXJhbShkZWJ1ZywgYm9vbCwgMDYwMCk7DQorTU9EVUxFX1BB
Uk1fREVTQyhkZWJ1ZywgIkRlYnVnIGVuYWJsZWQgb3Igbm90Iik7DQorDQorI2lmIGRlZmluZWQo
Q09ORklHX1NFQ1VSSVRZX1RQRV9NT0RVTEUpDQorI2RlZmluZSBNWV9OQU1FIFRISVNfTU9EVUxF
LT5uYW1lDQorI2Vsc2UNCisjZGVmaW5lIE1ZX05BTUUgIlRQRSINCisjZGVmaW5lIExFR0FDWV9O
QU1FICJ0cGUiDQorI2VuZGlmDQorDQorLyogTW9kdWxlIGluZm9ybWF0aW9uICovDQorI2RlZmlu
ZSBERVNDUklQVElPTiAiVHJ1c3RlZCBQYXRoIEV4ZWN1dGlvbiBMU00gSW1wbGVtZW50YXRpb24i
DQorI2RlZmluZSBBVVRIT1IgIkxvcmVuem8gSGVybmFuZGV6IEdhcmNpYS1IaWVycm8gPGxvcmVu
em9AZ251Lm9yZz4iDQorI2RlZmluZSBMSUNFTlNFICJHUEwiDQorDQorLyogVFBFIC9wcm9jIGVu
dHJ5ICovDQorc3RydWN0IHByb2NfZGlyX2VudHJ5ICpUUEVfcGVudHJ5Ow0KKw0KKy8qIE91dHB1
dHRpbmcgYW5kIGRlYnVnZ2luZyBmdW5jdGlvbnMgKi8NCisvKiBEZWJ1ZyBzaG91bGQgYmUgZXhw
bGljaXRseSBlbmFibGVkIChkZWJ1Zz0xKSB0byBnaXZlIG91dHB1dCBiYWNrIGZyb20gZGJnKCkg
Ki8NCisjZGVmaW5lIGRiZyhmbXQsIGFyZy4uLikJCQkJCQkJXA0KKwkJZG8gewkJCQkJCQkJXA0K
KwkJaWYgKDEgJiYgZGVidWcpICB7CQkJCQkJXA0KKwkJCXByaW50ayhLRVJOX0RFQlVHICIlczog
IiBmbXQgLCBNWV9OQU1FLCAjIyBhcmcpOwlcDQorCQkJfQkJCQkJCQlcDQorCQl9IHdoaWxlICgw
KQ0KKw0KKy8qIEtFUk5fSU5GTyBtZXNzYWdlcyB1c2Uga2luZm8oKSByYXRoZXIgdGhhbiBwcmlu
dGsoKSBmb3IgYmV0dGVyIG91dHB1dHRpbmcgbGF5b3V0ICovDQorI2RlZmluZSBraW5mbyhmbXQs
IGFyZy4uLikJCQkJCQkJXA0KKwkJZG8gewkJCQkJCQkJXA0KKwkJaWYgKDEpICB7CQkJCQkJCVwN
CisJCQlwcmludGsoS0VSTl9JTkZPICIlczogIiBmbXQgLCBNWV9OQU1FLCAjIyBhcmcpOwkJXA0K
KwkJCX0JCQkJCQkJXA0KKwkJfSB3aGlsZSAoMCkNCisNCisvKiAgSW5zZXJ0aW9uIHNvcnQgdGhl
IGxpc3QuICovDQorc3RhdGljIHZvaWQgdHBlX3NvcnQoaW50IGxvdywgaW50IGhpZ2gpDQorewkJ
CQkvKiAobGlzdCBsb3cgZWxlbWVudCwgbGlzdCBoaWdoIGVsZW1lbnQpICovDQorCWludCBpLCBq
LCBuOw0KKwkvKiBTdGFuZGFyZCBpbnNlcnRpb24gc29ydC4gKi8NCisJZm9yIChpID0gbG93ICsg
MTsgaSA8PSBoaWdoOyBpKyspIHsNCisJCWlmICh0cGVfYWNsW2ldIDwgdHBlX2FjbFtsb3ddKSB7
DQorCQkJdHBlX2FjbFtsb3ddIF49IHRwZV9hY2xbaV07DQorCQkJdHBlX2FjbFtpXSBePSB0cGVf
YWNsW2xvd107DQorCQkJdHBlX2FjbFtsb3ddIF49IHRwZV9hY2xbaV07DQorCQl9DQorCX0NCisJ
LyogdHBlX2FjbCAqLw0KKwlmb3IgKGkgPSBsb3cgKyAyOyBpIDw9IGhpZ2g7IGkrKykgew0KKwkJ
aiA9IGk7DQorCQluID0gdHBlX2FjbFtpXTsNCisJCXdoaWxlIChuIDwgdHBlX2FjbFtqIC0gMV0p
IHsNCisJCQl0cGVfYWNsW2pdID0gdHBlX2FjbFtqIC0gMV07DQorCQkJai0tOw0KKwkJfQ0KKwkJ
dHBlX2FjbFtqXSA9IG47DQorCX0NCit9DQorc3RhdGljIHZvaWQgdHBlX2dyb3VwX3NvcnQoaW50
IGxvdywgaW50IGhpZ2gpDQorewkJCQkvKiAobGlzdCBsb3cgZWxlbWVudCwgbGlzdCBoaWdoIGVs
ZW1lbnQpICovDQorCWludCBpLCBqLCBuOw0KKwkvKiBTdGFuZGFyZCBpbnNlcnRpb24gc29ydCBm
b3IgdHBlX2dyb3VwX2FjbC4gKi8NCisJZm9yIChpID0gbG93ICsgMTsgaSA8PSBoaWdoOyBpKysp
IHsNCisJCWlmICh0cGVfZ3JvdXBfYWNsW2ldIDwgdHBlX2dyb3VwX2FjbFtsb3ddKSB7DQorCQkJ
dHBlX2dyb3VwX2FjbFtsb3ddIF49IHRwZV9ncm91cF9hY2xbaV07DQorCQkJdHBlX2dyb3VwX2Fj
bFtpXSBePSB0cGVfZ3JvdXBfYWNsW2xvd107DQorCQkJdHBlX2dyb3VwX2FjbFtsb3ddIF49IHRw
ZV9ncm91cF9hY2xbaV07DQorCQl9DQorCX0NCisJLyogdHBlX2dyb3VwX2FjbCAqLw0KKwlmb3Ig
KGkgPSBsb3cgKyAyOyBpIDw9IGhpZ2g7IGkrKykgew0KKwkJaiA9IGk7DQorCQluID0gdHBlX2dy
b3VwX2FjbFtpXTsNCisJCXdoaWxlIChuIDwgdHBlX2dyb3VwX2FjbFtqIC0gMV0pIHsNCisJCQl0
cGVfZ3JvdXBfYWNsW2pdID0gdHBlX2dyb3VwX2FjbFtqIC0gMV07DQorCQkJai0tOw0KKwkJfQ0K
KwkJdHBlX2dyb3VwX2FjbFtqXSA9IG47DQorCX0NCit9DQorDQorLyogIEF0dGVtcHQgdG8gYWRk
IGFuIFVJRCBjYW5kaWRhdGUgdG8gdGhlIGxpc3QuICAqLw0KK3N0YXRpYyBpbnQgdHBlX2FkZCh1
aWRfdCBhZGRfY2FuZGlkYXRlKQ0KK3sNCisJaW50IHJldHZhbCA9IC1FSU5WQUw7DQorDQorCS8q
IEZ1bGwgbGlzdC4gKi8NCisJaWYgKHRwZV9hY2xfY2FuZGlkYXRlcyA9PSAoVFBFX0FDTF9TSVpF
IC0gMikpIHsNCisJCWtpbmZvKCJVbmFibGUgdG8gYWRkIHVzZXIgJWQuIExpc3QgaXMgZnVsbC5c
biIsIGFkZF9jYW5kaWRhdGUpOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJaWYgKGFkZF9jYW5k
aWRhdGUgPT0gMCkgew0KKwkJa2luZm8oIkludmFsaWQgdXNlciBpZC4gQ2Fubm90IGFkZC5cbiIp
Ow0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJLyogRG9uJ3QgYWRkIGR1cGxpY2F0ZXMgKi8NCisJ
aWYgKCh0cGVfc2VhcmNoKGFkZF9jYW5kaWRhdGUpKSA9PSBOQUNLKSB7DQorCQkvKiBBZGQgdG8g
dGhlIGVuZCBvZiB0aGUgbGlzdCwgdGhlbiBzb3J0LiAqLw0KKwkJdHBlX2FjbF9jYW5kaWRhdGVz
Kys7DQorCQl0cGVfYWNsW3RwZV9hY2xfY2FuZGlkYXRlc10gPSBhZGRfY2FuZGlkYXRlOw0KKwkJ
dHBlX2FjbFt0cGVfYWNsX2NhbmRpZGF0ZXMgKyAxXSA9ICdcMCc7CS8qIHRlcm1pbmF0ZSBhcnJh
eSAqLw0KKwkJdHBlX3NvcnQoMCwgdHBlX2FjbF9jYW5kaWRhdGVzKTsNCisJCWtpbmZvKCJVSUQg
JWQgYWRkZWQgYXMgdHJ1c3RlZCB0byBhY2Nlc3MgY29udHJvbCBsaXN0XG4iLA0KKwkJICAgICAg
YWRkX2NhbmRpZGF0ZSk7DQorCX0gZWxzZSB7DQorCQlraW5mbygiRHVwbGljYXRlIFVJRCAlZCBu
b3QgYWRkZWRcbiIsIGFkZF9jYW5kaWRhdGUpOw0KKwkJZ290byBvdXQ7DQorCX0NCisJcmV0dmFs
ID0gMDsNCisgICAgICBvdXQ6DQorCXJldHVybiByZXR2YWw7DQorfQ0KKw0KKy8qICBBdHRlbXB0
IHRvIGFkZCBhbiBHSUQgY2FuZGlkYXRlIHRvIHRoZSBsaXN0LiAgKi8NCitzdGF0aWMgaW50IHRw
ZV9ncm91cF9hZGQoZ2lkX3QgYWRkX2NhbmRpZGF0ZSkNCit7DQorCWludCByZXR2YWwgPSAtRUlO
VkFMOw0KKw0KKwkvKiBGdWxsIGxpc3QuICovDQorCWlmICh0cGVfYWNsX2dyb3VwX2NhbmRpZGF0
ZXMgPT0gKFRQRV9BQ0xfU0laRSAtIDIpKSB7DQorCQlraW5mbygiVW5hYmxlIHRvIGFkZCB1c2Vy
ICVkLiBMaXN0IGlzIGZ1bGwuXG4iLCBhZGRfY2FuZGlkYXRlKTsNCisJCWdvdG8gb3V0Ow0KKwl9
DQorDQorCWlmIChhZGRfY2FuZGlkYXRlID09IDApIHsNCisJCWtpbmZvKCJJbnZhbGlkIHVzZXJp
ZC4gQ2Fubm90IGFkZC5cbiIpOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJLyogRG9uJ3QgYWRk
IGR1cGxpY2F0ZXMgKi8NCisJaWYgKCh0cGVfc2VhcmNoX2dyb3VwKGFkZF9jYW5kaWRhdGUpKSA9
PSBOQUNLKSB7DQorCQkvKiBBZGQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdCwgdGhlbiBzb3J0LiAq
Lw0KKwkJdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzKys7DQorCQl0cGVfZ3JvdXBfYWNsW3RwZV9h
Y2xfZ3JvdXBfY2FuZGlkYXRlc10gPSBhZGRfY2FuZGlkYXRlOw0KKwkJdHBlX2dyb3VwX2FjbFt0
cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXMgKyAxXSA9ICdcMCc7CS8qIHRlcm1pbmF0ZSBhcnJheSAq
Lw0KKwkJdHBlX2dyb3VwX3NvcnQoMCwgdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzKTsNCisJCWtp
bmZvKCJHSUQgJWQgYWRkZWQgYXMgdHJ1c3RlZCB0byBhY2Nlc3MgY29udHJvbCBsaXN0XG4iLA0K
KwkJICAgICAgYWRkX2NhbmRpZGF0ZSk7DQorCX0gZWxzZSB7DQorCQlraW5mbygiRHVwbGljYXRl
IEdJRCAlZCBub3QgYWRkZWRcbiIsIGFkZF9jYW5kaWRhdGUpOw0KKwkJZ290byBvdXQ7DQorCX0N
CisJcmV0dmFsID0gMDsNCisgICAgICBvdXQ6DQorCXJldHVybiByZXR2YWw7DQorfQ0KKw0KKy8q
ICBBdHRlbXB0IHRvIHJlbW92ZSBhIGNhbmRpZGF0ZSBmcm9tIHRoZSBsaXN0LiAgT25seSBmYWls
cyBpZiB0aGUgZW50cnkgaXMgKi8NCisvKiAgbm90IHRoZXJlLiAqLw0KK3N0YXRpYyBpbnQgdHBl
X3JlbW92ZSh1aWRfdCByZW1fY2FuZGlkYXRlKQ0KK3sNCisJaW50IG47DQorCWludCByZXR2YWwg
PSAtRUlOVkFMOw0KKwlpZiAodHBlX2FjbF9jYW5kaWRhdGVzID09IDApIHsNCisJCS8qIEVtcHR5
IGxpc3QgKi8NCisJCWdvdG8gb3V0Ow0KKwl9DQorCWlmIChyZW1fY2FuZGlkYXRlID09IDApIHsN
CisJCWtpbmZvKCJJbnZhbGlkIHVzZXJpZC4gQ2Fubm90IHJlbW92ZS5cbiIpOw0KKwkJZ290byBv
dXQ7DQorCX0NCisNCisJbiA9IHRwZV9zZWFyY2gocmVtX2NhbmRpZGF0ZSk7DQorCWlmIChuICE9
IE5BQ0spIHsNCisJCS8qIFJlbW92ZSBjYW5kaWRhdGUgKG1hcmsgc2xvdCBhcyB1bnVzZWQpLCBy
ZXNvcnQgdGhlIGxpc3QuICovDQorCQl0cGVfYWNsW25dID0gVFBFX0lOSVRJQUxJWkVSOw0KKwkJ
dHBlX2FjbF9jYW5kaWRhdGVzLS07DQorCQl0cGVfc29ydCgwLCB0cGVfYWNsX2NhbmRpZGF0ZXMp
Ow0KKwkJa2luZm8oIlVJRCAlZCByZW1vdmVkIGZyb20gdHJ1c3QgbGlzdFxuIiwgcmVtX2NhbmRp
ZGF0ZSk7DQorCQlyZXR2YWwgPSAwOw0KKwkJZ290byBvdXQ7DQorCX0NCisJLyogTm90IGZvdW5k
LiAqLw0KKwlraW5mbygiVUlEICVkIG5vdCBmb3VuZCBpbiB0cnVzdCBsaXN0XG4iLCByZW1fY2Fu
ZGlkYXRlKTsNCisgICAgICBvdXQ6DQorCXJldHVybiByZXR2YWw7DQorfQ0KKw0KKy8qIEdJRCBy
ZW1vdmluZyAqLw0KK3N0YXRpYyBpbnQgdHBlX2dyb3VwX3JlbW92ZShnaWRfdCByZW1fY2FuZGlk
YXRlKQ0KK3sNCisJaW50IG47DQorCWludCByZXR2YWwgPSAtRUlOVkFMOw0KKwlpZiAodHBlX2Fj
bF9ncm91cF9jYW5kaWRhdGVzID09IDApIHsNCisJCS8qIEVtcHR5IGdyb3VwcyBsaXN0ICovDQor
CQlnb3RvIG91dDsNCisJfQ0KKwlpZiAocmVtX2NhbmRpZGF0ZSA9PSAwKSB7DQorCQlraW5mbygi
SW52YWxpZCBHSUQuIENhbm5vdCByZW1vdmUuXG4iKTsNCisJCWdvdG8gb3V0Ow0KKwl9DQorDQor
CW4gPSB0cGVfc2VhcmNoX2dyb3VwKHJlbV9jYW5kaWRhdGUpOw0KKwlpZiAobiAhPSBOQUNLKSB7
DQorCQkvKiBSZW1vdmUgY2FuZGlkYXRlIChtYXJrIHNsb3QgYXMgdW51c2VkKSwgcmVzb3J0IHRo
ZSBsaXN0LiAqLw0KKwkJdHBlX2dyb3VwX2FjbFtuXSA9IFRQRV9JTklUSUFMSVpFUjsNCisJCXRw
ZV9hY2xfZ3JvdXBfY2FuZGlkYXRlcy0tOw0KKwkJdHBlX2dyb3VwX3NvcnQoMCwgdHBlX2FjbF9n
cm91cF9jYW5kaWRhdGVzKTsNCisJCWtpbmZvKCJHSUQgJWQgcmVtb3ZlZCBmcm9tIHRydXN0IGxp
c3RcbiIsIHJlbV9jYW5kaWRhdGUpOw0KKwkJcmV0dmFsID0gMDsNCisJCWdvdG8gb3V0Ow0KKwl9
DQorCS8qIE5vdCBmb3VuZC4gKi8NCisJa2luZm8oIkdJRCAlZCBub3QgZm91bmQgaW4gdHJ1c3Qg
bGlzdFxuIiwgcmVtX2NhbmRpZGF0ZSk7DQorICAgICAgb3V0Og0KKwlyZXR1cm4gcmV0dmFsOw0K
K30NCisNCisvKiBCZWdpbm5pbmcgb2YgYSBzeXNmcyBzdWJzeXN0ZW0gZm9yIHRwZSAqLw0KK3N0
YXRpYyBzdHJ1Y3Qgc3Vic3lzdGVtIHRwZWZzX3N1YnN5czsNCisNCitzdHJ1Y3QgdHBlX2xpc3Qg
ew0KKwljaGFyICpuYW1lOw0KKw0KKwlzdHJ1Y3QgbGlzdF9oZWFkIHNsb3RfbGlzdDsNCisJc3Ry
dWN0IGtvYmplY3Qga29iajsNCit9Ow0KKw0KK3N0cnVjdCB0cGVmc19hdHRyaWJ1dGUgew0KKwlz
dHJ1Y3QgYXR0cmlidXRlIGF0dHI7DQorCSBzc2l6ZV90KCpzaG93KSAoc3RydWN0IHRwZV9saXN0
ICosIGNoYXIgKik7DQorCSBzc2l6ZV90KCpzdG9yZSkgKHN0cnVjdCB0cGVfbGlzdCAqLCBjb25z
dCBjaGFyICosIHNpemVfdCk7DQorfTsNCisNCitzdGF0aWMgc3NpemVfdCB0cGVmc19hdHRyX3No
b3coc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBhdHRyaWJ1dGUgKmF0dHIsDQorCQkJICAg
ICAgIGNoYXIgKmJ1ZikNCit7DQorCXN0cnVjdCB0cGVfbGlzdCAqbGlzdCA9IGNvbnRhaW5lcl9v
Zihrb2JqLCBzdHJ1Y3QgdHBlX2xpc3QsIGtvYmopOw0KKwlzdHJ1Y3QgdHBlZnNfYXR0cmlidXRl
ICphdHRyaWJ1dGUgPSBjb250YWluZXJfb2YoYXR0ciwgc3RydWN0DQorCQkJCQkJCSB0cGVmc19h
dHRyaWJ1dGUsIGF0dHIpOw0KKwlyZXR1cm4gYXR0cmlidXRlLT5zaG93ID8gYXR0cmlidXRlLT5z
aG93KGxpc3QsIGJ1ZikgOiAwOw0KK30NCisNCitzdGF0aWMgc3NpemVfdCB0cGVmc19hdHRyX3N0
b3JlKHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3QgYXR0cmlidXRlICphdHRyLA0KKwkJCQlj
b25zdCBjaGFyICpidWYsIHNpemVfdCBsZW4pDQorew0KKwlzdHJ1Y3QgdHBlX2xpc3QgKmxpc3Qg
PSBjb250YWluZXJfb2Yoa29iaiwgc3RydWN0IHRwZV9saXN0LCBrb2JqKTsNCisJc3RydWN0IHRw
ZWZzX2F0dHJpYnV0ZSAqYXR0cmlidXRlID0gY29udGFpbmVyX29mKGF0dHIsIHN0cnVjdA0KKwkJ
CQkJCQkgdHBlZnNfYXR0cmlidXRlLCBhdHRyKTsNCisJcmV0dXJuIGF0dHJpYnV0ZS0+c3RvcmUg
PyBhdHRyaWJ1dGUtPnN0b3JlKGxpc3QsIGJ1ZiwgbGVuKSA6IDA7DQorfQ0KKw0KK3N0YXRpYyBz
dHJ1Y3Qgc3lzZnNfb3BzIHRwZWZzX3N5c2ZzX29wcyA9IHsNCisJLnNob3cgPSB0cGVmc19hdHRy
X3Nob3csDQorCS5zdG9yZSA9IHRwZWZzX2F0dHJfc3RvcmUsDQorfTsNCisNCitzdGF0aWMgc3Ry
dWN0IGtvYmpfdHlwZSB0cGVmc19rdHlwZSA9IHsNCisJLnN5c2ZzX29wcyA9ICZ0cGVmc19zeXNm
c19vcHMNCit9Ow0KKw0KK3N0YXRpYyBkZWNsX3N1YnN5cyh0cGVmcywgJnRwZWZzX2t0eXBlLCBO
VUxMKTsNCisNCitzdGF0aWMgc3NpemVfdCB0cnVzdGVkbGlzdGFkZF9yZWFkX2ZpbGUoc3RydWN0
IHRwZV9saXN0ICpsaXN0LCBjaGFyICpidWYpDQorew0KKwlpbnQgaTsNCisJaW50IHJldHZhbCA9
IDA7DQorCWNoYXIgKnVzZXIgPSBOVUxMOw0KKwljaGFyICpidWZmZXIgPSBrbWFsbG9jKDQwMCwg
R0ZQX0tFUk5FTCk7DQorDQorCXVzZXIgPSAoY2hhciAqKV9fZ2V0X2ZyZWVfcGFnZShHRlBfS0VS
TkVMKTsNCisJaWYgKCF1c2VyKQ0KKwkJcmV0dXJuIC1FTk9NRU07DQorDQorCWlmICghYnVmZmVy
KQ0KKwkJcmV0dXJuIC1FTk9NRU07DQorDQorCWlmICh0cGVfYWNsID09IE5VTEwpIHsNCisJCWtp
bmZvKCJFbXB0eSBBY2Nlc3MgQ29udHJvbCBMaXN0XG4iKTsNCisJCWZyZWVfcGFnZSgodW5zaWdu
ZWQgbG9uZyl1c2VyKTsNCisJCXJldHVybiAtRU5PREFUQTsNCisJfQ0KKw0KKwlidWZmZXJbMF0g
PSAnXDAnOw0KKwlraW5mbygiJWQgdHJ1c3RlZCB1c2VyKHMpOiBcbiIsIHRwZV9hY2xfY2FuZGlk
YXRlcyk7DQorCXNwaW5fbG9jaygmdHBlX2FjbF9sb2NrKTsNCisJZm9yIChpID0gMDsgaSA8IHRw
ZV9hY2xfY2FuZGlkYXRlczsgaSsrKSB7DQorCQlwcmludGsoS0VSTl9JTkZPICIlZCAiLCB0cGVf
YWNsW2ldKTsNCisJCXJldHZhbCA9IHNwcmludGYodXNlciwgIiVkXG4iLCB0cGVfYWNsW2ldKTsN
CisJCXN0cmNhdChidWZmZXIsIHVzZXIpOw0KKwl9DQorCS8qIGxlYXZlIHByaW50aygpIGNhbGxz
IGFsb25lLCBub3Qga2luZm8oKSAqLw0KKwlwcmludGsoS0VSTl9JTkZPICJcbiIpOw0KKwlzcGlu
X3VubG9jaygmdHBlX2FjbF9sb2NrKTsNCisNCisJcmV0dmFsID0gc25wcmludGYoYnVmLCA0MDAs
ICIlc1xuIiwgYnVmZmVyKTsNCisNCisJa2ZyZWUoYnVmZmVyKTsJCS8qIHdlIGtmcmVlKCkgdGhl
IGttYWxsb2MoKSdlZCBidWZmZXIgKi8NCisJZnJlZV9wYWdlKCh1bnNpZ25lZCBsb25nKXVzZXIp
Ow0KKwlyZXR1cm4gcmV0dmFsOw0KK30NCisNCitzdGF0aWMgc3NpemVfdCB0cnVzdGVkbGlzdGFk
ZF93cml0ZV9maWxlKHN0cnVjdCB0cGVfbGlzdCAqbGlzdCwgY29uc3QgY2hhciAqYnVmLA0KKwkJ
CQkJIHNpemVfdCBjb3VudCkNCit7DQorCWludCByZXR2YWw7DQorCXVuc2lnbmVkIGxvbmcgYWRk
X2NhbmRpZGF0ZTsNCisNCisJYWRkX2NhbmRpZGF0ZSA9IHNpbXBsZV9zdHJ0b3VsKGJ1ZiwgTlVM
TCwgMTApOw0KKw0KKwlkYmcoInZhbHVlIG9mIGFkZF9jYW5kaWRhdGUgaXMgJWQuXG4iLCAoaW50
KWFkZF9jYW5kaWRhdGUpOw0KKwlzcGluX2xvY2soJnRwZV9hY2xfbG9jayk7DQorCXJldHZhbCA9
IHRwZV9hZGQoYWRkX2NhbmRpZGF0ZSk7DQorCXNwaW5fdW5sb2NrKCZ0cGVfYWNsX2xvY2spOw0K
KwlpZiAocmV0dmFsKSB7DQorCQlyZXR1cm4gcmV0dmFsOw0KKwl9DQorCXJldHVybiBjb3VudDsN
CisNCit9DQorDQorLyogcGVyLUdJRCBiYXNpcyBBQ0wgc3VwcG9ydCAqLw0KKw0KK3N0YXRpYyBz
c2l6ZV90IHRydXN0ZWRsaXN0YWRkX2dyb3VwX3dyaXRlX2ZpbGUoc3RydWN0IHRwZV9saXN0ICps
aXN0LA0KKwkJCQkJICAgICAgIGNvbnN0IGNoYXIgKmJ1Ziwgc2l6ZV90IGNvdW50KQ0KK3sNCisJ
aW50IHJldHZhbDsNCisJdW5zaWduZWQgbG9uZyBhZGRfZ3JvdXBfY2FuZGlkYXRlOw0KKw0KKwlh
ZGRfZ3JvdXBfY2FuZGlkYXRlID0gc2ltcGxlX3N0cnRvdWwoYnVmLCBOVUxMLCAxMCk7DQorDQor
CWRiZygidmFsdWUgb2YgYWRkX2dyb3VwX2NhbmRpZGF0ZSBpcyAlZC5cbiIsIChpbnQpYWRkX2dy
b3VwX2NhbmRpZGF0ZSk7DQorCXNwaW5fbG9jaygmdHBlX2dyb3VwX2FjbF9sb2NrKTsNCisJcmV0
dmFsID0gdHBlX2dyb3VwX2FkZChhZGRfZ3JvdXBfY2FuZGlkYXRlKTsJLyogdHBlX2dyb3VwX2Fk
ZCgpIG5pbmphIG1vbmtleSAqLw0KKwlzcGluX3VubG9jaygmdHBlX2dyb3VwX2FjbF9sb2NrKTsN
CisJaWYgKHJldHZhbCkgew0KKwkJcmV0dXJuIHJldHZhbDsNCisJfQ0KKwlyZXR1cm4gY291bnQ7
DQorDQorfQ0KK3N0YXRpYyBzc2l6ZV90IHRydXN0ZWRsaXN0YWRkX2dyb3VwX3JlYWRfZmlsZShz
dHJ1Y3QgdHBlX2xpc3QgKmxpc3QsIGNoYXIgKmJ1ZikNCit7DQorCWludCBpOw0KKwlpbnQgcmV0
dmFsID0gMDsNCisJY2hhciAqZ3JvdXAgPSBOVUxMOw0KKwljaGFyICpidWZmZXIgPSBrbWFsbG9j
KDQwMCwgR0ZQX0tFUk5FTCk7DQorDQorCWdyb3VwID0gKGNoYXIgKilfX2dldF9mcmVlX3BhZ2Uo
R0ZQX0tFUk5FTCk7DQorCWlmICghZ3JvdXApDQorCQlyZXR1cm4gLUVOT01FTTsNCisNCisJaWYg
KCFidWZmZXIpDQorCQlyZXR1cm4gLUVOT01FTTsNCisNCisJaWYgKHRwZV9ncm91cF9hY2wgPT0g
TlVMTCkgew0KKwkJa2luZm8oIkVtcHR5IHVzZXIgZ3JvdXBzIEFjY2VzcyBDb250cm9sIExpc3Rc
biIpOw0KKwkJZnJlZV9wYWdlKCh1bnNpZ25lZCBsb25nKWdyb3VwKTsNCisJCXJldHVybiAtRU5P
REFUQTsNCisJfQ0KKw0KKwlidWZmZXJbMF0gPSAnXDAnOw0KKwlraW5mbygiJWQgdHJ1c3RlZCBn
cm91cChzKTogXG4iLCB0cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXMpOw0KKwlzcGluX2xvY2soJnRw
ZV9ncm91cF9hY2xfbG9jayk7DQorCWZvciAoaSA9IDA7IGkgPCB0cGVfYWNsX2dyb3VwX2NhbmRp
ZGF0ZXM7IGkrKykgew0KKwkJcHJpbnRrKEtFUk5fSU5GTyAiJWQgIiwgdHBlX2dyb3VwX2FjbFtp
XSk7DQorCQlyZXR2YWwgPSBzcHJpbnRmKGdyb3VwLCAiJWRcbiIsIHRwZV9ncm91cF9hY2xbaV0p
Ow0KKwkJc3RyY2F0KGJ1ZmZlciwgZ3JvdXApOw0KKwl9DQorCS8qIGxlYXZlIHByaW50aygpIGNh
bGxzIGFsb25lLCBub3Qga2luZm8oKSAqLw0KKwlwcmludGsoS0VSTl9JTkZPICJcbiIpOw0KKwlz
cGluX3VubG9jaygmdHBlX2dyb3VwX2FjbF9sb2NrKTsNCisNCisJcmV0dmFsID0gc25wcmludGYo
YnVmLCA0MDAsICIlc1xuIiwgYnVmZmVyKTsNCisNCisJa2ZyZWUoYnVmZmVyKTsJCS8qIHdlIGtm
cmVlKCkgdGhlIGttYWxsb2MoKSdlZCBidWZmZXIgKi8NCisJZnJlZV9wYWdlKCh1bnNpZ25lZCBs
b25nKWdyb3VwKTsNCisJcmV0dXJuIHJldHZhbDsNCit9DQorDQorLyogZW5kcyBzeXNmcyB0cGVm
cyBncm91cCBhY2wgbWFuYWdlbWVudCAqLw0KKw0KK3N0cnVjdCB0cGVmc19hdHRyaWJ1dGUgdHBl
ZnNfbGlzdGFkZF9hdHRyID0gew0KKwkuYXR0ciA9IHsubmFtZSA9ICJhZGQiLC5tb2RlID0gU19J
RlJFRyB8IFNfSVJVR08gfCBTX0lXVVNSfSwNCisJLnNob3cgPSB0cnVzdGVkbGlzdGFkZF9yZWFk
X2ZpbGUsDQorCS5zdG9yZSA9IHRydXN0ZWRsaXN0YWRkX3dyaXRlX2ZpbGUNCit9Ow0KKw0KKy8q
IGxpc3RhZGRfZ3JvdXAgcGVyLUdJRCBiYXNpcyBBQ0wgKi8NCitzdHJ1Y3QgdHBlZnNfYXR0cmli
dXRlIHRwZWZzX2xpc3RhZGRfZ3JvdXBfYXR0ciA9IHsNCisJLmF0dHIgPSB7Lm5hbWUgPSAiYWRk
LWdyb3VwIiwubW9kZSA9IFNfSUZSRUcgfCBTX0lSVUdPIHwgU19JV1VTUn0sDQorCS5zaG93ID0g
dHJ1c3RlZGxpc3RhZGRfZ3JvdXBfcmVhZF9maWxlLA0KKwkuc3RvcmUgPSB0cnVzdGVkbGlzdGFk
ZF9ncm91cF93cml0ZV9maWxlDQorfTsNCisNCisvKiB0cnVzdGVkIFVJRHMgZGVsZXRpb24gKi8N
CitzdGF0aWMgc3NpemVfdCB0cnVzdGVkbGlzdGRlbF93cml0ZV9maWxlKHN0cnVjdCB0cGVfbGlz
dCAqbGlzdCwgY29uc3QgY2hhciAqYnVmLA0KKwkJCQkJIHNpemVfdCBjb3VudCkNCit7DQorCWlu
dCByZXR2YWw7DQorCXVuc2lnbmVkIGxvbmcgcmVtX2NhbmRpZGF0ZTsNCisNCisJcmVtX2NhbmRp
ZGF0ZSA9IHNpbXBsZV9zdHJ0b3VsKGJ1ZiwgTlVMTCwgMTApOw0KKw0KKwlkYmcoInZhbHVlIG9m
IHJlbV9jYW5kaWRhdGUgaXMgJWQuXG4iLCAoaW50KXJlbV9jYW5kaWRhdGUpOw0KKwlzcGluX2xv
Y2soJnRwZV9hY2xfbG9jayk7DQorCXJldHZhbCA9IHRwZV9yZW1vdmUocmVtX2NhbmRpZGF0ZSk7
DQorCXNwaW5fdW5sb2NrKCZ0cGVfYWNsX2xvY2spOw0KKwlpZiAocmV0dmFsKSB7DQorCQlyZXR1
cm4gcmV0dmFsOw0KKwl9DQorCXJldHVybiBjb3VudDsNCisNCit9DQorDQorLyogdHJ1c3RlZCBH
SURzIGRlbGV0aW9uICovDQorc3RhdGljIHNzaXplX3QgdHJ1c3RlZGxpc3RkZWxfZ3JvdXBfd3Jp
dGVfZmlsZShzdHJ1Y3QgdHBlX2xpc3QgKmxpc3QsDQorCQkJCQkgICAgICAgY29uc3QgY2hhciAq
YnVmLCBzaXplX3QgY291bnQpDQorew0KKwlpbnQgcmV0dmFsOw0KKwl1bnNpZ25lZCBsb25nIHJl
bV9ncm91cF9jYW5kaWRhdGU7DQorDQorCXJlbV9ncm91cF9jYW5kaWRhdGUgPSBzaW1wbGVfc3Ry
dG91bChidWYsIE5VTEwsIDEwKTsNCisNCisJZGJnKCJ2YWx1ZSBvZiByZW1fY2FuZGlkYXRlIGlz
ICVkLlxuIiwgKGludClyZW1fZ3JvdXBfY2FuZGlkYXRlKTsNCisJc3Bpbl9sb2NrKCZ0cGVfZ3Jv
dXBfYWNsX2xvY2spOw0KKwlyZXR2YWwgPSB0cGVfZ3JvdXBfcmVtb3ZlKHJlbV9ncm91cF9jYW5k
aWRhdGUpOw0KKwlzcGluX3VubG9jaygmdHBlX2dyb3VwX2FjbF9sb2NrKTsNCisJaWYgKHJldHZh
bCkgew0KKwkJcmV0dXJuIHJldHZhbDsNCisJfQ0KKwlyZXR1cm4gY291bnQ7DQorDQorfQ0KKw0K
K3N0cnVjdCB0cGVmc19hdHRyaWJ1dGUgdHBlZnNfbGlzdGRlbF9hdHRyID0gew0KKwkuYXR0ciA9
IHsubmFtZSA9ICJkZWwiLC5tb2RlID0gU19JRlJFRyB8IFNfSVJVR08gfCBTX0lXVVNSfSwNCisJ
LnN0b3JlID0gdHJ1c3RlZGxpc3RkZWxfd3JpdGVfZmlsZQ0KK307DQorDQorLyogc3lzZnMvdHBl
ZnMvZGVsLWdyb3VwICovDQorc3RydWN0IHRwZWZzX2F0dHJpYnV0ZSB0cGVmc19saXN0ZGVsX2dy
b3VwX2F0dHIgPSB7DQorCS5hdHRyID0gey5uYW1lID0gImRlbC1ncm91cCIsLm1vZGUgPSBTX0lG
UkVHIHwgU19JUlVHTyB8IFNfSVdVU1J9LA0KKwkuc3RvcmUgPSB0cnVzdGVkbGlzdGRlbF9ncm91
cF93cml0ZV9maWxlDQorfTsNCisNCisvKiBUUEUgL3Byb2MgZW50cnkgbWFuYWdpbmcgKi8NCitz
c2l6ZV90DQorcHJvY2ZpbGVfcmVhZChjaGFyICpidWZmZXIsDQorCSAgICAgIGNoYXIgKipidWZm
ZXJfbG9jYXRpb24sDQorCSAgICAgIG9mZl90IG9mZnNldCwgaW50IGJ1ZmZlcl9sZW5ndGgsIGlu
dCAqZW9mLCB2b2lkICpkYXRhKQ0KK3sNCisJaW50IGxlbiA9IDA7CQkvKiBUaGUgbnVtYmVyIG9m
IGJ5dGVzIGFjdHVhbGx5IHVzZWQgKi8NCisJY2hhciAqdmVybWFnaWMgPSBWRVJTSU9OOw0KKwlp
ZiAob2Zmc2V0ID4gMCkgew0KKwkJZGJnKCJPZmZzZXQgJWQgOiAvcHJvYy90cGUgOiBwcm9jZmls
ZV9yZWFkLCBcDQorCQkgICAgICAgd3JvdGUgJWQgYnl0ZXNcbiIsIChpbnQpKG9mZnNldCksIGxl
bik7DQorCQkqZW9mID0gMTsNCisJCXJldHVybiBsZW47DQorCX0NCisJLyogV2Ugd3JpdGUgdGhl
IGRhdGEgdG8gdGhlIHByb2NmcyBlbnRyeSAqLw0KKwlsZW4gPSBzcHJpbnRmKGJ1ZmZlciwNCisJ
CSAgICAgICJWZXJzaW9uOiAlc1xuVHJ1c3RlZCB1c2VyczogJWRcblRydXN0ZWQgZ3JvdXBzOiAl
ZFxuIiwNCisJCSAgICAgIHZlcm1hZ2ljLCB0cGVfYWNsX2NhbmRpZGF0ZXMsIHRwZV9hY2xfZ3Jv
dXBfY2FuZGlkYXRlcyk7DQorCS8qIFZvaWxhISAqLw0KKwlkYmcoIkxlYXZpbmcgL3Byb2MvdHBl
IDogcHJvY2ZpbGVfcmVhZCwgd3JvdGUgJWQgQnl0ZXNcbiIsIGxlbik7DQorCXJldHVybiBsZW47
DQorfQ0KKw0KKy8qIE1vZHVsZSBjb2RlICovDQorDQorLyogcHJldmVudCBTSUdLSUxMIGluIGV4
ZWN2ZSgpICovDQorDQorLyogDQorIEFzIHN1Z2dlc3RlZCBieSBTdGVwaGVuIEQuIFNtYWxsZXkg
ZnJvbSB0aGUgTlNBLCB0aGUgZm9sbG93aW5nIGNoZWNrcyB3aWxsIHByZXZlbnQNCisgZm9yIGV4
YW1wbGUgdW50cnVzdGVkIGV4ZWN1dGFibGVzIGJlaW5nIGFidXNlZCB3aXRoaW4gdGhlIGV4ZWN1
dGlvbiBjb250ZXh0IG9mIGxkLWxpbnV4DQorIHNoYXJlZCBsaWJyYXJ5LCBhbmQgYWxzbyB0aGV5
IGFyZSBhIHJlcGxhY2VtZW50IG9mIHRoZSBvcmlnaW5hbCxsaW1pdGVkLCANCisgdHBlX2Jwcm1f
c2V0X3NlY3VyaXR5IGhvb2suDQorICovDQorLyoNCisgKiBmaWxlX21tYXAgaG9vayAtPiB0cGVf
ZmlsZV9tbWFwDQorICovDQorc3RhdGljIGludCB0cGVfZmlsZV9tbWFwKHN0cnVjdCBmaWxlICpm
aWxlLCB1bnNpZ25lZCBsb25nIHByb3QsDQorCQkJIHVuc2lnbmVkIGxvbmcgZmxhZ3MpDQorew0K
KwlpZiAoKGZpbGUpICYmIChmaWxlLT5mX2RlbnRyeSkgJiYgKGZpbGUtPmZfZGVudHJ5LT5kX25h
bWUubmFtZSkNCisJICAgICYmIChjdXJyZW50LT51aWQpICYmIChjdXJyZW50LT5naWQpICYmIChw
cm90ICYgUFJPVF9FWEVDKSkgew0KKwkJLyogR2V0IHRoZSBleGVjdXRhYmxlIGV4ZWN1dGlvbiB1
aWQgYW5kIG1vZGUgKi8NCisJCXVpZF90IG1wdWlkID0gZmlsZS0+Zl9kZW50cnktPmRfcGFyZW50
LT5kX2lub2RlLT5pX3VpZDsNCisJCW1vZGVfdCBtcG1vZGUgPSBmaWxlLT5mX2RlbnRyeS0+ZF9w
YXJlbnQtPmRfaW5vZGUtPmlfbW9kZTsNCisNCisJCS8qIENoZWNrIHRoZSBleGVjdXRhYmxlIHBy
b3BlcnRpZXMgKi8NCisJCS8qIGF0dGVtcHQgdG8gbWFrZSBhIGZpbGUgbWFwcGluZyBleGVjdXRh
YmxlLCBydW4gVFBFIHRydXN0aW5nIHRlc3QgKi8NCisJCWlmICgoIVRSVVNURURfUEFUSChtcG1v
ZGUsIG1wdWlkKSkNCisJCSAgICAmJiAoIVRSVVNURURfVVNFUihjdXJyZW50LT51aWQpKQ0KKwkJ
ICAgICYmICghVFJVU1RFRF9HUk9VUChjdXJyZW50LT5naWQpKSkgew0KKw0KKwkJCS8qIGdldCBh
IGZyZWUgcGFnZSBhbmQgYWxsb2NhdGUgZXhlY3V0YWJsZSByZWFsIHBhdGggKi8NCisJCQljaGFy
ICpmcHRtcCA9DQorCQkJICAgIChjaGFyICopX19nZXRfZnJlZV9wYWdlKEdGUF9LRVJORUwpLCAq
ZXhmcGF0aDsNCisNCisJCQkvKiAiQXJlIHdlIG91dCBvZiBtZW1vcnk/IEkgY2FuJ3QgcmVtZW1i
ZXIiIC1FTk9NRU0gaW4gSGFsbG93ZWVuIFBhbmljIG1lZXRpbmcuICovDQorCQkJaWYgKCEoZnB0
bXApKQ0KKwkJCQlyZXR1cm4gLUVOT01FTTsNCisNCisJCQlleGZwYXRoID0NCisJCQkgICAgZF9w
YXRoKGZpbGUtPmZfZGVudHJ5LCBmaWxlLT5mX3Zmc21udCwgZnB0bXAsDQorCQkJCSAgIFBBR0Vf
U0laRSk7DQorDQorCQkJLyogWW91IGNhbiBzdGlsbCBiZWxpZXZlIGluIE5pbmphIENvZGUgTW9u
a2V5cy4uLiAqLw0KKwkJCXByaW50ayhLRVJOX0FMRVJUICJUUEU6IFVudHJ1c3RlZCBleGVjdXRp
b246ICVzICINCisJCQkgICAgICAgInVpZC9ldWlkPSVkLyVkIGdpZC9lZ2lkPSVkLyVkIHN1aWQv
c2dpZD0lZC8lZCBwaWQ9JWQiDQorCQkJICAgICAgICJcbiIsIGV4ZnBhdGgsIGN1cnJlbnQtPnVp
ZCwgY3VycmVudC0+ZXVpZCwNCisJCQkgICAgICAgY3VycmVudC0+Z2lkLCBjdXJyZW50LT5lZ2lk
LCBjdXJyZW50LT5zdWlkLA0KKwkJCSAgICAgICBjdXJyZW50LT5zZ2lkLCBjdXJyZW50LT5waWQp
Ow0KKw0KKwkJCWZyZWVfcGFnZSgodW5zaWduZWQgbG9uZylmcHRtcCk7CS8qIGZyZWUgdGhlIGZw
dG1wIHBhZ2UgKi8NCisNCisJCQlyZXR1cm4gLUVBQ0NFUzsJLyogZHVlIHRvIGVsZl9tYXAoKSB0
aGlzIHdpbGwgY2F1c2UgYSBTSUdLSUxMICovDQorCQl9DQorCX0NCisJcmV0dXJuIDA7DQorfQ0K
Kw0KKy8qDQorICogZmlsZV9tcHJvdGVjdCBob29rIC0+IHRwZV9maWxlX21wcm90ZWN0DQorICov
DQorc3RhdGljIGludCB0cGVfZmlsZV9tcHJvdGVjdChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZt
YSwgdW5zaWduZWQgbG9uZyBwcm90KQ0KK3sNCisJaWYgKCh2bWEtPnZtX2ZpbGUpICYmIChwcm90
ICYgUFJPVF9FWEVDKSkgew0KKwkJLyogR2V0IHRoZSBleGVjdXRhYmxlIGV4ZWN1dGlvbiB1aWQg
YW5kIG1vZGUgKi8NCisJCXVpZF90IG1wdWlkID0gdm1hLT52bV9maWxlLT5mX2RlbnRyeS0+ZF9w
YXJlbnQtPmRfaW5vZGUtPmlfdWlkOw0KKwkJbW9kZV90IG1wbW9kZSA9DQorCQkgICAgdm1hLT52
bV9maWxlLT5mX2RlbnRyeS0+ZF9wYXJlbnQtPmRfaW5vZGUtPmlfbW9kZTsNCisNCisJCWlmICgo
IVRSVVNURURfUEFUSChtcG1vZGUsIG1wdWlkKSkNCisJCSAgICAmJiAoIVRSVVNURURfVVNFUihj
dXJyZW50LT51aWQpKQ0KKwkJICAgICYmICghVFJVU1RFRF9HUk9VUChjdXJyZW50LT5naWQpKSkg
ew0KKwkJCS8qIGdldCBhIGZyZWUgcGFnZSBhbmQgYWxsb2NhdGUgZXhlY3V0YWJsZSByZWFsIHBh
dGggKi8NCisJCQljaGFyICpmcHRtcCA9DQorCQkJICAgIChjaGFyICopX19nZXRfZnJlZV9wYWdl
KEdGUF9LRVJORUwpLCAqZXhmcGF0aDsNCisNCisJCQkvKiAiQXJlIHdlIG91dCBvZiBtZW1vcnk/
IEkgY2FuJ3QgcmVtZW1iZXIiIC1FTk9NRU0gaW4gSGFsbG93ZWVuIFBhbmljIG1lZXRpbmcuICov
DQorCQkJaWYgKCEoZnB0bXApKQ0KKwkJCQlyZXR1cm4gLUVOT01FTTsNCisNCisJCQlleGZwYXRo
ID0NCisJCQkgICAgZF9wYXRoKHZtYS0+dm1fZmlsZS0+Zl9kZW50cnksDQorCQkJCSAgIHZtYS0+
dm1fZmlsZS0+Zl92ZnNtbnQsIGZwdG1wLCBQQUdFX1NJWkUpOw0KKw0KKwkJCS8qIC4uLmJ1dCB0
aGV5IGRvbid0IHRydXN0IGluIG1wcm90ZWN0KCkgKi8NCisJCQlwcmludGsoS0VSTl9BTEVSVA0K
KwkJCSAgICAgICAiVFBFOiBVbnRydXN0ZWQgZXhlY3V0aW9uIGJ5IG1wcm90ZWN0KCk6ICVzICIN
CisJCQkgICAgICAgInVpZC9ldWlkPSVkLyVkIGdpZC9lZ2lkPSVkLyVkIHN1aWQvc2dpZD0lZC8l
ZCBwaWQ9JWQiDQorCQkJICAgICAgICJcbiIsIGV4ZnBhdGgsIGN1cnJlbnQtPnVpZCwgY3VycmVu
dC0+ZXVpZCwNCisJCQkgICAgICAgY3VycmVudC0+Z2lkLCBjdXJyZW50LT5lZ2lkLCBjdXJyZW50
LT5zdWlkLA0KKwkJCSAgICAgICBjdXJyZW50LT5zZ2lkLCBjdXJyZW50LT5waWQpOw0KKw0KKwkJ
CWZyZWVfcGFnZSgodW5zaWduZWQgbG9uZylmcHRtcCk7CS8qIGZyZWUgdGhlIGZwdG1wIHBhZ2Ug
Ki8NCisNCisJCQlyZXR1cm4gLUVBQ0NFUzsNCisJCX0NCisJfQ0KKwlyZXR1cm4gMDsNCit9DQor
DQorLyoNCisgVFBFIHNlY3VyaXR5IGhvb2tzDQorKi8NCitzdHJ1Y3Qgc2VjdXJpdHlfb3BlcmF0
aW9ucyB0cGVfc2VjdXJpdHlfb3BzID0gew0KKyAgICAgIGZpbGVfbW1hcDp0cGVfZmlsZV9tbWFw
LA0KKyAgICAgIGZpbGVfbXByb3RlY3Q6dHBlX2ZpbGVfbXByb3RlY3QsDQorfTsNCisNCitzdGF0
aWMgaW50IF9faW5pdCB0cGVfbW9kdWxlX2luaXQodm9pZCkNCit7DQorCWludCByZXR2YWw7DQor
CWludCBjZm9vID0gMDsNCisJLyogcmVnaXN0ZXIgb3Vyc2VsdmVzIHdpdGggdGhlIHNlY3VyaXR5
IGZyYW1ld29yayAqLw0KKwlpZiAocmVnaXN0ZXJfc2VjdXJpdHkoJnRwZV9zZWN1cml0eV9vcHMp
KSB7DQorCQlwcmludGsoS0VSTl9JTkZPDQorCQkgICAgICAgIkZhaWx1cmUgcmVnaXN0ZXJpbmcg
dHBlIG1vZHVsZSB3aXRoIHRoZSBrZXJuZWxcbiIpOw0KKwkJLyogdHJ5IHJlZ2lzdGVyaW5nIHdp
dGggcHJpbWFyeSBtb2R1bGUgKi8NCisJCWlmIChtb2RfcmVnX3NlY3VyaXR5KExFR0FDWV9OQU1F
LCAmdHBlX3NlY3VyaXR5X29wcykpIHsNCisJCQlwcmludGsoS0VSTl9JTkZPICJGYWlsdXJlIHJl
Z2lzdGVyaW5nIHRwZSBtb2R1bGUgIg0KKwkJCSAgICAgICAid2l0aCBwcmltYXJ5IHNlY3VyaXR5
IG1vZHVsZS5cbiIpOw0KKwkJCXJldHVybiAtRUlOVkFMOw0KKwkJfQ0KKwkJc2Vjb25kYXJ5ID0g
MTsNCisJfQ0KKw0KKwkvKiByZWdpc3RlciB0cGUgc3Vic3lzdGVtICovDQorCWtpbmZvKCJSZWdp
c3RlcmluZyBUUEUgc3Vic3lzdGVtLlxuIik7DQorCXJldHZhbCA9IHN1YnN5c3RlbV9yZWdpc3Rl
cigmdHBlZnNfc3Vic3lzKTsNCisJaWYgKHJldHZhbCkgew0KKwkJa2luZm8oInN1YnN5c3RlbV9y
ZWdpc3RlciBmYWlsZWQgd2l0aCAlZFxuIiwgcmV0dmFsKTsNCisJCXJldHVybiByZXR2YWw7DQor
CX0NCisJa2luZm8oIlJlZ2lzdGVyaW5nIHRwZWZzIHN1cHBvcnQgZm9yIHN5c2ZzLlxuIik7DQor
CXN5c2ZzX2NyZWF0ZV9maWxlKCZ0cGVmc19zdWJzeXMua3NldC5rb2JqLCAmdHBlZnNfbGlzdGFk
ZF9hdHRyLmF0dHIpOw0KKwlzeXNmc19jcmVhdGVfZmlsZSgmdHBlZnNfc3Vic3lzLmtzZXQua29i
aiwgJnRwZWZzX2xpc3RkZWxfYXR0ci5hdHRyKTsNCisJLyogY3JlYXRlIHRoZSBncm91cC9naWQg
YWNsIHN5c2ZzIHRwZWZzIGZpbGVzICovDQorCXN5c2ZzX2NyZWF0ZV9maWxlKCZ0cGVmc19zdWJz
eXMua3NldC5rb2JqLA0KKwkJCSAgJnRwZWZzX2xpc3RhZGRfZ3JvdXBfYXR0ci5hdHRyKTsNCisJ
c3lzZnNfY3JlYXRlX2ZpbGUoJnRwZWZzX3N1YnN5cy5rc2V0LmtvYmosDQorCQkJICAmdHBlZnNf
bGlzdGRlbF9ncm91cF9hdHRyLmF0dHIpOw0KKw0KKwlraW5mbygiUmVnaXN0ZXJpbmcgd2l0aCBM
U00gc3Vic3lzdGVtLlxuIik7DQorCXRwZV9pbml0KCk7DQorCS8qIFRQRSAvcHJvYy8gImJpbGJv
IiBlbnRyeSBiZWdpbnMgOikgKi8NCisJVFBFX3BlbnRyeSA9IGNyZWF0ZV9wcm9jX2VudHJ5KFRQ
RV9QUk9DX0VOVFJZX05BTUUsIDA2NDQsIE5VTEwpOw0KKwlUUEVfcGVudHJ5LT5yZWFkX3Byb2Mg
PSBwcm9jZmlsZV9yZWFkOw0KKwlUUEVfcGVudHJ5LT5vd25lciA9IFRISVNfTU9EVUxFOw0KKwlU
UEVfcGVudHJ5LT5tb2RlID0gU19JRlJFRyB8IFNfSVJVR087DQorCVRQRV9wZW50cnktPnVpZCA9
IDA7DQorCVRQRV9wZW50cnktPmdpZCA9IDA7DQorCVRQRV9wZW50cnktPnNpemUgPSAyMDsNCisJ
aWYgKFRQRV9wZW50cnkgPT0gTlVMTCkgew0KKwkJY2ZvbyA9IC1FTk9NRU07DQorCQkvKiovIHJl
bW92ZV9wcm9jX2VudHJ5KFRQRV9QUk9DX0VOVFJZX05BTUUsICZwcm9jX3Jvb3QpOw0KKwkJa2lu
Zm8oIkVycm9yOiBDb3VsZCBub3QgaW5pdGlhbGl6ZSAvcHJvYy90cGVcbiIpOw0KKwl9IGVsc2Ug
ew0KKwkJa2luZm8oIi9wcm9jIGVudHJ5IGluaXRpYWxpemVkLlxuIik7DQorCX0NCisJa2luZm8o
IlRydXN0ZWQgUGF0aCBFeGVjdXRpb24gZW5naW5lIGluaXRpYWxpemVkLlxuIik7DQorCXJldHVy
biBjZm9vOw0KK30NCisNCitzdGF0aWMgdm9pZCBfX2V4aXQgdHBlX2V4aXQodm9pZCkNCit7DQor
CXJlbW92ZV9wcm9jX2VudHJ5KFRQRV9QUk9DX0VOVFJZX05BTUUsICZwcm9jX3Jvb3QpOwkvKiBy
ZW1vdmUgVFBFIC9wcm9jIGVudHJ5ICovDQorCXN5c2ZzX3JlbW92ZV9maWxlKCZ0cGVmc19zdWJz
eXMua3NldC5rb2JqLCAmdHBlZnNfbGlzdGFkZF9hdHRyLmF0dHIpOw0KKwlzeXNmc19yZW1vdmVf
ZmlsZSgmdHBlZnNfc3Vic3lzLmtzZXQua29iaiwgJnRwZWZzX2xpc3RkZWxfYXR0ci5hdHRyKTsN
CisJLyogcmVtb3ZlIHN5c2ZzL3RwZWZzL2FkZC1ncm91cCBhbmQgZGVsLWdyb3VwICovDQorCXN5
c2ZzX3JlbW92ZV9maWxlKCZ0cGVmc19zdWJzeXMua3NldC5rb2JqLA0KKwkJCSAgJnRwZWZzX2xp
c3RhZGRfZ3JvdXBfYXR0ci5hdHRyKTsNCisJc3lzZnNfcmVtb3ZlX2ZpbGUoJnRwZWZzX3N1YnN5
cy5rc2V0LmtvYmosDQorCQkJICAmdHBlZnNfbGlzdGRlbF9ncm91cF9hdHRyLmF0dHIpOw0KKwlz
dWJzeXN0ZW1fdW5yZWdpc3RlcigmdHBlZnNfc3Vic3lzKTsNCisNCisJLyogcmVtb3ZlIG91cnNl
bHZlcyBmcm9tIHRoZSBzZWN1cml0eSBmcmFtZXdvcmsgKi8NCisJaWYgKHNlY29uZGFyeSkgew0K
KwkJaWYgKG1vZF91bnJlZ19zZWN1cml0eShMRUdBQ1lfTkFNRSwgJnRwZV9zZWN1cml0eV9vcHMp
KQ0KKwkJCXByaW50ayhLRVJOX0lORk8gIkZhaWx1cmUgdW5yZWdpc3RlcmluZyB0cGUgbW9kdWxl
ICINCisJCQkgICAgICAgIndpdGggcHJpbWFyeSBtb2R1bGUuXG4iKTsNCisJCXJldHVybjsNCisJ
fQ0KKw0KKwlpZiAodW5yZWdpc3Rlcl9zZWN1cml0eSgmdHBlX3NlY3VyaXR5X29wcykpIHsNCisJ
CXByaW50ayhLRVJOX0lORk8NCisJCSAgICAgICAiRmFpbHVyZSB1bnJlZ2lzdGVyaW5nIHRwZSBt
b2R1bGUgd2l0aCB0aGUga2VybmVsXG4iKTsNCisJfQ0KKwlraW5mbygiVHJ1c3RlZCBQYXRoIEV4
ZWN1dGlvbiBzdWJzeXN0ZW0gdW5sb2FkZWQuXG4iKTsNCisNCit9DQorDQorbW9kdWxlX2luaXQo
dHBlX21vZHVsZV9pbml0KTsNCittb2R1bGVfZXhpdCh0cGVfZXhpdCk7DQorDQorLyogTW9kaW5m
byBwZXJscyAqLw0KK01PRFVMRV9ERVNDUklQVElPTihERVNDUklQVElPTik7DQorTU9EVUxFX0FV
VEhPUihBVVRIT1IpOw0KK01PRFVMRV9MSUNFTlNFKExJQ0VOU0UpOw0KZGlmZiAtTnVyIC4uL2xp
bnV4LTIuNi4xMC9zZWN1cml0eS90cGUuaCBsaW51eC0yLjYuMTAtdHBlL3NlY3VyaXR5L3RwZS5o
DQotLS0gLi4vbGludXgtMi42LjEwL3NlY3VyaXR5L3RwZS5oCTE5NzAtMDEtMDEgMDE6MDA6MDAu
MDAwMDAwMDAwICswMTAwDQorKysgbGludXgtMi42LjEwLXRwZS9zZWN1cml0eS90cGUuaAkyMDA1
LTAxLTA3IDA0OjAzOjU3LjEyNjcwNTM5MiArMDEwMA0KQEAgLTAsMCArMSwxNTggQEANCisvKg0K
KyAqIFRydXN0ZWQgUGF0aCBFeGVjdXRpb24gU2VjdXJpdHkgTW9kdWxlDQorICoNCisgKiBUaGlz
IG1vZHVsZSBwcm92aWRlcyBhIFRydXN0ZWQgUGF0aCBFeGVjdXRpb24gKFRQRSkgZW5naW5lIHRv
IHRoZQ0KKyAqIExpbnV4IGtlcm5lbC4gVFBFIG9yaWdpbmF0ZWQgYXMgYSBrZXJuZWwgcGF0Y2gg
dG8gT3BlbkJTRCAyLjQgYnkNCisgKiByb3V0ZXxkYWVtb245IGFuZCBNaWtlIFNjaGlmbWFuIChz
ZWUgUGhyYWNrIDU0KS4gSUJNIG9yaWdpbmFsbHkgbW9kaWZpZWQNCisgKiB0aGUgb3JpZ2luYWwg
cHJvamVjdCB0byBmaXQgd2l0aGluIHRoZSBjb25zdHJhaW50cyBvZiB0aGUgTFNNIGZyYW1ld29y
aw0KKyAqIGFuZCBzbyBpdCBzaG91bGQgYmUgbm90ZWQgdGhhdCB0aGlzIGlzIG5vdCB0aGUgc2Ft
ZSBwcm9qZWN0LiBBbHNvLA0KKyAqIHRoZSBtb2R1bGUgbWFrZXMgdXNlIG9mIHRoZSBzeXNmcyBm
aWxlc3lzdGVtLiANCisgKiBUaGlzIG1vZHVsZSBpcyBhIHJld3JpdGUgb2YgdGhlIElCTSdzIG9y
aWdpbmFsIGNvZGUgaW4gb3JkZXIgdG8gYWRkIA0KKyAqIGRlYnVnZ2luZywgYmV0dGVyIGluZm9y
bWF0aW9uIG91dHB1dHRpbmcsIHN1cHBvcnQgZm9yIHBlci1Vc2VyLUdyb3VwcyANCisgKiBhY2Nl
c3MgY29udHJvbCBsaXN0cyBhdCBydW50aW1lIGFuZCBrZXJuZWwtY29uZmlndXJhdGlvbiBsZXZl
bCwgYSBwcm9jZnMgDQorICogaW50ZXJmYWNlIGZvciBnZW5lcmFsIGluZm9ybWF0aW9uIGdhdGhl
cmluZyBmcm9tIHRoZSBUUEUgc3Vic3lzdGVtIGFuZCB0aGUNCisgKiBwcm90ZWN0aW9uIGVuZ2lu
ZSB3aGljaCBpbiB0aGUgb3JpZ2luYWwgSUJNJ3MgY29kZSB3YXMgcmVseWluZyBpbiBicHJtX3Nl
dF9zZWN1cml0eQ0KKyAqIGlzIG5vdyBiYXNlZCBpbiBleGVjdXRhYmxlcyBtZW1vcnkgbWFwcGlu
Z3MsIHdoaWNoIG1ha2VzIGl0IHNlY3VyZSBhZ2FpbnN0DQorICogc2hhcmVkIGxpYnJhcmllcyB0
aGF0IGNhbiB3cmFwIHVudHJ1c3RlZCBleGVjdXRhYmxlcyBhbmQgYnlwYXNzIHRoZSBUUEUNCisg
KiBzdWJzeXN0ZW0sIGFsc28gYWRkaW5nIGEgc2Vjb25kYXJ5IHByb3RlY3Rpb24gYWdhaW5zdCBw
b3NzaWJsZSBhdHRlbXB0cyB0bw0KKyAqIGJ5cGFzcyB0aGUgbW1hcCgpJ2luZyBjaGVja3MgYnkg
dXNpbmcgUFJPVF9SRUFEIGluc3RlYWQgb2YgUFJPVF9FWEVDIGluDQorICogbXByb3RlY3QoKSBj
YWxscy4NCisgKg0KKyAqIENvcHlyaWdodCAoQykgMjAwMyBJQk0gQ29ycC4gPG5hcmFoaW1pQHVz
LmlibS5jb20+DQorICogQ29weXJpZ2h0IChDKSAyMDA1IExvcmVuem8gSGVybmFuZGV6IEdhcmNp
YS1IaWVycm8gPGxvcmVuem9AZ251Lm9yZz4NCisgKiBBbGwgcmlnaHRzIHJldmVyc2VkLg0KKyAq
DQorICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRl
IGl0IGFuZC9vcg0KKyAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5l
cmFsIFB1YmxpYyBMaWNlbnNlDQorICogYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJl
IEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDINCisgKiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0
IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCisgKg0KKyAqIFRoaXMgcHJvZ3JhbSBp
cyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KKyAqIGJ1
dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5
IG9mDQorICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQ
T1NFLiAgU2VlIHRoZQ0KKyAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRl
dGFpbHMuDQorICovDQorDQorI2lmbmRlZiBfX1RQRV9IDQorI2RlZmluZSBfX1RQRV9IDQorDQor
I2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+DQorI2luY2x1ZGUgPGFzbS91YWNjZXNzLmg+DQorDQor
LyogVmVybWFnaWMgYW5kIC9wcm9jIGVudHJ5IG5hbWUgKi8NCisNCisjZGVmaW5lIFZFUlNJT04g
CQkiMC4yLTIwMDUwMTA3Ig0KKyNkZWZpbmUgTFNNX1ZFUlNJT04gCQlOVUxMCS8qIHVudXNlZCAq
Lw0KKyNkZWZpbmUgVFBFX1BST0NfRU5UUllfTkFNRSAJInRwZSIJLyogL3Byb2MgZW50cnkgbmFt
ZSAqLw0KKw0KKy8qIFBlci11c2VyIGdyb3VwIGJhc2lzIHByb3RlY3Rpb24gc3R1ZmYgKi8NCisN
CitzdGF0aWMgaW50IHRwZV90cnVzdGVkX2dpZCA9IDA7DQorI2lmZGVmIENPTkZJR19TRUNVUklU
WV9UUEVfVFJVU1RFRF9HSUQNCit0cGVfdHJ1c3RlZF9naWQgPSBDT05GSUdfU0VDVVJJVFlfVFBF
X1RSVVNURURfR0lEOw0KKyNlbmRpZg0KKy8qDQorICogIHN5c2NhbGwgc3R1ZmYNCisgKi8NCisj
ZGVmaW5lIFRQRV9BQ0xfU0laRSAgICA4MgkvKiBNYXhpbXVtIG51bWJlciBvZiB1c2VycyBpbiB0
aGUgbGlzdCANCisJCQkJICogcGx1cyB0d28uIFRoaXMgd2FzIGFuIG9yaWdpbmFsDQorCQkJCSAq
IGNvbXBvbmVudCBvZiBUUEUuIFRoaXMgd2lsbCBiZSANCisJCQkJICogZml4ZWQgbGF0ZXIgb24u
DQorCQkJCSAqLw0KKw0KKyNkZWZpbmUgVFBFX0lOSVRJQUxJWkVSIC0xCS8qIEEgVUlEIHRoYXQg
aXNuJ3QgdXNlZCAqLw0KKw0KKyNkZWZpbmUgQUNLICAgICAgICAgICAgIDEJLyogcG9zaXRpdmUg
YWNrbm93bGVkZ2VtZW50ICovDQorI2RlZmluZSBOQUNLICAgICAgICAgICAgLTEJLyogbmVnYXRp
dmUgYWNrbm93bGVkZ2VtZW50ICovDQorI2RlZmluZSBEVVAgICAgICAgICAgICAzCS8qIGR1cGxp
Y2F0ZSBpZCByZXR1cm4gZm9yIHRwZV9hZGQgKi8NCisNCisvKg0KKyAqICBWZXJpZnkgdGhlIHBh
dGguIA0KKyAqLw0KKyNkZWZpbmUgVFJVU1RFRF9QQVRIKG1vZGUsIHVpZCkgXA0KKyghKG1vZGUg
JiAoU19JV0dSUCB8IFNfSVdPVEgpKSAmJiAodWlkID09IDApKQ0KKw0KK3N0YXRpYyB1aWRfdCB0
cGVfYWNsW1RQRV9BQ0xfU0laRV07CS8qIHRydXN0ZWQgdXNlcnMgbGlzdCAqLw0KK3N0YXRpYyBn
aWRfdCB0cGVfZ3JvdXBfYWNsW1RQRV9BQ0xfU0laRV07CS8qIHRydXN0ZWQgdXNlciBncm91cHMg
bGlzdCAqLw0KK3N0YXRpYyBpbnQgdHBlX2FjbF9jYW5kaWRhdGVzOwkvKiBudW1iZXIgb2YgdXNl
cnMgb24gdGhlIGxpc3QgKi8NCitzdGF0aWMgaW50IHRwZV9hY2xfZ3JvdXBfY2FuZGlkYXRlczsJ
LyogbnVtYmVyIG9mIHVzZXIgZ3JvdXBzIG9uIHRoZSBsaXN0ICovDQorDQorLyoNCisgKiBWZXJp
ZnkgdGhlIHVzZXIuIFRoaXMgbWFjcm8gaXMgcGFzc2VkIHRoZSB1c2VyJ3MgSUQgZnJvbSB0aGUg
DQorICogdHBlX2Jwcm1fc2V0X3NlY3VyaXR5IGhvb2suIA0KKyAqLw0KKw0KKyNkZWZpbmUgVFJV
U1RFRF9VU0VSKFVJRCkgKHRwZV92ZXJpZnkoVUlEKSA9PSBBQ0spDQorDQorLyoNCisgKiBWZXJp
ZnkgdGhlIHVzZXIgZ3JvdXAuIFRoaXMgbWFjcm8gaXMgcGFzc2VkIHRoZSB1c2VyJ3MgZ3JvdXAg
SUQgZnJvbSB0aGUgDQorICogdHBlX2Jwcm1fc2V0X3NlY3VyaXR5IGhvb2suIA0KKyAqLw0KKw0K
KyNkZWZpbmUgVFJVU1RFRF9HUk9VUChHSUQpICh0cGVfZ3JvdXBfdmVyaWZ5KEdJRCkgPT0gQUNL
KQ0KKw0KKy8qICBJbml0aWFsaXplIHRoZSBhcnJheSB3aXRoIGRlZmF1bHQgdmFsdWVzIChUUEVf
SU5JVElBTElaRVIpLiAqLw0KKw0KKy8qIERlYnVnZ2luZyBhbmQgb3V0cHV0dGluZyBmdW5jdGlv
bnMgKi8NCisNCitzdGF0aWMgaW5saW5lIHZvaWQgdHBlX2luaXQodm9pZCkNCit7DQorCW1lbXNl
dCh0cGVfYWNsLCBUUEVfSU5JVElBTElaRVIsIHNpemVvZih1aWRfdCkgKiBUUEVfQUNMX1NJWkUp
Ow0KKwlwcmludGsoS0VSTl9JTkZPICJUUEU6IEFjY2VzcyBDb250cm9sIExpc3QgY3JlYXRlZC5c
biIpOw0KKwl0cGVfYWNsX2NhbmRpZGF0ZXMgPSAxOw0KKwlpZiAoISh0cGVfdHJ1c3RlZF9naWQg
PT0gMCkpIHsNCisJCXRwZV9hY2xfZ3JvdXBfY2FuZGlkYXRlcyA9IDI7DQorCX0gZWxzZSB7DQor
CQl0cGVfYWNsX2dyb3VwX2NhbmRpZGF0ZXMgPSAxOw0KKwl9DQorCXRwZV9hY2xbMF0gPSAwOw0K
KwlpZiAoISh0cGVfdHJ1c3RlZF9naWQgPT0gMCkpIHsNCisJCXRwZV9ncm91cF9hY2xbMF0gPSAw
Ow0KKw0KKwkJdHBlX2dyb3VwX2FjbFsxXSA9IHRwZV90cnVzdGVkX2dpZDsNCisJfSBlbHNlIHsN
CisJCXRwZV9ncm91cF9hY2xbMF0gPSAwOw0KKwl9DQorfQ0KKw0KKy8qICBMb2NhdGUgYSB1aWQg
aW4gdGhlIGxpc3QgKi8NCitzdGF0aWMgaW5saW5lIGludCB0cGVfc2VhcmNoKHVpZF90IGNhbmRp
ZGF0ZSkNCit7DQorCWludCBpOw0KKwlmb3IgKGkgPSAwOyBpIDwgdHBlX2FjbF9jYW5kaWRhdGVz
OyBpKyspIHsNCisJCWlmIChjYW5kaWRhdGUgPT0gdHBlX2FjbFtpXSkgew0KKwkJCXJldHVybiBp
Ow0KKwkJfQ0KKwl9DQorCXJldHVybiBOQUNLOw0KK30NCisNCisvKiAgVmVyaWZ5IGEgY2FuZGlk
YXRlIHVzZXIuICovDQorc3RhdGljIGlubGluZSBpbnQgdHBlX3ZlcmlmeSh1aWRfdCBjYW5kaWRh
dGUpDQorew0KKwlpZiAoKHRwZV9zZWFyY2goY2FuZGlkYXRlKSkgIT0gTkFDSykgew0KKwkJcmV0
dXJuIChBQ0spOw0KKwl9DQorCXJldHVybiAoTkFDSyk7DQorfQ0KKw0KKy8qICBWZXJpZnkgYSBj
YW5kaWRhdGUgdXNlciBncm91cC4gKi8NCitzdGF0aWMgaW5saW5lIGludCB0cGVfc2VhcmNoX2dy
b3VwKGdpZF90IGdyb3VwX2NhbmRpZGF0ZSkNCit7DQorCWludCBpOw0KKwlmb3IgKGkgPSAwOyBp
IDwgdHBlX2FjbF9ncm91cF9jYW5kaWRhdGVzOyBpKyspIHsNCisJCWlmIChncm91cF9jYW5kaWRh
dGUgPT0gdHBlX2dyb3VwX2FjbFtpXSkgew0KKwkJCXJldHVybiBpOw0KKwkJfQ0KKwl9DQorCXJl
dHVybiBOQUNLOw0KK30NCitzdGF0aWMgaW5saW5lIGludCB0cGVfZ3JvdXBfdmVyaWZ5KGdpZF90
IGdyb3VwX2NhbmRpZGF0ZSkNCit7DQorCWlmICgodHBlX3NlYXJjaF9ncm91cChncm91cF9jYW5k
aWRhdGUpKSAhPSBOQUNLKSB7DQorCQlyZXR1cm4gKEFDSyk7DQorCX0NCisJcmV0dXJuIChOQUNL
KTsNCit9DQorDQorI2VuZGlmCQkJCS8qIF9fVFBFX0ggKi8NCn==


--=-5qqeNFykNeGPiP1gZ981--

--=-tVI6wma4GZcMTjjiTbo6
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: Esta parte del mensaje =?ISO-8859-1?Q?est=E1?= firmada
	digitalmente

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBB3lHdDcEopW8rLewRAt3fAKCIJFM2ck+xn2iNxpXIec9K2ogn+ACffyl9
dVu8cF7wLbn7Ia3zRQuPjIs=
=vQdg
-----END PGP SIGNATURE-----

--=-tVI6wma4GZcMTjjiTbo6--

