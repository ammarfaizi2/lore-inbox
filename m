Return-Path: <linux-kernel-owner+willy=40w.ods.org-S932097AbVLLSDA@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932097AbVLLSDA (ORCPT <rfc822;willy@w.ods.org>);
	Mon, 12 Dec 2005 13:03:00 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S932100AbVLLSC7
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Mon, 12 Dec 2005 13:02:59 -0500
Received: from mx.laposte.net ([81.255.54.11]:6390 "EHLO mx.laposte.net")
	by vger.kernel.org with ESMTP id S932097AbVLLSC6 (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 12 Dec 2005 13:02:58 -0500
Subject: Re: [PATCH 2.6-git 0/4] SPI core refresh
From: Rui Sousa <rui.sousa@laposte.net>
To: Vitaly Wool <vwool@ru.mvista.com>
Cc: linux-kernel@vger.kernel.org, David Brownell <david-b@pacbell.net>,
       dpervushin@gmail.com, akpm@osdl.org, greg@kroah.com,
       basicmark@yahoo.com, komal_shah802003@yahoo.com,
       stephen@streetfiresound.com, spi-devel-general@lists.sourceforge.net,
       Joachim_Jaeger@digi.com
In-Reply-To: <20051212182026.4e393d5a.vwool@ru.mvista.com>
References: <20051212182026.4e393d5a.vwool@ru.mvista.com>
Content-Type: text/plain
Date: Mon, 12 Dec 2005 19:01:38 +0100
Message-Id: <1134410498.12925.8.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.4 
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 2005-12-12 at 18:20 +0300, Vitaly Wool wrote:
> Greetings,

Hi,

> this message fill be followed by the following four ones:
> 1) updated SPI core from Dmitry Pervushin/Vitaly Wool
> 2) Atmel MTD dataflash driver port for this core
> 3) SPI controller driver for Philips SPI controller
> 4) dumb EEPROM driver for EEPROM chip on SPI bus
> 
> This SPI core features:
> * multiple SPI controller support
> * multiple devices on the same bus support
> * DMA support
> * synchronous and asynchronous transfers
> * library for asynchronous transfers on the bus using kernel threads
> * character device interface
> * custom lightweight SPI message allocation mechanism

[snipped]

One problem I still have with this implementation (well, if I remember
correctly David's has the same problem) is that it's not possible to
read/write from/to the SPI bus in interrupt context.

How do you handle IRQ's generated by a SPI device (e.g ack the
interrupt, check if it was the SPI device that generated the
interrupt, ...) if you can't read/write on the SPI bus from interrupt
context?


Rui

