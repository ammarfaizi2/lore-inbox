Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S261651AbRE0LX0>; Sun, 27 May 2001 07:23:26 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S261786AbRE0LXQ>; Sun, 27 May 2001 07:23:16 -0400
Received: from sigma.informatik.hu-berlin.de ([141.20.20.51]:61453 "EHLO
	sigma.informatik.hu-berlin.de") by vger.kernel.org with ESMTP
	id <S261651AbRE0LXE>; Sun, 27 May 2001 07:23:04 -0400
Date: Sun, 27 May 2001 13:23:00 +0200 (MEST)
Message-Id: <200105271123.NAA21828@pandora.informatik.hu-berlin.de>
From: Martin von Loewis <loewis@informatik.hu-berlin.de>
To: aia21@cam.ac.uk
CC: jgarzik@mandrakesoft.com, linux-kernel@vger.kernel.org,
        Linux-ntfs@tiger.informatik.hu-berlin.de,
        linux-ntfs-dev@lists.sourceforge.net
In-Reply-To: <5.1.0.14.2.20010526011903.00aab050@pop.cus.cam.ac.uk> (message
	from Anton Altaparmakov on Sat, 26 May 2001 01:42:20 +0100)
Subject: Re: [Linux-ntfs] Re: [Linux-NTFS-Dev] Re: ANN: NTFS new release available
 (1.1.15)
In-Reply-To: <5.1.0.14.2.20010526000503.04716ec0@pop.cus.cam.ac.uk> <5.1.0.14.2.20010526011903.00aab050@pop.cus.cam.ac.uk>
User-Agent: SEMI/1.13.7 (Awazu) FLIM/1.13.2 (Kasanui) Emacs/20.6 (sparc-sun-solaris2.6) MULE/4.0 (HANANOEN)
MIME-Version: 1.0 (generated by SEMI 1.13.7 - "Awazu")
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

> I would love to move inode metadata to the page cache. That would simplify 
> so much in the NTFS driver and would result in an incredible speed boost 
> due to getting rid of all the silly copying of data back and forth inside 
> the driver as we could just pass pointers around instead (to locked pages 
> or other form of internal locking).
[...]
> No thank you. I would rather have it contiguous or at least logically 
> contiguous. I don't care if the pages are physically contiguous as long as 
> I can see them as one piece... I mean, ok, I could break up run lists, as 
> they are arrays of fixed size structs and the boundary cases would be 
> predictable

When you talk about avoiding copying, are you thinking of not copying
the runlists, as well? If so, how can you avoid uncompressing them?
That seems very complicated, plus you have to concatenate the pieces
of the runlist if they span multiple MFT records, anyway.

> They are not. They are derived from compressed on-disk structures (which 
> are re-compressed when updating the inode). Runlists of such large size are 
> only needed for A) huge files/directories, B) extremely fragmented 
> files/directories, or C) a combination of A and B. (Remembering that 
> metadata is stored as files, so the same applies for the metadata itself.)

I guess this answers my question - you will continue to uncompress the
runlist when opening the inode, right?

Regards,
Martin
