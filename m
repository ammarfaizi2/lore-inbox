Return-Path: <linux-kernel-owner+willy=40w.ods.org-S1422671AbWBAQMP@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1422671AbWBAQMP (ORCPT <rfc822;willy@w.ods.org>);
	Wed, 1 Feb 2006 11:12:15 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1422672AbWBAQMO
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Wed, 1 Feb 2006 11:12:14 -0500
Received: from mx2.mail.elte.hu ([157.181.151.9]:20927 "EHLO mx2.mail.elte.hu")
	by vger.kernel.org with ESMTP id S1422671AbWBAQMN (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 1 Feb 2006 11:12:13 -0500
Date: Wed, 1 Feb 2006 17:10:35 +0100
From: Ingo Molnar <mingo@elte.hu>
To: Nick Piggin <nickpiggin@yahoo.com.au>
Cc: Steven Rostedt <rostedt@goodmis.org>,
       Peter Williams <pwil3058@bigpond.net.au>,
       Thomas Gleixner <tglx@linutronix.de>, Andrew Morton <akpm@osdl.org>,
       LKML <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] Avoid moving tasks when a schedule can be made.
Message-ID: <20060201161035.GA22264@elte.hu>
References: <43E0B342.6090700@yahoo.com.au> <20060201132054.GA31156@elte.hu> <43E0BBEC.3020209@yahoo.com.au> <43E0BDA3.8040003@yahoo.com.au> <20060201141248.GA6277@elte.hu> <43E0C4CF.8090501@yahoo.com.au> <20060201143727.GA9915@elte.hu> <43E0CBBC.2000002@yahoo.com.au> <20060201151137.GA14794@elte.hu> <43E0D464.2020509@yahoo.com.au>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <43E0D464.2020509@yahoo.com.au>
User-Agent: Mutt/1.4.2.1i
X-ELTE-SpamScore: -2.2
X-ELTE-SpamLevel: 
X-ELTE-SpamCheck: no
X-ELTE-SpamVersion: ELTE 2.0 
X-ELTE-SpamCheck-Details: score=-2.2 required=5.9 tests=ALL_TRUSTED,AWL autolearn=no SpamAssassin version=3.0.3
	-2.8 ALL_TRUSTED            Did not pass through any untrusted hosts
	0.6 AWL                    AWL: From: address is in the auto white-list
X-ELTE-VirusStatus: clean
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


* Nick Piggin <nickpiggin@yahoo.com.au> wrote:

> Ingo Molnar wrote:
> >* Nick Piggin <nickpiggin@yahoo.com.au> wrote:
> 
> >>If it were generated by some real workload that cares, then I would care.
> >
> >
> >well, you might not care, but i do. It's up to you what you care about, 
> >but right now the scheduler policy is that we do care about latencies.  
> >Yes, it's obviously all subject to common sense, and if something 
> >triggers in a rare and extreme workload then any change related to it 
> >has a _much_ higher barrier of acceptance than a common codepath. But
> >your blanket dismissal of this whole subject based on the rarity of the
> >workload is just plain wrong.
> >
> 
> No, if you read what I'd been saying, I'm not dismissing the whole 
> subject based on the workload. I'm saying that there is no point to 
> include such a "fix" based on the numbers given by this workload (if 
> there is a more meaningful one, then sure). Especially not while there 
> are sources of equivalent latency.

firstly, you are ignoring the fact that Steve never submitted this for 
actual inclusion. His very first email stated:

  "I'm not convinced that this bail out is in the right location, but 
   it worked where it is.  Comments are welcome."

so i'm not sure why you are still pounding upon his patch and suggesting 
that any solution to this problem is to be limited to the -rt kernel and 
suggesting that the mainline kernel should not care. Yes, the mainline 
kernel does care. We might not apply anything resulting out of this 
(because this is a tricky piece of code), but we do care very much. 
Indifference really does not help.

secondly,

> It is really simple: I can find a code path in the kernel, and work 
> out how to exploit it by increasing resource loading until it goes 
> bang (another example, tasklist_lock).

we are busy fixing tasklist_lock latencies too. The point you are still 
trying to make, that the scheduler should not be touched just because 
there are other problem areas with unbound latencies, is still plain 
illogical.

> But there are still places where interrupts can be held off for 
> indefinite periods. I don't see why the scheduler lock is suddenly 
> important [...]

the scheduler lock is obviously important because it's the most central 
lock in existence.

> [...] I could have told you years ago what would happen if you trigger 
> the load balancer with enough tasks.

i very well know what move_tasks() can do. There used to be other ways 
to provoke unbound latencies in the scheduler - e.g.  via pinned tasks, 
for which we introduced the all_pinned hack. The all_pinned hack was 
needed because the worst-case behavior was getting so bad on some larger 
boxes under larger loads that it totally DoSed the system. So it's not 
at all unprecedented for us to care about boundary behavior in the 
scheduler, nor are we as shy about aborting load-balancing decisions as 
you are suggesting, it just all depends on the circumstances and on the 
quality of the patch.

	Ingo
