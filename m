Return-Path: <linux-kernel-owner+willy=40w.ods.org-S265795AbUIOQAY@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S265795AbUIOQAY (ORCPT <rfc822;willy@w.ods.org>);
	Wed, 15 Sep 2004 12:00:24 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S266611AbUIOPw5
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Wed, 15 Sep 2004 11:52:57 -0400
Received: from sigma957.CIS.McMaster.CA ([130.113.64.83]:55758 "EHLO
	sigma957.cis.mcmaster.ca") by vger.kernel.org with ESMTP
	id S266534AbUIOPr2 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Wed, 15 Sep 2004 11:47:28 -0400
Subject: [RFC][PATCH] inotify 0.9
From: John McCutchan <ttb@tentacle.dhs.org>
To: linux-kernel@vger.kernel.org, nautilus-list@gnome.org,
       gamin-list@gnome.org, xml@ximian.com,
       viro@parcelfarce.linux.theplanet.co.uk, akpm@osdl.org, iggy@gentoo.org
Content-Type: multipart/mixed; boundary="=-btTdkVmP474O7nbVHJk3"
Message-Id: <1095263565.19906.19.camel@vertex>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.4.6 
Date: Wed, 15 Sep 2004 11:52:45 -0400
X-PMX-Version-Mac: 4.7.0.111621, Antispam-Engine: 2.0.0.0, Antispam-Data: 2004.9.14.6
X-PerlMx-Spam: Gauge=IIIIIII, Probability=7%, Report='__CT 0, __CTYPE_HAS_BOUNDARY 0, __CTYPE_MULTIPART 0, __HAS_MSGID 0, __HAS_X_MAILER 0, __MIME_VERSION 0, __SANE_MSGID 0'
X-Spam-Flag: NO
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


--=-btTdkVmP474O7nbVHJk3
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

Hello,

I am releasing a new version of inotify. Attached is a patch for
2.6.8.1.

I am interested in getting inotify included in the mm tree. 

Inotify is designed as a replacement for dnotify. The key difference's
are that inotify does not require the file to be opened to watch it,
when you are watching something with inotify it can go away (if path
is unmounted) and you will be sent an event telling you it is gone and
events are delivered over a fd not by using signals.

New in this version:
Driver now supports reading more than one event at a time
Bump maximum number of watches per device from 64 to 8192
Bump maximum number of queued events per device from 64 to 256

--COMPLEXITY--

I have been asked what the complexity of inotify is. Inotify has
2 path codes where complexity could be an issue:

Adding a watcher to a device
	This code has to check if the inode is already being watched 
	by the device, this is O(1) since the maximum number of 
	devices is limited to 8.


Removing a watch from a device
	This code has to do a search of all watches on the device to
	find the watch descriptor that is being asked to remove.
	This involves a linear search, but should not really be an issue
	because it is limited to 8192 entries. If this does turn in to
	a concern, I would replace the list of watches on the device
	with a sorted binary tree, so that the search could be done
	very quickly.


The calls to inotify from the VFS code has a complexity of O(1) so
inotify does not affect the speed of VFS operations.

--MEMORY USAGE--

The inotify data structures are light weight:

inotify watch is 40 bytes
inotify device is 68 bytes
inotify event is 272 bytes

So assuming a device has 8192 watches, the structures are only going
to consume 320KB of memory. With a maximum number of 8 devices allowed
to exist at a time, this is still only 2.5 MB

Each device can also have 256 events queued at a time, which sums to
68KB per device. And only .5 MB if all devices are opened and have
a full event queue.

So approximately 3 MB of memory are used in the rare case of 
everything open and full.

Each inotify watch pins the inode of a directory/file in memory,
the size of an inode is different per file system but lets assume
that it is 512 byes. 

So assuming the maximum number of global watches are active, this would
pin down 32 MB of inodes in the inode cache. Again not a problem
on a modern system. 

On smaller systems, the maximum watches / events could be lowered
to provide a smaller foot print.

Older release notes:
I am resubmitting inotify for comments and review. Inotify has
changed drastically from the earlier proposal that Al Viro did not
approve of. There is no longer any use of (device number, inode number)
pairs. Please give this version of inotify a fresh view.


Inotify is a character device that when opened offers 2 IOCTL's.
(It actually has 4 but the other 2 are used for debugging)

INOTIFY_WATCH:
        Which takes a path and event mask and returns a unique 
        (to the instance of the driver) integer (wd [watcher descriptor]
        from here on) that is a 1:1 mapping to the path passed. 
        What happens is inotify gets the inode (and ref's the inode)
        for the path and adds a inotify_watcher structure to the inodes
        list of watchers. If this instance of the driver is already
        watching the path, the event mask will be updated and
        the original wd will be returned.

INOTIFY_IGNORE:
        Which takes an integer (that you got from INOTIFY_WATCH) 
        representing a wd that you are not interested in watching
        anymore. This will:

        send an IGNORE event to the device
        remove the inotify_watcher structure from the device and 
        from the inode and unref the inode.
        

After you are watching 1 or more paths, you can read from the fd
and get events. The events are struct inotify_event. If you are
watching a directory and something happens to a file in the directory
the event will contain the filename (just the filename not the full
path).

Aside from the inotify character device driver. 
The changes to the kernel are very minor. 

The first change is adding calls to inotify_inode_queue_event and
inotify_dentry_parent_queue_event from the various vfs functions. This
is identical to dnotify.

The second change is more serious, it adds a call to
inotify_super_block_umount
inside generic_shutdown_superblock. What inotify_super_block_umount does
is:

find all of the inodes that are on the super block being shut down,
sends each watcher on each inode the UNMOUNT and IGNORED event
removes the watcher structures from each instance of the device driver 
and each inode.
unref's the inode.

I have tested this code on my system for over three weeks now and have
not had problems. I would appreciate design review, code review and
testing.

John


--=-btTdkVmP474O7nbVHJk3
Content-Disposition: attachment; filename=inotify-0.9.patch
Content-Transfer-Encoding: base64
Content-Type: text/x-patch; name=inotify-0.9.patch; charset=UTF-8

ZGlmZiAtdXJOIGxpbnV4LTIuNi44LjEvZHJpdmVycy9jaGFyL2lub3RpZnkuYyAuLi9saW51eC9k
cml2ZXJzL2NoYXIvaW5vdGlmeS5jDQotLS0gbGludXgtMi42LjguMS9kcml2ZXJzL2NoYXIvaW5v
dGlmeS5jCTE5NjktMTItMzEgMTk6MDA6MDAuMDAwMDAwMDAwIC0wNTAwDQorKysgLi4vbGludXgv
ZHJpdmVycy9jaGFyL2lub3RpZnkuYwkyMDA0LTA5LTE1IDExOjIyOjU5LjAwMDAwMDAwMCAtMDQw
MA0KQEAgLTAsMCArMSw5NzUgQEANCisvKg0KKyAqIElub2RlIGJhc2VkIGRpcmVjdG9yeSBub3Rp
ZmljYXRpb25zIGZvciBMaW51eC4NCisgKg0KKyAqIENvcHlyaWdodCAoQykgMjAwNCBKb2huIE1j
Q3V0Y2hhbg0KKyAqDQorICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4g
cmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQNCisgKiB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUNCisgKiBG
cmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIsIG9yIChhdCB5b3VyIG9w
dGlvbikgYW55DQorICogbGF0ZXIgdmVyc2lvbi4NCisgKg0KKyAqIFRoaXMgcHJvZ3JhbSBpcyBk
aXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQNCisgKiBX
SVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9m
DQorICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NF
LiAgU2VlIHRoZSBHTlUNCisgKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFp
bHMuDQorICoNCisgKiBTaWduZWQtb2ZmLWJ5OiBKb2huIE1jQ3V0Y2hhbiB0dGJAdGVudGFjbGUu
ZGhzLm9yZw0KKyAqLw0KKw0KKy8qIFRPRE86IA0KKyAqIHVzZSByYiB0cmVlIHNvIGxvb2tpbmcg
dXAgd2F0Y2hlciBieSB3YXRjaGVyIGRlc2NyaXB0b3IgaXMgZmFzdGVyLg0KKyAqLw0KKw0KKyNp
bmNsdWRlIDxsaW51eC9iaXRvcHMuaD4NCisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQorI2lu
Y2x1ZGUgPGxpbnV4L2tlcm5lbC5oPg0KKyNpbmNsdWRlIDxsaW51eC9zY2hlZC5oPg0KKyNpbmNs
dWRlIDxsaW51eC9zcGlubG9jay5oPg0KKyNpbmNsdWRlIDxsaW51eC9zbGFiLmg+DQorI2luY2x1
ZGUgPGxpbnV4L2ZzLmg+DQorI2luY2x1ZGUgPGxpbnV4L25hbWVpLmg+DQorI2luY2x1ZGUgPGxp
bnV4L3BvbGwuaD4NCisjaW5jbHVkZSA8bGludXgvbWlzY2RldmljZS5oPg0KKyNpbmNsdWRlIDxs
aW51eC9kZXZpY2UuaD4NCisjaW5jbHVkZSA8bGludXgvaW5pdC5oPg0KKyNpbmNsdWRlIDxsaW51
eC90eXBlcy5oPg0KKyNpbmNsdWRlIDxsaW51eC9zdGRkZWYuaD4NCisjaW5jbHVkZSA8bGludXgv
a2VybmVsLmg+DQorI2luY2x1ZGUgPGxpbnV4L2xpc3QuaD4NCisjaW5jbHVkZSA8bGludXgvd3Jp
dGViYWNrLmg+DQorI2luY2x1ZGUgPGxpbnV4L2lub3RpZnkuaD4NCisNCisjZGVmaW5lIE1BWF9J
Tk9USUZZX0RFVlMgOCAvKiBXZSBvbmx5IHN1cHBvcnQgWCB3YXRjaGVycyAqLw0KKyNkZWZpbmUg
TUFYX0lOT1RJRllfREVWX1dBVENIRVJTIDgxOTIgLyogQSBkZXYgY2FuIG9ubHkgaGF2ZSBZIHdh
dGNoZXJzICovDQorI2RlZmluZSBNQVhfSU5PVElGWV9RVUVVRURfRVZFTlRTIDI1NiAvKiBPbmx5
IHRoZSBmaXJzdCBaIGV2ZW50cyB3aWxsIGJlIHF1ZXVlZCAqLw0KKyNkZWZpbmUgX19CSVRNQVNL
X1NJWkUgKE1BWF9JTk9USUZZX0RFVl9XQVRDSEVSUyAvIDgpDQorDQorI2RlZmluZSBJTk9USUZZ
X0RFVl9USU1FUl9USU1FIGppZmZpZXMgKyAoSFovNCkNCisNCitzdGF0aWMgYXRvbWljX3Qgd2F0
Y2hlcl9jb3VudDsgLy8gPCBNQVhfSU5PVElGWV9ERVZTDQorDQorc3RhdGljIGttZW1fY2FjaGVf
dCAqd2F0Y2hlcl9jYWNoZTsNCitzdGF0aWMga21lbV9jYWNoZV90ICprZXZlbnRfY2FjaGU7DQor
DQorLyogRm9yIGRlYnVnZ2luZyAqLw0KK3N0YXRpYyBpbnQgZXZlbnRfb2JqZWN0X2NvdW50Ow0K
K3N0YXRpYyBpbnQgd2F0Y2hlcl9vYmplY3RfY291bnQ7DQorc3RhdGljIGludCBpbm9kZV9yZWZf
Y291bnQ7DQorc3RhdGljIGludCBpbm90aWZ5X2RlYnVnX2ZsYWdzOw0KKyNkZWZpbmUgaXByaW50
ayhmLCBzdHIuLi4pIGlmIChpbm90aWZ5X2RlYnVnX2ZsYWdzICYgZikgcHJpbnRrIChLRVJOX0FM
RVJUIHN0cikNCisNCisvKiBGb3IgZWFjaCBpbm90aWZ5IGRldmljZSB3ZSBuZWVkIHRvIGtlZXAg
YSBsaXN0IG9mIGV2ZW50cyBxdWV1ZWQgb24gaXQsDQorICogYSBsaXN0IG9mIGlub2RlcyB0aGF0
IHdlIGFyZSB3YXRjaGluZyBhbmQgb3RoZXIgc3R1ZmYuDQorICovDQorc3RydWN0IGlub3RpZnlf
ZGV2aWNlIHsNCisJc3RydWN0IGxpc3RfaGVhZCAJZXZlbnRzOw0KKwlhdG9taWNfdAkJZXZlbnRf
Y291bnQ7DQorCXN0cnVjdCBsaXN0X2hlYWQgCXdhdGNoZXJzOw0KKwlpbnQJCQl3YXRjaGVyX2Nv
dW50Ow0KKwl3YWl0X3F1ZXVlX2hlYWRfdCAJd2FpdDsNCisJc3RydWN0IHRpbWVyX2xpc3QJdGlt
ZXI7DQorCWNoYXIJCQlyZWFkX3N0YXRlOw0KKwlzcGlubG9ja190CQlsb2NrOw0KKwl2b2lkICoJ
CQliaXRtYXNrOw0KK307DQorI2RlZmluZSBpbm90aWZ5X2RldmljZV9ldmVudF9saXN0KHBvcykg
bGlzdF9lbnRyeSgocG9zKSwgc3RydWN0IGlub3RpZnlfZXZlbnQsIGxpc3QpDQorDQorc3RydWN0
IGlub3RpZnlfd2F0Y2hlciB7DQorCWludCAJCQl3ZDsgLy8gd2F0Y2hlciBkZXNjcmlwdG9yDQor
CXVuc2lnbmVkIGxvbmcJCW1hc2s7DQorCXN0cnVjdCBpbm9kZSAqCQlpbm9kZTsNCisJc3RydWN0
IGlub3RpZnlfZGV2aWNlICoJZGV2Ow0KKwlzdHJ1Y3QgbGlzdF9oZWFkCWRfbGlzdDsgLy8gZGV2
aWNlIGxpc3QNCisJc3RydWN0IGxpc3RfaGVhZAlpX2xpc3Q7IC8vIGlub2RlIGxpc3QNCisJc3Ry
dWN0IGxpc3RfaGVhZAl1X2xpc3Q7IC8vIHVubW91bnQgbGlzdCANCit9Ow0KKyNkZWZpbmUgaW5v
dGlmeV93YXRjaGVyX2RfbGlzdChwb3MpIGxpc3RfZW50cnkoKHBvcyksIHN0cnVjdCBpbm90aWZ5
X3dhdGNoZXIsIGRfbGlzdCkNCisjZGVmaW5lIGlub3RpZnlfd2F0Y2hlcl9pX2xpc3QocG9zKSBs
aXN0X2VudHJ5KChwb3MpLCBzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyLCBpX2xpc3QpDQorI2RlZmlu
ZSBpbm90aWZ5X3dhdGNoZXJfdV9saXN0KHBvcykgbGlzdF9lbnRyeSgocG9zKSwgc3RydWN0IGlu
b3RpZnlfd2F0Y2hlciwgdV9saXN0KQ0KKw0KKy8qIEEgbGlzdCBvZiB0aGVzZSBpcyBhdHRhY2hl
ZCB0byBlYWNoIGluc3RhbmNlIG9mIHRoZSBkcml2ZXINCisgKiB3aGVuIHRoZSBkcml2ZXJzIHJl
YWQoKSBnZXRzIGNhbGxlZCwgdGhpcyBsaXN0IGlzIHdhbGtlZCBhbmQNCisgKiBhbGwgZXZlbnRz
IHRoYXQgY2FuIGZpdCBpbiB0aGUgYnVmZmVyIGdldCBkZWxpdmVyZWQNCisgKi8NCitzdHJ1Y3Qg
aW5vdGlmeV9rZXJuZWxfZXZlbnQgew0KKyAgICAgICAgc3RydWN0IGxpc3RfaGVhZCAgICAgICAg
bGlzdDsNCisJc3RydWN0IGlub3RpZnlfZXZlbnQJZXZlbnQ7DQorfTsNCisjZGVmaW5lIGxpc3Rf
dG9faW5vdGlmeV9rZXJuZWxfZXZlbnQocG9zKSBsaXN0X2VudHJ5KChwb3MpLCBzdHJ1Y3QgaW5v
dGlmeV9rZXJuZWxfZXZlbnQsIGxpc3QpDQorDQorc3RhdGljIGludCBmaW5kX2lub2RlIChjb25z
dCBjaGFyIF9fdXNlciAqZGlybmFtZSwgc3RydWN0IGlub2RlICoqaW5vZGUpDQorew0KKwlzdHJ1
Y3QgbmFtZWlkYXRhIG5kOw0KKwlpbnQgZXJyb3I7DQorDQorCWVycm9yID0gX191c2VyX3dhbGsg
KGRpcm5hbWUsIExPT0tVUF9GT0xMT1csICZuZCk7DQorCWlmIChlcnJvcikgew0KKwkJaXByaW50
ayhJTk9USUZZX0RFQlVHX0lOT0RFLCAiY291bGQgbm90IGZpbmQgaW5vZGVcbiIpOw0KKwkJZ290
byBvdXQ7DQorCX0NCisNCisJKmlub2RlID0gbmQuZGVudHJ5LT5kX2lub2RlOw0KKwlfX2lnZXQg
KCppbm9kZSk7DQorCWlwcmludGsoSU5PVElGWV9ERUJVR19JTk9ERSwgInJlZidkIGlub2RlXG4i
KTsNCisJaW5vZGVfcmVmX2NvdW50Kys7DQorCXBhdGhfcmVsZWFzZSgmbmQpOw0KK291dDoNCisJ
cmV0dXJuIGVycm9yOw0KK30NCisNCitzdGF0aWMgdm9pZCB1bnJlZl9pbm9kZSAoc3RydWN0IGlu
b2RlICppbm9kZSkgew0KKwlpbm9kZV9yZWZfY291bnQtLTsNCisJaXByaW50ayhJTk9USUZZX0RF
QlVHX0lOT0RFLCAidW5yZWYnZCBpbm9kZVxuIik7DQorCWlwdXQgKGlub2RlKTsNCit9DQorDQor
c3RydWN0IGlub3RpZnlfa2VybmVsX2V2ZW50ICprZXJuZWxfZXZlbnQgKGludCB3ZCwgaW50IG1h
c2ssIGNvbnN0IGNoYXIgKmZpbGVuYW1lKSB7DQorCXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVu
dCAqa2V2ZW50Ow0KKw0KKwlrZXZlbnQgPSBrbWVtX2NhY2hlX2FsbG9jIChrZXZlbnRfY2FjaGUs
IEdGUF9BVE9NSUMpOw0KKw0KKw0KKwlpZiAoIWtldmVudCkgew0KKwkJaXByaW50ayhJTk9USUZZ
X0RFQlVHX0FMTE9DLCAiZmFpbGVkIHRvIGFsbG9jIGtldmVudCAoJWQsJWQpXG4iLCB3ZCwgbWFz
ayk7DQorCQlnb3RvIG91dDsNCisJfQ0KKw0KKwlpcHJpbnRrKElOT1RJRllfREVCVUdfQUxMT0Ms
ICJhbGxvY2VkIGtldmVudCAlcCAoJWQsJWQpXG4iLCBrZXZlbnQsIHdkLCBtYXNrKTsNCisNCisJ
a2V2ZW50LT5ldmVudC53ZCA9IHdkOw0KKwlrZXZlbnQtPmV2ZW50Lm1hc2sgPSBtYXNrOw0KKwlJ
TklUX0xJU1RfSEVBRCgma2V2ZW50LT5saXN0KTsNCisNCisJaWYgKGZpbGVuYW1lKSB7DQorCQlp
cHJpbnRrKElOT1RJRllfREVCVUdfRklMRU4sICJmaWxlbmFtZSBmb3IgZXZlbnQgd2FzICVwICVz
XG4iLCBmaWxlbmFtZSwgZmlsZW5hbWUpOw0KKwkJc3RybmNweSAoa2V2ZW50LT5ldmVudC5maWxl
bmFtZSwgZmlsZW5hbWUsIDI1Nik7DQorCQlrZXZlbnQtPmV2ZW50LmZpbGVuYW1lWzI1NV0gPSAn
XDAnOw0KKwkJaXByaW50ayhJTk9USUZZX0RFQlVHX0ZJTEVOLCAiZmlsZW5hbWUgYWZ0ZXIgY29w
eWluZyAlc1xuIiwga2V2ZW50LT5ldmVudC5maWxlbmFtZSk7DQorCX0gZWxzZSB7DQorCQlpcHJp
bnRrKElOT1RJRllfREVCVUdfRklMRU4sICJubyBmaWxlbmFtZSBmb3IgZXZlbnRcbiIpOw0KKwkJ
a2V2ZW50LT5ldmVudC5maWxlbmFtZVswXSA9ICdcMCc7DQorCX0NCisJDQorCWV2ZW50X29iamVj
dF9jb3VudCsrOw0KKw0KK291dDoNCisJcmV0dXJuIGtldmVudDsNCit9DQorDQordm9pZCBkZWxl
dGVfa2VybmVsX2V2ZW50IChzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQgKmtldmVudCkgew0K
KwlpZiAoIWtldmVudCkgcmV0dXJuOw0KKw0KKwlldmVudF9vYmplY3RfY291bnQtLTsNCisNCisJ
SU5JVF9MSVNUX0hFQUQoJmtldmVudC0+bGlzdCk7DQorCWtldmVudC0+ZXZlbnQud2QgPSAtMTsN
CisJa2V2ZW50LT5ldmVudC5tYXNrID0gMDsNCisNCisJaXByaW50ayhJTk9USUZZX0RFQlVHX0FM
TE9DLCAiZnJlZSdkIGtldmVudCAlcFxuIiwga2V2ZW50KTsNCisJa21lbV9jYWNoZV9mcmVlIChr
ZXZlbnRfY2FjaGUsIGtldmVudCk7DQorfQ0KKw0KKyNkZWZpbmUgaW5vdGlmeV9kZXZfaGFzX2V2
ZW50cyhkZXYpICghbGlzdF9lbXB0eSgmZGV2LT5ldmVudHMpKQ0KKyNkZWZpbmUgaW5vdGlmeV9k
ZXZfZ2V0X2V2ZW50KGRldikgKGxpc3RfdG9faW5vdGlmeV9rZXJuZWxfZXZlbnQoZGV2LT5ldmVu
dHMubmV4dCkpDQorLyogRG9lcyB0aGlzIGV2ZW50cyBtYXNrIGdldCBzZW50IHRvIHRoZSB3YXRj
aGVyID8gKi8NCisjZGVmaW5lIGV2ZW50X2FuZChldmVudF9tYXNrLHdhdGNoZXJzX21hc2spIAko
KGV2ZW50X21hc2sgPT0gSU5fVU5NT1VOVCkgfHwgXA0KKwkJCQkJCShldmVudF9tYXNrID09IElO
X0lHTk9SRUQpIHx8IFwNCisJCQkJCQkoZXZlbnRfbWFzayAmIHdhdGNoZXJzX21hc2spKQ0KKw0K
Kw0KKy8qIGRldi0+bG9jayA9PSBsb2NrZWQgYmVmb3JlIGNhbGxpbmcgKi8NCitzdGF0aWMgdm9p
ZCBpbm90aWZ5X2Rldl9xdWV1ZV9ldmVudCAoc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYsIHN0
cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIsIGludCBtYXNrLCBjb25zdCBjaGFyICpmaWxl
bmFtZSkgew0KKwlzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQgKmtldmVudDsNCisNCisJaWYg
KGF0b21pY19yZWFkKCZkZXYtPmV2ZW50X2NvdW50KSA9PSBNQVhfSU5PVElGWV9RVUVVRURfRVZF
TlRTKSB7DQorCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRVZFTlRTLCAiZXZlbnQgcXVldWUgZm9y
ICVwIG92ZXJmbG93ZWRcbiIsIGRldik7DQorCQlyZXR1cm47DQorCX0NCisNCisJaWYgKCFldmVu
dF9hbmQobWFzaywgd2F0Y2hlci0+aW5vZGUtPndhdGNoZXJzX21hc2spfHwhZXZlbnRfYW5kKG1h
c2ssIHdhdGNoZXItPm1hc2spKSB7DQorCQlyZXR1cm47DQorCX0NCisNCisJYXRvbWljX2luYygm
ZGV2LT5ldmVudF9jb3VudCk7DQorDQorCWtldmVudCA9IGtlcm5lbF9ldmVudCAod2F0Y2hlci0+
d2QsIG1hc2ssIGZpbGVuYW1lKTsNCisNCisJaWYgKCFrZXZlbnQpIHsNCisJCWlwcmludGsoSU5P
VElGWV9ERUJVR19FVkVOVFMsICJmYWlsZWQgdG8gcXVldWUgZXZlbnQgJXggZm9yICVwXG4iLCBt
YXNrLCBkZXYpOw0KKwl9DQorDQorCWxpc3RfYWRkX3RhaWwoJmtldmVudC0+bGlzdCwgJmRldi0+
ZXZlbnRzKTsNCisNCisJaXByaW50ayhJTk9USUZZX0RFQlVHX0VWRU5UUywgInF1ZXVlZCBldmVu
dCAleCBmb3IgJXBcbiIsIG1hc2ssIGRldik7DQorfQ0KKw0KKw0KKw0KKw0KK3N0YXRpYyB2b2lk
IGlub3RpZnlfZGV2X2V2ZW50X2RlcXVldWUgKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2KSB7
DQorCXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVudCAqa2V2ZW50Ow0KKw0KKwlpZiAoIWlub3Rp
ZnlfZGV2X2hhc19ldmVudHMgKGRldikpIHsNCisJCXJldHVybjsNCisJfQ0KKw0KKwlrZXZlbnQg
PSBpbm90aWZ5X2Rldl9nZXRfZXZlbnQoZGV2KTsNCisNCisJbGlzdF9kZWwoJmtldmVudC0+bGlz
dCk7DQorCWF0b21pY19kZWMoJmRldi0+ZXZlbnRfY291bnQpOw0KKw0KKwlkZWxldGVfa2VybmVs
X2V2ZW50IChrZXZlbnQpOw0KKw0KKwlpcHJpbnRrKElOT1RJRllfREVCVUdfRVZFTlRTLCAiZGVx
dWV1ZWQgZXZlbnQgb24gJXBcbiIsIGRldik7DQorfQ0KKw0KK3N0YXRpYyBpbnQgaW5vdGlmeV9k
ZXZfZ2V0X3dkIChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldikNCit7DQorCWludCB3ZDsNCisN
CisJd2QgPSAtMTsNCisNCisJaWYgKCFkZXYpDQorCQlyZXR1cm4gLTE7DQorDQorCWlmIChkZXYt
PndhdGNoZXJfY291bnQgPT0gTUFYX0lOT1RJRllfREVWX1dBVENIRVJTKSB7DQorCQlyZXR1cm4g
LTE7DQorCX0NCisNCisJZGV2LT53YXRjaGVyX2NvdW50Kys7DQorDQorCXdkID0gZmluZF9maXJz
dF96ZXJvX2JpdCAoZGV2LT5iaXRtYXNrLCBfX0JJVE1BU0tfU0laRSk7DQorDQorCXNldF9iaXQg
KHdkLCBkZXYtPmJpdG1hc2spOw0KKw0KKwlyZXR1cm4gd2Q7DQorfQ0KKw0KK3N0YXRpYyBpbnQg
aW5vdGlmeV9kZXZfcHV0X3dkIChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwgaW50IHdkKQ0K
K3sNCisJaWYgKCFkZXZ8fHdkIDwgMCkNCisJCXJldHVybiAtMTsNCisNCisJZGV2LT53YXRjaGVy
X2NvdW50LS07DQorDQorCWNsZWFyX2JpdCAod2QsIGRldi0+Yml0bWFzayk7DQorDQorCXJldHVy
biAwOw0KK30NCisNCisNCitzdGF0aWMgc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqY3JlYXRlX3dh
dGNoZXIgKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LCBpbnQgbWFzaywgc3RydWN0IGlub2Rl
ICppbm9kZSkgew0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0KKw0KKwl3YXRj
aGVyID0ga21lbV9jYWNoZV9hbGxvYyAod2F0Y2hlcl9jYWNoZSwgR0ZQX0tFUk5FTCk7DQorDQor
CWlmICghd2F0Y2hlcikgew0KKwkJaXByaW50ayhJTk9USUZZX0RFQlVHX0FMTE9DLCAiZmFpbGVk
IHRvIGFsbG9jYXRlIHdhdGNoZXIgKCVwLCVkKVxuIiwgaW5vZGUsIG1hc2spOw0KKwkJcmV0dXJu
IE5VTEw7DQorCX0NCisNCisJd2F0Y2hlci0+d2QgPSAtMTsNCisJd2F0Y2hlci0+bWFzayA9IG1h
c2s7DQorCXdhdGNoZXItPmlub2RlID0gaW5vZGU7DQorCXdhdGNoZXItPmRldiA9IGRldjsNCisJ
SU5JVF9MSVNUX0hFQUQoJndhdGNoZXItPmRfbGlzdCk7DQorCUlOSVRfTElTVF9IRUFEKCZ3YXRj
aGVyLT5pX2xpc3QpOw0KKwlJTklUX0xJU1RfSEVBRCgmd2F0Y2hlci0+dV9saXN0KTsNCisNCisJ
c3Bpbl9sb2NrKCZkZXYtPmxvY2spOw0KKwkJd2F0Y2hlci0+d2QgPSBpbm90aWZ5X2Rldl9nZXRf
d2QgKGRldik7DQorCXNwaW5fdW5sb2NrKCZkZXYtPmxvY2spOw0KKw0KKwlpZiAod2F0Y2hlci0+
d2QgPCAwKSB7DQorCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRVJST1JTLCAiQ291bGQgbm90IGdl
dCB3ZCBmb3Igd2F0Y2hlciAlcFxuIiwgd2F0Y2hlcik7DQorCQlpcHJpbnRrKElOT1RJRllfREVC
VUdfQUxMT0MsICJmcmVlJ2Qgd2F0Y2hlciAlcFxuIiwgd2F0Y2hlcik7DQorCQlrbWVtX2NhY2hl
X2ZyZWUgKHdhdGNoZXJfY2FjaGUsIHdhdGNoZXIpOw0KKwkJd2F0Y2hlciA9IE5VTEw7DQorCQly
ZXR1cm4gd2F0Y2hlcjsNCisJfQ0KKw0KKwl3YXRjaGVyX29iamVjdF9jb3VudCsrOw0KKwlyZXR1
cm4gd2F0Y2hlcjsNCit9DQorDQorLyogTXVzdCBiZSBjYWxsZWQgd2l0aCBkZXYtPmxvY2sgaGVs
ZCAqLw0KK3N0YXRpYyB2b2lkIGRlbGV0ZV93YXRjaGVyIChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2Ug
KmRldiwgc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcikgew0KKwlpbm90aWZ5X2Rldl9w
dXRfd2QgKGRldiwgd2F0Y2hlci0+d2QpOw0KKw0KKwlpcHJpbnRrKElOT1RJRllfREVCVUdfQUxM
T0MsICJmcmVlJ2Qgd2F0Y2hlciAlcFxuIiwgd2F0Y2hlcik7DQorDQorCWttZW1fY2FjaGVfZnJl
ZSAod2F0Y2hlcl9jYWNoZSwgd2F0Y2hlcik7DQorDQorCXdhdGNoZXJfb2JqZWN0X2NvdW50LS07
DQorfQ0KKw0KKw0KK3N0YXRpYyBzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICppbm9kZV9maW5kX2Rl
diAoc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYpIHsNCisJ
c3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcjsNCisNCisJd2F0Y2hlciA9IE5VTEw7DQor
DQorCWxpc3RfZm9yX2VhY2hfZW50cnkgKHdhdGNoZXIsICZpbm9kZS0+d2F0Y2hlcnMsIGlfbGlz
dCkgew0KKwkJaWYgKHdhdGNoZXItPmRldiA9PSBkZXYpIHsNCisJCQlyZXR1cm4gd2F0Y2hlcjsN
CisJCX0NCisNCisJfQ0KKwlyZXR1cm4gTlVMTDsNCit9DQorDQorc3RhdGljIHN0cnVjdCBpbm90
aWZ5X3dhdGNoZXIgKmRldl9maW5kX3dkIChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwgaW50
IHdkKQ0KK3sNCisJc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcjsNCisNCisJbGlzdF9m
b3JfZWFjaF9lbnRyeSAod2F0Y2hlciwgJmRldi0+d2F0Y2hlcnMsIGRfbGlzdCkgew0KKwkJaWYg
KHdhdGNoZXItPndkID09IHdkKSB7DQorCQkJcmV0dXJuIHdhdGNoZXI7DQorCQl9DQorCX0NCisJ
cmV0dXJuIE5VTEw7DQorfQ0KKw0KK3N0YXRpYyBpbnQgaW5vdGlmeV9kZXZfaXNfd2F0Y2hpbmdf
aW5vZGUgKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LCBzdHJ1Y3QgaW5vZGUgKmlub2RlKSB7
DQorCXN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXI7DQorDQorCWxpc3RfZm9yX2VhY2hf
ZW50cnkgKHdhdGNoZXIsICZkZXYtPndhdGNoZXJzLCBkX2xpc3QpIHsNCisJCWlmICh3YXRjaGVy
LT5pbm9kZSA9PSBpbm9kZSkgew0KKwkJCXJldHVybiAxOw0KKwkJfQ0KKwl9DQorCQ0KKwlyZXR1
cm4gMDsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X2Rldl9hZGRfd2F0Y2hlciAoc3RydWN0
IGlub3RpZnlfZGV2aWNlICpkZXYsIHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIpIHsN
CisJaW50IGVycm9yOw0KKw0KKwllcnJvciA9IDA7DQorDQorCWlmICghZGV2fHwhd2F0Y2hlcikg
ew0KKwkJZXJyb3IgPSAtRUlOVkFMOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJaWYgKGRldl9m
aW5kX3dkIChkZXYsIHdhdGNoZXItPndkKSkgew0KKwkJZXJyb3IgPSAtRUlOVkFMOw0KKwkJZ290
byBvdXQ7DQorCX0NCisNCisNCisJaWYgKGRldi0+d2F0Y2hlcl9jb3VudCA9PSBNQVhfSU5PVElG
WV9ERVZfV0FUQ0hFUlMpIHsNCisJCWVycm9yID0gLUVOT1NQQzsNCisJCWdvdG8gb3V0Ow0KKwl9
DQorDQorCWRldi0+d2F0Y2hlcl9jb3VudCsrOw0KKwlsaXN0X2FkZCgmd2F0Y2hlci0+ZF9saXN0
LCAmZGV2LT53YXRjaGVycyk7DQorb3V0Og0KKwlyZXR1cm4gZXJyb3I7DQorfQ0KKw0KK3N0YXRp
YyBpbnQgaW5vdGlmeV9kZXZfcm1fd2F0Y2hlciAoc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYs
IHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIpIHsNCisJaW50IGVycm9yOw0KKw0KKwll
cnJvciA9IC1FSU5WQUw7DQorDQorCWlmICh3YXRjaGVyKSB7DQorCQlpbm90aWZ5X2Rldl9xdWV1
ZV9ldmVudCAoZGV2LCB3YXRjaGVyLCBJTl9JR05PUkVELCBOVUxMKTsNCisNCisJCWxpc3RfZGVs
KCZ3YXRjaGVyLT5kX2xpc3QpOw0KKw0KKwkJZGV2LT53YXRjaGVyX2NvdW50LS07DQorDQorCQll
cnJvciA9IDA7DQorCX0gDQorDQorCXJldHVybiBlcnJvcjsNCit9DQorDQordm9pZCBpbm9kZV91
cGRhdGVfd2F0Y2hlcnNfbWFzayAoc3RydWN0IGlub2RlICppbm9kZSkNCit7DQorCXN0cnVjdCBp
bm90aWZ5X3dhdGNoZXIgKndhdGNoZXI7DQorCXVuc2lnbmVkIGxvbmcgbmV3X21hc2s7DQorDQor
CW5ld19tYXNrID0gMDsNCisJbGlzdF9mb3JfZWFjaF9lbnRyeSh3YXRjaGVyLCAmaW5vZGUtPndh
dGNoZXJzLCBpX2xpc3QpIHsNCisJCW5ld19tYXNrIHw9IHdhdGNoZXItPm1hc2s7DQorCX0NCisJ
aW5vZGUtPndhdGNoZXJzX21hc2sgPSBuZXdfbWFzazsNCit9DQorDQorc3RhdGljIGludCBpbm9k
ZV9hZGRfd2F0Y2hlciAoc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGlub3RpZnlfd2F0Y2hl
ciAqd2F0Y2hlcikgew0KKwlpZiAoIWlub2RlfHwhd2F0Y2hlcnx8aW5vZGVfZmluZF9kZXYgKGlu
b2RlLCB3YXRjaGVyLT5kZXYpKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQorDQorCWxpc3RfYWRkKCZ3
YXRjaGVyLT5pX2xpc3QsICZpbm9kZS0+d2F0Y2hlcnMpOw0KKwlpbm9kZS0+d2F0Y2hlcl9jb3Vu
dCsrOw0KKw0KKwlpbm9kZV91cGRhdGVfd2F0Y2hlcnNfbWFzayAoaW5vZGUpOw0KKw0KKw0KKwly
ZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBpbm9kZV9ybV93YXRjaGVyIChzdHJ1Y3QgaW5v
ZGUgKmlub2RlLCBzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyKSB7DQorCWlmICghaW5v
ZGV8fCF3YXRjaGVyKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQorDQorCWxpc3RfZGVsKCZ3YXRjaGVy
LT5pX2xpc3QpOw0KKwlpbm9kZS0+d2F0Y2hlcl9jb3VudC0tOw0KKw0KKwlpbm9kZV91cGRhdGVf
d2F0Y2hlcnNfbWFzayAoaW5vZGUpOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQorLyogS2VybmVs
IEFQSSAqLw0KKw0KK3ZvaWQgaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudCAoc3RydWN0IGlub2Rl
ICppbm9kZSwgdW5zaWduZWQgbG9uZyBtYXNrLCBjb25zdCBjaGFyICpmaWxlbmFtZSkgew0KKwlz
dHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0KKw0KKwlzcGluX2xvY2soJmlub2RlLT5p
X2xvY2spOw0KKw0KKwkJbGlzdF9mb3JfZWFjaF9lbnRyeSAod2F0Y2hlciwgJmlub2RlLT53YXRj
aGVycywgaV9saXN0KSB7DQorCQkJc3Bpbl9sb2NrKCZ3YXRjaGVyLT5kZXYtPmxvY2spOw0KKwkJ
CQlpbm90aWZ5X2Rldl9xdWV1ZV9ldmVudCAod2F0Y2hlci0+ZGV2LCB3YXRjaGVyLCBtYXNrLCBm
aWxlbmFtZSk7DQorCQkJc3Bpbl91bmxvY2soJndhdGNoZXItPmRldi0+bG9jayk7DQorCQl9DQor
DQorCXNwaW5fdW5sb2NrKCZpbm9kZS0+aV9sb2NrKTsNCit9DQorRVhQT1JUX1NZTUJPTF9HUEwo
aW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudCk7DQorDQordm9pZCBpbm90aWZ5X2RlbnRyeV9wYXJl
bnRfcXVldWVfZXZlbnQoc3RydWN0IGRlbnRyeSAqZGVudHJ5LCB1bnNpZ25lZCBsb25nIG1hc2ss
IGNvbnN0IGNoYXIgKmZpbGVuYW1lKQ0KK3sNCisJc3RydWN0IGRlbnRyeSAqcGFyZW50Ow0KKw0K
KwlzcGluX2xvY2soJmRlbnRyeS0+ZF9sb2NrKTsNCisJZGdldCAoZGVudHJ5LT5kX3BhcmVudCk7
DQorCXBhcmVudCA9IGRlbnRyeS0+ZF9wYXJlbnQ7DQorCWlub3RpZnlfaW5vZGVfcXVldWVfZXZl
bnQocGFyZW50LT5kX2lub2RlLCBtYXNrLCBmaWxlbmFtZSk7DQorCWRwdXQgKHBhcmVudCk7DQor
CXNwaW5fdW5sb2NrKCZkZW50cnktPmRfbG9jayk7DQorfQ0KK0VYUE9SVF9TWU1CT0xfR1BMKGlu
b3RpZnlfZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudCk7DQorDQorc3RhdGljIHZvaWQgaWdub3Jl
X2hlbHBlciAoc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlciwgaW50IGV2ZW50KSB7DQor
CXN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2Ow0KKwlzdHJ1Y3QgaW5vZGUgKmlub2RlOw0KKw0K
KwlzcGluX2xvY2soJndhdGNoZXItPmRldi0+bG9jayk7DQorCXNwaW5fbG9jaygmd2F0Y2hlci0+
aW5vZGUtPmlfbG9jayk7DQorDQorCWlub2RlID0gd2F0Y2hlci0+aW5vZGU7DQorCWRldiA9IHdh
dGNoZXItPmRldjsNCisNCisJaWYgKGV2ZW50KQ0KKwkJaW5vdGlmeV9kZXZfcXVldWVfZXZlbnQg
KGRldiwgd2F0Y2hlciwgZXZlbnQsIE5VTEwpOw0KKw0KKwlpbm9kZV9ybV93YXRjaGVyIChpbm9k
ZSwgd2F0Y2hlcik7DQorCWlub3RpZnlfZGV2X3JtX3dhdGNoZXIgKHdhdGNoZXItPmRldiwgd2F0
Y2hlcik7DQorCWxpc3RfZGVsKCZ3YXRjaGVyLT51X2xpc3QpOw0KKw0KKw0KKwlzcGluX3VubG9j
aygmaW5vZGUtPmlfbG9jayk7DQorDQorCWRlbGV0ZV93YXRjaGVyKGRldiwgd2F0Y2hlcik7DQor
DQorCXNwaW5fdW5sb2NrKCZkZXYtPmxvY2spOw0KKw0KKwl1bnJlZl9pbm9kZSAoaW5vZGUpOw0K
K30NCisNCitzdGF0aWMgdm9pZCBwcm9jZXNzX3Vtb3VudF9saXN0IChzdHJ1Y3QgbGlzdF9oZWFk
ICp1bW91bnQpIHsNCisJc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlciwgKm5leHQ7DQor
DQorCWxpc3RfZm9yX2VhY2hfZW50cnlfc2FmZSAod2F0Y2hlciwgbmV4dCwgdW1vdW50LCB1X2xp
c3QpIHsNCisJCWlnbm9yZV9oZWxwZXIgKHdhdGNoZXIsIElOX1VOTU9VTlQpOw0KKwl9DQorfQ0K
Kw0KK3N0YXRpYyB2b2lkIGJ1aWxkX3Vtb3VudF9saXN0IChzdHJ1Y3QgbGlzdF9oZWFkICpoZWFk
LCBzdHJ1Y3Qgc3VwZXJfYmxvY2sgKnNiLCBzdHJ1Y3QgbGlzdF9oZWFkICp1bW91bnQpIHsNCisJ
c3RydWN0IGlub2RlICoJaW5vZGU7DQorDQorCWxpc3RfZm9yX2VhY2hfZW50cnkgKGlub2RlLCBo
ZWFkLCBpX2xpc3QpIHsNCisJCXN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXI7DQorDQor
CQlpZiAoaW5vZGUtPmlfc2IgIT0gc2IpDQorCQkJY29udGludWU7DQorDQorCQlzcGluX2xvY2so
Jmlub2RlLT5pX2xvY2spOw0KKw0KKwkJbGlzdF9mb3JfZWFjaF9lbnRyeSAod2F0Y2hlciwgJmlu
b2RlLT53YXRjaGVycywgaV9saXN0KSB7DQorCQkJbGlzdF9hZGQgKCZ3YXRjaGVyLT51X2xpc3Qs
IHVtb3VudCk7DQorCQl9DQorDQorCQlzcGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorCX0N
Cit9DQorDQordm9pZCBpbm90aWZ5X3N1cGVyX2Jsb2NrX3Vtb3VudCAoc3RydWN0IHN1cGVyX2Js
b2NrICpzYikNCit7DQorCXN0cnVjdCBsaXN0X2hlYWQgdW1vdW50Ow0KKw0KKwlJTklUX0xJU1Rf
SEVBRCgmdW1vdW50KTsNCisNCisJc3Bpbl9sb2NrKCZpbm9kZV9sb2NrKTsNCisJCWJ1aWxkX3Vt
b3VudF9saXN0ICgmaW5vZGVfaW5fdXNlLCBzYiwgJnVtb3VudCk7DQorCXNwaW5fdW5sb2NrKCZp
bm9kZV9sb2NrKTsNCisNCisJcHJvY2Vzc191bW91bnRfbGlzdCAoJnVtb3VudCk7DQorfQ0KK0VY
UE9SVF9TWU1CT0xfR1BMKGlub3RpZnlfc3VwZXJfYmxvY2tfdW1vdW50KTsNCisNCisvKiBUaGUg
ZHJpdmVyIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBiZWxvdyAqLw0KKw0KK3N0YXRpYyB1bnNp
Z25lZCBpbnQgaW5vdGlmeV9wb2xsKHN0cnVjdCBmaWxlICpmaWxlLCBwb2xsX3RhYmxlICp3YWl0
KSB7DQorICAgICAgICBzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldjsNCisNCisgICAgICAgIGRl
diA9IGZpbGUtPnByaXZhdGVfZGF0YTsNCisNCisNCisgICAgICAgIHBvbGxfd2FpdChmaWxlLCAm
ZGV2LT53YWl0LCB3YWl0KTsNCisNCisgICAgICAgIGlmIChpbm90aWZ5X2Rldl9oYXNfZXZlbnRz
KGRldikpIHsNCisgICAgICAgICAgICAgICAgcmV0dXJuIFBPTExJTiB8IFBPTExSRE5PUk07DQor
CX0NCisNCisgICAgICAgIHJldHVybiAwOw0KK30NCisNCisjZGVmaW5lIE1BWF9FVkVOVFNfQVRf
T05DRSAyMA0KK3N0YXRpYyBzc2l6ZV90IGlub3RpZnlfcmVhZChzdHJ1Y3QgZmlsZSAqZmlsZSwg
X191c2VyIGNoYXIgKmJ1ZiwNCisJCQkgICBzaXplX3QgY291bnQsIGxvZmZfdCAqcG9zKSB7DQor
CXNpemVfdCBvdXQ7DQorCXN0cnVjdCBpbm90aWZ5X2V2ZW50IGV2ZW50YnVmW01BWF9FVkVOVFNf
QVRfT05DRV07DQorCXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVudCAqa2V2ZW50Ow0KKwlzdHJ1
Y3QgaW5vdGlmeV9kZXZpY2UgKmRldjsNCisJY2hhciAqb2J1ZjsNCisJaW50IGVycjsNCisJREVD
TEFSRV9XQUlUUVVFVUUod2FpdCwgY3VycmVudCk7DQorDQorCWludCBldmVudHM7DQorCWludCBl
dmVudF9jb3VudDsNCisNCisJZXZlbnRzID0gMDsNCisJZXZlbnRfY291bnQgPSAwOw0KKwlvdXQg
PSAwOw0KKwllcnIgPSAwOw0KKw0KKwlvYnVmID0gYnVmOw0KKw0KKwlkZXYgPSBmaWxlLT5wcml2
YXRlX2RhdGE7DQorDQorCS8qIFdlIG9ubHkgaGFuZCBvdXQgZnVsbCBpbm90aWZ5IGV2ZW50cyAq
Lw0KKwlpZiAoY291bnQgPCBzaXplb2Yoc3RydWN0IGlub3RpZnlfZXZlbnQpKSB7DQorCQlvdXQg
PSAtRUlOVkFMOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJZXZlbnRzID0gY291bnQgLyBzaXpl
b2Yoc3RydWN0IGlub3RpZnlfZXZlbnQpOw0KKw0KKwlpZiAoZXZlbnRzID4gTUFYX0VWRU5UU19B
VF9PTkNFKSBldmVudHMgPSBNQVhfRVZFTlRTX0FUX09OQ0U7DQorDQorCWlmICghaW5vdGlmeV9k
ZXZfaGFzX2V2ZW50cyhkZXYpKSB7DQorCQlpZiAoZmlsZS0+Zl9mbGFncyAmIE9fTk9OQkxPQ0sp
IHsNCisJCQlvdXQgPSAtRUFHQUlOOw0KKwkJCWdvdG8gb3V0Ow0KKwkJfQ0KKwl9DQorDQorCXNw
aW5fbG9ja19pcnEoJmRldi0+bG9jayk7DQorDQorCWFkZF93YWl0X3F1ZXVlKCZkZXYtPndhaXQs
ICZ3YWl0KTsNCityZXBlYXQ6DQorCWlmIChzaWduYWxfcGVuZGluZyhjdXJyZW50KSkgew0KKwkJ
c3Bpbl91bmxvY2tfaXJxICgmZGV2LT5sb2NrKTsNCisJCW91dCA9IC1FUkVTVEFSVFNZUzsNCisJ
CXNldF9jdXJyZW50X3N0YXRlIChUQVNLX1JVTk5JTkcpOw0KKwkJcmVtb3ZlX3dhaXRfcXVldWUo
JmRldi0+d2FpdCwgJndhaXQpOw0KKwkJZ290byBvdXQ7DQorCX0NCisJc2V0X2N1cnJlbnRfc3Rh
dGUoVEFTS19JTlRFUlJVUFRJQkxFKTsNCisJaWYgKCFpbm90aWZ5X2Rldl9oYXNfZXZlbnRzIChk
ZXYpKSB7DQorCQlzcGluX3VubG9ja19pcnEgKCZkZXYtPmxvY2spOw0KKwkJc2NoZWR1bGUgKCk7
DQorCQlzcGluX2xvY2tfaXJxICgmZGV2LT5sb2NrKTsNCisJCWdvdG8gcmVwZWF0Ow0KKwl9DQor
DQorCXNldF9jdXJyZW50X3N0YXRlIChUQVNLX1JVTk5JTkcpOw0KKwlyZW1vdmVfd2FpdF9xdWV1
ZSAoJmRldi0+d2FpdCwgJndhaXQpOw0KKw0KKwllcnIgPSAhYWNjZXNzX29rKFZFUklGWV9XUklU
RSwgKHZvaWQgKilidWYsIHNpemVvZihzdHJ1Y3QgaW5vdGlmeV9ldmVudCkpOw0KKw0KKwlpZiAo
ZXJyKSB7DQorCQlvdXQgPSAtRUZBVUxUOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJLyogQ29w
eSBhbGwgdGhlIGV2ZW50cyB3ZSBjYW4gdG8gdGhlIGV2ZW50IGJ1ZmZlciAqLw0KKwlmb3IgKGV2
ZW50X2NvdW50ID0gMDsgZXZlbnRfY291bnQgPCBldmVudHM7IGV2ZW50X2NvdW50KyspIHsNCisJ
CWtldmVudCA9IGlub3RpZnlfZGV2X2dldF9ldmVudCAoZGV2KTsNCisJCWV2ZW50YnVmW2V2ZW50
X2NvdW50XSA9IGtldmVudC0+ZXZlbnQ7DQorCQlpbm90aWZ5X2Rldl9ldmVudF9kZXF1ZXVlIChk
ZXYpOw0KKwl9DQorDQorCXNwaW5fdW5sb2NrX2lycSAoJmRldi0+bG9jayk7DQorDQorCS8qIFNl
bmQgdGhlIGV2ZW50IGJ1ZmZlciB0byB1c2VyIHNwYWNlICovDQorCWVyciA9IGNvcHlfdG9fdXNl
ciAoYnVmLCAmZXZlbnRidWZbMF0sIGV2ZW50cyAqIHNpemVvZihzdHJ1Y3QgaW5vdGlmeV9ldmVu
dCkpOw0KKw0KKwlidWYgKz0gc2l6ZW9mKHN0cnVjdCBpbm90aWZ5X2V2ZW50KSAqIGV2ZW50czsN
CisNCisJb3V0ID0gYnVmIC0gb2J1ZjsNCisNCitvdXQ6DQorCXJldHVybiBvdXQ7DQorfQ0KKw0K
K3N0YXRpYyB2b2lkIGlub3RpZnlfZGV2X3RpbWVyICh1bnNpZ25lZCBsb25nIGRhdGEpIHsNCisJ
c3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYgPSAoc3RydWN0IGlub3RpZnlfZGV2aWNlICopZGF0
YTsNCisNCisJaWYgKCFkYXRhKSByZXR1cm47DQorDQorCS8vIHJlc2V0IHRoZSB0aW1lcg0KKwlt
b2RfdGltZXIoJmRldi0+dGltZXIsIElOT1RJRllfREVWX1RJTUVSX1RJTUUpOw0KKw0KKwkvLyB3
YWtlIHVwIGFueXRoaW5nIHdhaXRpbmcgb24gcG9sbA0KKwlpZiAoaW5vdGlmeV9kZXZfaGFzX2V2
ZW50cyAoZGV2KSkgew0KKwkJd2FrZV91cF9pbnRlcnJ1cHRpYmxlKCZkZXYtPndhaXQpOw0KKwl9
DQorfQ0KKw0KK3N0YXRpYyBpbnQgaW5vdGlmeV9vcGVuKHN0cnVjdCBpbm9kZSAqaW5vZGUsIHN0
cnVjdCBmaWxlICpmaWxlKSB7DQorCXN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2Ow0KKw0KKwlp
ZiAoYXRvbWljX3JlYWQoJndhdGNoZXJfY291bnQpID09IE1BWF9JTk9USUZZX0RFVlMpDQorCQly
ZXR1cm4gLUVOT0RFVjsNCisNCisJYXRvbWljX2luYygmd2F0Y2hlcl9jb3VudCk7DQorDQorCWRl
diA9IGttYWxsb2Moc2l6ZW9mKHN0cnVjdCBpbm90aWZ5X2RldmljZSksIEdGUF9LRVJORUwpOw0K
KwlkZXYtPmJpdG1hc2sgPSBrbWFsbG9jKF9fQklUTUFTS19TSVpFLCBHRlBfS0VSTkVMKTsNCisJ
bWVtc2V0KGRldi0+Yml0bWFzaywgMCwgX19CSVRNQVNLX1NJWkUpOw0KKw0KKwlJTklUX0xJU1Rf
SEVBRCgmZGV2LT5ldmVudHMpOw0KKwlJTklUX0xJU1RfSEVBRCgmZGV2LT53YXRjaGVycyk7DQor
CWluaXRfdGltZXIoJmRldi0+dGltZXIpOw0KKwlpbml0X3dhaXRxdWV1ZV9oZWFkKCZkZXYtPndh
aXQpOw0KKw0KKwlhdG9taWNfc2V0KCZkZXYtPmV2ZW50X2NvdW50LCAwKTsNCisJZGV2LT53YXRj
aGVyX2NvdW50ID0gMDsNCisJZGV2LT5sb2NrID0gU1BJTl9MT0NLX1VOTE9DS0VEOw0KKwlkZXYt
PnJlYWRfc3RhdGUgPSAwOw0KKw0KKwlmaWxlLT5wcml2YXRlX2RhdGEgPSBkZXY7DQorDQorCWRl
di0+dGltZXIuZGF0YSA9IGRldjsNCisJZGV2LT50aW1lci5mdW5jdGlvbiA9IGlub3RpZnlfZGV2
X3RpbWVyOw0KKwlkZXYtPnRpbWVyLmV4cGlyZXMgPSBJTk9USUZZX0RFVl9USU1FUl9USU1FOw0K
Kw0KKwlhZGRfdGltZXIoJmRldi0+dGltZXIpOw0KKw0KKwlwcmludGsoS0VSTl9BTEVSVCAiaW5v
dGlmeSBkZXZpY2Ugb3BlbmVkXG4iKTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyB2
b2lkIGlub3RpZnlfcmVsZWFzZV9hbGxfd2F0Y2hlcnMgKHN0cnVjdCBpbm90aWZ5X2RldmljZSAq
ZGV2KQ0KK3sNCisJc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlciwqbmV4dDsNCisNCisJ
bGlzdF9mb3JfZWFjaF9lbnRyeV9zYWZlKHdhdGNoZXIsIG5leHQsICZkZXYtPndhdGNoZXJzLCBk
X2xpc3QpIHsNCisJCWlnbm9yZV9oZWxwZXIgKHdhdGNoZXIsIDApOw0KKwl9DQorfQ0KKw0KK3N0
YXRpYyB2b2lkIGlub3RpZnlfcmVsZWFzZV9hbGxfZXZlbnRzIChzdHJ1Y3QgaW5vdGlmeV9kZXZp
Y2UgKmRldikNCit7DQorCXNwaW5fbG9jaygmZGV2LT5sb2NrKTsNCisJd2hpbGUgKGlub3RpZnlf
ZGV2X2hhc19ldmVudHMoZGV2KSkgew0KKwkJaW5vdGlmeV9kZXZfZXZlbnRfZGVxdWV1ZShkZXYp
Ow0KKwl9DQorCXNwaW5fdW5sb2NrKCZkZXYtPmxvY2spOw0KK30NCisNCisNCitzdGF0aWMgaW50
IGlub3RpZnlfcmVsZWFzZShzdHJ1Y3QgaW5vZGUgKmlub2RlLCBzdHJ1Y3QgZmlsZSAqZmlsZSkN
Cit7DQorCWlmIChmaWxlLT5wcml2YXRlX2RhdGEpIHsNCisJCXN0cnVjdCBpbm90aWZ5X2Rldmlj
ZSAqZGV2Ow0KKw0KKwkJZGV2ID0gKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqKWZpbGUtPnByaXZh
dGVfZGF0YTsNCisNCisJCWRlbF90aW1lcigmZGV2LT50aW1lcik7DQorDQorCQlpbm90aWZ5X3Jl
bGVhc2VfYWxsX3dhdGNoZXJzKGRldik7DQorDQorCQlpbm90aWZ5X3JlbGVhc2VfYWxsX2V2ZW50
cyhkZXYpOw0KKw0KKwkJa2ZyZWUgKGRldi0+Yml0bWFzayk7DQorCQlrZnJlZSAoZGV2KTsNCisN
CisJfQ0KKw0KKwlwcmludGsoS0VSTl9BTEVSVCAiaW5vdGlmeSBkZXZpY2UgcmVsZWFzZWRcbiIp
Ow0KKw0KKwlhdG9taWNfZGVjKCZ3YXRjaGVyX2NvdW50KTsNCisJcmV0dXJuIDA7DQorfQ0KKw0K
K3N0YXRpYyBpbnQgaW5vdGlmeV93YXRjaCAoc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYsIHN0
cnVjdCBpbm90aWZ5X3dhdGNoX3JlcXVlc3QgKnJlcXVlc3QpDQorew0KKwlpbnQgZXJyOw0KKwlz
dHJ1Y3QgaW5vZGUgKmlub2RlOw0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0K
KwllcnIgPSAwOw0KKw0KKwllcnIgPSBmaW5kX2lub2RlIChyZXF1ZXN0LT5kaXJuYW1lLCAmaW5v
ZGUpOw0KKw0KKwlpZiAoZXJyKQ0KKwkJZ290byBleGl0Ow0KKw0KKwlpZiAoIVNfSVNESVIoaW5v
ZGUtPmlfbW9kZSkpIHsNCisJCWlwcmludGsoSU5PVElGWV9ERUJVR19FUlJPUlMsICJ3YXRjaGlu
ZyBmaWxlXG4iKTsNCisJfQ0KKw0KKwlzcGluX2xvY2soJmRldi0+bG9jayk7DQorCXNwaW5fbG9j
aygmaW5vZGUtPmlfbG9jayk7DQorDQorCS8qIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSBvZiByZS1h
ZGRpbmcgYSBkaXJlY3Rvcnkgd2UgYXJlIGFscmVhZHkNCisJICogd2F0Y2hpbmcsIHdlIGp1c3Qg
dXBkYXRlIHRoZSBtYXNrIGFuZCByZXR1cm4gMA0KKwkgKi8NCisJaWYgKGlub3RpZnlfZGV2X2lz
X3dhdGNoaW5nX2lub2RlIChkZXYsIGlub2RlKSkgew0KKwkJaXByaW50ayhJTk9USUZZX0RFQlVH
X0VSUk9SUywgImFkanVzdGluZyBldmVudCBtYXNrIGZvciBpbm9kZSAlcFxuIiwgaW5vZGUpOw0K
KwkJc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqb3dhdGNoZXI7IC8vIHRoZSBvbGQgd2F0Y2hlcg0K
Kw0KKwkJb3dhdGNoZXIgPSBpbm9kZV9maW5kX2RldiAoaW5vZGUsIGRldik7DQorDQorCQlvd2F0
Y2hlci0+bWFzayA9IHJlcXVlc3QtPm1hc2s7DQorDQorCQlpbm9kZV91cGRhdGVfd2F0Y2hlcnNf
bWFzayAoaW5vZGUpOw0KKw0KKwkJc3Bpbl91bmxvY2sgKCZpbm9kZS0+aV9sb2NrKTsNCisJCXNw
aW5fdW5sb2NrICgmZGV2LT5sb2NrKTsNCisNCisJCXVucmVmX2lub2RlIChpbm9kZSk7DQorDQor
CQlyZXR1cm4gMDsNCisJfQ0KKw0KKwlzcGluX3VubG9jayAoJmlub2RlLT5pX2xvY2spOw0KKwlz
cGluX3VubG9jayAoJmRldi0+bG9jayk7DQorDQorDQorCXdhdGNoZXIgPSBjcmVhdGVfd2F0Y2hl
ciAoZGV2LCByZXF1ZXN0LT5tYXNrLCBpbm9kZSk7DQorDQorCWlmICghd2F0Y2hlcikgew0KKwkJ
dW5yZWZfaW5vZGUgKGlub2RlKTsNCisJCXJldHVybiAtRU5PU1BDOw0KKwl9DQorDQorCXNwaW5f
bG9jaygmZGV2LT5sb2NrKTsNCisJc3Bpbl9sb2NrKCZpbm9kZS0+aV9sb2NrKTsNCisNCisJLyog
V2UgY2FuJ3QgYWRkIGFueW1vcmUgd2F0Y2hlcnMgdG8gdGhpcyBkZXZpY2UgKi8NCisJaWYgKGlu
b3RpZnlfZGV2X2FkZF93YXRjaGVyIChkZXYsIHdhdGNoZXIpID09IC1FTk9TUEMpIHsNCisJCWlw
cmludGsoSU5PVElGWV9ERUJVR19FUlJPUlMsICJjYW4ndCBhZGQgd2F0Y2hlciBkZXYgaXMgZnVs
bFxuIik7DQorCQlzcGluX3VubG9jayAoJmlub2RlLT5pX2xvY2spOw0KKwkJZGVsZXRlX3dhdGNo
ZXIgKGRldiwgd2F0Y2hlcik7DQorCQlzcGluX3VubG9jayAoJmRldi0+bG9jayk7DQorDQorCQl1
bnJlZl9pbm9kZSAoaW5vZGUpOw0KKwkJcmV0dXJuIC1FTk9TUEM7DQorCX0NCisNCisJaW5vZGVf
YWRkX3dhdGNoZXIgKGlub2RlLCB3YXRjaGVyKTsNCisNCisJLyogV2Uga2VlcCBhIHJlZmVyZW5j
ZSBvbiB0aGUgaW5vZGUgKi8NCisJaWYgKCFlcnIpIHsNCisJCWVyciA9IHdhdGNoZXItPndkOw0K
Kwl9DQorDQorCXNwaW5fdW5sb2NrKCZpbm9kZS0+aV9sb2NrKTsNCisJc3Bpbl91bmxvY2soJmRl
di0+bG9jayk7DQorZXhpdDoNCisJcmV0dXJuIGVycjsNCit9DQorDQorc3RhdGljIGludCBpbm90
aWZ5X2lnbm9yZShzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwgaW50IHdkKQ0KK3sNCisJc3Ry
dWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcjsNCisNCisJd2F0Y2hlciA9IGRldl9maW5kX3dk
IChkZXYsIHdkKTsNCisNCisJaWYgKCF3YXRjaGVyKSB7DQorCQlyZXR1cm4gLUVJTlZBTDsNCisJ
fQ0KKw0KKwlpZ25vcmVfaGVscGVyICh3YXRjaGVyLCAwKTsNCisNCisJcmV0dXJuIDA7DQorfQ0K
Kw0KK3N0YXRpYyB2b2lkIGlub3RpZnlfcHJpbnRfc3RhdHMgKHN0cnVjdCBpbm90aWZ5X2Rldmlj
ZSAqZGV2KQ0KK3sNCisJaW50IHNpemVvZl9pbm90aWZ5X3dhdGNoZXI7DQorCWludCBzaXplb2Zf
aW5vdGlmeV9kZXZpY2U7DQorCWludCBzaXplb2ZfaW5vdGlmeV9rZXJuZWxfZXZlbnQ7DQorDQor
CXNpemVvZl9pbm90aWZ5X3dhdGNoZXIgPSBzaXplb2YgKHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIp
Ow0KKwlzaXplb2ZfaW5vdGlmeV9kZXZpY2UgPSBzaXplb2YgKHN0cnVjdCBpbm90aWZ5X2Rldmlj
ZSk7DQorCXNpemVvZl9pbm90aWZ5X2tlcm5lbF9ldmVudCA9IHNpemVvZiAoc3RydWN0IGlub3Rp
Znlfa2VybmVsX2V2ZW50KTsNCisNCisJcHJpbnRrIChLRVJOX0FMRVJUICJHTE9CQUwgSU5PVElG
WSBTVEFUU1xuIik7DQorCXByaW50ayAoS0VSTl9BTEVSVCAid2F0Y2hlcl9jb3VudCA9ICVkXG4i
LCBhdG9taWNfcmVhZCgmd2F0Y2hlcl9jb3VudCkpOw0KKwlwcmludGsgKEtFUk5fQUxFUlQgImV2
ZW50X29iamVjdF9jb3VudCA9ICVkXG4iLCBldmVudF9vYmplY3RfY291bnQpOw0KKwlwcmludGsg
KEtFUk5fQUxFUlQgIndhdGNoZXJfb2JqZWN0X2NvdW50ID0gJWRcbiIsIHdhdGNoZXJfb2JqZWN0
X2NvdW50KTsNCisJcHJpbnRrIChLRVJOX0FMRVJUICJpbm9kZV9yZWZfY291bnQgPSAlZFxuIiwg
aW5vZGVfcmVmX2NvdW50KTsNCisNCisJcHJpbnRrIChLRVJOX0FMRVJUICJzaXplb2Yoc3RydWN0
IGlub3RpZnlfd2F0Y2hlcikgPSAlZFxuIiwgc2l6ZW9mX2lub3RpZnlfd2F0Y2hlcik7DQorCXBy
aW50ayAoS0VSTl9BTEVSVCAic2l6ZW9mKHN0cnVjdCBpbm90aWZ5X2RldmljZSkgPSAlZFxuIiwg
c2l6ZW9mX2lub3RpZnlfZGV2aWNlKTsNCisJcHJpbnRrIChLRVJOX0FMRVJUICJzaXplb2Yoc3Ry
dWN0IGlub3RpZnlfa2VybmVsX2V2ZW50KSA9ICVkXG4iLCBzaXplb2ZfaW5vdGlmeV9rZXJuZWxf
ZXZlbnQpOw0KKw0KKwlzcGluX2xvY2soJmRldi0+bG9jayk7DQorDQorCXByaW50ayAoS0VSTl9B
TEVSVCAiaW5vdGlmeSBkZXZpY2U6ICVwXG4iLCBkZXYpOw0KKwlwcmludGsgKEtFUk5fQUxFUlQg
Imlub3RpZnkgZXZlbnRfY291bnQ6ICVkXG4iLCBhdG9taWNfcmVhZCgmZGV2LT5ldmVudF9jb3Vu
dCkpOw0KKwlwcmludGsgKEtFUk5fQUxFUlQgImlub3RpZnkgd2F0Y2hfY291bnQ6ICVkXG4iLCBk
ZXYtPndhdGNoZXJfY291bnQpOw0KKw0KKwlzcGluX3VubG9jaygmZGV2LT5sb2NrKTsNCit9DQor
DQorc3RhdGljIGludCBpbm90aWZ5X2lvY3RsKHN0cnVjdCBpbm9kZSAqaXAsIHN0cnVjdCBmaWxl
ICpmcCwNCisJCQkgdW5zaWduZWQgaW50IGNtZCwgdW5zaWduZWQgbG9uZyBhcmcpIHsNCisJaW50
IGVycjsNCisJc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXY7DQorCXN0cnVjdCBpbm90aWZ5X3dh
dGNoX3JlcXVlc3QgcmVxdWVzdDsNCisJaW50IHdpZDsNCisNCisJZGV2ID0gZnAtPnByaXZhdGVf
ZGF0YTsNCisNCisJZXJyID0gMDsNCisNCisJaWYgKF9JT0NfVFlQRShjbWQpICE9IElOT1RJRllf
SU9DVExfTUFHSUMpIHJldHVybiAtRUlOVkFMOw0KKwlpZiAoX0lPQ19OUihjbWQpID4gSU5PVElG
WV9JT0NUTF9NQVhOUikgcmV0dXJuIC1FSU5WQUw7DQorDQorCWlmIChfSU9DX0RJUihjbWQpICYg
X0lPQ19SRUFEKQ0KKwkJZXJyID0gIWFjY2Vzc19vayhWRVJJRllfUkVBRCwgKHZvaWQgKilhcmcs
IF9JT0NfU0laRShjbWQpKTsNCisNCisJaWYgKGVycikgew0KKwkJZXJyID0gLUVGQVVMVDsNCisJ
CWdvdG8gb3V0Ow0KKwl9DQorDQorCWlmIChfSU9DX0RJUihjbWQpICYgX0lPQ19XUklURSkNCisJ
CWVyciA9ICFhY2Nlc3Nfb2soVkVSSUZZX1dSSVRFLCAodm9pZCAqKWFyZywgX0lPQ19TSVpFKGNt
ZCkpOw0KKw0KKwlpZiAoZXJyKSB7DQorCQllcnIgPSAtRUZBVUxUOw0KKwkJZ290byBvdXQ7DQor
CX0NCisNCisNCisJZXJyID0gLUVJTlZBTDsNCisNCisJc3dpdGNoIChjbWQpIHsNCisJCWNhc2Ug
SU5PVElGWV9XQVRDSDoNCisJCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRVJST1JTLCAiSU5PVElG
WV9XQVRDSCBpb2N0bFxuIik7DQorCQkJaWYgKGNvcHlfZnJvbV91c2VyKCZyZXF1ZXN0LCAodm9p
ZCAqKWFyZywgc2l6ZW9mKHN0cnVjdCBpbm90aWZ5X3dhdGNoX3JlcXVlc3QpKSkgew0KKwkJCQll
cnIgPSAtRUZBVUxUOw0KKwkJCQlnb3RvIG91dDsNCisJCQl9DQorDQorCQkJZXJyID0gaW5vdGlm
eV93YXRjaChkZXYsICZyZXF1ZXN0KTsNCisJCWJyZWFrOw0KKwkJY2FzZSBJTk9USUZZX0lHTk9S
RToNCisJCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRVJST1JTLCAiSU5PVElGWV9JR05PUkUgaW9j
dGxcbiIpOw0KKwkJCWlmIChjb3B5X2Zyb21fdXNlcigmd2lkLCAodm9pZCAqKWFyZywgc2l6ZW9m
KGludCkpKSB7DQorCQkJCWVyciA9IC1FRkFVTFQ7DQorCQkJCWdvdG8gb3V0Ow0KKwkJCX0NCisN
CisJCQllcnIgPSBpbm90aWZ5X2lnbm9yZShkZXYsIHdpZCk7DQorCQlicmVhazsNCisJCWNhc2Ug
SU5PVElGWV9TVEFUUzoNCisJCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRVJST1JTLCAiSU5PVElG
WV9TVEFUUyBpb2N0bFxuIik7DQorCQkJaW5vdGlmeV9wcmludF9zdGF0cyAoZGV2KTsNCisJCQll
cnIgPSAwOw0KKwkJYnJlYWs7DQorCQljYXNlIElOT1RJRllfU0VUREVCVUc6DQorCQkJaXByaW50
ayhJTk9USUZZX0RFQlVHX0VSUk9SUywgIklOT1RJRllfU0VUREVCVUcgaW9jdGxcbiIpOw0KKwkJ
CWlmIChjb3B5X2Zyb21fdXNlcigmaW5vdGlmeV9kZWJ1Z19mbGFncywgKHZvaWQgKilhcmcsIHNp
emVvZihpbnQpKSkgew0KKwkJCQllcnIgPSAtRUZBVUxUOw0KKwkJCQlnb3RvIG91dDsNCisJCQl9
DQorCQlicmVhazsNCisJfQ0KKw0KK291dDoNCisJcmV0dXJuIGVycjsNCit9DQorDQorc3RhdGlj
IHN0cnVjdCBmaWxlX29wZXJhdGlvbnMgaW5vdGlmeV9mb3BzID0gew0KKwkub3duZXIJCT0gVEhJ
U19NT0RVTEUsDQorCS5wb2xsCQk9IGlub3RpZnlfcG9sbCwNCisJLnJlYWQJCT0gaW5vdGlmeV9y
ZWFkLA0KKwkub3BlbgkJPSBpbm90aWZ5X29wZW4sDQorCS5yZWxlYXNlCT0gaW5vdGlmeV9yZWxl
YXNlLA0KKwkuaW9jdGwJCT0gaW5vdGlmeV9pb2N0bCwNCit9Ow0KKw0KK3N0cnVjdCBtaXNjZGV2
aWNlIGlub3RpZnlfZGV2aWNlID0gew0KKwkubWlub3IgID0gTUlTQ19EWU5BTUlDX01JTk9SLCAv
LyBhdXRvbWF0aWMNCisJLm5hbWUJPSAiaW5vdGlmeSIsDQorCS5mb3BzCT0gJmlub3RpZnlfZm9w
cywNCit9Ow0KKw0KKw0KK3N0YXRpYyBpbnQgX19pbml0IGlub3RpZnlfaW5pdCAodm9pZCkNCit7
DQorCWludCByZXQ7DQorDQorCXJldCA9IG1pc2NfcmVnaXN0ZXIoJmlub3RpZnlfZGV2aWNlKTsN
CisNCisJaWYgKHJldCkgew0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJaW5vdGlmeV9kZWJ1Z19m
bGFncyA9IElOT1RJRllfREVCVUdfTk9ORTsNCisNCisJd2F0Y2hlcl9jYWNoZSA9IGttZW1fY2Fj
aGVfY3JlYXRlICgid2F0Y2hlcl9jYWNoZSIsIA0KKwkJCXNpemVvZihzdHJ1Y3QgaW5vdGlmeV93
YXRjaGVyKSwgMCwgU0xBQl9QQU5JQywgTlVMTCwgTlVMTCk7DQorDQorCWlmICghd2F0Y2hlcl9j
YWNoZSkgew0KKwkJbWlzY19kZXJlZ2lzdGVyICgmaW5vdGlmeV9kZXZpY2UpOw0KKwl9DQorCWtl
dmVudF9jYWNoZSA9IGttZW1fY2FjaGVfY3JlYXRlICgia2V2ZW50X2NhY2hlIiwgDQorCQkJc2l6
ZW9mKHN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVudCksIDAsIFNMQUJfUEFOSUMsIE5VTEwsIE5V
TEwpOw0KKw0KKwlpZiAoIWtldmVudF9jYWNoZSkgew0KKwkJbWlzY19kZXJlZ2lzdGVyICgmaW5v
dGlmeV9kZXZpY2UpOw0KKwkJa21lbV9jYWNoZV9kZXN0cm95ICh3YXRjaGVyX2NhY2hlKTsNCisJ
fQ0KKw0KKwlwcmludGsoS0VSTl9BTEVSVCAiaW5vdGlmeSAwLjkgbWlub3I9JWRcbiIsIGlub3Rp
ZnlfZGV2aWNlLm1pbm9yKTsNCitvdXQ6DQorCXJldHVybiByZXQ7DQorfQ0KKw0KK3N0YXRpYyB2
b2lkIGlub3RpZnlfZXhpdCAodm9pZCkNCit7DQorCWttZW1fY2FjaGVfZGVzdHJveSAoa2V2ZW50
X2NhY2hlKTsNCisJa21lbV9jYWNoZV9kZXN0cm95ICh3YXRjaGVyX2NhY2hlKTsNCisJbWlzY19k
ZXJlZ2lzdGVyICgmaW5vdGlmeV9kZXZpY2UpOw0KKwlwcmludGsoS0VSTl9BTEVSVCAiaW5vdGlm
eSBzaHV0ZG93biBlYz0lZCB3Yz0lZCBpYz0lZFxuIiwgZXZlbnRfb2JqZWN0X2NvdW50LCB3YXRj
aGVyX29iamVjdF9jb3VudCwgaW5vZGVfcmVmX2NvdW50KTsNCit9DQorDQorTU9EVUxFX0FVVEhP
UigiSm9obiBNY0N1dGNoYW4gPHR0YkB0ZW50YWNsZS5kaHMub3JnPiIpOw0KK01PRFVMRV9ERVND
UklQVElPTigiSW5vZGUgZXZlbnQgZHJpdmVyIik7DQorTU9EVUxFX0xJQ0VOU0UoIkdQTCIpOw0K
Kw0KK21vZHVsZV9pbml0IChpbm90aWZ5X2luaXQpOw0KK21vZHVsZV9leGl0IChpbm90aWZ5X2V4
aXQpOw0KZGlmZiAtdXJOIGxpbnV4LTIuNi44LjEvZHJpdmVycy9jaGFyL01ha2VmaWxlIC4uL2xp
bnV4L2RyaXZlcnMvY2hhci9NYWtlZmlsZQ0KLS0tIGxpbnV4LTIuNi44LjEvZHJpdmVycy9jaGFy
L01ha2VmaWxlCTIwMDQtMDgtMTQgMDY6NTY6MjIuMDAwMDAwMDAwIC0wNDAwDQorKysgLi4vbGlu
dXgvZHJpdmVycy9jaGFyL01ha2VmaWxlCTIwMDQtMDgtMTkgMDA6MTE6NTIuMDAwMDAwMDAwIC0w
NDAwDQpAQCAtNyw3ICs3LDcgQEANCiAjDQogRk9OVE1BUEZJTEUgPSBjcDQzNy51bmkNCiANCi1v
YmoteQkgKz0gbWVtLm8gcmFuZG9tLm8gdHR5X2lvLm8gbl90dHkubyB0dHlfaW9jdGwubyBwdHku
byBtaXNjLm8NCitvYmoteQkgKz0gbWVtLm8gcmFuZG9tLm8gdHR5X2lvLm8gbl90dHkubyB0dHlf
aW9jdGwubyBwdHkubyBtaXNjLm8gaW5vdGlmeS5vDQogDQogb2JqLSQoQ09ORklHX1ZUKQkJKz0g
dnRfaW9jdGwubyB2Y19zY3JlZW4ubyBjb25zb2xlbWFwLm8gXA0KIAkJCQkgICBjb25zb2xlbWFw
X2RlZnRibC5vIHNlbGVjdGlvbi5vIGtleWJvYXJkLm8NCmRpZmYgLXVyTiBsaW51eC0yLjYuOC4x
L2ZzL2F0dHIuYyAuLi9saW51eC9mcy9hdHRyLmMNCi0tLSBsaW51eC0yLjYuOC4xL2ZzL2F0dHIu
YwkyMDA0LTA4LTE0IDA2OjU0OjUwLjAwMDAwMDAwMCAtMDQwMA0KKysrIC4uL2xpbnV4L2ZzL2F0
dHIuYwkyMDA0LTA4LTE5IDAwOjExOjUyLjAwMDAwMDAwMCAtMDQwMA0KQEAgLTExLDYgKzExLDcg
QEANCiAjaW5jbHVkZSA8bGludXgvc3RyaW5nLmg+DQogI2luY2x1ZGUgPGxpbnV4L3NtcF9sb2Nr
Lmg+DQogI2luY2x1ZGUgPGxpbnV4L2Rub3RpZnkuaD4NCisjaW5jbHVkZSA8bGludXgvaW5vdGlm
eS5oPg0KICNpbmNsdWRlIDxsaW51eC9mY250bC5oPg0KICNpbmNsdWRlIDxsaW51eC9xdW90YW9w
cy5oPg0KICNpbmNsdWRlIDxsaW51eC9zZWN1cml0eS5oPg0KQEAgLTE4NSw4ICsxODYsMTEgQEAN
CiAJfQ0KIAlpZiAoIWVycm9yKSB7DQogCQl1bnNpZ25lZCBsb25nIGRuX21hc2sgPSBzZXRhdHRy
X21hc2soaWFfdmFsaWQpOw0KLQkJaWYgKGRuX21hc2spDQorCQlpZiAoZG5fbWFzaykgew0KIAkJ
CWRub3RpZnlfcGFyZW50KGRlbnRyeSwgZG5fbWFzayk7DQorCQkJaW5vdGlmeV9pbm9kZV9xdWV1
ZV9ldmVudCAoZGVudHJ5LT5kX2lub2RlLCBkbl9tYXNrLCBOVUxMKTsNCisJCQlpbm90aWZ5X2Rl
bnRyeV9wYXJlbnRfcXVldWVfZXZlbnQgKGRlbnRyeSwgZG5fbWFzaywgZGVudHJ5LT5kX25hbWUu
bmFtZSk7DQorCQl9DQogCX0NCiAJcmV0dXJuIGVycm9yOw0KIH0NCmRpZmYgLXVyTiBsaW51eC0y
LjYuOC4xL2ZzL2lub2RlLmMgLi4vbGludXgvZnMvaW5vZGUuYw0KLS0tIGxpbnV4LTIuNi44LjEv
ZnMvaW5vZGUuYwkyMDA0LTA4LTE0IDA2OjU2OjIzLjAwMDAwMDAwMCAtMDQwMA0KKysrIC4uL2xp
bnV4L2ZzL2lub2RlLmMJMjAwNC0wOC0xOSAwMDoxMTo1Mi4wMDAwMDAwMDAgLTA0MDANCkBAIC0x
MTQsNiArMTE0LDcgQEANCiAJaWYgKGlub2RlKSB7DQogCQlzdHJ1Y3QgYWRkcmVzc19zcGFjZSAq
IGNvbnN0IG1hcHBpbmcgPSAmaW5vZGUtPmlfZGF0YTsNCiANCisJCUlOSVRfTElTVF9IRUFEICgm
aW5vZGUtPndhdGNoZXJzKTsNCiAJCWlub2RlLT5pX3NiID0gc2I7DQogCQlpbm9kZS0+aV9ibGti
aXRzID0gc2ItPnNfYmxvY2tzaXplX2JpdHM7DQogCQlpbm9kZS0+aV9mbGFncyA9IDA7DQpkaWZm
IC11ck4gbGludXgtMi42LjguMS9mcy9uYW1laS5jIC4uL2xpbnV4L2ZzL25hbWVpLmMNCi0tLSBs
aW51eC0yLjYuOC4xL2ZzL25hbWVpLmMJMjAwNC0wOC0xNCAwNjo1NToxMC4wMDAwMDAwMDAgLTA0
MDANCisrKyAuLi9saW51eC9mcy9uYW1laS5jCTIwMDQtMDgtMTkgMDA6MTE6NTIuMDAwMDAwMDAw
IC0wNDAwDQpAQCAtMjIsNiArMjIsNyBAQA0KICNpbmNsdWRlIDxsaW51eC9xdW90YW9wcy5oPg0K
ICNpbmNsdWRlIDxsaW51eC9wYWdlbWFwLmg+DQogI2luY2x1ZGUgPGxpbnV4L2Rub3RpZnkuaD4N
CisjaW5jbHVkZSA8bGludXgvaW5vdGlmeS5oPg0KICNpbmNsdWRlIDxsaW51eC9zbXBfbG9jay5o
Pg0KICNpbmNsdWRlIDxsaW51eC9wZXJzb25hbGl0eS5oPg0KICNpbmNsdWRlIDxsaW51eC9zZWN1
cml0eS5oPg0KQEAgLTEyMjEsNiArMTIyMiw3IEBADQogCWVycm9yID0gZGlyLT5pX29wLT5jcmVh
dGUoZGlyLCBkZW50cnksIG1vZGUsIG5kKTsNCiAJaWYgKCFlcnJvcikgew0KIAkJaW5vZGVfZGly
X25vdGlmeShkaXIsIEROX0NSRUFURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRp
ciwgSU5fQ1JFQVRFLCBkZW50cnktPmRfbmFtZS5uYW1lKTsNCiAJCXNlY3VyaXR5X2lub2RlX3Bv
c3RfY3JlYXRlKGRpciwgZGVudHJ5LCBtb2RlKTsNCiAJfQ0KIAlyZXR1cm4gZXJyb3I7DQpAQCAt
MTUzNSw2ICsxNTM3LDcgQEANCiAJZXJyb3IgPSBkaXItPmlfb3AtPm1rbm9kKGRpciwgZGVudHJ5
LCBtb2RlLCBkZXYpOw0KIAlpZiAoIWVycm9yKSB7DQogCQlpbm9kZV9kaXJfbm90aWZ5KGRpciwg
RE5fQ1JFQVRFKTsNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoZGlyLCBJTl9DUkVBVEUs
IGRlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KIAkJc2VjdXJpdHlfaW5vZGVfcG9zdF9ta25vZChkaXIs
IGRlbnRyeSwgbW9kZSwgZGV2KTsNCiAJfQ0KIAlyZXR1cm4gZXJyb3I7DQpAQCAtMTYwOCw2ICsx
NjExLDcgQEANCiAJZXJyb3IgPSBkaXItPmlfb3AtPm1rZGlyKGRpciwgZGVudHJ5LCBtb2RlKTsN
CiAJaWYgKCFlcnJvcikgew0KIAkJaW5vZGVfZGlyX25vdGlmeShkaXIsIEROX0NSRUFURSk7DQor
CQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRpciwgSU5fQ1JFQVRFLCBkZW50cnktPmRfbmFt
ZS5uYW1lKTsNCiAJCXNlY3VyaXR5X2lub2RlX3Bvc3RfbWtkaXIoZGlyLGRlbnRyeSwgbW9kZSk7
DQogCX0NCiAJcmV0dXJuIGVycm9yOw0KQEAgLTE3MDMsNiArMTcwNyw4IEBADQogCXVwKCZkZW50
cnktPmRfaW5vZGUtPmlfc2VtKTsNCiAJaWYgKCFlcnJvcikgew0KIAkJaW5vZGVfZGlyX25vdGlm
eShkaXIsIEROX0RFTEVURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRpciwgSU5f
REVMRVRFLCBkZW50cnktPmRfbmFtZS5uYW1lKTsNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZl
bnQoZGVudHJ5LT5kX2lub2RlLCBJTl9ERUxFVEUsIE5VTEwpOw0KIAkJZF9kZWxldGUoZGVudHJ5
KTsNCiAJfQ0KIAlkcHV0KGRlbnRyeSk7DQpAQCAtMTc3NSw4ICsxNzgxLDkgQEANCiANCiAJLyog
V2UgZG9uJ3QgZF9kZWxldGUoKSBORlMgc2lsbHlyZW5hbWVkIGZpbGVzLS10aGV5IHN0aWxsIGV4
aXN0LiAqLw0KIAlpZiAoIWVycm9yICYmICEoZGVudHJ5LT5kX2ZsYWdzICYgRENBQ0hFX05GU0ZT
X1JFTkFNRUQpKSB7DQotCQlkX2RlbGV0ZShkZW50cnkpOw0KIAkJaW5vZGVfZGlyX25vdGlmeShk
aXIsIEROX0RFTEVURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRpciwgSU5fREVM
RVRFLCBkZW50cnktPmRfbmFtZS5uYW1lKTsNCisJCWRfZGVsZXRlKGRlbnRyeSk7DQogCX0NCiAJ
cmV0dXJuIGVycm9yOw0KIH0NCkBAIC0xODUzLDYgKzE4NjAsNyBAQA0KIAllcnJvciA9IGRpci0+
aV9vcC0+c3ltbGluayhkaXIsIGRlbnRyeSwgb2xkbmFtZSk7DQogCWlmICghZXJyb3IpIHsNCiAJ
CWlub2RlX2Rpcl9ub3RpZnkoZGlyLCBETl9DUkVBVEUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1
ZV9ldmVudChkaXIsIElOX0NSRUFURSwgZGVudHJ5LT5kX25hbWUubmFtZSk7DQogCQlzZWN1cml0
eV9pbm9kZV9wb3N0X3N5bWxpbmsoZGlyLCBkZW50cnksIG9sZG5hbWUpOw0KIAl9DQogCXJldHVy
biBlcnJvcjsNCkBAIC0xOTI2LDYgKzE5MzQsNyBAQA0KIAl1cCgmb2xkX2RlbnRyeS0+ZF9pbm9k
ZS0+aV9zZW0pOw0KIAlpZiAoIWVycm9yKSB7DQogCQlpbm9kZV9kaXJfbm90aWZ5KGRpciwgRE5f
Q1JFQVRFKTsNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoZGlyLCBJTl9DUkVBVEUsIG5l
d19kZW50cnktPmRfbmFtZS5uYW1lKTsNCiAJCXNlY3VyaXR5X2lub2RlX3Bvc3RfbGluayhvbGRf
ZGVudHJ5LCBkaXIsIG5ld19kZW50cnkpOw0KIAl9DQogCXJldHVybiBlcnJvcjsNCkBAIC0yMTE1
LDEyICsyMTI0LDE1IEBADQogCWVsc2UNCiAJCWVycm9yID0gdmZzX3JlbmFtZV9vdGhlcihvbGRf
ZGlyLG9sZF9kZW50cnksbmV3X2RpcixuZXdfZGVudHJ5KTsNCiAJaWYgKCFlcnJvcikgew0KLQkJ
aWYgKG9sZF9kaXIgPT0gbmV3X2RpcikNCisJCWlmIChvbGRfZGlyID09IG5ld19kaXIpIHsNCiAJ
CQlpbm9kZV9kaXJfbm90aWZ5KG9sZF9kaXIsIEROX1JFTkFNRSk7DQotCQllbHNlIHsNCisJCX0g
ZWxzZSB7DQogCQkJaW5vZGVfZGlyX25vdGlmeShvbGRfZGlyLCBETl9ERUxFVEUpOw0KIAkJCWlu
b2RlX2Rpcl9ub3RpZnkobmV3X2RpciwgRE5fQ1JFQVRFKTsNCiAJCX0NCisNCisJCWlub3RpZnlf
aW5vZGVfcXVldWVfZXZlbnQob2xkX2RpciwgSU5fREVMRVRFLCBvbGRfZGVudHJ5LT5kX25hbWUu
bmFtZSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KG5ld19kaXIsIElOX0NSRUFURSwg
bmV3X2RlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KIAl9DQogCXJldHVybiBlcnJvcjsNCiB9DQpkaWZm
IC11ck4gbGludXgtMi42LjguMS9mcy9vcGVuLmMgLi4vbGludXgvZnMvb3Blbi5jDQotLS0gbGlu
dXgtMi42LjguMS9mcy9vcGVuLmMJMjAwNC0wOC0xNCAwNjo1NDo0OC4wMDAwMDAwMDAgLTA0MDAN
CisrKyAuLi9saW51eC9mcy9vcGVuLmMJMjAwNC0wOC0xOSAwMDoxMTo1Mi4wMDAwMDAwMDAgLTA0
MDANCkBAIC0xMSw2ICsxMSw3IEBADQogI2luY2x1ZGUgPGxpbnV4L3NtcF9sb2NrLmg+DQogI2lu
Y2x1ZGUgPGxpbnV4L3F1b3Rhb3BzLmg+DQogI2luY2x1ZGUgPGxpbnV4L2Rub3RpZnkuaD4NCisj
aW5jbHVkZSA8bGludXgvaW5vdGlmeS5oPg0KICNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4NCiAj
aW5jbHVkZSA8bGludXgvc2xhYi5oPg0KICNpbmNsdWRlIDxsaW51eC90dHkuaD4NCkBAIC05NTUs
NiArOTU2LDggQEANCiAJCQllcnJvciA9IFBUUl9FUlIoZik7DQogCQkJaWYgKElTX0VSUihmKSkN
CiAJCQkJZ290byBvdXRfZXJyb3I7DQorCQkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudCAoZi0+
Zl9kZW50cnktPmRfaW5vZGUsIElOX09QRU4sIE5VTEwpOw0KKwkJCWlub3RpZnlfZGVudHJ5X3Bh
cmVudF9xdWV1ZV9ldmVudCAoZi0+Zl9kZW50cnksIElOX09QRU4sIGYtPmZfZGVudHJ5LT5kX25h
bWUubmFtZSk7DQogCQkJZmRfaW5zdGFsbChmZCwgZik7DQogCQl9DQogb3V0Og0KQEAgLTEwMzQs
NiArMTAzNyw4IEBADQogCUZEX0NMUihmZCwgZmlsZXMtPmNsb3NlX29uX2V4ZWMpOw0KIAlfX3B1
dF91bnVzZWRfZmQoZmlsZXMsIGZkKTsNCiAJc3Bpbl91bmxvY2soJmZpbGVzLT5maWxlX2xvY2sp
Ow0KKwlpbm90aWZ5X2RlbnRyeV9wYXJlbnRfcXVldWVfZXZlbnQgKGZpbHAtPmZfZGVudHJ5LCBJ
Tl9DTE9TRSwgZmlscC0+Zl9kZW50cnktPmRfbmFtZS5uYW1lKTsNCisJaW5vdGlmeV9pbm9kZV9x
dWV1ZV9ldmVudCAoZmlscC0+Zl9kZW50cnktPmRfaW5vZGUsIElOX0NMT1NFLCBOVUxMKTsNCiAJ
cmV0dXJuIGZpbHBfY2xvc2UoZmlscCwgZmlsZXMpOw0KIA0KIG91dF91bmxvY2s6DQpkaWZmIC11
ck4gbGludXgtMi42LjguMS9mcy9yZWFkX3dyaXRlLmMgLi4vbGludXgvZnMvcmVhZF93cml0ZS5j
DQotLS0gbGludXgtMi42LjguMS9mcy9yZWFkX3dyaXRlLmMJMjAwNC0wOC0xNCAwNjo1NTozNS4w
MDAwMDAwMDAgLTA0MDANCisrKyAuLi9saW51eC9mcy9yZWFkX3dyaXRlLmMJMjAwNC0wOC0xOSAw
MDoxMTo1Mi4wMDAwMDAwMDAgLTA0MDANCkBAIC0xMSw2ICsxMSw3IEBADQogI2luY2x1ZGUgPGxp
bnV4L3Vpby5oPg0KICNpbmNsdWRlIDxsaW51eC9zbXBfbG9jay5oPg0KICNpbmNsdWRlIDxsaW51
eC9kbm90aWZ5Lmg+DQorI2luY2x1ZGUgPGxpbnV4L2lub3RpZnkuaD4NCiAjaW5jbHVkZSA8bGlu
dXgvc2VjdXJpdHkuaD4NCiAjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQogDQpAQCAtMjE2LDgg
KzIxNywxMSBAQA0KIAkJCQlyZXQgPSBmaWxlLT5mX29wLT5yZWFkKGZpbGUsIGJ1ZiwgY291bnQs
IHBvcyk7DQogCQkJZWxzZQ0KIAkJCQlyZXQgPSBkb19zeW5jX3JlYWQoZmlsZSwgYnVmLCBjb3Vu
dCwgcG9zKTsNCi0JCQlpZiAocmV0ID4gMCkNCisJCQlpZiAocmV0ID4gMCkgew0KIAkJCQlkbm90
aWZ5X3BhcmVudChmaWxlLT5mX2RlbnRyeSwgRE5fQUNDRVNTKTsNCisJCQkJaW5vdGlmeV9kZW50
cnlfcGFyZW50X3F1ZXVlX2V2ZW50KGZpbGUtPmZfZGVudHJ5LCBJTl9BQ0NFU1MsIGZpbGUtPmZf
ZGVudHJ5LT5kX25hbWUubmFtZSk7DQorCQkJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQgKGZp
bGUtPmZfZGVudHJ5LT5kX2lub2RlLCBJTl9BQ0NFU1MsIE5VTEwpOw0KKwkJCX0NCiAJCX0NCiAJ
fQ0KIA0KQEAgLTI2MCw4ICsyNjQsMTEgQEANCiAJCQkJcmV0ID0gZmlsZS0+Zl9vcC0+d3JpdGUo
ZmlsZSwgYnVmLCBjb3VudCwgcG9zKTsNCiAJCQllbHNlDQogCQkJCXJldCA9IGRvX3N5bmNfd3Jp
dGUoZmlsZSwgYnVmLCBjb3VudCwgcG9zKTsNCi0JCQlpZiAocmV0ID4gMCkNCisJCQlpZiAocmV0
ID4gMCkgew0KIAkJCQlkbm90aWZ5X3BhcmVudChmaWxlLT5mX2RlbnRyeSwgRE5fTU9ESUZZKTsN
CisJCQkJaW5vdGlmeV9kZW50cnlfcGFyZW50X3F1ZXVlX2V2ZW50KGZpbGUtPmZfZGVudHJ5LCBJ
Tl9NT0RJRlksIGZpbGUtPmZfZGVudHJ5LT5kX25hbWUubmFtZSk7DQorCQkJCWlub3RpZnlfaW5v
ZGVfcXVldWVfZXZlbnQgKGZpbGUtPmZfZGVudHJ5LT5kX2lub2RlLCBJTl9NT0RJRlksIE5VTEwp
Ow0KKwkJCX0NCiAJCX0NCiAJfQ0KIA0KQEAgLTQ5Myw5ICs1MDAsMTMgQEANCiBvdXQ6DQogCWlm
IChpb3YgIT0gaW92c3RhY2spDQogCQlrZnJlZShpb3YpOw0KLQlpZiAoKHJldCArICh0eXBlID09
IFJFQUQpKSA+IDApDQorCWlmICgocmV0ICsgKHR5cGUgPT0gUkVBRCkpID4gMCkgew0KIAkJZG5v
dGlmeV9wYXJlbnQoZmlsZS0+Zl9kZW50cnksDQogCQkJCSh0eXBlID09IFJFQUQpID8gRE5fQUND
RVNTIDogRE5fTU9ESUZZKTsNCisJCWlub3RpZnlfZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudChm
aWxlLT5mX2RlbnRyeSwgDQorCQkJCSh0eXBlID09IFJFQUQpID8gSU5fQUNDRVNTIDogSU5fTU9E
SUZZLCBmaWxlLT5mX2RlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1
ZV9ldmVudCAoZmlsZS0+Zl9kZW50cnktPmRfaW5vZGUsICh0eXBlID09IFJFQUQpID8gSU5fQUND
RVNTIDogSU5fTU9ESUZZLCBOVUxMKTsNCisJfQ0KIAlyZXR1cm4gcmV0Ow0KIH0NCiANCmRpZmYg
LXVyTiBsaW51eC0yLjYuOC4xL2ZzL3N1cGVyLmMgLi4vbGludXgvZnMvc3VwZXIuYw0KLS0tIGxp
bnV4LTIuNi44LjEvZnMvc3VwZXIuYwkyMDA0LTA4LTE0IDA2OjU1OjIyLjAwMDAwMDAwMCAtMDQw
MA0KKysrIC4uL2xpbnV4L2ZzL3N1cGVyLmMJMjAwNC0wOC0xOSAwMDoxMTo1Mi4wMDAwMDAwMDAg
LTA0MDANCkBAIC0zNiw2ICszNiw3IEBADQogI2luY2x1ZGUgPGxpbnV4L3dyaXRlYmFjay5oPgkJ
LyogZm9yIHRoZSBlbWVyZ2VuY3kgcmVtb3VudCBzdHVmZiAqLw0KICNpbmNsdWRlIDxsaW51eC9p
ZHIuaD4NCiAjaW5jbHVkZSA8YXNtL3VhY2Nlc3MuaD4NCisjaW5jbHVkZSA8bGludXgvaW5vdGlm
eS5oPg0KIA0KIA0KIHZvaWQgZ2V0X2ZpbGVzeXN0ZW0oc3RydWN0IGZpbGVfc3lzdGVtX3R5cGUg
KmZzKTsNCkBAIC0yMDQsNiArMjA1LDcgQEANCiANCiAJaWYgKHJvb3QpIHsNCiAJCXNiLT5zX3Jv
b3QgPSBOVUxMOw0KKwkJaW5vdGlmeV9zdXBlcl9ibG9ja191bW91bnQgKHNiKTsNCiAJCXNocmlu
a19kY2FjaGVfcGFyZW50KHJvb3QpOw0KIAkJc2hyaW5rX2RjYWNoZV9hbm9uKCZzYi0+c19hbm9u
KTsNCiAJCWRwdXQocm9vdCk7DQpkaWZmIC11ck4gbGludXgtMi42LjguMS9pbmNsdWRlL2xpbnV4
L2ZzLmggLi4vbGludXgvaW5jbHVkZS9saW51eC9mcy5oDQotLS0gbGludXgtMi42LjguMS9pbmNs
dWRlL2xpbnV4L2ZzLmgJMjAwNC0wOC0xNCAwNjo1NTowOS4wMDAwMDAwMDAgLTA0MDANCisrKyAu
Li9saW51eC9pbmNsdWRlL2xpbnV4L2ZzLmgJMjAwNC0wOC0xOSAwMDoxMTo1Mi4wMDAwMDAwMDAg
LTA0MDANCkBAIC00NTgsNiArNDU4LDEwIEBADQogCXVuc2lnbmVkIGxvbmcJCWlfZG5vdGlmeV9t
YXNrOyAvKiBEaXJlY3Rvcnkgbm90aWZ5IGV2ZW50cyAqLw0KIAlzdHJ1Y3QgZG5vdGlmeV9zdHJ1
Y3QJKmlfZG5vdGlmeTsgLyogZm9yIGRpcmVjdG9yeSBub3RpZmljYXRpb25zICovDQogDQorCXN0
cnVjdCBsaXN0X2hlYWQJd2F0Y2hlcnM7DQorCXVuc2lnbmVkIGxvbmcJCXdhdGNoZXJzX21hc2s7
DQorCWludAkJCXdhdGNoZXJfY291bnQ7DQorDQogCXVuc2lnbmVkIGxvbmcJCWlfc3RhdGU7DQog
CXVuc2lnbmVkIGxvbmcJCWRpcnRpZWRfd2hlbjsJLyogamlmZmllcyBvZiBmaXJzdCBkaXJ0eWlu
ZyAqLw0KIA0KZGlmZiAtdXJOIGxpbnV4LTIuNi44LjEvaW5jbHVkZS9saW51eC9pbm90aWZ5Lmgg
Li4vbGludXgvaW5jbHVkZS9saW51eC9pbm90aWZ5LmgNCi0tLSBsaW51eC0yLjYuOC4xL2luY2x1
ZGUvbGludXgvaW5vdGlmeS5oCTE5NjktMTItMzEgMTk6MDA6MDAuMDAwMDAwMDAwIC0wNTAwDQor
KysgLi4vbGludXgvaW5jbHVkZS9saW51eC9pbm90aWZ5LmgJMjAwNC0wOC0xOSAwMDoxMTo1Mi4w
MDAwMDAwMDAgLTA0MDANCkBAIC0wLDAgKzEsNzQgQEANCisvKg0KKyAqIElub2RlIGJhc2VkIGRp
cmVjdG9yeSBub3RpZmljYXRpb24gZm9yIExpbnV4DQorICoNCisgKiBDb3B5cmlnaHQgKEMpIDIw
MDQgSm9obiBNY0N1dGNoYW4NCisgKg0KKyAqIFNpZ25lZC1vZmYtYnk6IEpvaG4gTWNDdXRjaGFu
IHR0YkB0ZW50YWNsZS5kaHMub3JnDQorICovDQorDQorI2lmbmRlZiBfTElOVVhfSU5PVElGWV9I
DQorI2RlZmluZSBfTElOVVhfSU5PVElGWV9IDQorDQorc3RydWN0IGlub2RlOw0KK3N0cnVjdCBk
ZW50cnk7DQorc3RydWN0IHN1cGVyX2Jsb2NrOw0KKw0KK3N0cnVjdCBpbm90aWZ5X2V2ZW50IHsN
CisJaW50IHdkOw0KKwlpbnQgbWFzazsNCisJY2hhciBmaWxlbmFtZVsyNTZdOw0KKwkvKiBXaGVu
IHlvdSBhcmUgd2F0Y2hpbmcgYSBkaXJlY3RvcnkgeW91IHdpbGwgZ2V0IHRoZSBmaWxlbmFtZXMN
CisJICogZm9yIGV2ZW50cyBsaWtlIElOX0NSRUFURSwgSU5fREVMRVRFLCBJTl9PUEVOLCBJTl9D
TE9TRSwgZXRjLi4gDQorCSAqLw0KK307DQorLyogV2hlbiByZWFkaW5nIGZyb20gdGhlIGRldmlj
ZSB5b3UgbXVzdCBwcm92aWRlIGEgYnVmZmVyIA0KKyAqIHRoYXQgaXMgYSBtdWx0aXBsZSBvZiB0
aGUgc2l6ZW9mKGlub3RpZnlfZXZlbnQpDQorICovDQorDQorI2RlZmluZSBJTl9BQ0NFU1MJMHgw
MDAwMDAwMQkvKiBGaWxlIHdhcyBhY2Nlc3NlZCAqLw0KKyNkZWZpbmUgSU5fTU9ESUZZCTB4MDAw
MDAwMDIJLyogRmlsZSB3YXMgbW9kaWZpZWQgKi8NCisjZGVmaW5lIElOX0NSRUFURQkweDAwMDAw
MDA0CS8qIEZpbGUgd2FzIGNyZWF0ZWQgKi8NCisjZGVmaW5lIElOX0RFTEVURQkweDAwMDAwMDA4
CS8qIEZpbGUgd2FzIGRlbGV0ZWQgKi8NCisjZGVmaW5lIElOX1JFTkFNRQkweDAwMDAwMDEwCS8q
IEZpbGUgd2FzIHJlbmFtZWQgKi8NCisjZGVmaW5lIElOX0FUVFJJQgkweDAwMDAwMDIwCS8qIEZp
bGUgY2hhbmdlZCBhdHRyaWJ1dGVzICovDQorI2RlZmluZSBJTl9NT1ZFCQkweDAwMDAwMDQwCS8q
IEZpbGUgd2FzIG1vdmVkICovDQorI2RlZmluZSBJTl9VTk1PVU5UCTB4MDAwMDAwODAJLyogRGV2
aWNlIGZpbGUgd2FzIG9uLCB3YXMgdW5tb3VudGVkICovDQorI2RlZmluZSBJTl9DTE9TRQkweDAw
MDAwMTAwCS8qIEZpbGUgd2FzIGNsb3NlZCAqLw0KKyNkZWZpbmUgSU5fT1BFTgkJMHgwMDAwMDIw
MAkvKiBGaWxlIHdhcyBvcGVuZWQgKi8NCisjZGVmaW5lIElOX0lHTk9SRUQJMHgwMDAwMDQwMAkv
KiBGaWxlIHdhcyBpZ25vcmVkICovDQorI2RlZmluZSBJTl9BTExfRVZFTlRTCTB4ZmZmZmZmZmYJ
LyogQWxsIHRoZSBldmVudHMgKi8NCisNCisvKiBpb2N0bCAqLw0KKw0KKy8qIEZpbGwgdGhpcyBh
bmQgcGFzcyBpdCB0byBJTk9USUZZX1dBVENIIGlvY3RsICovDQorc3RydWN0IGlub3RpZnlfd2F0
Y2hfcmVxdWVzdCB7DQorCWNoYXIgKmRpcm5hbWU7IC8vIGRpcmVjdG9yeSBuYW1lDQorCXVuc2ln
bmVkIGxvbmcgbWFzazsgLy8gZXZlbnQgbWFzaw0KK307DQorDQorI2RlZmluZSBJTk9USUZZX0lP
Q1RMX01BR0lDICdRJw0KKyNkZWZpbmUgSU5PVElGWV9JT0NUTF9NQVhOUiA0DQorDQorI2RlZmlu
ZSBJTk9USUZZX1dBVENIICAJCV9JT1IoSU5PVElGWV9JT0NUTF9NQUdJQywgMSwgc3RydWN0IGlu
b3RpZnlfd2F0Y2hfcmVxdWVzdCkNCisjZGVmaW5lIElOT1RJRllfSUdOT1JFIAkJX0lPUihJTk9U
SUZZX0lPQ1RMX01BR0lDLCAyLCBpbnQpDQorI2RlZmluZSBJTk9USUZZX1NUQVRTCQlfSU9SKElO
T1RJRllfSU9DVExfTUFHSUMsIDMsIGludCkNCisjZGVmaW5lIElOT1RJRllfU0VUREVCVUcJX0lP
UihJTk9USUZZX0lPQ1RMX01BR0lDLCA0LCBpbnQpDQorDQorI2RlZmluZSBJTk9USUZZX0RFQlVH
X05PTkUgICAweDAwMDAwMDAwDQorI2RlZmluZSBJTk9USUZZX0RFQlVHX0FMTE9DICAweDAwMDAw
MDAxDQorI2RlZmluZSBJTk9USUZZX0RFQlVHX0VWRU5UUyAweDAwMDAwMDAyDQorI2RlZmluZSBJ
Tk9USUZZX0RFQlVHX0lOT0RFICAweDAwMDAwMDA0DQorI2RlZmluZSBJTk9USUZZX0RFQlVHX0VS
Uk9SUyAweDAwMDAwMDA4DQorI2RlZmluZSBJTk9USUZZX0RFQlVHX0ZJTEVOICAweDAwMDAwMDEw
DQorI2RlZmluZSBJTk9USUZZX0RFQlVHX0FMTCAgICAweGZmZmZmZmZmDQorDQorLyogS2VybmVs
IEFQSSAqLw0KKy8qIEFkZHMgZXZlbnRzIHRvIGFsbCB3YXRjaGVycyBvbiBpbm9kZSB0aGF0IGFy
ZSBpbnRlcmVzdGVkIGluIG1hc2sgKi8NCit2b2lkIGlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQg
KHN0cnVjdCBpbm9kZSAqaW5vZGUsIHVuc2lnbmVkIGxvbmcgbWFzaywgY29uc3QgY2hhciAqZmls
ZW5hbWUpOw0KKy8qIFNhbWUgYXMgYWJvdmUgYnV0IHVzZXMgZGVudHJ5J3MgaW5vZGUgKi8NCit2
b2lkIGlub3RpZnlfZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudCAoc3RydWN0IGRlbnRyeSAqZGVu
dHJ5LCB1bnNpZ25lZCBsb25nIG1hc2ssIGNvbnN0IGNoYXIgKmZpbGVuYW1lKTsNCisvKiBUaGlz
IHdpbGwgcmVtb3ZlIGFsbCB3YXRjaGVycyBmcm9tIGFsbCBpbm9kZXMgb24gdGhlIHN1cGVyYmxv
Y2sgKi8NCit2b2lkIGlub3RpZnlfc3VwZXJfYmxvY2tfdW1vdW50IChzdHJ1Y3Qgc3VwZXJfYmxv
Y2sgKnNiKTsNCisNCisjZW5kaWYNCisNCn==

--=-btTdkVmP474O7nbVHJk3--
