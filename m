Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261906AbVBDOJG@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261906AbVBDOJG (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 4 Feb 2005 09:09:06 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S266409AbVBDOI7
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 4 Feb 2005 09:08:59 -0500
Received: from websrv2.werbeagentur-aufwind.de ([213.239.197.240]:59554 "EHLO
	websrv2.werbeagentur-aufwind.de") by vger.kernel.org with ESMTP
	id S266334AbVBDODm (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 4 Feb 2005 09:03:42 -0500
Subject: Re: [dm-crypt] Re: dm-crypt crypt_status reports key?
From: Christophe Saout <christophe@saout.de>
To: dm-crypt@saout.de
Cc: linux-kernel <linux-kernel@vger.kernel.org>,
       Clemens Fruhwirth <clemens@endorphin.org>,
       Alasdair G Kergon <agk@redhat.com>
In-Reply-To: <20050203040542.GQ2493@waste.org>
References: <20050202211916.GJ2493@waste.org>
	 <1107394381.10497.16.camel@server.cs.pocnet.net>
	 <20050203015236.GO2493@waste.org>
	 <1107398069.11826.16.camel@server.cs.pocnet.net>
	 <20050203040542.GQ2493@waste.org>
Content-Type: multipart/signed; micalg=pgp-sha1; protocol="application/pgp-signature"; boundary="=-AlzowkfodPzYa4vo1yUX"
Date: Fri, 04 Feb 2005 15:03:17 +0100
Message-Id: <1107525797.12265.66.camel@leto.cs.pocnet.net>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.3 
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


--=-AlzowkfodPzYa4vo1yUX
Content-Type: multipart/mixed; boundary="=-4UgPdHF7cmHnpgI/ICyR"


--=-4UgPdHF7cmHnpgI/ICyR
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

Am Mittwoch, den 02.02.2005, 20:05 -0800 schrieb Matt Mackall:

> Dunno here, seems that having one tool that gave the kernel a key named
> "foo" and then telling dm-crypt to use key "foo" is probably not a bad
> way to go. Then we don't have stuff like "echo <key> | dmsetup create"
> and the like and the key-handling smarts can all be put in one
> separate place.
>=20
> Getting from here to there might be interesting though. Perhaps we can
> teach dm-crypt to understand keys of the form "keyname:<foo>"? in
> addition to raw keys to keep compatibility. Might even be possible to
> push this down into crypt_decode_key() (or a smarter variant of same).

I've hacked together a working implementation. It's just a prototype
though. The patch requires that the key retention service is activated
unconditionally. It would probably be better to introduce #ifdefs and
the possibility turn of the cleartext key way in the kernel
configuration.

I've separated out the crypto configuration from the device-mapper
configuration. Several device mappings can now share/reference the same
key. This might be useful if you want to span your mapping over several
devices (without stacking device mappings on top of each other). So
basically the crypto and the device-mapper part of the configuration are
in its own "classes" now. It makes even more sense now to rename IV
operations to crypto/key operations (which only work on the new
structure) like it's done in the LRW patch.

This crypto configuration that I separated out can be referenced by the
device-mapper target directly (old way) or indirectly by the new key
retention service. It holds the cipher, chaining mode and IV mechanisms
as well as the key itself.

A dm table configuration line then looks like "0 1000000 crypt key
my_key_name 0 /dev/bla 0".

And dm-crypt.c is slowly getting large. Thirty functions already. Hmm.


--=-4UgPdHF7cmHnpgI/ICyR
Content-Description: 
Content-Disposition: inline; filename=dm-crypt-key-retention-v1.diff
Content-Type: text/x-patch; charset=UTF-8
Content-Transfer-Encoding: base64

LS0tIGxpbnV4LTIuNi4xMS1yYzMub3JpZy9kcml2ZXJzL21kL2RtLWNyeXB0LmMJMjAwNS0wMi0w
NCAwMTowMDo1MS45ODM5MTA3NTIgKzAxMDANCisrKyBsaW51eC0yLjYuMTEtcmMzL2RyaXZlcnMv
bWQvZG0tY3J5cHQuYwkyMDA1LTAyLTA0IDE0OjMwOjQ3LjYyOTExNzg1NiArMDEwMA0KQEAgLTEz
LDYgKzEzLDcgQEANCiAjaW5jbHVkZSA8bGludXgvbWVtcG9vbC5oPg0KICNpbmNsdWRlIDxsaW51
eC9zbGFiLmg+DQogI2luY2x1ZGUgPGxpbnV4L2NyeXB0by5oPg0KKyNpbmNsdWRlIDxsaW51eC9r
ZXkuaD4NCiAjaW5jbHVkZSA8bGludXgvd29ya3F1ZXVlLmg+DQogI2luY2x1ZGUgPGFzbS9hdG9t
aWMuaD4NCiAjaW5jbHVkZSA8YXNtL3NjYXR0ZXJsaXN0Lmg+DQpAQCAtNDgsMTQgKzQ5LDI1IEBA
DQogCWludCB3cml0ZTsNCiB9Ow0KIA0KLXN0cnVjdCBjcnlwdF9jb25maWc7DQorLyoNCisgKiBr
ZXkgYW5kIGFzc29jaWF0ZWQgY3J5cHRvIGluZm9ybWF0aW9uDQorICovDQorc3RydWN0IGNyeXB0
X2tleSB7DQorCXN0cnVjdCBjcnlwdF9pdl9vcGVyYXRpb25zICppdl9nZW5fb3BzOw0KKwljaGFy
ICppdl9tb2RlOw0KKwl2b2lkICppdl9nZW5fcHJpdmF0ZTsNCisJdW5zaWduZWQgaW50IGl2X3Np
emU7DQorDQorCXN0cnVjdCBjcnlwdG9fdGZtICp0Zm07DQorCXVuc2lnbmVkIGludCBrZXlfc2l6
ZTsNCisJdTgga2V5WzBdOw0KK307DQogDQogc3RydWN0IGNyeXB0X2l2X29wZXJhdGlvbnMgew0K
LQlpbnQgKCpjdHIpKHN0cnVjdCBjcnlwdF9jb25maWcgKmNjLCBzdHJ1Y3QgZG1fdGFyZ2V0ICp0
aSwNCi0JICAgICAgICAgICBjb25zdCBjaGFyICpvcHRzKTsNCi0Jdm9pZCAoKmR0cikoc3RydWN0
IGNyeXB0X2NvbmZpZyAqY2MpOw0KLQljb25zdCBjaGFyICooKnN0YXR1cykoc3RydWN0IGNyeXB0
X2NvbmZpZyAqY2MpOw0KLQlpbnQgKCpnZW5lcmF0b3IpKHN0cnVjdCBjcnlwdF9jb25maWcgKmNj
LCB1OCAqaXYsIHNlY3Rvcl90IHNlY3Rvcik7DQorCWludCAoKmN0cikoc3RydWN0IGNyeXB0X2tl
eSAqY2ssIGNvbnN0IGNoYXIgKm9wdHMsIGNoYXIgKiplcnJvcl9tc2cpOw0KKwl2b2lkICgqZHRy
KShzdHJ1Y3QgY3J5cHRfa2V5ICpjayk7DQorCWNvbnN0IGNoYXIgKigqc3RhdHVzKShzdHJ1Y3Qg
Y3J5cHRfa2V5ICpjayk7DQorCWludCAoKmdlbmVyYXRvcikoc3RydWN0IGNyeXB0X2tleSAqY2ss
IHU4ICppdiwgc2VjdG9yX3Qgc2VjdG9yKTsNCiB9Ow0KIA0KIC8qDQpAQCAtNzMsMTggKzg1LDkg
QEANCiAJbWVtcG9vbF90ICppb19wb29sOw0KIAltZW1wb29sX3QgKnBhZ2VfcG9vbDsNCiANCi0J
LyoNCi0JICogY3J5cHRvIHJlbGF0ZWQgZGF0YQ0KLQkgKi8NCi0Jc3RydWN0IGNyeXB0X2l2X29w
ZXJhdGlvbnMgKml2X2dlbl9vcHM7DQotCWNoYXIgKml2X21vZGU7DQotCXZvaWQgKml2X2dlbl9w
cml2YXRlOw0KIAlzZWN0b3JfdCBpdl9vZmZzZXQ7DQotCXVuc2lnbmVkIGludCBpdl9zaXplOw0K
LQ0KLQlzdHJ1Y3QgY3J5cHRvX3RmbSAqdGZtOw0KLQl1bnNpZ25lZCBpbnQga2V5X3NpemU7DQot
CXU4IGtleVswXTsNCisJc3RydWN0IGNyeXB0X2tleSAqY3J5cHRvOw0KKwlzdHJ1Y3Qga2V5ICpr
ZXk7DQogfTsNCiANCiAjZGVmaW5lIE1JTl9JT1MgICAgICAgIDI1Ng0KQEAgLTEyMSwxNiArMTI0
LDE2IEBADQogICogaHR0cDovL2FydGljbGUuZ21hbmUub3JnL2dtYW5lLmxpbnV4Lmtlcm5lbC5k
ZXZpY2UtbWFwcGVyLmRtLWNyeXB0LzQ1NA0KICAqLw0KIA0KLXN0YXRpYyBpbnQgY3J5cHRfaXZf
cGxhaW5fZ2VuKHN0cnVjdCBjcnlwdF9jb25maWcgKmNjLCB1OCAqaXYsIHNlY3Rvcl90IHNlY3Rv
cikNCitzdGF0aWMgaW50IGNyeXB0X2l2X3BsYWluX2dlbihzdHJ1Y3QgY3J5cHRfa2V5ICpjaywg
dTggKml2LCBzZWN0b3JfdCBzZWN0b3IpDQogew0KLQltZW1zZXQoaXYsIDAsIGNjLT5pdl9zaXpl
KTsNCisJbWVtc2V0KGl2LCAwLCBjay0+aXZfc2l6ZSk7DQogCSoodTMyICopaXYgPSBjcHVfdG9f
bGUzMihzZWN0b3IgJiAweGZmZmZmZmZmKTsNCiANCiAJcmV0dXJuIDA7DQogfQ0KIA0KLXN0YXRp
YyBpbnQgY3J5cHRfaXZfZXNzaXZfY3RyKHN0cnVjdCBjcnlwdF9jb25maWcgKmNjLCBzdHJ1Y3Qg
ZG1fdGFyZ2V0ICp0aSwNCi0JICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgKm9wdHMp
DQorc3RhdGljIGludCBjcnlwdF9pdl9lc3Npdl9jdHIoc3RydWN0IGNyeXB0X2tleSAqY2ssIGNv
bnN0IGNoYXIgKm9wdHMsDQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhciAqKmVy
cm9yX21zZykNCiB7DQogCXN0cnVjdCBjcnlwdG9fdGZtICplc3Npdl90Zm07DQogCXN0cnVjdCBj
cnlwdG9fdGZtICpoYXNoX3RmbTsNCkBAIC0xMzksMTkgKzE0MiwxOSBAQA0KIAl1OCAqc2FsdDsN
CiANCiAJaWYgKG9wdHMgPT0gTlVMTCkgew0KLQkJdGktPmVycm9yID0gUEZYICJEaWdlc3QgYWxn
b3JpdGhtIG1pc3NpbmcgZm9yIEVTU0lWIG1vZGUiOw0KKwkJKmVycm9yX21zZyA9IFBGWCAiRGln
ZXN0IGFsZ29yaXRobSBtaXNzaW5nIGZvciBFU1NJViBtb2RlIjsNCiAJCXJldHVybiAtRUlOVkFM
Ow0KIAl9DQogDQogCS8qIEhhc2ggdGhlIGNpcGhlciBrZXkgd2l0aCB0aGUgZ2l2ZW4gaGFzaCBh
bGdvcml0aG0gKi8NCiAJaGFzaF90Zm0gPSBjcnlwdG9fYWxsb2NfdGZtKG9wdHMsIDApOw0KIAlp
ZiAoaGFzaF90Zm0gPT0gTlVMTCkgew0KLQkJdGktPmVycm9yID0gUEZYICJFcnJvciBpbml0aWFs
aXppbmcgRVNTSVYgaGFzaCI7DQorCQkqZXJyb3JfbXNnID0gUEZYICJFcnJvciBpbml0aWFsaXpp
bmcgRVNTSVYgaGFzaCI7DQogCQlyZXR1cm4gLUVJTlZBTDsNCiAJfQ0KIA0KIAlpZiAoY3J5cHRv
X3RmbV9hbGdfdHlwZShoYXNoX3RmbSkgIT0gQ1JZUFRPX0FMR19UWVBFX0RJR0VTVCkgew0KLQkJ
dGktPmVycm9yID0gUEZYICJFeHBlY3RlZCBkaWdlc3QgYWxnb3JpdGhtIGZvciBFU1NJViBoYXNo
IjsNCisJCSplcnJvcl9tc2cgPSBQRlggIkV4cGVjdGVkIGRpZ2VzdCBhbGdvcml0aG0gZm9yIEVT
U0lWIGhhc2giOw0KIAkJY3J5cHRvX2ZyZWVfdGZtKGhhc2hfdGZtKTsNCiAJCXJldHVybiAtRUlO
VkFMOw0KIAl9DQpAQCAtMTU5LDYzICsxNjIsNjMgQEANCiAJc2FsdHNpemUgPSBjcnlwdG9fdGZt
X2FsZ19kaWdlc3RzaXplKGhhc2hfdGZtKTsNCiAJc2FsdCA9IGttYWxsb2Moc2FsdHNpemUsIEdG
UF9LRVJORUwpOw0KIAlpZiAoc2FsdCA9PSBOVUxMKSB7DQotCQl0aS0+ZXJyb3IgPSBQRlggIkVy
cm9yIGttYWxsb2Npbmcgc2FsdCBzdG9yYWdlIGluIEVTU0lWIjsNCisJCSplcnJvcl9tc2cgPSBQ
RlggIkVycm9yIGttYWxsb2Npbmcgc2FsdCBzdG9yYWdlIGluIEVTU0lWIjsNCiAJCWNyeXB0b19m
cmVlX3RmbShoYXNoX3RmbSk7DQogCQlyZXR1cm4gLUVOT01FTTsNCiAJfQ0KIA0KLQlzZy5wYWdl
ID0gdmlydF90b19wYWdlKGNjLT5rZXkpOw0KLQlzZy5vZmZzZXQgPSBvZmZzZXRfaW5fcGFnZShj
Yy0+a2V5KTsNCi0Jc2cubGVuZ3RoID0gY2MtPmtleV9zaXplOw0KKwlzZy5wYWdlID0gdmlydF90
b19wYWdlKGNrLT5rZXkpOw0KKwlzZy5vZmZzZXQgPSBvZmZzZXRfaW5fcGFnZShjay0+a2V5KTsN
CisJc2cubGVuZ3RoID0gY2stPmtleV9zaXplOw0KIAljcnlwdG9fZGlnZXN0X2RpZ2VzdChoYXNo
X3RmbSwgJnNnLCAxLCBzYWx0KTsNCiAJY3J5cHRvX2ZyZWVfdGZtKGhhc2hfdGZtKTsNCiANCiAJ
LyogU2V0dXAgdGhlIGVzc2l2X3RmbSB3aXRoIHRoZSBnaXZlbiBzYWx0ICovDQotCWVzc2l2X3Rm
bSA9IGNyeXB0b19hbGxvY190Zm0oY3J5cHRvX3RmbV9hbGdfbmFtZShjYy0+dGZtKSwNCisJZXNz
aXZfdGZtID0gY3J5cHRvX2FsbG9jX3RmbShjcnlwdG9fdGZtX2FsZ19uYW1lKGNrLT50Zm0pLA0K
IAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSWVBUT19URk1fTU9ERV9FQ0IpOw0KIAlp
ZiAoZXNzaXZfdGZtID09IE5VTEwpIHsNCi0JCXRpLT5lcnJvciA9IFBGWCAiRXJyb3IgYWxsb2Nh
dGluZyBjcnlwdG8gdGZtIGZvciBFU1NJViI7DQorCQkqZXJyb3JfbXNnID0gUEZYICJFcnJvciBh
bGxvY2F0aW5nIGNyeXB0byB0Zm0gZm9yIEVTU0lWIjsNCiAJCWtmcmVlKHNhbHQpOw0KIAkJcmV0
dXJuIC1FSU5WQUw7DQogCX0NCiAJaWYgKGNyeXB0b190Zm1fYWxnX2Jsb2Nrc2l6ZShlc3Npdl90
Zm0pDQotCSAgICAhPSBjcnlwdG9fdGZtX2FsZ19pdnNpemUoY2MtPnRmbSkpIHsNCi0JCXRpLT5l
cnJvciA9IFBGWCAiQmxvY2sgc2l6ZSBvZiBFU1NJViBjaXBoZXIgZG9lcyAiDQorCSAgICAhPSBj
cnlwdG9fdGZtX2FsZ19pdnNpemUoY2stPnRmbSkpIHsNCisJCSplcnJvcl9tc2cgPSBQRlggIkJs
b2NrIHNpemUgb2YgRVNTSVYgY2lwaGVyIGRvZXMgIg0KIAkJCSAgICAgICAgIm5vdCBtYXRjaCBJ
ViBzaXplIG9mIGJsb2NrIGNpcGhlciI7DQogCQljcnlwdG9fZnJlZV90Zm0oZXNzaXZfdGZtKTsN
CiAJCWtmcmVlKHNhbHQpOw0KIAkJcmV0dXJuIC1FSU5WQUw7DQogCX0NCiAJaWYgKGNyeXB0b19j
aXBoZXJfc2V0a2V5KGVzc2l2X3RmbSwgc2FsdCwgc2FsdHNpemUpIDwgMCkgew0KLQkJdGktPmVy
cm9yID0gUEZYICJGYWlsZWQgdG8gc2V0IGtleSBmb3IgRVNTSVYgY2lwaGVyIjsNCisJCSplcnJv
cl9tc2cgPSBQRlggIkZhaWxlZCB0byBzZXQga2V5IGZvciBFU1NJViBjaXBoZXIiOw0KIAkJY3J5
cHRvX2ZyZWVfdGZtKGVzc2l2X3RmbSk7DQogCQlrZnJlZShzYWx0KTsNCiAJCXJldHVybiAtRUlO
VkFMOw0KIAl9DQogCWtmcmVlKHNhbHQpOw0KIA0KLQljYy0+aXZfZ2VuX3ByaXZhdGUgPSAodm9p
ZCAqKWVzc2l2X3RmbTsNCisJY2stPml2X2dlbl9wcml2YXRlID0gKHZvaWQgKillc3Npdl90Zm07
DQogCXJldHVybiAwOw0KIH0NCiANCi1zdGF0aWMgdm9pZCBjcnlwdF9pdl9lc3Npdl9kdHIoc3Ry
dWN0IGNyeXB0X2NvbmZpZyAqY2MpDQorc3RhdGljIHZvaWQgY3J5cHRfaXZfZXNzaXZfZHRyKHN0
cnVjdCBjcnlwdF9rZXkgKmNrKQ0KIHsNCi0JY3J5cHRvX2ZyZWVfdGZtKChzdHJ1Y3QgY3J5cHRv
X3RmbSAqKWNjLT5pdl9nZW5fcHJpdmF0ZSk7DQotCWNjLT5pdl9nZW5fcHJpdmF0ZSA9IE5VTEw7
DQorCWNyeXB0b19mcmVlX3RmbSgoc3RydWN0IGNyeXB0b190Zm0gKiljay0+aXZfZ2VuX3ByaXZh
dGUpOw0KKwljay0+aXZfZ2VuX3ByaXZhdGUgPSBOVUxMOw0KIH0NCiANCi1zdGF0aWMgaW50IGNy
eXB0X2l2X2Vzc2l2X2dlbihzdHJ1Y3QgY3J5cHRfY29uZmlnICpjYywgdTggKml2LCBzZWN0b3Jf
dCBzZWN0b3IpDQorc3RhdGljIGludCBjcnlwdF9pdl9lc3Npdl9nZW4oc3RydWN0IGNyeXB0X2tl
eSAqY2ssIHU4ICppdiwgc2VjdG9yX3Qgc2VjdG9yKQ0KIHsNCiAJc3RydWN0IHNjYXR0ZXJsaXN0
IHNnID0geyBOVUxMLCB9Ow0KIA0KLQltZW1zZXQoaXYsIDAsIGNjLT5pdl9zaXplKTsNCisJbWVt
c2V0KGl2LCAwLCBjay0+aXZfc2l6ZSk7DQogCSoodTY0ICopaXYgPSBjcHVfdG9fbGU2NChzZWN0
b3IpOw0KIA0KIAlzZy5wYWdlID0gdmlydF90b19wYWdlKGl2KTsNCiAJc2cub2Zmc2V0ID0gb2Zm
c2V0X2luX3BhZ2UoaXYpOw0KLQlzZy5sZW5ndGggPSBjYy0+aXZfc2l6ZTsNCi0JY3J5cHRvX2Np
cGhlcl9lbmNyeXB0KChzdHJ1Y3QgY3J5cHRvX3RmbSAqKWNjLT5pdl9nZW5fcHJpdmF0ZSwNCi0J
ICAgICAgICAgICAgICAgICAgICAgICZzZywgJnNnLCBjYy0+aXZfc2l6ZSk7DQorCXNnLmxlbmd0
aCA9IGNrLT5pdl9zaXplOw0KKwljcnlwdG9fY2lwaGVyX2VuY3J5cHQoKHN0cnVjdCBjcnlwdG9f
dGZtICopY2stPml2X2dlbl9wcml2YXRlLA0KKwkgICAgICAgICAgICAgICAgICAgICAgJnNnLCAm
c2csIGNrLT5pdl9zaXplKTsNCiANCiAJcmV0dXJuIDA7DQogfQ0KQEAgLTIzNiwyMyArMjM5LDI0
IEBADQogICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3Qgc2NhdHRlcmxpc3QgKmluLCB1
bnNpZ25lZCBpbnQgbGVuZ3RoLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IHdyaXRl
LCBzZWN0b3JfdCBzZWN0b3IpDQogew0KLQl1OCBpdltjYy0+aXZfc2l6ZV07DQorCXN0cnVjdCBj
cnlwdF9rZXkgKmNrID0gY2MtPmNyeXB0bzsNCisJdTggaXZbY2stPml2X3NpemVdOw0KIAlpbnQg
cjsNCiANCi0JaWYgKGNjLT5pdl9nZW5fb3BzKSB7DQotCQlyID0gY2MtPml2X2dlbl9vcHMtPmdl
bmVyYXRvcihjYywgaXYsIHNlY3Rvcik7DQorCWlmIChjay0+aXZfZ2VuX29wcykgew0KKwkJciA9
IGNrLT5pdl9nZW5fb3BzLT5nZW5lcmF0b3IoY2ssIGl2LCBzZWN0b3IpOw0KIAkJaWYgKHIgPCAw
KQ0KIAkJCXJldHVybiByOw0KIA0KIAkJaWYgKHdyaXRlKQ0KLQkJCXIgPSBjcnlwdG9fY2lwaGVy
X2VuY3J5cHRfaXYoY2MtPnRmbSwgb3V0LCBpbiwgbGVuZ3RoLCBpdik7DQorCQkJciA9IGNyeXB0
b19jaXBoZXJfZW5jcnlwdF9pdihjay0+dGZtLCBvdXQsIGluLCBsZW5ndGgsIGl2KTsNCiAJCWVs
c2UNCi0JCQlyID0gY3J5cHRvX2NpcGhlcl9kZWNyeXB0X2l2KGNjLT50Zm0sIG91dCwgaW4sIGxl
bmd0aCwgaXYpOw0KKwkJCXIgPSBjcnlwdG9fY2lwaGVyX2RlY3J5cHRfaXYoY2stPnRmbSwgb3V0
LCBpbiwgbGVuZ3RoLCBpdik7DQogCX0gZWxzZSB7DQogCQlpZiAod3JpdGUpDQotCQkJciA9IGNy
eXB0b19jaXBoZXJfZW5jcnlwdChjYy0+dGZtLCBvdXQsIGluLCBsZW5ndGgpOw0KKwkJCXIgPSBj
cnlwdG9fY2lwaGVyX2VuY3J5cHQoY2stPnRmbSwgb3V0LCBpbiwgbGVuZ3RoKTsNCiAJCWVsc2UN
Ci0JCQlyID0gY3J5cHRvX2NpcGhlcl9kZWNyeXB0KGNjLT50Zm0sIG91dCwgaW4sIGxlbmd0aCk7
DQorCQkJciA9IGNyeXB0b19jaXBoZXJfZGVjcnlwdChjay0+dGZtLCBvdXQsIGluLCBsZW5ndGgp
Ow0KIAl9DQogDQogCXJldHVybiByOw0KQEAgLTUyOSw1MiArNTMzLDM0IEBADQogCX0NCiB9DQog
DQotLyoNCi0gKiBDb25zdHJ1Y3QgYW4gZW5jcnlwdGlvbiBtYXBwaW5nOg0KLSAqIDxjaXBoZXI+
IDxrZXk+IDxpdl9vZmZzZXQ+IDxkZXZfcGF0aD4gPHN0YXJ0Pg0KLSAqLw0KLXN0YXRpYyBpbnQg
Y3J5cHRfY3RyKHN0cnVjdCBkbV90YXJnZXQgKnRpLCB1bnNpZ25lZCBpbnQgYXJnYywgY2hhciAq
KmFyZ3YpDQorc3RhdGljIGludCBjcnlwdF9rZXlfY3RyKHN0cnVjdCBjcnlwdF9rZXkgKipyZXR2
YWwsIGNoYXIgKmNyeXB0bywNCisgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdTggKmtl
eSwgdW5zaWduZWQgaW50IGtleV9zaXplLA0KKyAgICAgICAgICAgICAgICAgICAgICAgICBjaGFy
ICoqZXJyb3JfbXNnKQ0KIHsNCi0Jc3RydWN0IGNyeXB0X2NvbmZpZyAqY2M7DQorCXVuc2lnbmVk
IGludCBjcnlwdG9fZmxhZ3M7DQogCXN0cnVjdCBjcnlwdG9fdGZtICp0Zm07DQotCWNoYXIgKnRt
cDsNCisJc3RydWN0IGNyeXB0X2tleSAqY2s7DQogCWNoYXIgKmNpcGhlcjsNCiAJY2hhciAqY2hh
aW5tb2RlOw0KIAljaGFyICppdm1vZGU7DQogCWNoYXIgKml2b3B0czsNCi0JdW5zaWduZWQgaW50
IGNyeXB0b19mbGFnczsNCi0JdW5zaWduZWQgaW50IGtleV9zaXplOw0KIA0KLQlpZiAoYXJnYyAh
PSA1KSB7DQotCQl0aS0+ZXJyb3IgPSBQRlggIk5vdCBlbm91Z2ggYXJndW1lbnRzIjsNCi0JCXJl
dHVybiAtRUlOVkFMOw0KKwljayA9IGttYWxsb2Moc2l6ZW9mKCpjaykgKyBrZXlfc2l6ZSAqIHNp
emVvZih1OCksIEdGUF9LRVJORUwpOw0KKwlpZiAoY2sgPT0gTlVMTCkgew0KKwkJKmVycm9yX21z
ZyA9IFBGWCAiT3V0IG9mIG1lbW9yeSBhbGxvY2F0aW5nIGtleSBkYXRhIjsNCisJCXJldHVybiAt
RU5PTUVNOw0KIAl9DQogDQotCXRtcCA9IGFyZ3ZbMF07DQotCWNpcGhlciA9IHN0cnNlcCgmdG1w
LCAiLSIpOw0KLQljaGFpbm1vZGUgPSBzdHJzZXAoJnRtcCwgIi0iKTsNCi0JaXZvcHRzID0gc3Ry
c2VwKCZ0bXAsICItIik7DQorCW1lbWNweShjay0+a2V5LCBrZXksIGtleV9zaXplICogc2l6ZW9m
KHU4KSk7DQorDQorCWNpcGhlciA9IHN0cnNlcCgmY3J5cHRvLCAiLSIpOw0KKwljaGFpbm1vZGUg
PSBzdHJzZXAoJmNyeXB0bywgIi0iKTsNCisJaXZvcHRzID0gc3Ryc2VwKCZjcnlwdG8sICItIik7
DQogCWl2bW9kZSA9IHN0cnNlcCgmaXZvcHRzLCAiOiIpOw0KIA0KLQlpZiAodG1wKQ0KKwlpZiAo
Y3J5cHRvKQ0KIAkJRE1XQVJOKFBGWCAiVW5leHBlY3RlZCBhZGRpdGlvbmFsIGNpcGhlciBvcHRp
b25zIik7DQogDQotCWtleV9zaXplID0gc3RybGVuKGFyZ3ZbMV0pID4+IDE7DQotDQotCWNjID0g
a21hbGxvYyhzaXplb2YoKmNjKSArIGtleV9zaXplICogc2l6ZW9mKHU4KSwgR0ZQX0tFUk5FTCk7
DQotCWlmIChjYyA9PSBOVUxMKSB7DQotCQl0aS0+ZXJyb3IgPQ0KLQkJCVBGWCAiQ2Fubm90IGFs
bG9jYXRlIHRyYW5zcGFyZW50IGVuY3J5cHRpb24gY29udGV4dCI7DQotCQlyZXR1cm4gLUVOT01F
TTsNCi0JfQ0KLQ0KLQljYy0+a2V5X3NpemUgPSBrZXlfc2l6ZTsNCi0JaWYgKCgha2V5X3NpemUg
JiYgc3RyY21wKGFyZ3ZbMV0sICItIikgIT0gMCkgfHwNCi0JICAgIChrZXlfc2l6ZSAmJiBjcnlw
dF9kZWNvZGVfa2V5KGNjLT5rZXksIGFyZ3ZbMV0sIGtleV9zaXplKSA8IDApKSB7DQotCQl0aS0+
ZXJyb3IgPSBQRlggIkVycm9yIGRlY29kaW5nIGtleSI7DQotCQlnb3RvIGJhZDE7DQotCX0NCi0N
CiAJLyogQ29tcGF0aWJsaXR5IG1vZGUgZm9yIG9sZCBkbS1jcnlwdCBjaXBoZXIgc3RyaW5ncyAq
Lw0KIAlpZiAoIWNoYWlubW9kZSB8fCAoc3RyY21wKGNoYWlubW9kZSwgInBsYWluIikgPT0gMCAm
JiAhaXZtb2RlKSkgew0KIAkJY2hhaW5tb2RlID0gImNiYyI7DQpAQCAtNTg3LDEyMyArNTczLDIx
NyBAQA0KIAllbHNlIGlmIChzdHJjbXAoY2hhaW5tb2RlLCAiZWNiIikgPT0gMCkNCiAJCWNyeXB0
b19mbGFncyA9IENSWVBUT19URk1fTU9ERV9FQ0I7DQogCWVsc2Ugew0KLQkJdGktPmVycm9yID0g
UEZYICJVbmtub3duIGNoYWluaW5nIG1vZGUiOw0KKwkJKmVycm9yX21zZyA9IFBGWCAiVW5rbm93
biBjaGFpbmluZyBtb2RlIjsNCiAJCWdvdG8gYmFkMTsNCiAJfQ0KIA0KIAlpZiAoY3J5cHRvX2Zs
YWdzICE9IENSWVBUT19URk1fTU9ERV9FQ0IgJiYgIWl2bW9kZSkgew0KLQkJdGktPmVycm9yID0g
UEZYICJUaGlzIGNoYWluaW5nIG1vZGUgcmVxdWlyZXMgYW4gSVYgbWVjaGFuaXNtIjsNCisJCSpl
cnJvcl9tc2cgPSBQRlggIlRoaXMgY2hhaW5pbmcgbW9kZSByZXF1aXJlcyBhbiBJViBtZWNoYW5p
c20iOw0KIAkJZ290byBiYWQxOw0KIAl9DQogDQogCXRmbSA9IGNyeXB0b19hbGxvY190Zm0oY2lw
aGVyLCBjcnlwdG9fZmxhZ3MpOw0KIAlpZiAoIXRmbSkgew0KLQkJdGktPmVycm9yID0gUEZYICJF
cnJvciBhbGxvY2F0aW5nIGNyeXB0byB0Zm0iOw0KKwkJKmVycm9yX21zZyA9IFBGWCAiRXJyb3Ig
YWxsb2NhdGluZyBjcnlwdG8gdGZtIjsNCiAJCWdvdG8gYmFkMTsNCiAJfQ0KIAlpZiAoY3J5cHRv
X3RmbV9hbGdfdHlwZSh0Zm0pICE9IENSWVBUT19BTEdfVFlQRV9DSVBIRVIpIHsNCi0JCXRpLT5l
cnJvciA9IFBGWCAiRXhwZWN0ZWQgY2lwaGVyIGFsZ29yaXRobSI7DQorCQkqZXJyb3JfbXNnPSBQ
RlggIkV4cGVjdGVkIGNpcGhlciBhbGdvcml0aG0iOw0KIAkJZ290byBiYWQyOw0KIAl9DQogDQot
CWNjLT50Zm0gPSB0Zm07DQorCWNrLT50Zm0gPSB0Zm07DQogDQogCS8qDQogCSAqIENob29zZSBp
dm1vZGUuIFZhbGlkIG1vZGVzOiAicGxhaW4iLCAiZXNzaXY6PGVzc2hhc2g+Ii4NCiAJICogU2Vl
IGNvbW1lbnRzIGF0IGl2IGNvZGUNCiAJICovDQotDQogCWlmIChpdm1vZGUgPT0gTlVMTCkNCi0J
CWNjLT5pdl9nZW5fb3BzID0gTlVMTDsNCisJCWNrLT5pdl9nZW5fb3BzID0gTlVMTDsNCiAJZWxz
ZSBpZiAoc3RyY21wKGl2bW9kZSwgInBsYWluIikgPT0gMCkNCi0JCWNjLT5pdl9nZW5fb3BzID0g
JmNyeXB0X2l2X3BsYWluX29wczsNCisJCWNrLT5pdl9nZW5fb3BzID0gJmNyeXB0X2l2X3BsYWlu
X29wczsNCiAJZWxzZSBpZiAoc3RyY21wKGl2bW9kZSwgImVzc2l2IikgPT0gMCkNCi0JCWNjLT5p
dl9nZW5fb3BzID0gJmNyeXB0X2l2X2Vzc2l2X29wczsNCisJCWNrLT5pdl9nZW5fb3BzID0gJmNy
eXB0X2l2X2Vzc2l2X29wczsNCiAJZWxzZSB7DQotCQl0aS0+ZXJyb3IgPSBQRlggIkludmFsaWQg
SVYgbW9kZSI7DQorCQkqZXJyb3JfbXNnID0gUEZYICJJbnZhbGlkIElWIG1vZGUiOw0KIAkJZ290
byBiYWQyOw0KIAl9DQogDQotCWlmIChjYy0+aXZfZ2VuX29wcyAmJiBjYy0+aXZfZ2VuX29wcy0+
Y3RyICYmDQotCSAgICBjYy0+aXZfZ2VuX29wcy0+Y3RyKGNjLCB0aSwgaXZvcHRzKSA8IDApDQor
CWlmIChjay0+aXZfZ2VuX29wcyAmJiBjay0+aXZfZ2VuX29wcy0+Y3RyICYmDQorCSAgICBjay0+
aXZfZ2VuX29wcy0+Y3RyKGNrLCBpdm9wdHMsIGVycm9yX21zZykgPCAwKQ0KIAkJZ290byBiYWQy
Ow0KIA0KIAlpZiAodGZtLT5jcnRfY2lwaGVyLmNpdF9kZWNyeXB0X2l2ICYmIHRmbS0+Y3J0X2Np
cGhlci5jaXRfZW5jcnlwdF9pdikNCiAJCS8qIGF0IGxlYXN0IGEgNjQgYml0IHNlY3RvciBudW1i
ZXIgc2hvdWxkIGZpdCBpbiBvdXIgYnVmZmVyICovDQotCQljYy0+aXZfc2l6ZSA9IG1heChjcnlw
dG9fdGZtX2FsZ19pdnNpemUodGZtKSwNCisJCWNrLT5pdl9zaXplID0gbWF4KGNyeXB0b190Zm1f
YWxnX2l2c2l6ZSh0Zm0pLA0KIAkJICAgICAgICAgICAgICAgICAgKHVuc2lnbmVkIGludCkoc2l6
ZW9mKHU2NCkgLyBzaXplb2YodTgpKSk7DQogCWVsc2Ugew0KLQkJY2MtPml2X3NpemUgPSAwOw0K
LQkJaWYgKGNjLT5pdl9nZW5fb3BzKSB7DQorCQljay0+aXZfc2l6ZSA9IDA7DQorCQlpZiAoY2st
Pml2X2dlbl9vcHMpIHsNCiAJCQlETVdBUk4oUEZYICJTZWxlY3RlZCBjaXBoZXIgZG9lcyBub3Qg
c3VwcG9ydCBJVnMiKTsNCi0JCQlpZiAoY2MtPml2X2dlbl9vcHMtPmR0cikNCi0JCQkJY2MtPml2
X2dlbl9vcHMtPmR0cihjYyk7DQotCQkJY2MtPml2X2dlbl9vcHMgPSBOVUxMOw0KKwkJCWlmIChj
ay0+aXZfZ2VuX29wcy0+ZHRyKQ0KKwkJCQljay0+aXZfZ2VuX29wcy0+ZHRyKGNrKTsNCisJCQlj
ay0+aXZfZ2VuX29wcyA9IE5VTEw7DQogCQl9DQogCX0NCiANCisJY2stPmtleV9zaXplID0ga2V5
X3NpemU7DQorCWlmICh0Zm0tPmNydF9jaXBoZXIuY2l0X3NldGtleSh0Zm0sIGNrLT5rZXksIGtl
eV9zaXplKSA8IDApIHsNCisJCSplcnJvcl9tc2cgPSBQRlggIkVycm9yIHNldHRpbmcga2V5IjsN
CisJCWdvdG8gYmFkMzsNCisJfQ0KKw0KKwlpZiAoaXZtb2RlICYmIGNrLT5pdl9nZW5fb3BzKSB7
DQorCQlpZiAoaXZvcHRzKQ0KKwkJCSooaXZvcHRzIC0gMSkgPSAnOic7DQorCQljay0+aXZfbW9k
ZSA9IGttYWxsb2Moc3RybGVuKGl2bW9kZSkgKyAxLCBHRlBfS0VSTkVMKTsNCisJCWlmIChjay0+
aXZfbW9kZSA9PSBOVUxMKSB7DQorCQkJKmVycm9yX21zZyA9IFBGWCAiRXJyb3Iga21hbGxvY2lu
ZyBpdl9tb2RlIHN0cmluZyI7DQorCQkJZ290byBiYWQzOw0KKwkJfQ0KKwkJc3RyY3B5KGNrLT5p
dl9tb2RlLCBpdm1vZGUpOw0KKwl9IGVsc2UNCisJCWNrLT5pdl9tb2RlID0gTlVMTDsNCisNCisJ
KnJldHZhbCA9IGNrOw0KKwlyZXR1cm4gMDsNCisNCitiYWQzOg0KKwlpZiAoY2stPml2X2dlbl9v
cHMgJiYgY2stPml2X2dlbl9vcHMtPmR0cikNCisJCWNrLT5pdl9nZW5fb3BzLT5kdHIoY2spOw0K
K2JhZDI6DQorCWNyeXB0b19mcmVlX3RmbSh0Zm0pOw0KK2JhZDE6DQorCWtmcmVlKGNrKTsNCisN
CisJcmV0dXJuIC1FSU5WQUw7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIGNyeXB0X2tleV9kdHIoc3Ry
dWN0IGNyeXB0X2tleSAqY2spDQorew0KKwlpZiAoY2stPml2X21vZGUpDQorCQlrZnJlZShjay0+
aXZfbW9kZSk7DQorCWlmIChjay0+aXZfZ2VuX29wcyAmJiBjay0+aXZfZ2VuX29wcy0+ZHRyKQ0K
KwkJY2stPml2X2dlbl9vcHMtPmR0cihjayk7DQorCWNyeXB0b19mcmVlX3RmbShjay0+dGZtKTsN
CisJa2ZyZWUoY2spOw0KK30NCisNCitzdGF0aWMgc3RydWN0IGtleV90eXBlIGNyeXB0X2tleV90
eXBlOw0KKw0KKy8qDQorICogQ29uc3RydWN0IGFuIGVuY3J5cHRpb24gbWFwcGluZzoNCisgKiA8
Y2lwaGVyPiA8a2V5PiA8aXZfb2Zmc2V0PiA8ZGV2X3BhdGg+IDxzdGFydD4NCisgKi8NCitzdGF0
aWMgaW50IGNyeXB0X2N0cihzdHJ1Y3QgZG1fdGFyZ2V0ICp0aSwgdW5zaWduZWQgaW50IGFyZ2Ms
IGNoYXIgKiphcmd2KQ0KK3sNCisJc3RydWN0IGNyeXB0X2NvbmZpZyAqY2M7DQorCXN0cnVjdCBj
cnlwdF9rZXkgKmNrOw0KKwlzdHJ1Y3Qga2V5ICprZXkgPSBOVUxMOw0KKwlpbnQgcmV0dmFsOw0K
Kw0KKwlpZiAoYXJnYyAhPSA1KSB7DQorCQl0aS0+ZXJyb3IgPSBQRlggIldyb25nIGFyZ3VtZW50
IGNvdW50IjsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorDQorCWlmIChzdHJjbXAoYXJndlsw
XSwgImtleSIpID09IDApIHsNCisJCWtleSA9IHNlYXJjaF9wcm9jZXNzX2tleXJpbmdzKCZjcnlw
dF9rZXlfdHlwZSwgYXJndlsxXSk7DQorCQlpZiAoSVNfRVJSKGtleSkpIHsNCisJCQl0aS0+ZXJy
b3IgPSBQRlggIktleSBub3QgZm91bmQgaW4gcHJvY2VzcyBrZXlyaW5ncyI7DQorCQkJcmV0dXJu
IFBUUl9FUlIoa2V5KTsNCisJCX0NCisNCisJCWNrID0ga2V5LT5wYXlsb2FkLmRhdGE7DQorCQlC
VUdfT04oIWNrKTsNCisJfSBlbHNlIHsNCisJCXVuc2lnbmVkIGludCBrZXlfc2l6ZTsNCisJCWlu
dCBlcnI7DQorCQl1OCAqa2V5X2RhdGE7DQorDQorCQlrZXlfc2l6ZSA9IHN0cmxlbihhcmd2WzFd
KSA+PiAxOw0KKwkJa2V5X2RhdGEgPSBrbWFsbG9jKGtleV9zaXplLCBHRlBfS0VSTkVMKTsNCisJ
CWlmIChrZXlfZGF0YSA9PSBOVUxMKSB7DQorCQkJdGktPmVycm9yID0gUEZYICJPdXQgb2YgbWVt
b3J5IGFsbG9jYXRpbmcga2V5IGJ1ZmZlciI7DQorCQkJcmV0dXJuIC1FTk9NRU07DQorCQl9DQor
DQorCQlpZiAoKCFrZXlfc2l6ZSAmJiBzdHJjbXAoYXJndlsxXSwgIi0iKSAhPSAwKSB8fA0KKwkJ
ICAgIChrZXlfc2l6ZSAmJg0KKwkJICAgICBjcnlwdF9kZWNvZGVfa2V5KGtleV9kYXRhLCBhcmd2
WzFdLCBrZXlfc2l6ZSkgPCAwKSkgew0KKwkJCXRpLT5lcnJvciA9IFBGWCAiRXJyb3IgZGVjb2Rp
bmcga2V5IjsNCisJCQlrZnJlZShrZXlfZGF0YSk7DQorCQkJcmV0dXJuIC1FSU5WQUw7DQorCQl9
DQorDQorCQllcnIgPSBjcnlwdF9rZXlfY3RyKCZjaywgYXJndlswXSwga2V5X2RhdGEsIGtleV9z
aXplLA0KKwkJICAgICAgICAgICAgICAgICAgICAmdGktPmVycm9yKTsNCisNCisJCWtmcmVlKGtl
eSk7DQorDQorCQlpZiAoZXJyIDwgMCkNCisJCQlyZXR1cm4gZXJyOw0KKwl9DQorDQorCXJldHZh
bCA9IC1FTk9NRU07DQorDQorCWNjID0ga21hbGxvYyhzaXplb2YoKmNjKSwgR0ZQX0tFUk5FTCk7
DQorCWlmIChjYyA9PSBOVUxMKSB7DQorCQl0aS0+ZXJyb3IgPQ0KKwkJCVBGWCAiQ2Fubm90IGFs
bG9jYXRlIHRyYW5zcGFyZW50IGVuY3J5cHRpb24gY29udGV4dCI7DQorCQlnb3RvIGJhZDE7DQor
CX0NCisNCisJY2MtPmNyeXB0byA9IGNrOw0KKwljYy0+a2V5ID0ga2V5Ow0KKw0KIAljYy0+aW9f
cG9vbCA9IG1lbXBvb2xfY3JlYXRlKE1JTl9JT1MsIG1lbXBvb2xfYWxsb2Nfc2xhYiwNCiAJCQkJ
ICAgICBtZW1wb29sX2ZyZWVfc2xhYiwgX2NyeXB0X2lvX3Bvb2wpOw0KIAlpZiAoIWNjLT5pb19w
b29sKSB7DQogCQl0aS0+ZXJyb3IgPSBQRlggIkNhbm5vdCBhbGxvY2F0ZSBjcnlwdCBpbyBtZW1w
b29sIjsNCi0JCWdvdG8gYmFkMzsNCisJCWdvdG8gYmFkMjsNCiAJfQ0KIA0KIAljYy0+cGFnZV9w
b29sID0gbWVtcG9vbF9jcmVhdGUoTUlOX1BPT0xfUEFHRVMsIG1lbXBvb2xfYWxsb2NfcGFnZSwN
CiAJCQkJICAgICAgIG1lbXBvb2xfZnJlZV9wYWdlLCBOVUxMKTsNCiAJaWYgKCFjYy0+cGFnZV9w
b29sKSB7DQogCQl0aS0+ZXJyb3IgPSBQRlggIkNhbm5vdCBhbGxvY2F0ZSBwYWdlIG1lbXBvb2wi
Ow0KLQkJZ290byBiYWQ0Ow0KKwkJZ290byBiYWQzOw0KIAl9DQogDQotCWlmICh0Zm0tPmNydF9j
aXBoZXIuY2l0X3NldGtleSh0Zm0sIGNjLT5rZXksIGtleV9zaXplKSA8IDApIHsNCi0JCXRpLT5l
cnJvciA9IFBGWCAiRXJyb3Igc2V0dGluZyBrZXkiOw0KLQkJZ290byBiYWQ1Ow0KLQl9DQorCXJl
dHZhbCA9IC1FSU5WQUw7DQogDQogCWlmIChzc2NhbmYoYXJndlsyXSwgU0VDVE9SX0ZPUk1BVCwg
JmNjLT5pdl9vZmZzZXQpICE9IDEpIHsNCiAJCXRpLT5lcnJvciA9IFBGWCAiSW52YWxpZCBpdl9v
ZmZzZXQgc2VjdG9yIjsNCi0JCWdvdG8gYmFkNTsNCisJCWdvdG8gYmFkNDsNCiAJfQ0KIA0KIAlp
ZiAoc3NjYW5mKGFyZ3ZbNF0sIFNFQ1RPUl9GT1JNQVQsICZjYy0+c3RhcnQpICE9IDEpIHsNCiAJ
CXRpLT5lcnJvciA9IFBGWCAiSW52YWxpZCBkZXZpY2Ugc2VjdG9yIjsNCi0JCWdvdG8gYmFkNTsN
CisJCWdvdG8gYmFkNDsNCiAJfQ0KIA0KIAlpZiAoZG1fZ2V0X2RldmljZSh0aSwgYXJndlszXSwg
Y2MtPnN0YXJ0LCB0aS0+bGVuLA0KIAkgICAgICAgICAgICAgICAgICBkbV90YWJsZV9nZXRfbW9k
ZSh0aS0+dGFibGUpLCAmY2MtPmRldikpIHsNCiAJCXRpLT5lcnJvciA9IFBGWCAiRGV2aWNlIGxv
b2t1cCBmYWlsZWQiOw0KLQkJZ290byBiYWQ1Ow0KKwkJZ290byBiYWQ0Ow0KIAl9DQogDQotCWlm
IChpdm1vZGUgJiYgY2MtPml2X2dlbl9vcHMpIHsNCi0JCWlmIChpdm9wdHMpDQotCQkJKihpdm9w
dHMgLSAxKSA9ICc6JzsNCi0JCWNjLT5pdl9tb2RlID0ga21hbGxvYyhzdHJsZW4oaXZtb2RlKSAr
IDEsIEdGUF9LRVJORUwpOw0KLQkJaWYgKCFjYy0+aXZfbW9kZSkgew0KLQkJCXRpLT5lcnJvciA9
IFBGWCAiRXJyb3Iga21hbGxvY2luZyBpdl9tb2RlIHN0cmluZyI7DQotCQkJZ290byBiYWQ1Ow0K
LQkJfQ0KLQkJc3RyY3B5KGNjLT5pdl9tb2RlLCBpdm1vZGUpOw0KLQl9IGVsc2UNCi0JCWNjLT5p
dl9tb2RlID0gTlVMTDsNCi0NCiAJdGktPnByaXZhdGUgPSBjYzsNCiAJcmV0dXJuIDA7DQogDQot
YmFkNToNCi0JbWVtcG9vbF9kZXN0cm95KGNjLT5wYWdlX3Bvb2wpOw0KIGJhZDQ6DQotCW1lbXBv
b2xfZGVzdHJveShjYy0+aW9fcG9vbCk7DQorCW1lbXBvb2xfZGVzdHJveShjYy0+cGFnZV9wb29s
KTsNCiBiYWQzOg0KLQlpZiAoY2MtPml2X2dlbl9vcHMgJiYgY2MtPml2X2dlbl9vcHMtPmR0cikN
Ci0JCWNjLT5pdl9nZW5fb3BzLT5kdHIoY2MpOw0KKwltZW1wb29sX2Rlc3Ryb3koY2MtPmlvX3Bv
b2wpOw0KIGJhZDI6DQotCWNyeXB0b19mcmVlX3RmbSh0Zm0pOw0KLWJhZDE6DQogCWtmcmVlKGNj
KTsNCi0JcmV0dXJuIC1FSU5WQUw7DQorYmFkMToNCisJaWYgKGtleSkNCisJCWtleV9wdXQoa2V5
KTsNCisJZWxzZQ0KKwkJY3J5cHRfa2V5X2R0cihjayk7DQorCXJldHVybiByZXR2YWw7DQogfQ0K
IA0KIHN0YXRpYyB2b2lkIGNyeXB0X2R0cihzdHJ1Y3QgZG1fdGFyZ2V0ICp0aSkNCkBAIC03MTMs
MTEgKzc5MywxMSBAQA0KIAltZW1wb29sX2Rlc3Ryb3koY2MtPnBhZ2VfcG9vbCk7DQogCW1lbXBv
b2xfZGVzdHJveShjYy0+aW9fcG9vbCk7DQogDQotCWlmIChjYy0+aXZfbW9kZSkNCi0JCWtmcmVl
KGNjLT5pdl9tb2RlKTsNCi0JaWYgKGNjLT5pdl9nZW5fb3BzICYmIGNjLT5pdl9nZW5fb3BzLT5k
dHIpDQotCQljYy0+aXZfZ2VuX29wcy0+ZHRyKGNjKTsNCi0JY3J5cHRvX2ZyZWVfdGZtKGNjLT50
Zm0pOw0KKwlpZiAoY2MtPmtleSkNCisJCWtleV9wdXQoY2MtPmtleSk7DQorCWVsc2UNCisJCWNy
eXB0X2tleV9kdHIoY2MtPmNyeXB0byk7DQorDQogCWRtX3B1dF9kZXZpY2UodGksIGNjLT5kZXYp
Ow0KIAlrZnJlZShjYyk7DQogfQ0KQEAgLTg2NSwxMyArOTQ1LDUxIEBADQogCXJldHVybiAtRU5P
TUVNOw0KIH0NCiANCitzdGF0aWMgdW5zaWduZWQgaW50IGNyeXB0X2tleV9zdGF0dXMoc3RydWN0
IGNyeXB0X2tleSAqY2ssIGNoYXIgKnJlc3VsdCwNCisgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgdW5zaWduZWQgaW50IG1heGxlbikNCit7DQorCWNvbnN0IGNoYXIgKmNpcGhl
cjsNCisJY29uc3QgY2hhciAqY2hhaW5tb2RlID0gTlVMTDsNCisJdW5zaWduZWQgaW50IHN6ID0g
MDsNCisNCisJY2lwaGVyID0gY3J5cHRvX3RmbV9hbGdfbmFtZShjay0+dGZtKTsNCisNCisJc3dp
dGNoKGNrLT50Zm0tPmNydF9jaXBoZXIuY2l0X21vZGUpIHsNCisJY2FzZSBDUllQVE9fVEZNX01P
REVfQ0JDOg0KKwkJY2hhaW5tb2RlID0gImNiYyI7DQorCQlicmVhazsNCisJY2FzZSBDUllQVE9f
VEZNX01PREVfRUNCOg0KKwkJY2hhaW5tb2RlID0gImVjYiI7DQorCQlicmVhazsNCisJZGVmYXVs
dDoNCisJCUJVRygpOw0KKwl9DQorDQorCWlmIChjay0+aXZfbW9kZSkNCisJCURNRU1JVCgiJXMt
JXMtJXMgIiwgY2lwaGVyLCBjaGFpbm1vZGUsIGNrLT5pdl9tb2RlKTsNCisJZWxzZQ0KKwkJRE1F
TUlUKCIlcy0lcyAiLCBjaXBoZXIsIGNoYWlubW9kZSk7DQorDQorCWlmIChjay0+a2V5X3NpemUg
PiAwKSB7DQorCQlpZiAoKG1heGxlbiAtIHN6KSA8ICgoY2stPmtleV9zaXplIDw8IDEpICsgMSkp
DQorCQkJcmV0dXJuIC1FTk9NRU07DQorDQorCQljcnlwdF9lbmNvZGVfa2V5KHJlc3VsdCArIHN6
LCBjay0+a2V5LCBjay0+a2V5X3NpemUpOw0KKwkJc3ogKz0gY2stPmtleV9zaXplIDw8IDE7DQor
CX0gZWxzZSB7DQorCQlpZiAoc3ogPj0gbWF4bGVuKQ0KKwkJCXJldHVybiAtRU5PTUVNOw0KKwkJ
cmVzdWx0W3N6KytdID0gJy0nOw0KKwl9DQorDQorCXJldHVybiBzejsNCit9DQorDQogc3RhdGlj
IGludCBjcnlwdF9zdGF0dXMoc3RydWN0IGRtX3RhcmdldCAqdGksIHN0YXR1c190eXBlX3QgdHlw
ZSwNCiAJCQljaGFyICpyZXN1bHQsIHVuc2lnbmVkIGludCBtYXhsZW4pDQogew0KIAlzdHJ1Y3Qg
Y3J5cHRfY29uZmlnICpjYyA9IChzdHJ1Y3QgY3J5cHRfY29uZmlnICopIHRpLT5wcml2YXRlOw0K
IAljaGFyIGJ1ZmZlclszMl07DQotCWNvbnN0IGNoYXIgKmNpcGhlcjsNCi0JY29uc3QgY2hhciAq
Y2hhaW5tb2RlID0gTlVMTDsNCiAJdW5zaWduZWQgaW50IHN6ID0gMDsNCiANCiAJc3dpdGNoICh0
eXBlKSB7DQpAQCAtODgwLDM1ICs5OTgsMTIgQEANCiAJCWJyZWFrOw0KIA0KIAljYXNlIFNUQVRV
U1RZUEVfVEFCTEU6DQotCQljaXBoZXIgPSBjcnlwdG9fdGZtX2FsZ19uYW1lKGNjLT50Zm0pOw0K
LQ0KLQkJc3dpdGNoKGNjLT50Zm0tPmNydF9jaXBoZXIuY2l0X21vZGUpIHsNCi0JCWNhc2UgQ1JZ
UFRPX1RGTV9NT0RFX0NCQzoNCi0JCQljaGFpbm1vZGUgPSAiY2JjIjsNCi0JCQlicmVhazsNCi0J
CWNhc2UgQ1JZUFRPX1RGTV9NT0RFX0VDQjoNCi0JCQljaGFpbm1vZGUgPSAiZWNiIjsNCi0JCQli
cmVhazsNCi0JCWRlZmF1bHQ6DQotCQkJQlVHKCk7DQotCQl9DQotDQotCQlpZiAoY2MtPml2X21v
ZGUpDQotCQkJRE1FTUlUKCIlcy0lcy0lcyAiLCBjaXBoZXIsIGNoYWlubW9kZSwgY2MtPml2X21v
ZGUpOw0KLQkJZWxzZQ0KLQkJCURNRU1JVCgiJXMtJXMgIiwgY2lwaGVyLCBjaGFpbm1vZGUpOw0K
LQ0KLQkJaWYgKGNjLT5rZXlfc2l6ZSA+IDApIHsNCi0JCQlpZiAoKG1heGxlbiAtIHN6KSA8ICgo
Y2MtPmtleV9zaXplIDw8IDEpICsgMSkpDQotCQkJCXJldHVybiAtRU5PTUVNOw0KLQ0KLQkJCWNy
eXB0X2VuY29kZV9rZXkocmVzdWx0ICsgc3osIGNjLT5rZXksIGNjLT5rZXlfc2l6ZSk7DQotCQkJ
c3ogKz0gY2MtPmtleV9zaXplIDw8IDE7DQotCQl9IGVsc2Ugew0KLQkJCWlmIChzeiA+PSBtYXhs
ZW4pDQotCQkJCXJldHVybiAtRU5PTUVNOw0KLQkJCXJlc3VsdFtzeisrXSA9ICctJzsNCi0JCX0N
CisJCWlmIChjYy0+a2V5KSB7DQorCQkJcmVhZF9sb2NrKCZjYy0+a2V5LT5sb2NrKTsNCisJCQlE
TUVNSVQoImtleSAlcyIsIGNjLT5rZXktPmRlc2NyaXB0aW9uKTsNCisJCQlyZWFkX3VubG9jaygm
Y2MtPmtleS0+bG9jayk7DQorCQl9IGVsc2UNCisJCQlzeiA9IGNyeXB0X2tleV9zdGF0dXMoY2Mt
PmNyeXB0bywgcmVzdWx0LCBtYXhsZW4pOw0KIA0KIAkJZm9ybWF0X2Rldl90KGJ1ZmZlciwgY2Mt
PmRldi0+YmRldi0+YmRfZGV2KTsNCiAJCURNRU1JVCgiICIgU0VDVE9SX0ZPUk1BVCAiICVzICIg
U0VDVE9SX0ZPUk1BVCwNCkBAIC05MTgsNiArMTAxMyw4NSBAQA0KIAlyZXR1cm4gMDsNCiB9DQog
DQorc3RhdGljIGludCBjcnlwdF9rZXlfaW5zdGFudGlhdGUoc3RydWN0IGtleSAqa2V5LCBjb25z
dCB2b2lkICpkYXRhLA0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVfdCBk
YXRhbGVuKQ0KK3sNCisJc3RydWN0IGNyeXB0X2tleSAqY2s7DQorCXVuc2lnbmVkIGludCBsZW47
DQorCWNoYXIgKmVycm9yX21zZyA9IE5VTEw7DQorCWNoYXIgKmNyeXB0bzsNCisJaW50IHJldHZh
bCA9IC1FSU5WQUw7DQorDQorCWxlbiA9IHN0cm5sZW4oZGF0YSwgZGF0YWxlbik7DQorCWlmIChs
ZW4gPj0gZGF0YWxlbikNCisJCXJldHVybiAtRUlOVkFMOw0KKw0KKwljcnlwdG8gPSBrbWFsbG9j
KGxlbiArIDEsIEdGUF9LRVJORUwpOw0KKwlpZiAoY3J5cHRvIDwgMCkNCisJCXJldHVybiAtRU5P
TUVNOw0KKwlzdHJjcHkoY3J5cHRvLCAoY29uc3QgY2hhciAqKWRhdGEpOw0KKw0KKwlkYXRhICs9
IGxlbiArIDE7DQorCWRhdGFsZW4gLT0gbGVuICsgMTsNCisNCisJaWYgKGxlbiA8IHNpemVvZih1
MTYpKQ0KKwkJZ290byBiYWQxOw0KKw0KKwkvKiBGSVhNRTogYnl0ZSBvcmRlcmluZz8gSG9zdCBi
eXRlIG9yZGVyaW5nIHNob3VsZCBiZSBvayAqLw0KKwlsZW4gPSAqKHUxNiAqKWRhdGE7DQorCWRh
dGEgKz0gc2l6ZW9mKHUxNik7DQorCWRhdGFsZW4gLT0gc2l6ZW9mKHUxNik7DQorDQorCWlmIChk
YXRhbGVuICE9IGxlbiAqIHNpemVvZih1OCkpDQorCQlnb3RvIGJhZDE7DQorDQorCXJldHZhbCA9
IGNyeXB0X2tleV9jdHIoJmNrLCBjcnlwdG8sICh1OCAqKWRhdGEsIGxlbiwgJmVycm9yX21zZyk7
DQorCWlmIChyZXR2YWwgPCAwKSB7DQorCQlETUVSUigiJXMiLCBlcnJvcl9tc2cpOw0KKwkJZ290
byBiYWQxOw0KKwl9DQorDQorCS8qIEZJWE1FOiBBbiBhcHByb3hpbWF0aW9uIG9mIHRoZSBwYXls
b2FkIHNpemUgKi8NCisJbGVuID0gc2l6ZW9mKCpjaykgKyBjay0+a2V5X3NpemUgKyBzaXplb2Yo
KmNrLT50Zm0pOw0KKwlyZXR2YWwgPSBrZXlfcGF5bG9hZF9yZXNlcnZlKGtleSwgbGVuKTsNCisJ
aWYgKHJldHZhbCA8IDApDQorCQlnb3RvIGJhZDI7DQorDQorCWtmcmVlKGNyeXB0byk7DQorDQor
CWtleS0+cGF5bG9hZC5kYXRhID0gY2s7DQorDQorCXJldHVybiAwOw0KKw0KK2JhZDI6DQorCWNy
eXB0X2tleV9kdHIoY2spOw0KK2JhZDE6DQorCWtmcmVlKGNyeXB0byk7DQorCXJldHVybiByZXR2
YWw7DQorfQ0KKw0KK3N0YXRpYyBpbnQgY3J5cHRfa2V5X21hdGNoKGNvbnN0IHN0cnVjdCBrZXkg
KmtleSwgY29uc3Qgdm9pZCAqZGVzY3JpcHRpb24pDQorew0KKwlyZXR1cm4gc3RyY21wKGtleS0+
ZGVzY3JpcHRpb24sIGRlc2NyaXB0aW9uKSA9PSAwOw0KK30NCisNCitzdGF0aWMgdm9pZCBjcnlw
dF9rZXlfZGVzdHJveShzdHJ1Y3Qga2V5ICprZXkpDQorew0KKwlzdHJ1Y3QgY3J5cHRfa2V5ICpj
ayA9IChzdHJ1Y3QgY3J5cHRfa2V5ICopa2V5LT5wYXlsb2FkLmRhdGE7DQorDQorCWlmIChjaykN
CisJCWNyeXB0X2tleV9kdHIoY2spOw0KK30NCisNCitzdGF0aWMgc3RydWN0IGtleV90eXBlIGNy
eXB0X2tleV90eXBlID0gew0KKwkubmFtZQkJPSAiZG0tY3J5cHQiLA0KKwkuZGVmX2RhdGFsZW4J
PSBzaXplb2Yoc3RydWN0IGNyeXB0X2tleSkgKw0KKwkJCSAgc2l6ZW9mKHN0cnVjdCBjcnlwdG9f
dGZtKSwNCisJLmluc3RhbnRpYXRlCT0gY3J5cHRfa2V5X2luc3RhbnRpYXRlLA0KKwkubWF0Y2gJ
CT0gY3J5cHRfa2V5X21hdGNoLA0KKwkuZGVzdHJveQk9IGNyeXB0X2tleV9kZXN0cm95LA0KK307
DQorDQogc3RhdGljIHN0cnVjdCB0YXJnZXRfdHlwZSBjcnlwdF90YXJnZXQgPSB7DQogCS5uYW1l
ICAgPSAiY3J5cHQiLA0KIAkudmVyc2lvbj0gezEsIDEsIDB9LA0KQEAgLTk0NywxMiArMTEyMSwy
MCBAQA0KIA0KIAlyID0gZG1fcmVnaXN0ZXJfdGFyZ2V0KCZjcnlwdF90YXJnZXQpOw0KIAlpZiAo
ciA8IDApIHsNCi0JCURNRVJSKFBGWCAicmVnaXN0ZXIgZmFpbGVkICVkIiwgcik7DQorCQlETUVS
UihQRlggImRtIHJlZ2lzdGVyIGZhaWxlZCAlZCIsIHIpOw0KIAkJZ290byBiYWQyOw0KIAl9DQog
DQorCXIgPSByZWdpc3Rlcl9rZXlfdHlwZSgmY3J5cHRfa2V5X3R5cGUpOw0KKwlpZiAociA8IDAp
IHsNCisJCURNRVJSKFBGWCAia2V5IHR5cGUgcmVnaXN0ZXIgZmFpbGVkICVkIiwgcik7DQorCQln
b3RvIGJhZDM7DQorCX0NCisNCiAJcmV0dXJuIDA7DQogDQorYmFkMzoNCisJZG1fdW5yZWdpc3Rl
cl90YXJnZXQoJmNyeXB0X3RhcmdldCk7DQogYmFkMjoNCiAJZGVzdHJveV93b3JrcXVldWUoX2tj
cnlwdGRfd29ya3F1ZXVlKTsNCiBiYWQxOg0KQEAgLTk2Miw4ICsxMTQ0LDExIEBADQogDQogc3Rh
dGljIHZvaWQgX19leGl0IGRtX2NyeXB0X2V4aXQodm9pZCkNCiB7DQotCWludCByID0gZG1fdW5y
ZWdpc3Rlcl90YXJnZXQoJmNyeXB0X3RhcmdldCk7DQorCWludCByOw0KKw0KKwl1bnJlZ2lzdGVy
X2tleV90eXBlKCZjcnlwdF9rZXlfdHlwZSk7DQogDQorCXIgPSBkbV91bnJlZ2lzdGVyX3Rhcmdl
dCgmY3J5cHRfdGFyZ2V0KTsNCiAJaWYgKHIgPCAwKQ0KIAkJRE1FUlIoUEZYICJ1bnJlZ2lzdGVy
IGZhaWxlZCAlZCIsIHIpOw0KIA0K


--=-4UgPdHF7cmHnpgI/ICyR--

--=-AlzowkfodPzYa4vo1yUX
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: Dies ist ein digital signierter Nachrichtenteil

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.0 (GNU/Linux)

iD8DBQBCA4ClZCYBcts5dM0RAnzbAKCrP6ttLsWCfSOy2scdabU7e6RJiQCePgpJ
tGRYkbFjQHvV5PEq7DSAouQ=
=3UdW
-----END PGP SIGNATURE-----

--=-AlzowkfodPzYa4vo1yUX--

