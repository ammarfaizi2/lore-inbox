Return-Path: <linux-kernel-owner+willy=40w.ods.org-S269100AbUJKPXL@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S269100AbUJKPXL (ORCPT <rfc822;willy@w.ods.org>);
	Mon, 11 Oct 2004 11:23:11 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S269079AbUJKPVx
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Mon, 11 Oct 2004 11:21:53 -0400
Received: from e35.co.us.ibm.com ([32.97.110.133]:49134 "EHLO
	e35.co.us.ibm.com") by vger.kernel.org with ESMTP id S268957AbUJKPQh
	(ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Mon, 11 Oct 2004 11:16:37 -0400
To: "Linux Kernel ML(Eng)" <linux-kernel@vger.kernel.org>
Subject: AVC Seqlock vs. RCU experiment results
MIME-Version: 1.0
X-Mailer: Lotus Notes Build V651_12042003 December 04, 2003
From: Kylene J Hall <kylene@us.ibm.com>
Message-ID: <OF69117DB9.76426051-ON05256F2A.0053C1DE-05256F2A.0053D3D7@us.ibm.com>
Date: Mon, 11 Oct 2004 09:16:34 -0600
X-MIMETrack: Serialize by Router on D03NM115/03/M/IBM(Release 6.51HF338 | June 21, 2004) at
 10/11/2004 09:16:36
Content-Type: multipart/mixed; boundary="=_mixed 0053D24A05256F2A_="
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

--=_mixed 0053D24A05256F2A_=
Content-Type: text/plain; charset="US-ASCII"

The following is our the results from our experiment.  Since after many 
iterations based on comments the patch is still not showing significant 
performance improvements we will turn our efforts towards looking at the 
rcu patch.

In the results section 
        wselinux corresponds to booting with the parameter selinux=1
        woselinux corresponds to booting with the parameter selinux=0

1way Results
Chatroom results (msg/sec) 4 iterations each default configuration
myseq+wselinux rcu+wselinux Vanilla+wselinux
491400  429184  194931
300075  449943  428724
466200  433839  324675
440528  448933  430107
================================================================

Unixbench results (index values)
                                                myseq+wselinux 
rcu+wselinux Vanilla+wselinux
Dhrystone 2 using register variables            307.2           309.5 
307.2
Double-Precision Whetstone                      145.6           146.3 
146.3
Execl Throughput                                621.4           651.4 
643.5
File Copy 1024 bufsize 2000 maxblocks   640.6           533.9   650.4
File Copy 256 bufsize 500 maxblocks             614.3           431.2 
669.0
File Copy 4096 bufsize 8000 maxblocks   528.2           498.5   513.6
Pipe Throughput                                 524.1           410.5 
568.7
Process Creation                                991.1           956.5 
962.3
Shell Scripts (8 concurrent)                    485.5           501.7 
495.0
System Call Overhead                            713.9           725.9 
721.8
================================================================
                                                        503.2 466.1 513.1

4way Results
Chatroom results (msg/sec)
myseq+woselinux myseq+wselinux rcu+woselinux rcu+wselinux 
Vanilla+woselinux Vanilla+wselinux
466744          275103  378787  310318  455062  229885  
455062          318471  454029  389863  423280  209205
437636          314712          431965  326264  372786  201005    
431499          374181  418410  309837  377714  191204
========================================================================

Unixbench results (index values)
                                                        myseq+woselinux 
myseq+wselinux rcu+woselinux rcu+wselinux Vanilla+woselinux 
Vanilla+wselinux
Dhrystone 2 using register variables            131.5 131.5 131.4 131.5  
131.1           131.3
Double-Precision Whetstone                      82.7 82.7 83.1 83.0 82.7  
83.1
Execl Throughput                                311.8 285.8 309.0 297.3  
309.5           296.0
File Copy 1024 bufsize 2000 maxblocks   172.7                   154.3 
174.1           159.1           173.0           155.8
File Copy 256 bufsize 500 maxblocks             159.2 135.2 159.8 141.7  
161.0           138.0
File Copy 4096 bufsize 8000 maxblocks    209.4                  195.5 
209.4           201.5           209.4           200.5
Pipe Throughput                                 240.0 162.8 238.0 195.5  
240.3           187.3
Process Creation                                343.4 332.4 339.8 340.8  
342.4           337.5
Shell Scripts (8 concurrent)                    791.7 767.2 793.3 769.5  
792.2           765.0
System Call Overhead                            375.9 377.6 374.9 373.4  
375.7           377.3
 ================================================================
                                                        233.4 213.7 233.1  
221.4           233.4           219.0


>> 1) the number of AVC entries is 3 times as big, increasing
>>    the chance of L1/L2 cache misses, but decreasing the chance
>>    of an AVC miss - dunno if this is good or bad

>We increased this number to attempt to do just that produce fewer AVC 
misses.  We saw about a 1 point improvement on the Unixbench benchmark

>> 2) avc_claim_node doesn't check any more whether the avc
>>    entry got recently used - dunno if this is good or bad

>My initial attempts and trying to keep this functionality seemed racy but 
I think I could try:

>       int claim_this_node = -1;
>       take read_lock
>       while( walking list) {
>               if ( current_node->used  == UNUSED )
>                       claim_this_node = current_node
>                       break;
>               current_node->used = UNUSED
>       }
>       if ( claim_this_node == -1 )
>               claim_this_node = round robin approach
>
>       . . .continue with current claim node work
>
Have now tried this results included above no real noticeable improvement.

>> 3) the av_decision isn't part of the avc_entry any more
>>    (again, dunno if this is good or bad)

>Here was our logic correct me if I'm wrong.  We assumed the cacheline 
size to be 128 bytes since we wanted each lock to protect a cacheline or a 
>couple of cachelines which were a group of entries which had the same 
hash value we needed to decrease the size of the entries inorder to fit 
more >into this region thus we used a pointer to the av_decision structure 
which accounts for most of the data stored per entry.  This allowed us to 
pack the >lookup data which accessed most frequently in the adjacent 
cachelines.  Make sense? Other suggestions?


>>cheers,

>>Rik


Kylene J. Hall
IBM Linux Technology Center
--=_mixed 0053D24A05256F2A_=
Content-Type: application/octet-stream; name="seq.patch"
Content-Disposition: attachment; filename="seq.patch"
Content-Transfer-Encoding: base64

LS0tIGxpbnV4LTIuNi44LjEvc2VjdXJpdHkvc2VsaW51eC9hdmMuYwkyMDA0LTA4LTE0IDA1OjU1
OjQ4LjAwMDAwMDAwMCAtMDUwMAorKysgbGludXgtMi42LjguMS1teXNlcS9zZWN1cml0eS9zZWxp
bnV4L2F2Yy5jCTIwMDQtMTAtMDUgMTY6MjE6NDcuMDAwMDAwMDAwIC0wNTAwCkBAIC0yOCw4MCAr
MjgsODUgQEAKICNpbmNsdWRlICJhdmMuaCIKICNpbmNsdWRlICJhdmNfc3MuaCIKICNpZmRlZiBD
T05GSUdfQVVESVQKICNpbmNsdWRlICJjbGFzc190b19zdHJpbmcuaCIKICNlbmRpZgogI2luY2x1
ZGUgImNvbW1vbl9wZXJtX3RvX3N0cmluZy5oIgogI2luY2x1ZGUgImF2X2luaGVyaXQuaCIKICNp
bmNsdWRlICJhdl9wZXJtX3RvX3N0cmluZy5oIgogI2luY2x1ZGUgIm9ianNlYy5oIgogCi0jZGVm
aW5lIEFWQ19DQUNIRV9TTE9UUwkJNTEyCisjZGVmaW5lIEFWQ19DQUNIRV9TTE9UUwkJMyo1MTIK
ICNkZWZpbmUgQVZDX0NBQ0hFX01BWE5PREVTCTQxMAorI2RlZmluZSBBVkNfQ0FDSEVfU0xPVFNf
UEVSX0xPQ0sgIDYKKyNkZWZpbmUgQVZDX0NBQ0hFX0JMT0NLUyBBVkNfQ0FDSEVfU0xPVFMvQVZD
X0NBQ0hFX1NMT1RTX1BFUl9MT0NLCisKKyNkZWZpbmUgU0xPVF9JTlZBTElEIDAKKyNkZWZpbmUg
U0xPVF9OT1RfUkVDRU5UTFlfVVNFRCAxCisjZGVmaW5lIFNMT1RfUkVDRU5UTFlfVVNFRCAyCiAK
IHN0cnVjdCBhdmNfZW50cnkgewogCXUzMgkJCXNzaWQ7CiAJdTMyCQkJdHNpZDsKIAl1MTYJCQl0
Y2xhc3M7Ci0Jc3RydWN0IGF2X2RlY2lzaW9uCWF2ZDsKLQlpbnQJCQl1c2VkOwkvKiB1c2VkIHJl
Y2VudGx5ICovCisgICAgc3RydWN0IGF2X2RlY2lzaW9uCSphdmQ7CisgICAgY2hhciB1c2VkOyAv
KiBhY3RpdmUgbm9kZSAqLwogfTsKIAogc3RydWN0IGF2Y19ub2RlIHsKLQlzdHJ1Y3QgYXZjX2Vu
dHJ5CWFlOwotCXN0cnVjdCBhdmNfbm9kZQkJKm5leHQ7CisgICAgc2VxbG9ja190ICAgICAgICAg
ICBsb2NrOworICAgIHNob3J0IG5leHRfZXZpY3RlZDsKKyAgICBzdHJ1Y3QgYXZjX2VudHJ5CWFl
WzZdOwogfTsKIAogc3RydWN0IGF2Y19jYWNoZSB7Ci0Jc3RydWN0IGF2Y19ub2RlCSpzbG90c1tB
VkNfQ0FDSEVfU0xPVFNdOwotCXUzMgkJbHJ1X2hpbnQ7CS8qIExSVSBoaW50IGZvciByZWNsYWlt
IHNjYW4gKi8KLQl1MzIJCWFjdGl2ZV9ub2RlczsKLQl1MzIJCWxhdGVzdF9ub3RpZjsJLyogbGF0
ZXN0IHJldm9jYXRpb24gbm90aWZpY2F0aW9uICovCisgICAgc3RydWN0IGF2Y19ub2RlCWJsb2Nr
c1tBVkNfQ0FDSEVfQkxPQ0tTXTsKKyAgICBhdG9taWNfdAkJYWN0aXZlX25vZGVzOyAvLz8/Pwor
ICAgIGF0b21pY190ICAgICAgICAgICAgbGF0ZXN0X25vdGlmOwkvKiBsYXRlc3QgcmV2b2NhdGlv
biBub3RpZmljYXRpb24gKi8KIH07CiAKIHN0cnVjdCBhdmNfY2FsbGJhY2tfbm9kZSB7CiAJaW50
ICgqY2FsbGJhY2spICh1MzIgZXZlbnQsIHUzMiBzc2lkLCB1MzIgdHNpZCwKIAkgICAgICAgICAg
ICAgICAgIHUxNiB0Y2xhc3MsIHUzMiBwZXJtcywKIAkgICAgICAgICAgICAgICAgIHUzMiAqb3V0
X3JldGFpbmVkKTsKIAl1MzIgZXZlbnRzOwogCXUzMiBzc2lkOwogCXUzMiB0c2lkOwogCXUxNiB0
Y2xhc3M7CiAJdTMyIHBlcm1zOwogCXN0cnVjdCBhdmNfY2FsbGJhY2tfbm9kZSAqbmV4dDsKIH07
CiAKLXN0YXRpYyBzcGlubG9ja190IGF2Y19sb2NrID0gU1BJTl9MT0NLX1VOTE9DS0VEOwotc3Rh
dGljIHN0cnVjdCBhdmNfbm9kZSAqYXZjX25vZGVfZnJlZWxpc3Q7CisvL3N0YXRpYyBzcGlubG9j
a190IGF2Y19sb2NrID0gU1BJTl9MT0NLX1VOTE9DS0VEOworLy9zdGF0aWMgc3RydWN0IGF2Y19u
b2RlICphdmNfbm9kZV9mcmVlbGlzdDsKIHN0YXRpYyBzdHJ1Y3QgYXZjX2NhY2hlIGF2Y19jYWNo
ZTsKIHN0YXRpYyB1bnNpZ25lZCBhdmNfY2FjaGVfc3RhdHNbQVZDX05TVEFUU107CiBzdGF0aWMg
c3RydWN0IGF2Y19jYWxsYmFja19ub2RlICphdmNfY2FsbGJhY2tzOwogCiBzdGF0aWMgaW5saW5l
IGludCBhdmNfaGFzaCh1MzIgc3NpZCwgdTMyIHRzaWQsIHUxNiB0Y2xhc3MpCiB7Ci0JcmV0dXJu
IChzc2lkIF4gKHRzaWQ8PDIpIF4gKHRjbGFzczw8NCkpICYgKEFWQ19DQUNIRV9TTE9UUyAtIDEp
OworICAgIHJldHVybiAoc3NpZCBeICh0c2lkPDwyKSBeICh0Y2xhc3M8PDQpKSAmIChBVkNfQ0FD
SEVfQkxPQ0tTIC0gMSk7CiB9CiAKICNpZmRlZiBBVkNfQ0FDSEVfU1RBVFMKIHN0YXRpYyBpbmxp
bmUgdm9pZCBhdmNfY2FjaGVfc3RhdHNfaW5jcihpbnQgdHlwZSkKIHsKIAlhdmNfY2FjaGVfc3Rh
dHNbdHlwZV0rKzsKIH0KIAogc3RhdGljIGlubGluZSB2b2lkIGF2Y19jYWNoZV9zdGF0c19hZGQo
aW50IHR5cGUsIHVuc2lnbmVkIHZhbCkKIHsKIAlhdmNfY2FjaGVfc3RhdHNbdHlwZV0gKz0gdmFs
OwogfQogI2Vsc2UKIHN0YXRpYyBpbmxpbmUgdm9pZCBhdmNfY2FjaGVfc3RhdHNfaW5jcihpbnQg
dHlwZSkKIHsgfQotCiBzdGF0aWMgaW5saW5lIHZvaWQgYXZjX2NhY2hlX3N0YXRzX2FkZChpbnQg
dHlwZSwgdW5zaWduZWQgdmFsKQogeyB9CiAjZW5kaWYKIAogLyoqCiAgKiBhdmNfZHVtcF9hdiAt
IERpc3BsYXkgYW4gYWNjZXNzIHZlY3RvciBpbiBodW1hbi1yZWFkYWJsZSBmb3JtLgogICogQHRj
bGFzczogdGFyZ2V0IHNlY3VyaXR5IGNsYXNzCiAgKiBAYXY6IGFjY2VzcyB2ZWN0b3IKICAqLwog
dm9pZCBhdmNfZHVtcF9hdihzdHJ1Y3QgYXVkaXRfYnVmZmVyICphYiwgdTE2IHRjbGFzcywgdTMy
IGF2KQpAQCAtMTgxLDIwNyArMTg2LDI2MiBAQAogCWF1ZGl0X2xvZ19mb3JtYXQoYWIsICIgdGNs
YXNzPSVzIiwgY2xhc3NfdG9fc3RyaW5nW3RjbGFzc10pOwogfQogCiAvKioKICAqIGF2Y19pbml0
IC0gSW5pdGlhbGl6ZSB0aGUgQVZDLgogICoKICAqIEluaXRpYWxpemUgdGhlIGFjY2VzcyB2ZWN0
b3IgY2FjaGUuCiAgKi8KIHZvaWQgX19pbml0IGF2Y19pbml0KHZvaWQpCiB7Ci0Jc3RydWN0IGF2
Y19ub2RlCSpuZXc7Ci0JaW50IGk7CiAKLQlmb3IgKGkgPSAwOyBpIDwgQVZDX0NBQ0hFX01BWE5P
REVTOyBpKyspIHsKLQkJbmV3ID0ga21hbGxvYyhzaXplb2YoKm5ldyksIEdGUF9BVE9NSUMpOwot
CQlpZiAoIW5ldykgewotCQkJcHJpbnRrKEtFUk5fV0FSTklORyAiYXZjOiAgb25seSBhYmxlIHRv
IGFsbG9jYXRlICIKLQkJCSAgICAgICAiJWQgZW50cmllc1xuIiwgaSk7CisgICAgaW50IGksIGo7
CisgICAgc3RydWN0IGF2X2RlY2lzaW9uKiBhdmQ7CisKKyAgICBmb3IgKCBpID0gMDsgaSA8IEFW
Q19DQUNIRV9CTE9DS1M7IGkrKyApIHsKKwlzZXFsb2NrX2luaXQoJmF2Y19jYWNoZS5ibG9ja3Nb
aV0ubG9jayk7CisJZm9yICggaiA9IDA7IGogPCBBVkNfQ0FDSEVfU0xPVFNfUEVSX0xPQ0s7IGor
KyApIHsKKwkgICAgYXZkID0ga21hbGxvYyhzaXplb2YoKmF2ZCksIEdGUF9BVE9NSUMgKTsKKwkg
ICAgaWYgKCAhYXZkICkgeworCQlwcmludGsoS0VSTl9XQVJOSU5HIAorCQkgICAgICAgImF2Yzog
b25seSBhYmxlIHRvIGFsbG9jYXRlIHNvbWUgZW50cmllc1xuIik7CiAJCQlicmVhazsKIAkJfQot
CQltZW1zZXQobmV3LCAwLCBzaXplb2YoKm5ldykpOwotCQluZXctPm5leHQgPSBhdmNfbm9kZV9m
cmVlbGlzdDsKLQkJYXZjX25vZGVfZnJlZWxpc3QgPSBuZXc7CisJICAgIG1lbXNldChhdmQsIDAs
IHNpemVvZigqYXZkKSk7CisJICAgIGF2Y19jYWNoZS5ibG9ja3NbaV0uYWVbal0uYXZkID0gYXZk
OworCX0KIAl9CiAKIAlhdWRpdF9sb2coY3VycmVudC0+YXVkaXRfY29udGV4dCwgIkFWQyBJTklU
SUFMSVpFRFxuIik7CiB9CiAKICNpZiAwCiBzdGF0aWMgdm9pZCBhdmNfaGFzaF9ldmFsKGNoYXIg
KnRhZykKIHsKIAlpbnQgaSwgY2hhaW5fbGVuLCBtYXhfY2hhaW5fbGVuLCBzbG90c191c2VkOwog
CXN0cnVjdCBhdmNfbm9kZSAqbm9kZTsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwogCisKIAlzcGlu
X2xvY2tfaXJxc2F2ZSgmYXZjX2xvY2ssZmxhZ3MpOwogCiAJc2xvdHNfdXNlZCA9IDA7CiAJbWF4
X2NoYWluX2xlbiA9IDA7CiAJZm9yIChpID0gMDsgaSA8IEFWQ19DQUNIRV9TTE9UUzsgaSsrKSB7
CiAJCW5vZGUgPSBhdmNfY2FjaGUuc2xvdHNbaV07CiAJCWlmIChub2RlKSB7CiAJCQlzbG90c191
c2VkKys7CiAJCQljaGFpbl9sZW4gPSAwOwogCQkJd2hpbGUgKG5vZGUpIHsKIAkJCQljaGFpbl9s
ZW4rKzsKIAkJCQlub2RlID0gbm9kZS0+bmV4dDsKIAkJCX0KIAkJCWlmIChjaGFpbl9sZW4gPiBt
YXhfY2hhaW5fbGVuKQogCQkJCW1heF9jaGFpbl9sZW4gPSBjaGFpbl9sZW47CiAJCX0KIAl9CiAK
IAlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZhdmNfbG9jayxmbGFncyk7CiAKLQlwcmludGsoS0VS
Tl9JTkZPICJcbiIpOwotCXByaW50ayhLRVJOX0lORk8gIiVzIGF2YzogICVkIGVudHJpZXMgYW5k
ICVkLyVkIGJ1Y2tldHMgdXNlZCwgbG9uZ2VzdCAiCi0JICAgICAgICJjaGFpbiBsZW5ndGggJWRc
biIsIHRhZywgYXZjX2NhY2hlLmFjdGl2ZV9ub2Rlcywgc2xvdHNfdXNlZCwKLQkgICAgICAgQVZD
X0NBQ0hFX1NMT1RTLCBtYXhfY2hhaW5fbGVuKTsKIH0KICNlbHNlCiBzdGF0aWMgaW5saW5lIHZv
aWQgYXZjX2hhc2hfZXZhbChjaGFyICp0YWcpCiB7IH0KICNlbmRpZgogCi1zdGF0aWMgaW5saW5l
IHN0cnVjdCBhdmNfbm9kZSAqYXZjX3JlY2xhaW1fbm9kZSh2b2lkKQotewotCXN0cnVjdCBhdmNf
bm9kZSAqcHJldiwgKmN1cjsKLQlpbnQgaHZhbHVlLCB0cnk7CitzdGF0aWMgaW5saW5lIHN0cnVj
dCBhdmNfZW50cnkgKmF2Y19jbGFpbV9ub2RlKHUzMiBzc2lkLAorCQkJCQkgICAgICAgdTMyIHRz
aWQsIHUxNiB0Y2xhc3MsIAorCQkJCQkgICAgICAgc3RydWN0IGF2X2RlY2lzaW9uICphdmQgKQor
eworICAgIHN0cnVjdCBhdmNfZW50cnkqIG5ldyA9IE5VTEw7CisgICAgc3RydWN0IGF2Y19ub2Rl
KiBibG9jazsKKyAgICBpbnQgaHZhbHVlLCBpLCBzZXEsIGNsYWltX3RoaXNfbm9kZSwgbWFya191
bnVzZWQ9MDsKKyAgICB1bnNpZ25lZCBsb25nIGZsYWdzOwogCi0JaHZhbHVlID0gYXZjX2NhY2hl
LmxydV9oaW50OwotCWZvciAodHJ5ID0gMDsgdHJ5IDwgMjsgdHJ5KyspIHsKLQkJZG8gewotCQkJ
cHJldiA9IE5VTEw7Ci0JCQljdXIgPSBhdmNfY2FjaGUuc2xvdHNbaHZhbHVlXTsKLQkJCXdoaWxl
IChjdXIpIHsKLQkJCQlpZiAoIWN1ci0+YWUudXNlZCkKLQkJCQkJZ290byBmb3VuZDsKKyAgICBo
dmFsdWUgPSAgYXZjX2hhc2goc3NpZCwgdHNpZCwgdGNsYXNzICk7CisgICAgYmxvY2sgPSAmYXZj
X2NhY2hlLmJsb2Nrc1sgaHZhbHVlIF07CiAKLQkJCQljdXItPmFlLnVzZWQgPSAwOworICAgIGRv
IHsKKwkvL3Jlc2V0CisJY2xhaW1fdGhpc19ub2RlID0gLTE7CisJbWFya191bnVzZWQgPSAwOwor
CisJc2VxID0gcmVhZF9zZXFiZWdpbl9pcnFzYXZlKCAmKGJsb2NrLT5sb2NrKSwgZmxhZ3MgKTsK
KworCWlmICggYmxvY2stPmFlW2Jsb2NrLT5uZXh0X2V2aWN0ZWQlQVZDX0NBQ0hFX1NMT1RTX1BF
Ul9MT0NLXS51c2VkIAorCSAgICAgIT0gU0xPVF9SRUNFTlRMWV9VU0VEICkgeworCSAgICBjbGFp
bV90aGlzX25vZGUgPSBibG9jay0+bmV4dF9ldmljdGVkJUFWQ19DQUNIRV9TTE9UU19QRVJfTE9D
SzsKKwl9IGVsc2UgeworCSAgICBmb3IgKCBpID0gMDsgaSA8IEFWQ19DQUNIRV9TTE9UU19QRVJf
TE9DSzsgaSsrICkgeworCQlpZiggYmxvY2stPmFlW2ldLnVzZWQgIT0gU0xPVF9SRUNFTlRMWV9V
U0VEICkgeworCQkgICAgY2xhaW1fdGhpc19ub2RlID0gaTsKKwkJICAgIGJyZWFrOworCQl9IGVs
c2UgeworCQkgICAgLyogU2hvdWxkIG1hcmsgZW50cnkgTk9UX1JFQ0VOVExZX1VTRUQgCisJCSAg
ICAgICB3aWxsIGRvIGJlbG93IHdoaWxlIGhvbGRpbmcgd3JpdGUgbG9jayAKKwkJICAgICAgIGJl
Y2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmbGFnOgorCQkgICAgKi8KKwkJICAgIG1hcmtfdW51c2Vk
PTE7CisJCX0KKwkgICAgfQogCi0JCQkJcHJldiA9IGN1cjsKLQkJCQljdXIgPSBjdXItPm5leHQ7
CiAJCQl9Ci0JCQlodmFsdWUgPSAoaHZhbHVlICsgMSkgJiAoQVZDX0NBQ0hFX1NMT1RTIC0gMSk7
Ci0JCX0gd2hpbGUgKGh2YWx1ZSAhPSBhdmNfY2FjaGUubHJ1X2hpbnQpOworICAgIH0gd2hpbGUg
KCByZWFkX3NlcXJldHJ5X2lycXJlc3RvcmUoICYoYmxvY2stPmxvY2spLCBzZXEsIGZsYWdzICkg
KTsKKworICAgIGlmICggY2xhaW1fdGhpc19ub2RlIDwgMCApIHsKKwljbGFpbV90aGlzX25vZGUg
PSBibG9jay0+bmV4dF9ldmljdGVkJUFWQ19DQUNIRV9TTE9UU19QRVJfTE9DSzsKIAl9CiAKLQlw
YW5pYygiYXZjX3JlY2xhaW1fbm9kZSIpOworICAgIHdyaXRlX3NlcWxvY2tfaXJxc2F2ZSggJihi
bG9jay0+bG9jayksIGZsYWdzICk7CiAKLWZvdW5kOgotCWF2Y19jYWNoZS5scnVfaGludCA9IGh2
YWx1ZTsKKyAgICBuZXcgPSAmKCBibG9jay0+YWVbY2xhaW1fdGhpc19ub2RlXSk7CiAKLQlpZiAo
cHJldiA9PSBOVUxMKQotCQlhdmNfY2FjaGUuc2xvdHNbaHZhbHVlXSA9IGN1ci0+bmV4dDsKLQll
bHNlCi0JCXByZXYtPm5leHQgPSBjdXItPm5leHQ7CisgICAgLy9VcGRhdGVzIHRoYXQgcmVhbGx5
IGJlbG9uZyBhYm92ZSBidXQgcGxhY2VkIGhlcmUgZm9yIGxvY2tpbmcgZWZmaWNpZW5jeQorICAg
IGlmICggYmxvY2stPm5leHRfZXZpY3RlZCVBVkNfQ0FDSEVfU0xPVFNfUEVSX0xPQ0sgPT0gY2xh
aW1fdGhpc19ub2RlICkKKwlibG9jay0+bmV4dF9ldmljdGVkKys7CiAKLQlyZXR1cm4gY3VyOwot
fQorICAgIGlmICggbWFya191bnVzZWQgKQorCWZvciAoIGkgPSAwOyBpIDwgY2xhaW1fdGhpc19u
b2RlOyBpKysgKQorCSAgICBibG9jay0+YWVbaV0udXNlZCA9IFNMT1RfTk9UX1JFQ0VOVExZX1VT
RUQ7CiAKLXN0YXRpYyBpbmxpbmUgc3RydWN0IGF2Y19ub2RlICphdmNfY2xhaW1fbm9kZSh1MzIg
c3NpZCwKLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MzIg
dHNpZCwgdTE2IHRjbGFzcykKLXsKLQlzdHJ1Y3QgYXZjX25vZGUgKm5ldzsKLQlpbnQgaHZhbHVl
OworICAgIG5ldy0+c3NpZCA9IHNzaWQ7CisgICAgbmV3LT50c2lkID0gdHNpZDsKKyAgICBuZXct
PnRjbGFzcyA9IHRjbGFzczsKKyAgICBuZXctPnVzZWQgPSBTTE9UX1JFQ0VOVExZX1VTRUQ7CiAK
LQlodmFsdWUgPSBhdmNfaGFzaChzc2lkLCB0c2lkLCB0Y2xhc3MpOwotCWlmIChhdmNfbm9kZV9m
cmVlbGlzdCkgewotCQluZXcgPSBhdmNfbm9kZV9mcmVlbGlzdDsKLQkJYXZjX25vZGVfZnJlZWxp
c3QgPSBhdmNfbm9kZV9mcmVlbGlzdC0+bmV4dDsKLQkJYXZjX2NhY2hlLmFjdGl2ZV9ub2Rlcysr
OwotCX0gZWxzZSB7Ci0JCW5ldyA9IGF2Y19yZWNsYWltX25vZGUoKTsKLQkJaWYgKCFuZXcpCi0J
CQlnb3RvIG91dDsKLQl9CisgICAgbmV3LT5hdmQtPmFsbG93ZWQgPSBhdmQtPmFsbG93ZWQ7Cisg
ICAgbmV3LT5hdmQtPmRlY2lkZWQgPSBhdmQtPmRlY2lkZWQ7CisgICAgbmV3LT5hdmQtPmF1ZGl0
YWxsb3cgPSBhdmQtPmF1ZGl0YWxsb3c7CisgICAgbmV3LT5hdmQtPmF1ZGl0ZGVueSA9IGF2ZC0+
YXVkaXRkZW55OworICAgIG5ldy0+YXZkLT5zZXFubyA9IGF2ZC0+c2Vxbm87CiAKLQluZXctPmFl
LnVzZWQgPSAxOwotCW5ldy0+YWUuc3NpZCA9IHNzaWQ7Ci0JbmV3LT5hZS50c2lkID0gdHNpZDsK
LQluZXctPmFlLnRjbGFzcyA9IHRjbGFzczsKLQluZXctPm5leHQgPSBhdmNfY2FjaGUuc2xvdHNb
aHZhbHVlXTsKLQlhdmNfY2FjaGUuc2xvdHNbaHZhbHVlXSA9IG5ldzsKKyAgICB3cml0ZV9zZXF1
bmxvY2tfaXJxcmVzdG9yZSggJihibG9jay0+bG9jayksIGZsYWdzICk7CiAKLW91dDoKIAlyZXR1
cm4gbmV3OwogfQogCi1zdGF0aWMgaW5saW5lIHN0cnVjdCBhdmNfbm9kZSAqYXZjX3NlYXJjaF9u
b2RlKHUzMiBzc2lkLCB1MzIgdHNpZCwKK3N0YXRpYyBpbmxpbmUgc3RydWN0IGF2Y19lbnRyeSAq
YXZjX3NlYXJjaF9ub2RlKHUzMiBzc2lkLCB1MzIgdHNpZCwKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgdTE2IHRjbGFzcywgaW50ICpwcm9iZXMpCiB7Ci0J
c3RydWN0IGF2Y19ub2RlICpjdXI7Ci0JaW50IGh2YWx1ZTsKKyAgICBzdHJ1Y3QgYXZjX25vZGUg
KmJsb2NrOworICAgIHN0cnVjdCBhdmNfZW50cnkgKmFlLCAqcmV0PU5VTEw7CisgICAgaW50IGh2
YWx1ZSwgc2VxOwogCWludCB0cHJvYmVzID0gMTsKKyAgICBpbnQgaTsKKyAgICB1bnNpZ25lZCBs
b25nIGZsYWdzOworICAgIGNoYXIgdXNlID0gMDsKIAogCWh2YWx1ZSA9IGF2Y19oYXNoKHNzaWQs
IHRzaWQsIHRjbGFzcyk7Ci0JY3VyID0gYXZjX2NhY2hlLnNsb3RzW2h2YWx1ZV07Ci0Jd2hpbGUg
KGN1ciAhPSBOVUxMICYmCi0JICAgICAgIChzc2lkICE9IGN1ci0+YWUuc3NpZCB8fAotCQl0Y2xh
c3MgIT0gY3VyLT5hZS50Y2xhc3MgfHwKLQkJdHNpZCAhPSBjdXItPmFlLnRzaWQpKSB7CisgICAg
YmxvY2sgPSAmYXZjX2NhY2hlLmJsb2Nrc1todmFsdWVdOworICAgIGRvIHsKKwlzZXEgPSByZWFk
X3NlcWJlZ2luX2lycXNhdmUoICYoYmxvY2stPmxvY2spLCBmbGFncyApOworCWZvciAoIGk9MDsg
aSA8IEFWQ19DQUNIRV9TTE9UU19QRVJfTE9DSzsgaSsrICkgeworCSAgICBhZSA9ICYoYmxvY2st
PmFlW2ldKTsKKwkgICAgaWYgKCBzc2lkICE9IGFlLT5zc2lkIHx8CisJCSB0Y2xhc3MgIT0gYWUt
PnRjbGFzcyB8fAorCQkgdHNpZCAhPSBhZS0+dHNpZCB8fAorCQkgYWUtPnVzZWQgPT0gU0xPVF9J
TlZBTElEICkKIAkJdHByb2JlcysrOwotCQljdXIgPSBjdXItPm5leHQ7CisJICAgIGVsc2Ugewor
CQlyZXQgPSBhZTsKKwkJdXNlID0gcmV0LT51c2VkOworCQlicmVhazsKKwkgICAgfQogCX0KKyAg
ICB9IHdoaWxlICggcmVhZF9zZXFyZXRyeV9pcnFyZXN0b3JlKCAmKGJsb2NrLT5sb2NrKSwgc2Vx
LCBmbGFncyApICk7CiAKLQlpZiAoY3VyID09IE5VTEwpIHsKKyAgICBpZiAocmV0ID09IE5VTEwp
IHsKIAkJLyogY2FjaGUgbWlzcyAqLwogCQlnb3RvIG91dDsKIAl9CiAKKyAgICBpZiAoIHVzZSAh
PSBTTE9UX1JFQ0VOVExZX1VTRUQgKSB7CisJd3JpdGVfc2VxbG9ja19pcnFzYXZlKCAmKGJsb2Nr
LT5sb2NrKSwgZmxhZ3MgKTsKKwlpZiAoIHJldC0+c3NpZCA9PSBzc2lkICYmCisJICAgICByZXQt
PnRzaWQgPT0gdHNpZCAmJgorCSAgICAgcmV0LT50Y2xhc3MgPT0gdGNsYXNzICkKKwkgICAgcmV0
LT51c2VkID0gU0xPVF9SRUNFTlRMWV9VU0VEOworCWVsc2UgeworCSAgICByZXQ9TlVMTDsKKwl9
CisJd3JpdGVfc2VxdW5sb2NrX2lycXJlc3RvcmUoICYoYmxvY2stPmxvY2spLCBmbGFncyApOwkg
ICAgCisgICAgfQorCiAJLyogY2FjaGUgaGl0ICovCi0JaWYgKHByb2JlcykKKyAgICBpZiAocmV0
ICYmIHByb2JlcykKIAkJKnByb2JlcyA9IHRwcm9iZXM7Ci0KLQljdXItPmFlLnVzZWQgPSAxOwot
Ci1vdXQ6Ci0JcmV0dXJuIGN1cjsKKyBvdXQ6CisgICAgcmV0dXJuIHJldDsKIH0KIAogLyoqCiAg
KiBhdmNfbG9va3VwIC0gTG9vayB1cCBhbiBBVkMgZW50cnkuCiAgKiBAc3NpZDogc291cmNlIHNl
Y3VyaXR5IGlkZW50aWZpZXIKICAqIEB0c2lkOiB0YXJnZXQgc2VjdXJpdHkgaWRlbnRpZmllcgog
ICogQHRjbGFzczogdGFyZ2V0IHNlY3VyaXR5IGNsYXNzCiAgKiBAcmVxdWVzdGVkOiByZXF1ZXN0
ZWQgcGVybWlzc2lvbnMsIGludGVycHJldGVkIGJhc2VkIG9uIEB0Y2xhc3MKICAqIEBhZXJlZjog
IEFWQyBlbnRyeSByZWZlcmVuY2UKICAqCiAgKiBMb29rIHVwIGFuIEFWQyBlbnRyeSB0aGF0IGlz
IHZhbGlkIGZvciB0aGUKICAqIEByZXF1ZXN0ZWQgcGVybWlzc2lvbnMgYmV0d2VlbiB0aGUgU0lE
IHBhaXIKICAqIChAc3NpZCwgQHRzaWQpLCBpbnRlcnByZXRpbmcgdGhlIHBlcm1pc3Npb25zCiAg
KiBiYXNlZCBvbiBAdGNsYXNzLiAgSWYgYSB2YWxpZCBBVkMgZW50cnkgZXhpc3RzLAogICogdGhl
biB0aGlzIGZ1bmN0aW9uIHVwZGF0ZXMgQGFlcmVmIHRvIHJlZmVyIHRvIHRoZQogICogZW50cnkg
YW5kIHJldHVybnMgJTAuIE90aGVyd2lzZSwgdGhpcyBmdW5jdGlvbgogICogcmV0dXJucyAtJUVO
T0VOVC4KICAqLwotaW50IGF2Y19sb29rdXAodTMyIHNzaWQsIHUzMiB0c2lkLCB1MTYgdGNsYXNz
LAotICAgICAgICAgICAgICAgdTMyIHJlcXVlc3RlZCwgc3RydWN0IGF2Y19lbnRyeV9yZWYgKmFl
cmVmKQorc3RydWN0IGF2Y19lbnRyeSogYXZjX2xvb2t1cCggdTMyIHNzaWQsIHUzMiB0c2lkLCB1
MTYgdGNsYXNzLCB1MzIgcmVxdWVzdGVkLCBzdHJ1Y3QgYXZfZGVjaXNpb24qIGF2ZCApCisJCQog
ewotCXN0cnVjdCBhdmNfbm9kZSAqbm9kZTsKLQlpbnQgcHJvYmVzLCByYyA9IDA7CisgICAgc3Ry
dWN0IGF2Y19lbnRyeSAqbm9kZSA9IE5VTEw7CisgICAgaW50IHNlcSwgcHJvYmVzLCBodmFsdWU7
CisgICAgdW5zaWduZWQgbG9uZyBmbGFnczsKKyAgICB1MzIgZGVuaWVkOworICAgIGludCBpID0g
MDsKIAogCWF2Y19jYWNoZV9zdGF0c19pbmNyKEFWQ19DQVZfTE9PS1VQUyk7Ci0Jbm9kZSA9IGF2
Y19zZWFyY2hfbm9kZShzc2lkLCB0c2lkLCB0Y2xhc3MsJnByb2Jlcyk7CisgICAgaHZhbHVlID0g
YXZjX2hhc2goIHNzaWQsIHRzaWQsIHRjbGFzcyApOworICAgIG5vZGUgPSBhdmNfc2VhcmNoX25v
ZGUoc3NpZCwgdHNpZCwgdGNsYXNzLCAmcHJvYmVzKTsKKyAgICBpZiAoIG5vZGUgKSB7CisJZG8g
eworCSAgICBzZXEgPSByZWFkX3NlcWJlZ2luX2lycXNhdmUoICYoIGF2Y19jYWNoZS5ibG9ja3Nb
aHZhbHVlXS5sb2NrICksIGZsYWdzICk7IAorCSAgICBpKys7CisJICAgIGlmICggbm9kZS0+c3Np
ZCA9PSBzc2lkICYmIG5vZGUtPnRzaWQgPT0gdHNpZCAmJiBub2RlLT50Y2xhc3MgKSB7CisJCW1l
bWNweSggYXZkLCBub2RlLT5hdmQsIHNpemVvZigqYXZkKSApOworCQlkZW5pZWQgPSByZXF1ZXN0
ZWQgJiB+KGF2ZC0+YWxsb3dlZCk7CisJICAgIH0gZWxzZSB7IC8qIG5vZGUgd2FzIHJlbW92ZWQg
ZnJvbSB0aGUgY2FjaGUgKi8gCisJCW5vZGU9TlVMTDsKKwkJYnJlYWs7CisJICAgIH0KKwl9IHdo
aWxlKCByZWFkX3NlcXJldHJ5X2lycXJlc3RvcmUoICAmKCBhdmNfY2FjaGUuYmxvY2tzW2h2YWx1
ZV0ubG9jayApLCBzZXEsIGZsYWdzICkgKTsgCisJLy9wcmludGsoIEtFUk5fREVCVUcgIlRvIGNv
cHkgYXZkLCBsb29wZWQgJWQgdGltZXMuXG4iLCBpICk7CisgICAgfQogCi0JaWYgKG5vZGUgJiYg
KChub2RlLT5hZS5hdmQuZGVjaWRlZCAmIHJlcXVlc3RlZCkgPT0gcmVxdWVzdGVkKSkgeworICAg
IGlmICggbm9kZSAmJiAoICFyZXF1ZXN0ZWQgfHwgZGVuaWVkICkgJiYgIXNlbGludXhfZW5mb3Jj
aW5nICYmIGF2ZC0+YWxsb3dlZCAhPSAoYXZkLT5hbGxvd2VkfHJlcXVlc3RlZCkgKSB7CisJd3Jp
dGVfc2VxbG9ja19pcnFzYXZlKCAmKGF2Y19jYWNoZS5ibG9ja3NbaHZhbHVlXS5sb2NrKSwgZmxh
Z3MgKTsKKwlpZiAgKCBub2RlLT5zc2lkID09IHNzaWQgJiYgbm9kZS0+dHNpZCA9PSB0c2lkICYm
IG5vZGUtPnRjbGFzcyA9PSB0Y2xhc3MgKQorCSAgICBub2RlLT5hdmQtPmFsbG93ZWQgfD0gcmVx
dWVzdGVkOworCWVsc2UgLyogbm9kZSB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBjYWNoZSAqLyAKKwkg
ICAgbm9kZT1OVUxMOworCXdyaXRlX3NlcXVubG9ja19pcnFyZXN0b3JlKCAmKGF2Y19jYWNoZS5i
bG9ja3NbaHZhbHVlXS5sb2NrKSwgZmxhZ3MgKTsKKyAgICB9CisKKyAgICBpZiAobm9kZSAmJiAo
KCBhdmQtPmRlY2lkZWQgJiByZXF1ZXN0ZWQgKSA9PSByZXF1ZXN0ZWQpKSB7CiAJCWF2Y19jYWNo
ZV9zdGF0c19pbmNyKEFWQ19DQVZfSElUUyk7CiAJCWF2Y19jYWNoZV9zdGF0c19hZGQoQVZDX0NB
Vl9QUk9CRVMscHJvYmVzKTsKLQkJYWVyZWYtPmFlID0gJm5vZGUtPmFlOwogCQlnb3RvIG91dDsK
IAl9CiAKIAlhdmNfY2FjaGVfc3RhdHNfaW5jcihBVkNfQ0FWX01JU1NFUyk7Ci0JcmMgPSAtRU5P
RU5UOwotb3V0OgotCXJldHVybiByYzsKKyAgICAKKyBvdXQ6CisgICAgcmV0dXJuIG5vZGU7CiB9
CiAKIC8qKgogICogYXZjX2luc2VydCAtIEluc2VydCBhbiBBVkMgZW50cnkuCiAgKiBAc3NpZDog
c291cmNlIHNlY3VyaXR5IGlkZW50aWZpZXIKICAqIEB0c2lkOiB0YXJnZXQgc2VjdXJpdHkgaWRl
bnRpZmllcgogICogQHRjbGFzczogdGFyZ2V0IHNlY3VyaXR5IGNsYXNzCiAgKiBAYWU6IEFWQyBl
bnRyeQogICogQGFlcmVmOiAgQVZDIGVudHJ5IHJlZmVyZW5jZQogICoKQEAgLTM4OSw1OCArNDQ5
LDUyIEBACiAgKiAoQHNzaWQsIEB0c2lkKSBhbmQgY2xhc3MgQHRjbGFzcy4KICAqIFRoZSBhY2Nl
c3MgdmVjdG9ycyBhbmQgdGhlIHNlcXVlbmNlIG51bWJlciBhcmUKICAqIG5vcm1hbGx5IHByb3Zp
ZGVkIGJ5IHRoZSBzZWN1cml0eSBzZXJ2ZXIgaW4KICAqIHJlc3BvbnNlIHRvIGEgc2VjdXJpdHlf
Y29tcHV0ZV9hdigpIGNhbGwuICBJZiB0aGUKICAqIHNlcXVlbmNlIG51bWJlciBAYWUtPmF2ZC5z
ZXFubyBpcyBub3QgbGVzcyB0aGFuIHRoZSBsYXRlc3QKICAqIHJldm9jYXRpb24gbm90aWZpY2F0
aW9uLCB0aGVuIHRoZSBmdW5jdGlvbiBjb3BpZXMKICAqIHRoZSBhY2Nlc3MgdmVjdG9ycyBpbnRv
IGEgY2FjaGUgZW50cnksIHVwZGF0ZXMKICAqIEBhZXJlZiB0byByZWZlciB0byB0aGUgZW50cnks
IGFuZCByZXR1cm5zICUwLgogICogT3RoZXJ3aXNlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgLSVF
QUdBSU4uCiAgKi8KLWludCBhdmNfaW5zZXJ0KHUzMiBzc2lkLCB1MzIgdHNpZCwgdTE2IHRjbGFz
cywKLSAgICAgICAgICAgICAgIHN0cnVjdCBhdmNfZW50cnkgKmFlLCBzdHJ1Y3QgYXZjX2VudHJ5
X3JlZiAqYWVyZWYpCitzdHJ1Y3QgYXZjX2VudHJ5KiBhdmNfaW5zZXJ0KHUzMiBzc2lkLCB1MzIg
dHNpZCwgdTE2IHRjbGFzcywgdTMyIHJlcXVlc3RlZCwKKwkJCSAgICAgc3RydWN0IGF2X2RlY2lz
aW9uICphdmQgKQogewotCXN0cnVjdCBhdmNfbm9kZSAqbm9kZTsKLQlpbnQgcmMgPSAwOworICAg
IHN0cnVjdCBhdmNfZW50cnkgKmVudHJ5ID0gTlVMTDsKKyAgICBpbnQgZGVuaWVkOwogCi0JaWYg
KGFlLT5hdmQuc2Vxbm8gPCBhdmNfY2FjaGUubGF0ZXN0X25vdGlmKSB7CisgICAgaWYgKGF2ZC0+
c2Vxbm8gPCBhdG9taWNfcmVhZCgmYXZjX2NhY2hlLmxhdGVzdF9ub3RpZikpIHsKIAkJcHJpbnRr
KEtFUk5fV0FSTklORyAiYXZjOiAgc2Vxbm8gJWQgPCBsYXRlc3Rfbm90aWYgJWRcbiIsCi0JCSAg
ICAgICBhZS0+YXZkLnNlcW5vLCBhdmNfY2FjaGUubGF0ZXN0X25vdGlmKTsKLQkJcmMgPSAtRUFH
QUlOOworCSAgICAgICBhdmQtPnNlcW5vLCBhdG9taWNfcmVhZCgmYXZjX2NhY2hlLmxhdGVzdF9u
b3RpZikpOwogCQlnb3RvIG91dDsKIAl9CiAKLQlub2RlID0gYXZjX2NsYWltX25vZGUoc3NpZCwg
dHNpZCwgdGNsYXNzKTsKLQlpZiAoIW5vZGUpIHsKLQkJcmMgPSAtRU5PTUVNOwotCQlnb3RvIG91
dDsKLQl9CisgICAgZGVuaWVkID0gcmVxdWVzdGVkICYgfiggYXZkLT5hbGxvd2VkICk7CisgICAg
aWYgKCBkZW5pZWQgJiYgIXNlbGludXhfZW5mb3JjaW5nICkKKwlhdmQtPmFsbG93ZWQgfD0gcmVx
dWVzdGVkOwogCi0Jbm9kZS0+YWUuYXZkLmFsbG93ZWQgPSBhZS0+YXZkLmFsbG93ZWQ7Ci0Jbm9k
ZS0+YWUuYXZkLmRlY2lkZWQgPSBhZS0+YXZkLmRlY2lkZWQ7Ci0Jbm9kZS0+YWUuYXZkLmF1ZGl0
YWxsb3cgPSBhZS0+YXZkLmF1ZGl0YWxsb3c7Ci0Jbm9kZS0+YWUuYXZkLmF1ZGl0ZGVueSA9IGFl
LT5hdmQuYXVkaXRkZW55OwotCW5vZGUtPmFlLmF2ZC5zZXFubyA9IGFlLT5hdmQuc2Vxbm87Ci0J
YWVyZWYtPmFlID0gJm5vZGUtPmFlOwotb3V0OgotCXJldHVybiByYzsKKyAgICBlbnRyeSA9IGF2
Y19jbGFpbV9ub2RlKHNzaWQsIHRzaWQsIHRjbGFzcywgYXZkKTsKKwkKKyBvdXQ6CisgICAgcmV0
dXJuIGVudHJ5OwogfQogCiBzdGF0aWMgaW5saW5lIHZvaWQgYXZjX3ByaW50X2lwdjZfYWRkcihz
dHJ1Y3QgYXVkaXRfYnVmZmVyICphYiwKIAkJCQkgICAgICAgc3RydWN0IGluNl9hZGRyICphZGRy
LCB1MTYgcG9ydCwKIAkJCQkgICAgICAgY2hhciAqbmFtZTEsIGNoYXIgKm5hbWUyKQogewogCWlm
ICghaXB2Nl9hZGRyX2FueShhZGRyKSkKIAkJYXVkaXRfbG9nX2Zvcm1hdChhYiwgIiAlcz0lMDR4
OiUwNHg6JTA0eDolMDR4OiUwNHg6IgogCQkJCSAiJTA0eDolMDR4OiUwNHgiLCBuYW1lMSwgTklQ
NigqYWRkcikpOwogCWlmIChwb3J0KQogCQlhdWRpdF9sb2dfZm9ybWF0KGFiLCAiICVzPSVkIiwg
bmFtZTIsIG50b2hzKHBvcnQpKTsKKwogfQogCiBzdGF0aWMgaW5saW5lIHZvaWQgYXZjX3ByaW50
X2lwdjRfYWRkcihzdHJ1Y3QgYXVkaXRfYnVmZmVyICphYiwgdTMyIGFkZHIsCiAJCQkJICAgICAg
IHUxNiBwb3J0LCBjaGFyICpuYW1lMSwgY2hhciAqbmFtZTIpCiB7CiAJaWYgKGFkZHIpCiAJCWF1
ZGl0X2xvZ19mb3JtYXQoYWIsICIgJXM9JWQuJWQuJWQuJWQiLCBuYW1lMSwgTklQUVVBRChhZGRy
KSk7CiAJaWYgKHBvcnQpCiAJCWF1ZGl0X2xvZ19mb3JtYXQoYWIsICIgJXM9JWQiLCBuYW1lMiwg
bnRvaHMocG9ydCkpOwogfQpAQCAtNjcwLDk2ICs3MjQsMTAzIEBACiAJCWdvdG8gb3V0OwogCX0K
IAogCWMtPmNhbGxiYWNrID0gY2FsbGJhY2s7CiAJYy0+ZXZlbnRzID0gZXZlbnRzOwogCWMtPnNz
aWQgPSBzc2lkOwogCWMtPnRzaWQgPSB0c2lkOwogCWMtPnBlcm1zID0gcGVybXM7CiAJYy0+bmV4
dCA9IGF2Y19jYWxsYmFja3M7CiAJYXZjX2NhbGxiYWNrcyA9IGM7Ci1vdXQ6Cisgb3V0OgogCXJl
dHVybiByYzsKIH0KIAogc3RhdGljIGlubGluZSBpbnQgYXZjX3NpZGNtcCh1MzIgeCwgdTMyIHkp
CiB7CiAJcmV0dXJuICh4ID09IHkgfHwgeCA9PSBTRUNTSURfV0lMRCB8fCB5ID09IFNFQ1NJRF9X
SUxEKTsKIH0KIAotc3RhdGljIGlubGluZSB2b2lkIGF2Y191cGRhdGVfbm9kZSh1MzIgZXZlbnQs
IHN0cnVjdCBhdmNfbm9kZSAqbm9kZSwgdTMyIHBlcm1zKQorLyogaG9sZCB3cml0ZSBsb2NrIHdo
ZW4gY2FsbGluZyAqLworc3RhdGljIGlubGluZSB2b2lkIGF2Y191cGRhdGVfbm9kZSh1MzIgZXZl
bnQsIHN0cnVjdCBhdmNfZW50cnkgKiBub2RlLCB1MzIgcGVybXMpCiB7CiAJc3dpdGNoIChldmVu
dCkgewogCWNhc2UgQVZDX0NBTExCQUNLX0dSQU5UOgotCQlub2RlLT5hZS5hdmQuYWxsb3dlZCB8
PSBwZXJtczsKKwlub2RlLT5hdmQtPmFsbG93ZWQgfD0gcGVybXM7CiAJCWJyZWFrOwogCWNhc2Ug
QVZDX0NBTExCQUNLX1RSWV9SRVZPS0U6CiAJY2FzZSBBVkNfQ0FMTEJBQ0tfUkVWT0tFOgotCQlu
b2RlLT5hZS5hdmQuYWxsb3dlZCAmPSB+cGVybXM7CisJbm9kZS0+YXZkLT5hbGxvd2VkICY9IH5w
ZXJtczsKIAkJYnJlYWs7CiAJY2FzZSBBVkNfQ0FMTEJBQ0tfQVVESVRBTExPV19FTkFCTEU6Ci0J
CW5vZGUtPmFlLmF2ZC5hdWRpdGFsbG93IHw9IHBlcm1zOworCW5vZGUtPmF2ZC0+YXVkaXRhbGxv
dyB8PSBwZXJtczsKIAkJYnJlYWs7CiAJY2FzZSBBVkNfQ0FMTEJBQ0tfQVVESVRBTExPV19ESVNB
QkxFOgotCQlub2RlLT5hZS5hdmQuYXVkaXRhbGxvdyAmPSB+cGVybXM7CisJbm9kZS0+YXZkLT5h
dWRpdGFsbG93ICY9IH5wZXJtczsKIAkJYnJlYWs7CiAJY2FzZSBBVkNfQ0FMTEJBQ0tfQVVESVRE
RU5ZX0VOQUJMRToKLQkJbm9kZS0+YWUuYXZkLmF1ZGl0ZGVueSB8PSBwZXJtczsKKwlub2RlLT5h
dmQtPmF1ZGl0ZGVueSB8PSBwZXJtczsKIAkJYnJlYWs7CiAJY2FzZSBBVkNfQ0FMTEJBQ0tfQVVE
SVRERU5ZX0RJU0FCTEU6Ci0JCW5vZGUtPmFlLmF2ZC5hdWRpdGRlbnkgJj0gfnBlcm1zOworCW5v
ZGUtPmF2ZC0+YXVkaXRkZW55ICY9IH5wZXJtczsKIAkJYnJlYWs7CiAJfQogfQogCiBzdGF0aWMg
aW50IGF2Y191cGRhdGVfY2FjaGUodTMyIGV2ZW50LCB1MzIgc3NpZCwgdTMyIHRzaWQsCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgdTE2IHRjbGFzcywgdTMyIHBlcm1zKQogewogCXN0cnVj
dCBhdmNfbm9kZSAqbm9kZTsKLQlpbnQgaTsKKyAgICBzdHJ1Y3QgYXZjX2VudHJ5ICplbnRyeTsK
KyAgICBpbnQgaSwgajsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwogCi0Jc3Bpbl9sb2NrX2lycXNh
dmUoJmF2Y19sb2NrLGZsYWdzKTsKLQogCWlmIChzc2lkID09IFNFQ1NJRF9XSUxEIHx8IHRzaWQg
PT0gU0VDU0lEX1dJTEQpIHsKIAkJLyogYXBwbHkgdG8gYWxsIG1hdGNoaW5nIG5vZGVzICovCi0J
CWZvciAoaSA9IDA7IGkgPCBBVkNfQ0FDSEVfU0xPVFM7IGkrKykgewotCQkJZm9yIChub2RlID0g
YXZjX2NhY2hlLnNsb3RzW2ldOyBub2RlOwotCQkJICAgICBub2RlID0gbm9kZS0+bmV4dCkgewot
CQkJCWlmIChhdmNfc2lkY21wKHNzaWQsIG5vZGUtPmFlLnNzaWQpICYmCi0JCQkJICAgIGF2Y19z
aWRjbXAodHNpZCwgbm9kZS0+YWUudHNpZCkgJiYKLQkJCQkgICAgdGNsYXNzID09IG5vZGUtPmFl
LnRjbGFzcykgewotCQkJCQlhdmNfdXBkYXRlX25vZGUoZXZlbnQsbm9kZSxwZXJtcyk7CisJZm9y
IChpID0gMDsgaSA8IEFWQ19DQUNIRV9CTE9DS1M7IGkrKykgeworCSAgICBub2RlID0gJihhdmNf
Y2FjaGUuYmxvY2tzW2ldKTsKKwkgICAgZm9yIChqID0gMDsgaiA8IEFWQ19DQUNIRV9TTE9UU19Q
RVJfTE9DSzsgaisrICkgeyAKKwkJZW50cnkgPSAmKG5vZGUtPmFlW2pdKTsKKwkJaWYgKGF2Y19z
aWRjbXAoc3NpZCwgZW50cnktPnNzaWQpICYmCisJCSAgICBhdmNfc2lkY21wKHRzaWQsIGVudHJ5
LT50c2lkKSAmJgorCQkgICAgdGNsYXNzID09IGVudHJ5LT50Y2xhc3MpIHsKKwkJICAgIHdyaXRl
X3NlcWxvY2tfaXJxc2F2ZSggJihub2RlLT5sb2NrKSwgZmxhZ3MpOworCQkgICAgaWYgKGF2Y19z
aWRjbXAoc3NpZCwgZW50cnktPnNzaWQpICYmCisJCQlhdmNfc2lkY21wKHRzaWQsIGVudHJ5LT50
c2lkKSAmJgorCQkJdGNsYXNzID09IGVudHJ5LT50Y2xhc3MpIHsKKwkJCWF2Y191cGRhdGVfbm9k
ZShldmVudCxlbnRyeSxwZXJtcyk7CisJCSAgICB9CisJCSAgICB3cml0ZV9zZXF1bmxvY2tfaXJx
cmVzdG9yZSggJihub2RlLT5sb2NrKSwgZmxhZ3MpOwogCQkJCX0KIAkJCX0KIAkJfQogCX0gZWxz
ZSB7CiAJCS8qIGFwcGx5IHRvIG9uZSBub2RlICovCi0JCW5vZGUgPSBhdmNfc2VhcmNoX25vZGUo
c3NpZCwgdHNpZCwgdGNsYXNzLCBOVUxMKTsKLQkJaWYgKG5vZGUpIHsKLQkJCWF2Y191cGRhdGVf
bm9kZShldmVudCxub2RlLHBlcm1zKTsKKwllbnRyeSA9IGF2Y19zZWFyY2hfbm9kZShzc2lkLCB0
c2lkLCB0Y2xhc3MsIE5VTEwpOworCWlmIChlbnRyeSkgeworCSAgICBub2RlID0gJihhdmNfY2Fj
aGUuYmxvY2tzWyBhdmNfaGFzaCggc3NpZCx0c2lkLHRjbGFzcykgXSApOworCSAgICB3cml0ZV9z
ZXFsb2NrX2lycXNhdmUoICYobm9kZS0+bG9jayksIGZsYWdzKTsKKwkgICAgaWYgKCBlbnRyeS0+
c3NpZCA9PSBzc2lkICYmIGVudHJ5LT50c2lkID09IHRzaWQgJiYgZW50cnktPnRjbGFzcyA9PSB0
Y2xhc3MgKQorCQlhdmNfdXBkYXRlX25vZGUoZXZlbnQsZW50cnkscGVybXMpOworCSAgICB3cml0
ZV9zZXF1bmxvY2tfaXJxcmVzdG9yZSggJihub2RlLT5sb2NrKSwgZmxhZ3MpOwogCQl9CiAJfQot
Ci0Jc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmYXZjX2xvY2ssZmxhZ3MpOwotCiAJcmV0dXJuIDA7
CiB9CiAKIHN0YXRpYyBpbnQgYXZjX2NvbnRyb2wodTMyIGV2ZW50LCB1MzIgc3NpZCwgdTMyIHRz
aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHUxNiB0Y2xhc3MsIHUzMiBwZXJtcywKICAgICAg
ICAgICAgICAgICAgICAgICAgdTMyIHNlcW5vLCB1MzIgKm91dF9yZXRhaW5lZCkKIHsKIAlzdHJ1
Y3QgYXZjX2NhbGxiYWNrX25vZGUgKmM7CiAJdTMyIHRyZXRhaW5lZCA9IDAsIGNyZXRhaW5lZCA9
IDA7CiAJaW50IHJjID0gMDsKLQl1bnNpZ25lZCBsb25nIGZsYWdzOwogCiAJLyoKIAkgKiB0cnlf
cmV2b2tlIG9ubHkgcmVtb3ZlcyBwZXJtaXNzaW9ucyBmcm9tIHRoZSBjYWNoZQogCSAqIHN0YXRl
IGlmIHRoZXkgYXJlIG5vdCByZXRhaW5lZCBieSB0aGUgb2JqZWN0IG1hbmFnZXIuCiAJICogSGVu
Y2UsIHRyeV9yZXZva2UgbXVzdCB3YWl0IHVudGlsIGFmdGVyIHRoZSBjYWxsYmFja3MgaGF2ZQog
CSAqIGJlZW4gaW52b2tlZCB0byB1cGRhdGUgdGhlIGNhY2hlIHN0YXRlLgogCSAqLwogCWlmIChl
dmVudCAhPSBBVkNfQ0FMTEJBQ0tfVFJZX1JFVk9LRSkKIAkJYXZjX3VwZGF0ZV9jYWNoZShldmVu
dCxzc2lkLHRzaWQsdGNsYXNzLHBlcm1zKTsKIApAQCAtNzgwLDI2ICs4NDEsMjQgQEAKIAkJfQog
CX0KIAogCWlmIChldmVudCA9PSBBVkNfQ0FMTEJBQ0tfVFJZX1JFVk9LRSkgewogCQkvKiByZXZv
a2UgYW55IHVucmV0YWluZWQgcGVybWlzc2lvbnMgKi8KIAkJcGVybXMgJj0gfnRyZXRhaW5lZDsK
IAkJYXZjX3VwZGF0ZV9jYWNoZShldmVudCxzc2lkLHRzaWQsdGNsYXNzLHBlcm1zKTsKIAkJKm91
dF9yZXRhaW5lZCA9IHRyZXRhaW5lZDsKIAl9CiAKLQlzcGluX2xvY2tfaXJxc2F2ZSgmYXZjX2xv
Y2ssZmxhZ3MpOwotCWlmIChzZXFubyA+IGF2Y19jYWNoZS5sYXRlc3Rfbm90aWYpCi0JCWF2Y19j
YWNoZS5sYXRlc3Rfbm90aWYgPSBzZXFubzsKLQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZhdmNf
bG9jayxmbGFncyk7CisgICAgaWYgKHNlcW5vID4gYXRvbWljX3JlYWQoJmF2Y19jYWNoZS5sYXRl
c3Rfbm90aWYpKQorCWF0b21pY19zZXQoJmF2Y19jYWNoZS5sYXRlc3Rfbm90aWYsIHNlcW5vKTsK
IAotb3V0OgorIG91dDoKIAlyZXR1cm4gcmM7CiB9CiAKIC8qKgogICogYXZjX3NzX2dyYW50IC0g
R3JhbnQgcHJldmlvdXNseSBkZW5pZWQgcGVybWlzc2lvbnMuCiAgKiBAc3NpZDogc291cmNlIHNl
Y3VyaXR5IGlkZW50aWZpZXIgb3IgJVNFQ1NJRF9XSUxECiAgKiBAdHNpZDogdGFyZ2V0IHNlY3Vy
aXR5IGlkZW50aWZpZXIgb3IgJVNFQ1NJRF9XSUxECiAgKiBAdGNsYXNzOiB0YXJnZXQgc2VjdXJp
dHkgY2xhc3MKICAqIEBwZXJtczogcGVybWlzc2lvbnMgdG8gZ3JhbnQKICAqIEBzZXFubzogcG9s
aWN5IHNlcXVlbmNlIG51bWJlcgpAQCAtODIwLDk0ICs4NzksODYgQEAKICAqIEBzZXFubzogcG9s
aWN5IHNlcXVlbmNlIG51bWJlcgogICogQG91dF9yZXRhaW5lZDogc3Vic2V0IG9mIEBwZXJtcyB0
aGF0IGFyZSByZXRhaW5lZAogICoKICAqIFRyeSB0byByZXZva2UgcHJldmlvdXNseSBncmFudGVk
IHBlcm1pc3Npb25zLCBidXQKICAqIG9ubHkgaWYgdGhleSBhcmUgbm90IHJldGFpbmVkIGFzIG1p
Z3JhdGVkIHBlcm1pc3Npb25zLgogICogUmV0dXJuIHRoZSBzdWJzZXQgb2YgcGVybWlzc2lvbnMg
dGhhdCBhcmUgcmV0YWluZWQgdmlhIEBvdXRfcmV0YWluZWQuCiAgKi8KIGludCBhdmNfc3NfdHJ5
X3Jldm9rZSh1MzIgc3NpZCwgdTMyIHRzaWQsIHUxNiB0Y2xhc3MsCiAgICAgICAgICAgICAgICAg
ICAgICAgdTMyIHBlcm1zLCB1MzIgc2Vxbm8sIHUzMiAqb3V0X3JldGFpbmVkKQogeworCiAJcmV0
dXJuIGF2Y19jb250cm9sKEFWQ19DQUxMQkFDS19UUllfUkVWT0tFLAogCQkJICAgc3NpZCwgdHNp
ZCwgdGNsYXNzLCBwZXJtcywgc2Vxbm8sIG91dF9yZXRhaW5lZCk7CiB9CiAKIC8qKgogICogYXZj
X3NzX3Jldm9rZSAtIFJldm9rZSBwcmV2aW91c2x5IGdyYW50ZWQgcGVybWlzc2lvbnMuCiAgKiBA
c3NpZDogc291cmNlIHNlY3VyaXR5IGlkZW50aWZpZXIgb3IgJVNFQ1NJRF9XSUxECiAgKiBAdHNp
ZDogdGFyZ2V0IHNlY3VyaXR5IGlkZW50aWZpZXIgb3IgJVNFQ1NJRF9XSUxECiAgKiBAdGNsYXNz
OiB0YXJnZXQgc2VjdXJpdHkgY2xhc3MKICAqIEBwZXJtczogcGVybWlzc2lvbnMgdG8gZ3JhbnQK
ICAqIEBzZXFubzogcG9saWN5IHNlcXVlbmNlIG51bWJlcgogICoKICAqIFJldm9rZSBwcmV2aW91
c2x5IGdyYW50ZWQgcGVybWlzc2lvbnMsIGV2ZW4gaWYKICAqIHRoZXkgYXJlIHJldGFpbmVkIGFz
IG1pZ3JhdGVkIHBlcm1pc3Npb25zLgogICovCiBpbnQgYXZjX3NzX3Jldm9rZSh1MzIgc3NpZCwg
dTMyIHRzaWQsIHUxNiB0Y2xhc3MsCiAgICAgICAgICAgICAgICAgICB1MzIgcGVybXMsIHUzMiBz
ZXFubykKIHsKKwogCXJldHVybiBhdmNfY29udHJvbChBVkNfQ0FMTEJBQ0tfUkVWT0tFLAogCQkJ
ICAgc3NpZCwgdHNpZCwgdGNsYXNzLCBwZXJtcywgc2Vxbm8sIE5VTEwpOwogfQogCiAvKioKICAq
IGF2Y19zc19yZXNldCAtIEZsdXNoIHRoZSBjYWNoZSBhbmQgcmV2YWxpZGF0ZSBtaWdyYXRlZCBw
ZXJtaXNzaW9ucy4KICAqIEBzZXFubzogcG9saWN5IHNlcXVlbmNlIG51bWJlcgogICovCiBpbnQg
YXZjX3NzX3Jlc2V0KHUzMiBzZXFubykKIHsKIAlzdHJ1Y3QgYXZjX2NhbGxiYWNrX25vZGUgKmM7
Ci0JaW50IGksIHJjID0gMDsKLQlzdHJ1Y3QgYXZjX25vZGUgKm5vZGUsICp0bXA7CisgICAgaW50
IGksIGosIHJjID0gMDsKKyAgICBzdHJ1Y3QgYXZjX25vZGUgKm5vZGU7CisgICAgc3RydWN0IGF2
Y19lbnRyeSAqZW50cnk7CiAJdW5zaWduZWQgbG9uZyBmbGFnczsKIAotCWF2Y19oYXNoX2V2YWwo
InJlc2V0Iik7CiAKLQlzcGluX2xvY2tfaXJxc2F2ZSgmYXZjX2xvY2ssZmxhZ3MpOworICAgIGF2
Y19oYXNoX2V2YWwoInJlc2V0Iik7CiAKLQlmb3IgKGkgPSAwOyBpIDwgQVZDX0NBQ0hFX1NMT1RT
OyBpKyspIHsKLQkJbm9kZSA9IGF2Y19jYWNoZS5zbG90c1tpXTsKLQkJd2hpbGUgKG5vZGUpIHsK
LQkJCXRtcCA9IG5vZGU7Ci0JCQlub2RlID0gbm9kZS0+bmV4dDsKLQkJCXRtcC0+YWUuc3NpZCA9
IHRtcC0+YWUudHNpZCA9IFNFQ1NJRF9OVUxMOwotCQkJdG1wLT5hZS50Y2xhc3MgPSBTRUNDTEFT
U19OVUxMOwotCQkJdG1wLT5hZS5hdmQuYWxsb3dlZCA9IHRtcC0+YWUuYXZkLmRlY2lkZWQgPSAw
OwotCQkJdG1wLT5hZS5hdmQuYXVkaXRhbGxvdyA9IHRtcC0+YWUuYXZkLmF1ZGl0ZGVueSA9IDA7
Ci0JCQl0bXAtPmFlLnVzZWQgPSAwOwotCQkJdG1wLT5uZXh0ID0gYXZjX25vZGVfZnJlZWxpc3Q7
Ci0JCQlhdmNfbm9kZV9mcmVlbGlzdCA9IHRtcDsKLQkJCWF2Y19jYWNoZS5hY3RpdmVfbm9kZXMt
LTsKKyAgICBmb3IgKGkgPSAwOyBpIDwgQVZDX0NBQ0hFX0JMT0NLUzsgaSsrKSB7CisJbm9kZSA9
ICYoYXZjX2NhY2hlLmJsb2Nrc1tpXSk7CisJd3JpdGVfc2VxbG9ja19pcnFzYXZlKCAmKG5vZGUt
PmxvY2spLCBmbGFncyk7CisJZm9yICggaiA9IDA7IGogPCBBVkNfQ0FDSEVfU0xPVFNfUEVSX0xP
Q0s7IGorKyApIHsKKwkgICAgZW50cnkgPSAmKG5vZGUtPmFlW2pdKTsKKwkgICAgZW50cnktPnVz
ZWQgPSBTTE9UX0lOVkFMSUQ7CisJICAgIGVudHJ5LT5zc2lkID0gZW50cnktPnRzaWQgPSBTRUNT
SURfTlVMTDsKKwkgICAgZW50cnktPnRjbGFzcyA9IFNFQ0NMQVNTX05VTEw7CisJICAgIGVudHJ5
LT5hdmQtPmFsbG93ZWQgPSBlbnRyeS0+YXZkLT5kZWNpZGVkID0gMDsKKwkgICAgZW50cnktPmF2
ZC0+YXVkaXRhbGxvdyA9IGVudHJ5LT5hdmQtPmF1ZGl0ZGVueSA9IDA7CiAJCX0KLQkJYXZjX2Nh
Y2hlLnNsb3RzW2ldID0gTlVMTDsKKwlub2RlLT5uZXh0X2V2aWN0ZWQgPSAwOworCXdyaXRlX3Nl
cXVubG9ja19pcnFyZXN0b3JlKCAmKG5vZGUtPmxvY2spLCBmbGFncyk7CiAJfQotCWF2Y19jYWNo
ZS5scnVfaGludCA9IDA7Ci0KLQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZhdmNfbG9jayxmbGFn
cyk7Ci0KIAlmb3IgKGkgPSAwOyBpIDwgQVZDX05TVEFUUzsgaSsrKQogCQlhdmNfY2FjaGVfc3Rh
dHNbaV0gPSAwOwotCiAJZm9yIChjID0gYXZjX2NhbGxiYWNrczsgYzsgYyA9IGMtPm5leHQpIHsK
IAkJaWYgKGMtPmV2ZW50cyAmIEFWQ19DQUxMQkFDS19SRVNFVCkgewogCQkJcmMgPSBjLT5jYWxs
YmFjayhBVkNfQ0FMTEJBQ0tfUkVTRVQsCiAJCQkJCSAwLCAwLCAwLCAwLCBOVUxMKTsKIAkJCWlm
IChyYykKIAkJCQlnb3RvIG91dDsKIAkJfQogCX0KLQotCXNwaW5fbG9ja19pcnFzYXZlKCZhdmNf
bG9jayxmbGFncyk7Ci0JaWYgKHNlcW5vID4gYXZjX2NhY2hlLmxhdGVzdF9ub3RpZikKLQkJYXZj
X2NhY2hlLmxhdGVzdF9ub3RpZiA9IHNlcW5vOwotCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJmF2
Y19sb2NrLGZsYWdzKTsKLW91dDoKKyAgICBpZiAoc2Vxbm8gPiBhdG9taWNfcmVhZCgmYXZjX2Nh
Y2hlLmxhdGVzdF9ub3RpZikpCisJYXRvbWljX3NldCgmYXZjX2NhY2hlLmxhdGVzdF9ub3RpZiwg
c2Vxbm8pOworIG91dDoKIAlyZXR1cm4gcmM7CiB9CiAKIC8qKgogICogYXZjX3NzX3NldF9hdWRp
dGFsbG93IC0gRW5hYmxlIG9yIGRpc2FibGUgYXVkaXRpbmcgb2YgZ3JhbnRlZCBwZXJtaXNzaW9u
cy4KICAqIEBzc2lkOiBzb3VyY2Ugc2VjdXJpdHkgaWRlbnRpZmllciBvciAlU0VDU0lEX1dJTEQK
ICAqIEB0c2lkOiB0YXJnZXQgc2VjdXJpdHkgaWRlbnRpZmllciBvciAlU0VDU0lEX1dJTEQKICAq
IEB0Y2xhc3M6IHRhcmdldCBzZWN1cml0eSBjbGFzcwogICogQHBlcm1zOiBwZXJtaXNzaW9ucyB0
byBncmFudAogICogQHNlcW5vOiBwb2xpY3kgc2VxdWVuY2UgbnVtYmVyCkBAIC05NjIsODUgKzEw
MTMsNDQgQEAKICAqIC0lRUFDQ0VTIGlmIGFueSBwZXJtaXNzaW9ucyBhcmUgZGVuaWVkLCBvciBh
bm90aGVyIC1lcnJubyB1cG9uCiAgKiBvdGhlciBlcnJvcnMuICBUaGlzIGZ1bmN0aW9uIGlzIHR5
cGljYWxseSBjYWxsZWQgYnkgYXZjX2hhc19wZXJtKCksCiAgKiBidXQgbWF5IGFsc28gYmUgY2Fs
bGVkIGRpcmVjdGx5IHRvIHNlcGFyYXRlIHBlcm1pc3Npb24gY2hlY2tpbmcgZnJvbQogICogYXVk
aXRpbmcsIGUuZy4gaW4gY2FzZXMgd2hlcmUgYSBsb2NrIG11c3QgYmUgaGVsZCBmb3IgdGhlIGNo
ZWNrIGJ1dAogICogc2hvdWxkIGJlIHJlbGVhc2VkIGZvciB0aGUgYXVkaXRpbmcuCiAgKi8KIGlu
dCBhdmNfaGFzX3Blcm1fbm9hdWRpdCh1MzIgc3NpZCwgdTMyIHRzaWQsCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgdTE2IHRjbGFzcywgdTMyIHJlcXVlc3RlZCwKICAgICAgICAgICAgICAgICAg
ICAgICAgICBzdHJ1Y3QgYXZjX2VudHJ5X3JlZiAqYWVyZWYsIHN0cnVjdCBhdl9kZWNpc2lvbiAq
YXZkKQogewotCXN0cnVjdCBhdmNfZW50cnkgKmFlOworICAgIHN0cnVjdCBhdl9kZWNpc2lvbiBk
ZWMsICp0ZGVjOwogCWludCByYyA9IDA7Ci0JdW5zaWduZWQgbG9uZyBmbGFnczsKLQlzdHJ1Y3Qg
YXZjX2VudHJ5IGVudHJ5OwotCXUzMiBkZW5pZWQ7Ci0Jc3RydWN0IGF2Y19lbnRyeV9yZWYgcmVm
OworICAgIC8vdW5zaWduZWQgbG9uZyBmbGFnczsKKyAgICBzdHJ1Y3QgYXZjX2VudHJ5KiBlbnRy
eTsKKyAgICAvL3UzMiBkZW5pZWQ7CisgICAgLy9pbnQgc2VxLCBodmFsdWU7CiAKLQlpZiAoIWFl
cmVmKSB7Ci0JCWF2Y19lbnRyeV9yZWZfaW5pdCgmcmVmKTsKLQkJYWVyZWYgPSAmcmVmOwotCX0K
KyAgICBpZiAoYXZkKQorCXRkZWM9YXZkOworICAgIGVsc2UKKwl0ZGVjPSZkZWM7CiAKLQlzcGlu
X2xvY2tfaXJxc2F2ZSgmYXZjX2xvY2ssIGZsYWdzKTsKIAlhdmNfY2FjaGVfc3RhdHNfaW5jcihB
VkNfRU5UUllfTE9PS1VQUyk7Ci0JYWUgPSBhZXJlZi0+YWU7Ci0JaWYgKGFlKSB7Ci0JCWlmIChh
ZS0+c3NpZCA9PSBzc2lkICYmCi0JCSAgICBhZS0+dHNpZCA9PSB0c2lkICYmCi0JCSAgICBhZS0+
dGNsYXNzID09IHRjbGFzcyAmJgotCQkgICAgKChhZS0+YXZkLmRlY2lkZWQgJiByZXF1ZXN0ZWQp
ID09IHJlcXVlc3RlZCkpIHsKLQkJCWF2Y19jYWNoZV9zdGF0c19pbmNyKEFWQ19FTlRSWV9ISVRT
KTsKLQkJCWFlLT51c2VkID0gMTsKLQkJfSBlbHNlIHsKLQkJCWF2Y19jYWNoZV9zdGF0c19pbmNy
KEFWQ19FTlRSWV9ESVNDQVJEUyk7Ci0JCQlhZSA9IE5VTEw7Ci0JCX0KLQl9Ci0KLQlpZiAoIWFl
KSB7Ci0JCWF2Y19jYWNoZV9zdGF0c19pbmNyKEFWQ19FTlRSWV9NSVNTRVMpOwotCQlyYyA9IGF2
Y19sb29rdXAoc3NpZCwgdHNpZCwgdGNsYXNzLCByZXF1ZXN0ZWQsIGFlcmVmKTsKLQkJaWYgKHJj
KSB7Ci0JCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZhdmNfbG9jayxmbGFncyk7Ci0JCQlyYyA9
IHNlY3VyaXR5X2NvbXB1dGVfYXYoc3NpZCx0c2lkLHRjbGFzcyxyZXF1ZXN0ZWQsJmVudHJ5LmF2
ZCk7CisgICAgZW50cnkgPSBhdmNfbG9va3VwKHNzaWQsIHRzaWQsIHRjbGFzcywgcmVxdWVzdGVk
LCB0ZGVjKTsKKyAgICBpZiAoICFlbnRyeSApIHsKKwlyYyA9IHNlY3VyaXR5X2NvbXB1dGVfYXYo
c3NpZCx0c2lkLHRjbGFzcyxyZXF1ZXN0ZWQsdGRlYyk7CiAJCQlpZiAocmMpCiAJCQkJZ290byBv
dXQ7Ci0JCQlzcGluX2xvY2tfaXJxc2F2ZSgmYXZjX2xvY2ssIGZsYWdzKTsKLQkJCXJjID0gYXZj
X2luc2VydChzc2lkLHRzaWQsdGNsYXNzLCZlbnRyeSxhZXJlZik7Ci0JCQlpZiAocmMpIHsKLQkJ
CQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZhdmNfbG9jayxmbGFncyk7Ci0JCQkJZ290byBvdXQ7
Ci0JCQl9Ci0JCX0KLQkJYWUgPSBhZXJlZi0+YWU7Ci0JfQotCi0JaWYgKGF2ZCkKLQkJbWVtY3B5
KGF2ZCwgJmFlLT5hdmQsIHNpemVvZigqYXZkKSk7Ci0KLQlkZW5pZWQgPSByZXF1ZXN0ZWQgJiB+
KGFlLT5hdmQuYWxsb3dlZCk7Ci0KLQlpZiAoIXJlcXVlc3RlZCB8fCBkZW5pZWQpIHsKLQkJaWYg
KHNlbGludXhfZW5mb3JjaW5nKSB7Ci0JCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZhdmNfbG9j
ayxmbGFncyk7Ci0JCQlyYyA9IC1FQUNDRVM7Ci0JCQlnb3RvIG91dDsKLQkJfSBlbHNlIHsKLQkJ
CWFlLT5hdmQuYWxsb3dlZCB8PSByZXF1ZXN0ZWQ7Ci0JCQlzcGluX3VubG9ja19pcnFyZXN0b3Jl
KCZhdmNfbG9jayxmbGFncyk7CisJZW50cnkgPSBhdmNfaW5zZXJ0KHNzaWQsdHNpZCx0Y2xhc3Ms
cmVxdWVzdGVkLHRkZWMpOworCWlmICghZW50cnkpCiAJCQlnb3RvIG91dDsKIAkJfQotCX0KIAot
CXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJmF2Y19sb2NrLGZsYWdzKTsKLW91dDoKKyBvdXQ6CiAJ
cmV0dXJuIHJjOwogfQogCiAvKioKICAqIGF2Y19oYXNfcGVybSAtIENoZWNrIHBlcm1pc3Npb25z
IGFuZCBwZXJmb3JtIGFueSBhcHByb3ByaWF0ZSBhdWRpdGluZy4KICAqIEBzc2lkOiBzb3VyY2Ug
c2VjdXJpdHkgaWRlbnRpZmllcgogICogQHRzaWQ6IHRhcmdldCBzZWN1cml0eSBpZGVudGlmaWVy
CiAgKiBAdGNsYXNzOiB0YXJnZXQgc2VjdXJpdHkgY2xhc3MKICAqIEByZXF1ZXN0ZWQ6IHJlcXVl
c3RlZCBwZXJtaXNzaW9ucywgaW50ZXJwcmV0ZWQgYmFzZWQgb24gQHRjbGFzcwogICogQGFlcmVm
OiAgQVZDIGVudHJ5IHJlZmVyZW5jZQpAQCAtMTA1NywxMiArMTA2NywxMyBAQAogICovCiBpbnQg
YXZjX2hhc19wZXJtKHUzMiBzc2lkLCB1MzIgdHNpZCwgdTE2IHRjbGFzcywKICAgICAgICAgICAg
ICAgICAgdTMyIHJlcXVlc3RlZCwgc3RydWN0IGF2Y19lbnRyeV9yZWYgKmFlcmVmLAogICAgICAg
ICAgICAgICAgICBzdHJ1Y3QgYXZjX2F1ZGl0X2RhdGEgKmF1ZGl0ZGF0YSkKIHsKIAlzdHJ1Y3Qg
YXZfZGVjaXNpb24gYXZkOwogCWludCByYzsKIAogCXJjID0gYXZjX2hhc19wZXJtX25vYXVkaXQo
c3NpZCwgdHNpZCwgdGNsYXNzLCByZXF1ZXN0ZWQsIGFlcmVmLCAmYXZkKTsKIAlhdmNfYXVkaXQo
c3NpZCwgdHNpZCwgdGNsYXNzLCByZXF1ZXN0ZWQsICZhdmQsIHJjLCBhdWRpdGRhdGEpOworCiAJ
cmV0dXJuIHJjOwogfQotLS0gbGludXgtMi42LjguMS9zZWN1cml0eS9zZWxpbnV4L2luY2x1ZGUv
YXZjLmgJMjAwNC0wOC0xNCAwNTo1NDo1MS4wMDAwMDAwMDAgLTA1MDAKKysrIGxpbnV4LTIuNi44
LjEtbXlzZXEvc2VjdXJpdHkvc2VsaW51eC9pbmNsdWRlL2F2Yy5oCTIwMDQtMDktMTAgMTY6Mjc6
NTYuMDAwMDAwMDAwIC0wNTAwCkBAIC0xMTIsMjUgKzExMiwyNiBAQAogdm9pZCBhdmNfZHVtcF9h
dihzdHJ1Y3QgYXVkaXRfYnVmZmVyICphYiwgdTE2IHRjbGFzcywgdTMyIGF2KTsKIHZvaWQgYXZj
X2R1bXBfcXVlcnkoc3RydWN0IGF1ZGl0X2J1ZmZlciAqYWIsIHUzMiBzc2lkLCB1MzIgdHNpZCwg
dTE2IHRjbGFzcyk7CiB2b2lkIGF2Y19kdW1wX2NhY2hlKHN0cnVjdCBhdWRpdF9idWZmZXIgKmFi
LCBjaGFyICp0YWcpOwogCiAvKgogICogQVZDIG9wZXJhdGlvbnMKICAqLwogCiB2b2lkIF9faW5p
dCBhdmNfaW5pdCh2b2lkKTsKIAotaW50IGF2Y19sb29rdXAodTMyIHNzaWQsIHUzMiB0c2lkLCB1
MTYgdGNsYXNzLAotICAgICAgICAgICAgICAgdTMyIHJlcXVlc3RlZCwgc3RydWN0IGF2Y19lbnRy
eV9yZWYgKmFlcmVmKTsKK3N0cnVjdCBhdmNfZW50cnkqIGF2Y19sb29rdXAodTMyIHNzaWQsIHUz
MiB0c2lkLCB1MTYgdGNsYXNzLAorCQkJICAgICB1MzIgcmVxdWVzdGVkLCBzdHJ1Y3QgYXZfZGVj
aXNpb24qIGF2ZCApOworCitzdHJ1Y3QgYXZjX2VudHJ5KiBhdmNfaW5zZXJ0KHUzMiBzc2lkLCB1
MzIgdHNpZCwgdTE2IHRjbGFzcywgdTMyIHJlcXVlc3RlZCwKKwkJCSAgICAgc3RydWN0IGF2X2Rl
Y2lzaW9uKiBhdmQgKTsKIAotaW50IGF2Y19pbnNlcnQodTMyIHNzaWQsIHUzMiB0c2lkLCB1MTYg
dGNsYXNzLAotICAgICAgICAgICAgICAgc3RydWN0IGF2Y19lbnRyeSAqYWUsIHN0cnVjdCBhdmNf
ZW50cnlfcmVmICpvdXRfYWVyZWYpOwogCiB2b2lkIGF2Y19hdWRpdCh1MzIgc3NpZCwgdTMyIHRz
aWQsCiAgICAgICAgICAgICAgICB1MTYgdGNsYXNzLCB1MzIgcmVxdWVzdGVkLAogICAgICAgICAg
ICAgICAgc3RydWN0IGF2X2RlY2lzaW9uICphdmQsIGludCByZXN1bHQsIHN0cnVjdCBhdmNfYXVk
aXRfZGF0YSAqYXVkaXRkYXRhKTsKIAogaW50IGF2Y19oYXNfcGVybV9ub2F1ZGl0KHUzMiBzc2lk
LCB1MzIgdHNpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICB1MTYgdGNsYXNzLCB1MzIgcmVx
dWVzdGVkLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBhdmNfZW50cnlfcmVmICph
ZXJlZiwgc3RydWN0IGF2X2RlY2lzaW9uICphdmQpOwogCiBpbnQgYXZjX2hhc19wZXJtKHUzMiBz
c2lkLCB1MzIgdHNpZCwK

--=_mixed 0053D24A05256F2A_=--
