Return-Path: <linux-kernel-owner+willy=40w.ods.org@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S262636AbTFTKTJ (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 20 Jun 2003 06:19:09 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S262645AbTFTKTJ
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 20 Jun 2003 06:19:09 -0400
Received: from 81-2-122-30.bradfords.org.uk ([81.2.122.30]:12928 "EHLO
	81-2-122-30.bradfords.org.uk") by vger.kernel.org with ESMTP
	id S262636AbTFTKTG (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 20 Jun 2003 06:19:06 -0400
Date: Fri, 20 Jun 2003 11:40:53 +0100
From: John Bradford <john@grabjohn.com>
Message-Id: <200306201040.h5KAerPK000431@81-2-122-30.bradfords.org.uk>
To: nuno.silva@vgertech.com, torvalds@transmeta.com
Subject: Re: Crusoe's persistent translation on linux?
Cc: linux-kernel@vger.kernel.org, samphan@thai.com, vojtech@suse.cz
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

> The translations are usually _better_ than statically compiled native 
> code (because the whole CPU is designed for speculation, and the static 
> compilers don't know how to do that), and thus going to native mode is not 
> necessarily a performance improvement.

Would it be possible, (with relevant documentation), to tune the code
morphing software for optimum performance of code generated by a
specific compiler, though?

If a particular version of GCC favours certain constructs and uses
particular sets of registers for a given piece of code, couldn't we
optimise for those cases, at the expense of others?  Maybe a
particular compiler doesn't use certain X86 instructions at all, and
these could be eliminated altogether?

It's not unlikely that an entirely open source system could have all
code compiled with the same compiler, and so maybe we can use this to
avoid implementing expensive corner cases in the CPU, because we're
never going to trigger them.

John.
