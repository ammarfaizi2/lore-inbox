Return-Path: <linux-kernel-owner+willy=40w.ods.org-S932478AbWHQV63@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932478AbWHQV63 (ORCPT <rfc822;willy@w.ods.org>);
	Thu, 17 Aug 2006 17:58:29 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S932468AbWHQV62
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Thu, 17 Aug 2006 17:58:28 -0400
Received: from py-out-1112.google.com ([64.233.166.182]:41067 "EHLO
	py-out-1112.google.com") by vger.kernel.org with ESMTP
	id S932376AbWHQV61 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Thu, 17 Aug 2006 17:58:27 -0400
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=VaBGV7OAllgeJp3ievFciO8Q2xLqr5m3q/Jvtk53oifIOK8qzK6mzlYRKnl13ZaNPfPFiww+nh6zQlXYl2tq0KWCoLCGATAHACR78Gv/U3SGb2rhVaYrC509yO2vJ9Ad62vz3N9U22vyJw1n4N4qrlIjHu5drRUKCWUM15SlGP4=
Message-ID: <b0943d9e0608171458l45b717bexbfb8fb2ba68228db@mail.gmail.com>
Date: Thu, 17 Aug 2006 22:58:26 +0100
From: "Catalin Marinas" <catalin.marinas@gmail.com>
To: "Michal Piotrowski" <michal.k.k.piotrowski@gmail.com>
Subject: Re: [PATCH 2.6.18-rc4 00/10] Kernel memory leak detector 0.9
Cc: linux-kernel@vger.kernel.org
In-Reply-To: <b0943d9e0608170801v23592952scf12c2c0b4a7bf4@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_14343_1752537.1155851906852"
References: <20060812215857.17709.79502.stgit@localhost.localdomain>
	 <6bffcb0e0608130459k1c7e142esbfc2439badf323bd@mail.gmail.com>
	 <b0943d9e0608130713j1e4a8836i943d31011169cf05@mail.gmail.com>
	 <6bffcb0e0608130726x8fc1c0v7717165a63391e80@mail.gmail.com>
	 <b0943d9e0608170602v13dea49bgf64dbf17b7a52273@mail.gmail.com>
	 <6bffcb0e0608170745s8145df4ya4e946c76ab83c1b@mail.gmail.com>
	 <b0943d9e0608170801v23592952scf12c2c0b4a7bf4@mail.gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

------=_Part_14343_1752537.1155851906852
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 17/08/06, Catalin Marinas <catalin.marinas@gmail.com> wrote:
> On 17/08/06, Michal Piotrowski <michal.k.k.piotrowski@gmail.com> wrote:
> > On 17/08/06, Catalin Marinas <catalin.marinas@gmail.com> wrote:
> > > On 13/08/06, Michal Piotrowski <michal.k.k.piotrowski@gmail.com> wrote:
> > > > It's kmemleak 0.9 issue. I have tested kmemleak 0.8 on 2.6.18-rc1and
> > > > 2.6.18-rc2. I haven't seen this before.
> > >
> > > it looks like it was caused by commit
> > > fc818301a8a39fedd7f0a71f878f29130c72193d where free_block() now calls
> > > slab_destroy() with l3->list_lock held.
> >
> > I'll revert this commit.
>
> I'm not sure it's a good idea, it might have other implications in
> slab.c. I better fix kmemleak (I think currently you could get a
> deadlock only on SMP).

I attach a patch for kmemleak-0.9 which seems to work for me. It has a
new locking mechanism in that memory allocations are performed without
memleak_lock held. Let me know if you still get errors (I haven't
fully tested it yet).

Thanks.

-- 
Catalin

------=_Part_14343_1752537.1155851906852
Content-Type: text/x-patch; name=new-locking.patch; charset=ANSI_X3.4-1968
Content-Transfer-Encoding: base64
X-Attachment-Id: f_eqzocr8b
Content-Disposition: attachment; filename="new-locking.patch"

ZGlmZiAtLWdpdCBhL2xpYi9LY29uZmlnLmRlYnVnIGIvbGliL0tjb25maWcuZGVidWcKZGlmZiAt
LWdpdCBhL21tL21lbWxlYWsuYyBiL21tL21lbWxlYWsuYwppbmRleCA1MTQyODBmLi4xYmVhMzYy
IDEwMDY0NAotLS0gYS9tbS9tZW1sZWFrLmMKKysrIGIvbW0vbWVtbGVhay5jCkBAIC0xNiw2ICsx
NiwxOCBAQAogICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdl
bmVyYWwgUHVibGljIExpY2Vuc2UKICAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3Qs
IHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAgKiBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1w
bGUgUGxhY2UsIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3IFVTQQorICoKKyAqCisg
KiBOb3RlcyBvbiBsb2NraW5nOiBrbWVtbGVhayBuZWVkcyB0byBhbGxvY2F0ZS9mcmVlIG1lbW9y
eSBmb3IgaXRzCisgKiBvd24gZGF0YSBzdHJ1Y3R1cmVzIC0gdGhlIG1lbWxlYWtfcG9pbnRlciBh
bmQgdGhlIHBvaW50ZXIgYW5kCisgKiBhbGlhc2VzIHJhZGl4IHRyZWVzLiBUaGUgbWVtbGVha19m
cmVlIGhvb2sgY2FuIGJlIGNhbGxlZCBmcm9tCisgKiBtbS9zbGFiLmMgd2l0aCB0aGUgbGlzdF9s
b2NrIGhlbGQgKGkuZS4gd2hlbiByZWxlYXNpbmcgb2Ygb2ZmLXNsYWIKKyAqIG1hbmFnZW1lbnQg
c3RydWN0dXJlcykgYW5kIGl0IHdpbGwgYWNrcXVpcmUgdGhlIG1lbWxlYWtfbG9jay4gVG8KKyAq
IGF2b2lkIGRlYWRsb2NrcyBjYXVzZWQgYnkgbG9ja2luZyBkZXBlbmRlbmN5LCB0aGUgbGlzdF9s
b2NrIG11c3QKKyAqIG5vdCBiZSBhY3F1aXJlZCB3aGlsZSBtZW1sZWFrX2xvY2sgaXMgaGVsZC4g
VGhpcyBpcyBlbnN1cmVkIGJ5IG5vdAorICogYWxsb2NhdGluZyBhbnkgbWVtb3J5IHdoaWxlIG1l
bWxlYWtfbG9jayBpcyBoZWxkLiBUaGUgcmFkaXggdHJlZXMKKyAqIGhhdmUgdG8gYmUgcHJlbG9h
ZGVkIGJlZm9yZSBhY3F1aXJpbmcgdGhlIGxvY2sgc28gdGhhdCB0aGUKKyAqIGluc2VydGlvbiB3
b24ndCBhbGxvY2F0ZSBtZW1vcnkuCiAgKi8KIAogLyogI2RlZmluZSBERUJVRyAqLwpAQCAtMzcs
NiArNDksNyBAQCAjaW5jbHVkZSA8bGludXgvc2VxX2ZpbGUuaD4KICNpbmNsdWRlIDxsaW51eC92
bWFsbG9jLmg+CiAjaW5jbHVkZSA8bGludXgvbXV0ZXguaD4KICNpbmNsdWRlIDxsaW51eC9jcHVt
YXNrLmg+CisjaW5jbHVkZSA8bGludXgvc3BpbmxvY2suaD4KIAogI2luY2x1ZGUgPGFzbS9iaXRv
cHMuaD4KICNpbmNsdWRlIDxhc20vc2VjdGlvbnMuaD4KQEAgLTEyOCw2ICsxNDEsNyBAQCBzdGF0
aWMgaW5saW5lIGludCBjb2xvcl9ibGFjayhjb25zdCBzdHJ1CiAKIC8qIFRyZWUgc3RvcmluZyB0
aGUgcG9pbnRlciBhbGlhc2VzIGluZGV4ZWQgYnkgc2l6ZSAqLwogc3RhdGljIFJBRElYX1RSRUUo
YWxpYXNfdHJlZSwgR0ZQX0FUT01JQyk7CitzdGF0aWMgREVGSU5FX1JXTE9DSyhhbGlhc190cmVl
X2xvY2spOwogLyogVHJlZSBzdG9yaW5nIGFsbCB0aGUgcG9zc2libGUgcG9pbnRlcnMsIGluZGV4
ZWQgYnkgdGhlIHBvaW50ZXIgdmFsdWUgKi8KIHN0YXRpYyBSQURJWF9UUkVFKHBvaW50ZXJfdHJl
ZSwgR0ZQX0FUT01JQyk7CiAvKiBUaGUgbGlzdCBvZiBhbGwgYWxsb2NhdGVkIHBvaW50ZXJzICov
CkBAIC0xMzYsOCArMTUwLDggQEAgc3RhdGljIExJU1RfSEVBRChwb2ludGVyX2xpc3QpOwogc3Rh
dGljIExJU1RfSEVBRChncmF5X2xpc3QpOwogCiBzdGF0aWMgc3RydWN0IGttZW1fY2FjaGUgKnBv
aW50ZXJfY2FjaGU7Ci0vKiBVc2VkIHRvIGF2b2lkIHJlY3Vyc2l2ZSBjYWxsIHZpYSB0aGUga21h
bGxvYy9rZnJlZSBmdW5jdGlvbnMgKi8KLXN0YXRpYyBzcGlubG9ja190IG1lbWxlYWtfbG9jayA9
IFNQSU5fTE9DS19VTkxPQ0tFRDsKKy8qIFRoZSBtYWluIGxvY2sgZm9yIHByb3RlY3RpbmcgdGhl
IHBvaW50ZXIgbGlzdHMgYW5kIHJhZGl4IHRyZWVzICovCitzdGF0aWMgREVGSU5FX1NQSU5MT0NL
KG1lbWxlYWtfbG9jayk7CiBzdGF0aWMgY3B1bWFza190IG1lbWxlYWtfY3B1X21hc2sgPSBDUFVf
TUFTS19OT05FOwogc3RhdGljIERFRklORV9NVVRFWChtZW1sZWFrX211dGV4KTsKIHN0YXRpYyBh
dG9taWNfdCBtZW1sZWFrX2luaXRpYWxpemVkID0gQVRPTUlDX0lOSVQoMCk7CkBAIC0xODEsOSAr
MTk1LDEyIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBkdW1wX3BvaW50ZXJfaW50ZXJuYWwKIAlwcmlu
dGsoS0VSTl9OT1RJQ0UgIiAgcmVmX2NvdW50ID0gJWRcbiIsIHBvaW50ZXItPnJlZl9jb3VudCk7
CiAJcHJpbnRrKEtFUk5fTk9USUNFICIgIGNvdW50ID0gJWRcbiIsIHBvaW50ZXItPmNvdW50KTsK
IAlwcmludGsoS0VSTl9OT1RJQ0UgIiAgYWxpYXNlczpcbiIpOwotCWlmIChwb2ludGVyLT5hbGlh
c19saXN0KQotCQlobGlzdF9mb3JfZWFjaF9lbnRyeShhbGlhcywgZWxlbSwgcG9pbnRlci0+YWxp
YXNfbGlzdCwgbm9kZSkKKwlpZiAocG9pbnRlci0+YWxpYXNfbGlzdCkgeworCQlyY3VfcmVhZF9s
b2NrKCk7CisJCWhsaXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShhbGlhcywgZWxlbSwgcG9pbnRlci0+
YWxpYXNfbGlzdCwgbm9kZSkKIAkJCXByaW50ayhLRVJOX05PVElDRSAiICAgIDB4JWx4XG4iLCBh
bGlhcy0+b2Zmc2V0KTsKKwkJcmN1X3JlYWRfdW5sb2NrKCk7CisJfQogfQogI2Vsc2UKIHN0YXRp
YyBpbmxpbmUgdm9pZCBkdW1wX3BvaW50ZXJfaW50ZXJuYWxzKHN0cnVjdCBtZW1sZWFrX3BvaW50
ZXIgKnBvaW50ZXIpCkBAIC0yMTMsNDYgKzIzMCw3MSBAQCBzdGF0aWMgaW50IGluc2VydF9hbGlh
cyh1bnNpZ25lZCBsb25nIHR5CiB7CiAJaW50IHJldCA9IDA7CiAJc3RydWN0IGhsaXN0X2hlYWQg
KmFsaWFzX2xpc3Q7CisJc3RydWN0IGhsaXN0X25vZGUgKmVsZW07CiAJc3RydWN0IG1lbWxlYWtf
YWxpYXMgKmFsaWFzOwogCi0JaWYgKHR5cGVfaWQgPT0gMCB8fCBvZmZzZXQgPT0gMCB8fCBvZmZz
ZXQgPj0gbWxfc2l6ZW9mKHR5cGVfaWQpKSB7Ci0JCXJldCA9IC1FSU5WQUw7Ci0JCWdvdG8gb3V0
OwotCX0KKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisKKwlpZiAodHlwZV9pZCA9PSAwIHx8
IG9mZnNldCA9PSAwIHx8IG9mZnNldCA+PSBtbF9zaXplb2YodHlwZV9pZCkpCisJCXJldHVybiAt
RUlOVkFMOwogCiAJb2Zmc2V0ICY9IH4oQllURVNfUEVSX1dPUkQgLSAxKTsKIAorCXJlYWRfbG9j
aygmYWxpYXNfdHJlZV9sb2NrKTsKIAlhbGlhc19saXN0ID0gcmFkaXhfdHJlZV9sb29rdXAoJmFs
aWFzX3RyZWUsIHR5cGVfaWQpOwotCWlmIChhbGlhc19saXN0KSB7Ci0JCXN0cnVjdCBobGlzdF9u
b2RlICplbGVtOworCXJlYWRfdW5sb2NrKCZhbGlhc190cmVlX2xvY2spOwogCi0JCWhsaXN0X2Zv
cl9lYWNoX2VudHJ5KGFsaWFzLCBlbGVtLCBhbGlhc19saXN0LCBub2RlKSB7Ci0JCQlpZiAoYWxp
YXMtPm9mZnNldCA9PSBvZmZzZXQpIHsKLQkJCQlyZXQgPSAtRUVYSVNUOwotCQkJCWdvdG8gb3V0
OwotCQkJfQotCQl9Ci0JfSBlbHNlIHsKKwlpZiAoIWFsaWFzX2xpc3QpIHsKKwkJLyogbm8gYWxp
YXMgbGlzdCBmb3IgdGhpcyB0eXBlIGlkLiBBbGxvY2F0ZSBsaXN0X2hlYWQKKwkJICogYW5kIHBy
ZWxvYWQgdGhlIHJhZGl4IHRyZWUgKi8KIAkJYWxpYXNfbGlzdCA9IGttYWxsb2Moc2l6ZW9mKCph
bGlhc19saXN0KSwgR0ZQX0FUT01JQyk7CiAJCWlmICghYWxpYXNfbGlzdCkKLQkJCXBhbmljKCJr
bWVtbGVhazogY2Fubm90IGFsbG9jYXRlIGluaXRpYWwgbWVtb3J5XG4iKTsKKwkJCXBhbmljKCJr
bWVtbGVhazogY2Fubm90IGFsbG9jYXRlIGFsaWFzX2xpc3RcbiIpOwogCQlJTklUX0hMSVNUX0hF
QUQoYWxpYXNfbGlzdCk7CiAKLQkJcmV0ID0gcmFkaXhfdHJlZV9pbnNlcnQoJmFsaWFzX3RyZWUs
IHR5cGVfaWQsIGFsaWFzX2xpc3QpOworCQlyZXQgPSByYWRpeF90cmVlX3ByZWxvYWQoR0ZQX0FU
T01JQyk7CiAJCWlmIChyZXQpCisJCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBwcmVsb2FkIHRo
ZSBhbGlhc2VzIHJhZGl4IHRyZWU6ICVkXG4iLCByZXQpOworCisJCXdyaXRlX2xvY2soJmFsaWFz
X3RyZWVfbG9jayk7CisJCXJldCA9IHJhZGl4X3RyZWVfaW5zZXJ0KCZhbGlhc190cmVlLCB0eXBl
X2lkLCBhbGlhc19saXN0KTsKKwkJd3JpdGVfdW5sb2NrKCZhbGlhc190cmVlX2xvY2spOworCisJ
CXJhZGl4X3RyZWVfcHJlbG9hZF9lbmQoKTsKKworCQlpZiAocmV0ID09IC1FRVhJU1QpIHsKKwkJ
CS8qIGFsbG9jYXRlZCBpbiB0aGUgbWVhbnRpbWUgb24gYSBkaWZmZXJlbnQgQ1BVICovCisJCQly
ZWFkX2xvY2soJmFsaWFzX3RyZWVfbG9jayk7CisJCQlhbGlhc19saXN0ID0gcmFkaXhfdHJlZV9s
b29rdXAoJmFsaWFzX3RyZWUsIHR5cGVfaWQpOworCQkJcmVhZF91bmxvY2soJmFsaWFzX3RyZWVf
bG9jayk7CisJCX0gZWxzZSBpZiAocmV0KQogCQkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgaW5z
ZXJ0IGludG8gdGhlIGFsaWFzZXMgcmFkaXggdHJlZTogJWRcbiIsIHJldCk7CiAJfQogCisJQlVH
X09OKCFhbGlhc19saXN0KTsKKworCXJjdV9yZWFkX2xvY2soKTsKKwlobGlzdF9mb3JfZWFjaF9l
bnRyeV9yY3UoYWxpYXMsIGVsZW0sIGFsaWFzX2xpc3QsIG5vZGUpIHsKKwkJaWYgKGFsaWFzLT5v
ZmZzZXQgPT0gb2Zmc2V0KSB7CisJCQlyY3VfcmVhZF91bmxvY2soKTsKKwkJCXJldHVybiAtRUVY
SVNUOworCQl9CisJfQorCXJjdV9yZWFkX3VubG9jaygpOworCiAJYWxpYXMgPSBrbWFsbG9jKHNp
emVvZigqYWxpYXMpLCBHRlBfQVRPTUlDKTsKIAlpZiAoIWFsaWFzKQogCQlwYW5pYygia21lbWxl
YWs6IGNhbm5vdCBhbGxvY2F0ZSBpbml0aWFsIG1lbW9yeVxuIik7CiAJSU5JVF9ITElTVF9OT0RF
KCZhbGlhcy0+bm9kZSk7CiAJYWxpYXMtPm9mZnNldCA9IG9mZnNldDsKIAotCWhsaXN0X2FkZF9o
ZWFkKCZhbGlhcy0+bm9kZSwgYWxpYXNfbGlzdCk7CisJd3JpdGVfbG9jaygmYWxpYXNfdHJlZV9s
b2NrKTsKKwlobGlzdF9hZGRfaGVhZF9yY3UoJmFsaWFzLT5ub2RlLCBhbGlhc19saXN0KTsKKwl3
cml0ZV91bmxvY2soJmFsaWFzX3RyZWVfbG9jayk7CiAKLSBvdXQ6Ci0JcmV0dXJuIHJldDsKKwlC
VUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisKKwlyZXR1cm4gMDsKIH0KIAogLyogSW5zZXJ0IHBv
aW50ZXIgYWxpYXNlcyB0aGUgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgKi8KQEAgLTI2NCwxNSArMzA2
LDE1IEBAIHZvaWQgbWVtbGVha19pbnNlcnRfYWxpYXNlcyhzdHJ1Y3QgbWVtbGUKIAl1bnNpZ25l
ZCBsb25nIGZsYWdzOwogCXVuc2lnbmVkIGludCBjcHVfaWQ7CiAKLQlwcl9kZWJ1ZygiJXMoMHgl
cCwgMHglcClcbiIsIF9fRlVOQ1RJT05fXywgbWxfb2ZmX3N0YXJ0LCBtbF9vZmZfZW5kKTsKLQot
CXNwaW5fbG9ja19pcnFzYXZlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKLQotCS8qIGRvIG5vdCB0
cmFjayB0aGUga21lbWxlYWsgYWxsb2NhdGVkIHBvaW50ZXJzICovCi0JY3B1X2lkID0gc21wX3By
b2Nlc3Nvcl9pZCgpOworCS8qIG5vIHJlY3Vyc2l2ZSByZS1lbnRyYW5jZSBvbiB0aGUgc2FtZSBD
UFUuIFdlIGRvIG5vdCB0cmFjaworCSAqIHRoZSBhbGlhcyB0cmVlIGFsbG9jYXRpb25zICovCisJ
bG9jYWxfaXJxX3NhdmUoZmxhZ3MpOworCWNwdV9pZCA9IGdldF9jcHUoKTsKIAlpZiAoY3B1X3Rl
c3RfYW5kX3NldChjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spKQogCQlCVUcoKTsKIAorCXByX2Rl
YnVnKCIlcygweCVwLCAweCVwKVxuIiwgX19GVU5DVElPTl9fLCBtbF9vZmZfc3RhcnQsIG1sX29m
Zl9lbmQpOworCiAJLyogcHJpbWFyeSBhbGlhc2VzIC0gY29udGFpbmVyX29mKG1lbWJlcikgKi8K
IAlmb3IgKG1sX29mZiA9IG1sX29mZl9zdGFydDsgbWxfb2ZmIDwgbWxfb2ZmX2VuZDsgbWxfb2Zm
KyspCiAJCWlmICghaW5zZXJ0X2FsaWFzKG1sX29mZi0+dHlwZV9pZCwgbWxfb2ZmLT5vZmZzZXQp
KQpAQCAtMjg2LDg2ICszMjgsNTIgQEAgI2lmZGVmIENPTkZJR19ERUJVR19NRU1MRUFLX1NFQ09O
REFSWV9BTAogCQlzdHJ1Y3QgbWVtbGVha19hbGlhcyAqYWxpYXM7CiAJCXN0cnVjdCBobGlzdF9u
b2RlICplbGVtOwogCisJCS8qIHdpdGggaW1wcmVjaXNlIHR5cGUgaWRlbnRpZmljYXRpb24sIGl0
IHRoZSBtZW1iZXIKKwkJICogaWQgaXMgdGhlIHNhbWUgYXMgdGhlIG91dGVyIHN0cnVjdHVyZSBp
ZCwganVzdAorCQkgKiBpZ25vcmUgYXMgYW55IHBvdGVudGlhbCBhbGlhc2VzIGFyZSBhbHJlYWR5
IGluIHRoZQorCQkgKiB0cmVlICovCisJCWlmIChtbF9vZmYtPm1lbWJlcl90eXBlX2lkID09IG1s
X29mZi0+dHlwZV9pZCkKKwkJCWNvbnRpbnVlOworCisJCXJlYWRfbG9jaygmYWxpYXNfdHJlZV9s
b2NrKTsKIAkJYWxpYXNfbGlzdCA9IHJhZGl4X3RyZWVfbG9va3VwKCZhbGlhc190cmVlLCBtbF9v
ZmYtPm1lbWJlcl90eXBlX2lkKTsKKwkJcmVhZF91bmxvY2soJmFsaWFzX3RyZWVfbG9jayk7CiAJ
CWlmICghYWxpYXNfbGlzdCkKIAkJCWNvbnRpbnVlOwogCi0JCWhsaXN0X2Zvcl9lYWNoX2VudHJ5
KGFsaWFzLCBlbGVtLCBhbGlhc19saXN0LCBub2RlKQorCQlyY3VfcmVhZF9sb2NrKCk7CisJCWhs
aXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShhbGlhcywgZWxlbSwgYWxpYXNfbGlzdCwgbm9kZSkKIAkJ
CWlmICghaW5zZXJ0X2FsaWFzKG1sX29mZi0+dHlwZV9pZCwgbWxfb2ZmLT5vZmZzZXQgKyBhbGlh
cy0+b2Zmc2V0KSkKIAkJCQlpKys7CisJCXJjdV9yZWFkX3VubG9jaygpOwogCX0KIAlwcl9kZWJ1
Zygia21lbWxlYWs6IGZvdW5kICVkIGFsaWFzKGVzKVxuIiwgaSk7CiAjZW5kaWYKIAogCWNwdV9j
bGVhcihjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spOwotCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUo
Jm1lbWxlYWtfbG9jaywgZmxhZ3MpOworCXB1dF9jcHVfbm9fcmVzY2hlZCgpOworCWxvY2FsX2ly
cV9yZXN0b3JlKGZsYWdzKTsKIH0KIEVYUE9SVF9TWU1CT0xfR1BMKG1lbWxlYWtfaW5zZXJ0X2Fs
aWFzZXMpOwogCisvKiBjYWxsZWQgd2l0aCBtZW1sZWFrX2xvY2sgaGVsZCBhbmQgaW50ZXJydXB0
cyBkaXNhYmxlZCAqLwogc3RhdGljIGlubGluZSBzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpnZXRf
Y2FjaGVkX3BvaW50ZXIodW5zaWduZWQgbG9uZyBwdHIpCiB7CisJQlVHX09OKCFpcnFzX2Rpc2Fi
bGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2NrZWQoJm1lbWxlYWtfbG9jaykpOworCiAJaWYg
KCFsYXN0X3BvaW50ZXIgfHwgcHRyICE9IGxhc3RfcG9pbnRlci0+cG9pbnRlcikKIAkJbGFzdF9w
b2ludGVyID0gcmFkaXhfdHJlZV9sb29rdXAoJnBvaW50ZXJfdHJlZSwgcHRyKTsKIAlyZXR1cm4g
bGFzdF9wb2ludGVyOwogfQogCi1zdGF0aWMgdm9pZCBjcmVhdGVfcG9pbnRlcl9hbGlhc2VzKHN0
cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXIpCi17Ci0Jc3RydWN0IG1lbWxlYWtfYWxpYXMg
KmFsaWFzOwotCXN0cnVjdCBobGlzdF9ub2RlICplbGVtOwotCXVuc2lnbmVkIGxvbmcgcHRyID0g
cG9pbnRlci0+cG9pbnRlcjsKLQlpbnQgZXJyOwotCi0JQlVHX09OKHBvaW50ZXItPmZsYWdzICYg
UE9JTlRFUl9BTElBU0VTKTsKLQotCWlmIChwb2ludGVyLT5vZmZzZXQpIHsKLQkJZXJyID0gcmFk
aXhfdHJlZV9pbnNlcnQoJnBvaW50ZXJfdHJlZSwgcHRyICsgcG9pbnRlci0+b2Zmc2V0LCBwb2lu
dGVyKTsKLQkJaWYgKGVycikgewotCQkJZHVtcF9zdGFjaygpOwotCQkJcGFuaWMoImttZW1sZWFr
OiBjYW5ub3QgaW5zZXJ0IG9mZnNldCBpbnRvIHRoZSBwb2ludGVyIHJhZGl4IHRyZWU6ICVkXG4i
LCBlcnIpOwotCQl9Ci0JfQotCi0JcG9pbnRlci0+YWxpYXNfbGlzdCA9IHJhZGl4X3RyZWVfbG9v
a3VwKCZhbGlhc190cmVlLCBwb2ludGVyLT50eXBlX2lkKTsKLQlpZiAocG9pbnRlci0+YWxpYXNf
bGlzdCkgewotCQlobGlzdF9mb3JfZWFjaF9lbnRyeShhbGlhcywgZWxlbSwgcG9pbnRlci0+YWxp
YXNfbGlzdCwgbm9kZSkgewotCQkJZXJyID0gcmFkaXhfdHJlZV9pbnNlcnQoJnBvaW50ZXJfdHJl
ZSwgcHRyCi0JCQkJCQkrIHBvaW50ZXItPm9mZnNldCArIGFsaWFzLT5vZmZzZXQsCi0JCQkJCQlw
b2ludGVyKTsKLQkJCWlmIChlcnIpIHsKLQkJCQlkdW1wX3N0YWNrKCk7Ci0JCQkJcGFuaWMoImtt
ZW1sZWFrOiBjYW5ub3QgaW5zZXJ0IGFsaWFzIGludG8gdGhlIHBvaW50ZXIgcmFkaXggdHJlZTog
JWRcbiIsIGVycik7Ci0JCQl9Ci0JCX0KLQl9Ci0KLQlwb2ludGVyLT5mbGFncyB8PSBQT0lOVEVS
X0FMSUFTRVM7Ci19Ci0KLXN0YXRpYyB2b2lkIGRlbGV0ZV9wb2ludGVyX2FsaWFzZXMoc3RydWN0
IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcikKLXsKLQlzdHJ1Y3QgbWVtbGVha19hbGlhcyAqYWxp
YXM7Ci0Jc3RydWN0IGhsaXN0X25vZGUgKmVsZW07Ci0JdW5zaWduZWQgbG9uZyBwdHIgPSBwb2lu
dGVyLT5wb2ludGVyOwotCi0JQlVHX09OKCEocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFT
RVMpKTsKLQotCWlmIChwb2ludGVyLT5vZmZzZXQpCi0JCXJhZGl4X3RyZWVfZGVsZXRlKCZwb2lu
dGVyX3RyZWUsIHB0ciArIHBvaW50ZXItPm9mZnNldCk7Ci0KLQlpZiAocG9pbnRlci0+YWxpYXNf
bGlzdCkgewotCQlobGlzdF9mb3JfZWFjaF9lbnRyeShhbGlhcywgZWxlbSwgcG9pbnRlci0+YWxp
YXNfbGlzdCwgbm9kZSkKLQkJCXJhZGl4X3RyZWVfZGVsZXRlKCZwb2ludGVyX3RyZWUsCi0JCQkJ
CSAgcHRyICsgcG9pbnRlci0+b2Zmc2V0ICsgYWxpYXMtPm9mZnNldCk7Ci0JCXBvaW50ZXItPmFs
aWFzX2xpc3QgPSBOVUxMOwotCX0KLQotCXBvaW50ZXItPmZsYWdzICY9IH5QT0lOVEVSX0FMSUFT
RVM7Ci19Ci0KLS8qIG5vIG5lZWQgZm9yIGF0b21pYyBvcGVyYXRpb25zIHNpbmNlIG1lbWxlYWtf
bG9jayBpcyBoZWxkIGFueXdheSAqLworLyogbm8gbmVlZCBmb3IgYXRvbWljIG9wZXJhdGlvbnMg
c2luY2UgbWVtbGVha19sb2NrIGlzIGhlbGQgYW5kCisgKiBpbnRlcnJ1cHRzIGRpc2FibGVkICov
CiBzdGF0aWMgaW5saW5lIHZvaWQgZ2V0X3BvaW50ZXIoc3RydWN0IG1lbWxlYWtfcG9pbnRlciAq
cG9pbnRlcikKIHsKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lz
X2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CisKIAlwb2ludGVyLT51c2VfY291bnQrKzsKIH0KIApA
QCAtMzc3LDYgKzM4NSw5IEBAIHN0YXRpYyB2b2lkIF9fcHV0X3BvaW50ZXIoc3RydWN0IG1lbWxl
YWsKIAlzdHJ1Y3QgaGxpc3Rfbm9kZSAqZWxlbSwgKnRtcDsKIAlzdHJ1Y3QgbWVtbGVha19zY2Fu
X2FyZWEgKmFyZWE7CiAKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGlu
X2lzX2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CisKIAlpZiAoLS1wb2ludGVyLT51c2VfY291bnQg
PiAwKQogCQlyZXR1cm47CiAKQEAgLTM4OCw2ICszOTksOSBAQCBzdGF0aWMgdm9pZCBfX3B1dF9w
b2ludGVyKHN0cnVjdCBtZW1sZWFrCiAKIAlsaXN0X2RlbCgmcG9pbnRlci0+cG9pbnRlcl9saXN0
KTsKIAlrbWVtX2NhY2hlX2ZyZWUocG9pbnRlcl9jYWNoZSwgcG9pbnRlcik7CisKKwlCVUdfT04o
IWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVha19sb2Nr
KSk7CiB9CiAKIHN0YXRpYyB2b2lkIHB1dF9wb2ludGVyKHN0cnVjdCBtZW1sZWFrX3BvaW50ZXIg
KnBvaW50ZXIpCkBAIC0zOTUsMTUgKzQwOSwxMjMgQEAgc3RhdGljIHZvaWQgcHV0X3BvaW50ZXIo
c3RydWN0IG1lbWxlYWtfcAogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CiAJdW5zaWduZWQgaW50IGNw
dV9pZDsKIAotCXNwaW5fbG9ja19pcnFzYXZlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKLQljcHVf
aWQgPSBzbXBfcHJvY2Vzc29yX2lkKCk7CisJLyogbm8gcmVjdXJzaXZlIHJlLWVudHJhbmNlIG9u
IHRoZSBzYW1lIENQVSAqLworCWxvY2FsX2lycV9zYXZlKGZsYWdzKTsKKwljcHVfaWQgPSBnZXRf
Y3B1KCk7CiAJaWYgKGNwdV90ZXN0X2FuZF9zZXQoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKSkK
IAkJQlVHKCk7CiAKKwlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CiAJX19wdXRfcG9pbnRlcihw
b2ludGVyKTsKKwlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKIAogCWNwdV9jbGVhcihjcHVf
aWQsIG1lbWxlYWtfY3B1X21hc2spOwotCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1lbWxlYWtf
bG9jaywgZmxhZ3MpOworCXB1dF9jcHVfbm9fcmVzY2hlZCgpOworCWxvY2FsX2lycV9yZXN0b3Jl
KGZsYWdzKTsKK30KKworLyogY2FsbGVkIHdpdGggbWVtbGVha19sb2NrIGhlbGQgYW5kIGludGVy
cnVwdHMgZGlzYWJsZWQgKi8KK3N0YXRpYyB2b2lkIGRlbGV0ZV9wb2ludGVyX2FsaWFzZXMoc3Ry
dWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcikKK3sKKwlzdHJ1Y3QgbWVtbGVha19hbGlhcyAq
YWxpYXM7CisJc3RydWN0IGhsaXN0X25vZGUgKmVsZW07CisKKwlCVUdfT04oIWlycXNfZGlzYWJs
ZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CisKKwlCVUdf
T04oIShwb2ludGVyLT5mbGFncyAmIFBPSU5URVJfQUxJQVNFUykpOworCisJaWYgKHBvaW50ZXIt
Pm9mZnNldCkKKwkJcmFkaXhfdHJlZV9kZWxldGUoJnBvaW50ZXJfdHJlZSwgcG9pbnRlci0+cG9p
bnRlcgorCQkJCSAgKyBwb2ludGVyLT5vZmZzZXQpOworCisJaWYgKHBvaW50ZXItPmFsaWFzX2xp
c3QpIHsKKwkJcmN1X3JlYWRfbG9jaygpOworCQlobGlzdF9mb3JfZWFjaF9lbnRyeV9yY3UoYWxp
YXMsIGVsZW0sIHBvaW50ZXItPmFsaWFzX2xpc3QsIG5vZGUpCisJCQlyYWRpeF90cmVlX2RlbGV0
ZSgmcG9pbnRlcl90cmVlLCBwb2ludGVyLT5wb2ludGVyCisJCQkJCSAgKyBwb2ludGVyLT5vZmZz
ZXQgKyBhbGlhcy0+b2Zmc2V0KTsKKwkJcmN1X3JlYWRfdW5sb2NrKCk7CisJCXBvaW50ZXItPmFs
aWFzX2xpc3QgPSBOVUxMOworCX0KKworCXBvaW50ZXItPmZsYWdzICY9IH5QT0lOVEVSX0FMSUFT
RVM7CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xvY2tl
ZCgmbWVtbGVha19sb2NrKSk7Cit9CisKKy8qIGNhbGxlZCB3aXRoIG1lbWxlYWtfbG9jayBoZWxk
IGJ1dCBtYXkgYmUgcmVsZWFzZWQgKi8KK3N0YXRpYyBpbmxpbmUgdm9pZCBpbnNlcnRfcG9pbnRl
cl9hbGlhcyhzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyLAorCQkJCQl1bnNpZ25lZCBs
b25nIGFsaWFzKQoreworCWludCBlcnI7CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJ
QlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CisKKwlzcGluX3VubG9jaygm
bWVtbGVha19sb2NrKTsKKwllcnIgPSByYWRpeF90cmVlX3ByZWxvYWQoR0ZQX0FUT01JQyk7CisJ
aWYgKGVycikgeworCQlkdW1wX3N0YWNrKCk7CisJCXBhbmljKCJrbWVtbGVhazogY2Fubm90IHBy
ZWxvYWQgdGhlIHBvaW50ZXIgcmFkaXggdHJlZTogJWRcbiIsIGVycik7CisJfQorCXNwaW5fbG9j
aygmbWVtbGVha19sb2NrKTsKKworCWVyciA9IHJhZGl4X3RyZWVfaW5zZXJ0KCZwb2ludGVyX3Ry
ZWUsIGFsaWFzLCBwb2ludGVyKTsKKwlpZiAoZXJyKSB7CisJCWR1bXBfc3RhY2soKTsKKwkJcGFu
aWMoImttZW1sZWFrOiBjYW5ub3QgaW5zZXJ0IGFsaWFzIGludG8gdGhlIHBvaW50ZXIgcmFkaXgg
dHJlZTogJWRcbiIsIGVycik7CisJfQorCisJcmFkaXhfdHJlZV9wcmVsb2FkX2VuZCgpOworCisJ
QlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2NrZWQoJm1lbWxl
YWtfbG9jaykpOworfQorCisvKiBjYWxsZWQgd2l0aCBtZW1sZWFrX2xvY2sgaGVsZCBidXQgaXQg
bWF5IGJlIHJlbGVhc2VkIGluCisgKiBpbnNlcnRfcG9pbnRlcl9hbGlhcygpLiBUaGUgcG9pbnRl
ciBzdHJ1Y3R1cmUgaXMgZ3VhcmFudGVlZCBub3QgdG8KKyAqIGJlIGZyZWVkIGJlZm9yZSB0aGlz
IGZ1bmN0aW9uIHJldHVybnMgKGdldC9wdXRfcG9pbnRlcikKKyAqLworc3RhdGljIGlubGluZSB2
b2lkIGNyZWF0ZV9wb2ludGVyX2FsaWFzZXMoc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRl
cikKK3sKKwlzdHJ1Y3QgbWVtbGVha19hbGlhcyAqYWxpYXM7CisJc3RydWN0IGhsaXN0X25vZGUg
KmVsZW07CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xv
Y2tlZCgmbWVtbGVha19sb2NrKSk7CisKKwlCVUdfT04ocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVS
X0FMSUFTRVMpOworCisJZ2V0X3BvaW50ZXIocG9pbnRlcik7CisKKwlpZiAocG9pbnRlci0+b2Zm
c2V0KQorCQlpbnNlcnRfcG9pbnRlcl9hbGlhcyhwb2ludGVyLCBwb2ludGVyLT5wb2ludGVyCisJ
CQkJICAgICArIHBvaW50ZXItPm9mZnNldCk7CisKKwlyZWFkX2xvY2soJmFsaWFzX3RyZWVfbG9j
ayk7CisJcG9pbnRlci0+YWxpYXNfbGlzdCA9IHJhZGl4X3RyZWVfbG9va3VwKCZhbGlhc190cmVl
LCBwb2ludGVyLT50eXBlX2lkKTsKKwlyZWFkX3VubG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwor
CWlmIChwb2ludGVyLT5hbGlhc19saXN0KSB7CisJCXJjdV9yZWFkX2xvY2soKTsKKwkJaGxpc3Rf
Zm9yX2VhY2hfZW50cnlfcmN1KGFsaWFzLCBlbGVtLCBwb2ludGVyLT5hbGlhc19saXN0LCBub2Rl
KQorCQkJaW5zZXJ0X3BvaW50ZXJfYWxpYXMocG9pbnRlciwgcG9pbnRlci0+cG9pbnRlcgorCQkJ
CQkgICAgICsgcG9pbnRlci0+b2Zmc2V0ICsgYWxpYXMtPm9mZnNldCk7CisJCXJjdV9yZWFkX3Vu
bG9jaygpOworCX0KKworCXBvaW50ZXItPmZsYWdzIHw9IFBPSU5URVJfQUxJQVNFUzsKKworCS8q
IGNoZWNrIHdoZXRoZXIgdGhlIG1lbW9yeSBibG9jayBtaWdodCBoYXZlIGJlZW4gZnJlZWQgZHVy
aW5nCisJICogdGhlIHVubG9ja2VkIHBlcmlvZHMgKi8KKwlpZiAoIShwb2ludGVyLT5mbGFncyAm
IFBPSU5URVJfQUxMT0NBVEVEKSkKKwkJZGVsZXRlX3BvaW50ZXJfYWxpYXNlcyhwb2ludGVyKTsK
KworCV9fcHV0X3BvaW50ZXIocG9pbnRlcik7CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7
CisJQlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CiB9CiAKIC8qIEluc2Vy
dCBhIHBvaW50ZXIgYW5kIGl0cyBhbGlhc2VzIGludG8gdGhlIHBvaW50ZXIgcmFkaXggdHJlZSAq
LwpAQCAtNDE2LDYgKzUzOCw4IEBAICNpZmRlZiBDT05GSUdfRlJBTUVfUE9JTlRFUgogCXZvaWQg
KmZyYW1lOwogI2VuZGlmCiAKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisKIAlwb2ludGVy
ID0ga21lbV9jYWNoZV9hbGxvYyhwb2ludGVyX2NhY2hlLCBTTEFCX0FUT01JQyk7CiAJaWYgKCFw
b2ludGVyKQogCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBhbGxvY2F0ZSBhIG1lbWxlYWtfcG9p
bnRlciBzdHJ1Y3R1cmVcbiIpOwpAQCAtNDU1LDYgKzU3OSwxNiBAQCAjZWxzZQogCXBvaW50ZXIt
PnRyYWNlWzBdID0gKHVuc2lnbmVkIGxvbmcpX19idWlsdGluX3JldHVybl9hZGRyZXNzKDApOwog
I2VuZGlmCiAKKwkvKiBhbGxvY2F0ZSBoZXJlIHRvIGF2b2lkIGFjcXVpcmluZyB0aGUgbGlzdF9s
b2NrIGluIG1tL3NsYWIuYworCSAqIHdoaWxlIG1lbWxlYWtfbG9jayBpcyBoZWxkICovCisJZXJy
ID0gcmFkaXhfdHJlZV9wcmVsb2FkKEdGUF9BVE9NSUMpOworCWlmIChlcnIpIHsKKwkJZHVtcF9z
dGFjaygpOworCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBwcmVsb2FkIHRoZSBwb2ludGVyIHJh
ZGl4IHRyZWU6ICVkXG4iLCBlcnIpOworCX0KKworCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsK
KwogCWVyciA9IHJhZGl4X3RyZWVfaW5zZXJ0KCZwb2ludGVyX3RyZWUsIHB0ciwgcG9pbnRlcik7
CiAJaWYgKGVycikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC00NjksNiArNjAzLDExIEBAICNlbmRp
ZgogCiAJbGlzdF9hZGRfdGFpbCgmcG9pbnRlci0+cG9pbnRlcl9saXN0LCAmcG9pbnRlcl9saXN0
KTsKIAlnZXRfcG9pbnRlcihwb2ludGVyKTsKKworCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2sp
OworCXJhZGl4X3RyZWVfcHJlbG9hZF9lbmQoKTsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgp
KTsKIH0KIAogLyogUmVtb3ZlIGEgcG9pbnRlciBhbmQgaXRzIGFsaWFzZXMgZnJvbSB0aGUgcG9p
bnRlciByYWRpeCB0cmVlICovCkBAIC00NzYsMTEgKzYxNSwxNSBAQCBzdGF0aWMgaW5saW5lIHZv
aWQgZGVsZXRlX3BvaW50ZXIodW5zaWduCiB7CiAJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9p
bnRlcjsKIAorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKworCXNwaW5fbG9jaygmbWVtbGVh
a19sb2NrKTsKKwogCXBvaW50ZXIgPSByYWRpeF90cmVlX2RlbGV0ZSgmcG9pbnRlcl90cmVlLCBw
dHIpOwogCWlmICghcG9pbnRlcikgewogCQlkdW1wX3N0YWNrKCk7CiAJCXByaW50ayhLRVJOX1dB
Uk5JTkcgImttZW1sZWFrOiBmcmVlaW5nIHVua25vd24gcG9pbnRlciB2YWx1ZSAweCUwOGx4XG4i
LCBwdHIpOwotCQlyZXR1cm47CisJCWdvdG8gb3V0OwogCX0KIAlpZiAocG9pbnRlci0+cG9pbnRl
ciAhPSBwdHIpIHsKIAkJZHVtcF9zdGFjaygpOwpAQCAtNTA2LDYgKzY0OSwxMSBAQCAjZW5kaWYK
IAlwb2ludGVyLT5mbGFncyAmPSB+UE9JTlRFUl9BTExPQ0FURUQ7CiAJcG9pbnRlci0+cG9pbnRl
ciA9IDA7CiAJX19wdXRfcG9pbnRlcihwb2ludGVyKTsKKworIG91dDoKKwlzcGluX3VubG9jaygm
bWVtbGVha19sb2NrKTsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKIH0KIAogLyogUmUt
Y3JlYXRlIHRoZSBwb2ludGVyIGFsaWFzZXMgYWNjb3JkaW5nIHRvIHRoZSBuZXcgc2l6ZS9vZmZz
ZXQKQEAgLTUxNSw2ICs2NjMsMTAgQEAgc3RhdGljIGlubGluZSB2b2lkIHVucGFkX3BvaW50ZXIo
dW5zaWduZQogewogCXN0cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXI7CiAKKwlCVUdfT04o
IWlycXNfZGlzYWJsZWQoKSk7CisKKwlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CisKIAlwb2lu
dGVyID0gZ2V0X2NhY2hlZF9wb2ludGVyKHB0cik7CiAJaWYgKCFwb2ludGVyKSB7CiAJCWR1bXBf
c3RhY2soKTsKQEAgLTUzMiwxMyArNjg0LDE4IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCB1bnBhZF9w
b2ludGVyKHVuc2lnbmUKIAl9CiAKIAlpZiAob2Zmc2V0ID09IHBvaW50ZXItPm9mZnNldCAmJiBz
aXplID09IHBvaW50ZXItPnNpemUpCi0JCXJldHVybjsKKwkJZ290byBvdXQ7CiAKIAlpZiAocG9p
bnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFTRVMpCiAJCWRlbGV0ZV9wb2ludGVyX2FsaWFzZXMo
cG9pbnRlcik7CiAKIAlwb2ludGVyLT5vZmZzZXQgPSBvZmZzZXQ7CiAJcG9pbnRlci0+c2l6ZSA9
IHNpemU7CisKKyBvdXQ6CisJc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CisKKwlCVUdfT04o
IWlycXNfZGlzYWJsZWQoKSk7CiB9CiAKIC8qIE1ha2UgYSBwb2ludGVyIHBlcm1hbmVudGx5IGdy
YXkgKGZhbHNlIHBvc2l0aXZlKSAqLwpAQCAtNTQ2LDYgKzcwMywxMCBAQCBzdGF0aWMgaW5saW5l
IHZvaWQgbWFrZV9ncmF5X3BvaW50ZXIodW5zCiB7CiAJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAq
cG9pbnRlcjsKIAorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKworCXNwaW5fbG9jaygmbWVt
bGVha19sb2NrKTsKKwogCXBvaW50ZXIgPSBnZXRfY2FjaGVkX3BvaW50ZXIocHRyKTsKIAlpZiAo
IXBvaW50ZXIpIHsKIAkJZHVtcF9zdGFjaygpOwpAQCAtNTU4LDYgKzcxOSwxMCBAQCBzdGF0aWMg
aW5saW5lIHZvaWQgbWFrZV9ncmF5X3BvaW50ZXIodW5zCiAJfQogCiAJcG9pbnRlci0+cmVmX2Nv
dW50ID0gMDsKKworCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOworCisJQlVHX09OKCFpcnFz
X2Rpc2FibGVkKCkpOwogfQogCiAvKiBNYXJrIHRoZSBwb2ludGVyIGFzIGJsYWNrICovCkBAIC01
NjUsNiArNzMwLDEwIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBtYWtlX2JsYWNrX3BvaW50ZXIodW4K
IHsKIAlzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyOwogCisJQlVHX09OKCFpcnFzX2Rp
c2FibGVkKCkpOworCisJc3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOworCiAJcG9pbnRlciA9IGdl
dF9jYWNoZWRfcG9pbnRlcihwdHIpOwogCWlmICghcG9pbnRlcikgewogCQlkdW1wX3N0YWNrKCk7
CkBAIC01NzcsNiArNzQ2LDEwIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBtYWtlX2JsYWNrX3BvaW50
ZXIodW4KIAl9CiAKIAlwb2ludGVyLT5yZWZfY291bnQgPSAtMTsKKworCXNwaW5fdW5sb2NrKCZt
ZW1sZWFrX2xvY2spOworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOwogfQogCiAvKiBBZGQg
YSBzY2FubmluZyBhcmVhIHRvIHRoZSBwb2ludGVyICovCkBAIC01ODUsNiArNzU4LDE4IEBAIHN0
YXRpYyBpbmxpbmUgdm9pZCBhZGRfc2Nhbl9hcmVhKHVuc2lnbmUKIAlzdHJ1Y3QgbWVtbGVha19w
b2ludGVyICpwb2ludGVyOwogCXN0cnVjdCBtZW1sZWFrX3NjYW5fYXJlYSAqYXJlYTsKIAorCUJV
R19PTighaXJxc19kaXNhYmxlZCgpKTsKKworCWFyZWEgPSBrbWFsbG9jKHNpemVvZigqYXJlYSks
IEdGUF9BVE9NSUMpOworCWlmICghYXJlYSkKKwkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgYWxs
b2NhdGUgYSBzY2FuIGFyZWFcbiIpOworCisJSU5JVF9ITElTVF9OT0RFKCZhcmVhLT5ub2RlKTsK
KwlhcmVhLT5vZmZzZXQgPSBvZmZzZXQ7CisJYXJlYS0+bGVuZ3RoID0gbGVuZ3RoOworCisJc3Bp
bl9sb2NrKCZtZW1sZWFrX2xvY2spOworCiAJcG9pbnRlciA9IGdldF9jYWNoZWRfcG9pbnRlcihw
dHIpOwogCWlmICghcG9pbnRlcikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC02MDEsMTUgKzc4Niwx
MSBAQCBzdGF0aWMgaW5saW5lIHZvaWQgYWRkX3NjYW5fYXJlYSh1bnNpZ25lCiAJCXBhbmljKCJr
bWVtbGVhazogc2NhbiBhcmVhIGxhcmdlciB0aGFuIGJsb2NrIDB4JTA4bHhcbiIsIHB0cik7CiAJ
fQogCi0JYXJlYSA9IGttYWxsb2Moc2l6ZW9mKCphcmVhKSwgR0ZQX0FUT01JQyk7Ci0JaWYgKCFh
cmVhKQotCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBhbGxvY2F0ZSBhIHNjYW4gYXJlYVxuIik7
CisJaGxpc3RfYWRkX2hlYWQoJmFyZWEtPm5vZGUsICZwb2ludGVyLT5hcmVhX2xpc3QpOwogCi0J
SU5JVF9ITElTVF9OT0RFKCZhcmVhLT5ub2RlKTsKLQlhcmVhLT5vZmZzZXQgPSBvZmZzZXQ7Ci0J
YXJlYS0+bGVuZ3RoID0gbGVuZ3RoOworCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOwogCi0J
aGxpc3RfYWRkX2hlYWQoJmFyZWEtPm5vZGUsICZwb2ludGVyLT5hcmVhX2xpc3QpOworCUJVR19P
TighaXJxc19kaXNhYmxlZCgpKTsKIH0KIAogLyogUmUtY3JlYXRlIHRoZSBwb2ludGVyIGFsaWFz
ZXMgYWNjb3JkaW5nIHRvIHRoZSBuZXcgdHlwZSBpZCAqLwpAQCAtNjE3LDYgKzc5OCwxMCBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgY2hhbmdlX3R5cGVfaWQodW5zaWduCiB7CiAJc3RydWN0IG1lbWxl
YWtfcG9pbnRlciAqcG9pbnRlcjsKIAorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKworCXNw
aW5fbG9jaygmbWVtbGVha19sb2NrKTsKKwogCXBvaW50ZXIgPSBnZXRfY2FjaGVkX3BvaW50ZXIo
cHRyKTsKIAlpZiAoIXBvaW50ZXIpIHsKIAkJZHVtcF9zdGFjaygpOwpAQCAtNjM0LDEyICs4MTks
MTcgQEAgc3RhdGljIGlubGluZSB2b2lkIGNoYW5nZV90eXBlX2lkKHVuc2lnbgogCX0KIAogCWlm
ICghdHlwZV9pZCB8fCB0eXBlX2lkID09IHBvaW50ZXItPnR5cGVfaWQpCi0JCXJldHVybjsKKwkJ
Z290byBvdXQ7CiAKIAlpZiAocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFTRVMpCiAJCWRl
bGV0ZV9wb2ludGVyX2FsaWFzZXMocG9pbnRlcik7CiAKIAlwb2ludGVyLT50eXBlX2lkID0gdHlw
ZV9pZDsKKworIG91dDoKKwlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKKworCUJVR19PTigh
aXJxc19kaXNhYmxlZCgpKTsKIH0KIAogLyogQWxsb2NhdGlvbiBmdW5jdGlvbiBob29rICovCkBA
IC02NzEsMjEgKzg2MSwyMCBAQCB2b2lkIG1lbWxlYWtfYWxsb2MoY29uc3Qgdm9pZCAqcHRyLCBz
aXplCiAKIAkJQlVHX09OKGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJF
SU5JVF9QT0lOVEVSUykKLQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZm
ZXIgb3ZlcmZsb3dcbiIpOwotCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9w
b3MrK107CisJCWlmIChwcmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50
ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9
IE1FTUxFQUtfQUxMT0M7Ci0JCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7Ci0JCXBvaW50ZXItPnNp
emUgPSBzaXplOwotCQlwb2ludGVyLT5yZWZfY291bnQgPSByZWZfY291bnQ7CisJCQlwb2ludGVy
LT50eXBlID0gTUVNTEVBS19BTExPQzsKKwkJCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7CisJCQlw
b2ludGVyLT5zaXplID0gc2l6ZTsKKwkJCXBvaW50ZXItPnJlZl9jb3VudCA9IHJlZl9jb3VudDsK
KwkJfQorCQlwcmVpbml0X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNwaW5fbG9j
aygmbWVtbGVha19sb2NrKTsKIAljcmVhdGVfcG9pbnRlcigodW5zaWduZWQgbG9uZylwdHIsIHNp
emUsIHJlZl9jb3VudCk7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1bm1hc2s6
CiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC03MTgsMTkgKzkwNywx
OCBAQCB2b2lkIG1lbWxlYWtfZnJlZShjb25zdCB2b2lkICpwdHIpCiAKIAkJQlVHX09OKGNwdV9p
ZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKLQkJCXBh
bmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIpOwotCQlw
b2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChwcmVpbml0
X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVy
c1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfRlJFRTsKLQkJcG9p
bnRlci0+cG9pbnRlciA9IHB0cjsKKwkJCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX0ZSRUU7CisJ
CQlwb2ludGVyLT5wb2ludGVyID0gcHRyOworCQl9CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290
byB1bm1hc2s7CiAJfQogCi0Jc3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOwogCWRlbGV0ZV9wb2lu
dGVyKCh1bnNpZ25lZCBsb25nKXB0cik7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAK
ICB1bm1hc2s6CiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC03NjQs
MjEgKzk1MiwyMCBAQCB2b2lkIG1lbWxlYWtfcGFkZGluZyhjb25zdCB2b2lkICpwdHIsIHVuCiAK
IAkJQlVHX09OKGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9Q
T0lOVEVSUykKLQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3Zl
cmZsb3dcbiIpOwotCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107
CisJCWlmIChwcmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAm
cHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxF
QUtfUEFERElORzsKLQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKLQkJcG9pbnRlci0+b2Zmc2V0
ID0gb2Zmc2V0OwotCQlwb2ludGVyLT5zaXplID0gc2l6ZTsKKwkJCXBvaW50ZXItPnR5cGUgPSBN
RU1MRUFLX1BBRERJTkc7CisJCQlwb2ludGVyLT5wb2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+
b2Zmc2V0ID0gb2Zmc2V0OworCQkJcG9pbnRlci0+c2l6ZSA9IHNpemU7CisJCX0KKwkJcHJlaW5p
dF9wb3MrKzsKIAogCQlnb3RvIHVubWFzazsKIAl9CiAKLQlzcGluX2xvY2soJm1lbWxlYWtfbG9j
ayk7CiAJdW5wYWRfcG9pbnRlcigodW5zaWduZWQgbG9uZylwdHIsIG9mZnNldCwgc2l6ZSk7Ci0J
c3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1bm1hc2s6CiAJY3B1X2NsZWFyKGNwdV9p
ZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC04MTEsMTkgKzk5OCwxOCBAQCB2b2lkIG1lbWxlYWtf
bm90X2xlYWsoY29uc3Qgdm9pZCAqcHRyKQogCiAJCUJVR19PTihjcHVfaWQgIT0gMCk7CiAKLQkJ
aWYgKHByZWluaXRfcG9zID49IFBSRUlOSVRfUE9JTlRFUlMpCi0JCQlwYW5pYygia21lbWxlYWs6
IHByZWluaXQgcG9pbnRlcnMgYnVmZmVyIG92ZXJmbG93XG4iKTsKLQkJcG9pbnRlciA9ICZwcmVp
bml0X3BvaW50ZXJzW3ByZWluaXRfcG9zKytdOworCQlpZiAocHJlaW5pdF9wb3MgPCBQUkVJTklU
X1BPSU5URVJTKSB7CisJCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3Nd
OwogCi0JCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX05PVF9MRUFLOwotCQlwb2ludGVyLT5wb2lu
dGVyID0gcHRyOworCQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfTk9UX0xFQUs7CisJCQlwb2lu
dGVyLT5wb2ludGVyID0gcHRyOworCQl9CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290byB1bm1h
c2s7CiAJfQogCi0Jc3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOwogCW1ha2VfZ3JheV9wb2ludGVy
KCh1bnNpZ25lZCBsb25nKXB0cik7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1
bm1hc2s6CiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC04NTYsMTkg
KzEwNDIsMTggQEAgdm9pZCBtZW1sZWFrX2lnbm9yZShjb25zdCB2b2lkICpwdHIpCiAKIAkJQlVH
X09OKGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVS
UykKLQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dc
biIpOwotCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlm
IChwcmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5p
dF9wb2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfSUdO
T1JFOwotCQlwb2ludGVyLT5wb2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+dHlwZSA9IE1FTUxF
QUtfSUdOT1JFOworCQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKKwkJfQorCQlwcmVpbml0X3Bv
cysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsK
IAltYWtlX2JsYWNrX3BvaW50ZXIoKHVuc2lnbmVkIGxvbmcpcHRyKTsKLQlzcGluX3VubG9jaygm
bWVtbGVha19sb2NrKTsKIAogIHVubWFzazoKIAljcHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFrX2Nw
dV9tYXNrKTsKQEAgLTkwMSwyMSArMTA4NiwyMCBAQCB2b2lkIG1lbWxlYWtfc2Nhbl9hcmVhKGNv
bnN0IHZvaWQgKnB0ciwgCiAKIAkJQlVHX09OKGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5p
dF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKLQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBw
b2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIpOwotCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRl
cnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChwcmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMp
IHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9p
bnRlci0+dHlwZSA9IE1FTUxFQUtfU0NBTl9BUkVBOwotCQlwb2ludGVyLT5wb2ludGVyID0gcHRy
OwotCQlwb2ludGVyLT5vZmZzZXQgPSBvZmZzZXQ7Ci0JCXBvaW50ZXItPnNpemUgPSBsZW5ndGg7
CisJCQlwb2ludGVyLT50eXBlID0gTUVNTEVBS19TQ0FOX0FSRUE7CisJCQlwb2ludGVyLT5wb2lu
dGVyID0gcHRyOworCQkJcG9pbnRlci0+b2Zmc2V0ID0gb2Zmc2V0OworCQkJcG9pbnRlci0+c2l6
ZSA9IGxlbmd0aDsKKwkJfQorCQlwcmVpbml0X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0K
IAotCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsKIAlhZGRfc2Nhbl9hcmVhKCh1bnNpZ25lZCBs
b25nKXB0ciwgb2Zmc2V0LCBsZW5ndGgpOwotCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOwog
CiAgdW5tYXNrOgogCWNwdV9jbGVhcihjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spOwpAQCAtOTQ4
LDIwICsxMTMyLDE5IEBAIHZvaWQgbWVtbGVha190eXBlaWRfcmF3KGNvbnN0IHZvaWQgKnB0ciwK
IAogCQlCVUdfT04oY3B1X2lkICE9IDApOwogCi0JCWlmIChwcmVpbml0X3BvcyA+PSBQUkVJTklU
X1BPSU5URVJTKQotCQkJcGFuaWMoImttZW1sZWFrOiBwcmVpbml0IHBvaW50ZXJzIGJ1ZmZlciBv
dmVyZmxvd1xuIik7Ci0JCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvcysr
XTsKKwkJaWYgKHByZWluaXRfcG9zIDwgUFJFSU5JVF9QT0lOVEVSUykgeworCQkJcG9pbnRlciA9
ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zXTsKIAotCQlwb2ludGVyLT50eXBlID0gTUVN
TEVBS19UWVBFSUQ7Ci0JCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7Ci0JCXBvaW50ZXItPnR5cGVf
aWQgPSB0eXBlX2lkOworCQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfVFlQRUlEOworCQkJcG9p
bnRlci0+cG9pbnRlciA9IHB0cjsKKwkJCXBvaW50ZXItPnR5cGVfaWQgPSB0eXBlX2lkOworCQl9
CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290byB1bm1hc2s7CiAJfQogCi0Jc3Bpbl9sb2NrKCZt
ZW1sZWFrX2xvY2spOwogCWNoYW5nZV90eXBlX2lkKCh1bnNpZ25lZCBsb25nKXB0ciwgdHlwZV9p
ZCk7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1bm1hc2s6CiAJY3B1X2NsZWFy
KGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC05NzMsNyArMTE1Niw3IEBAIEVYUE9SVF9T
WU1CT0wobWVtbGVha190eXBlaWRfcmF3KTsKIAogLyogU2NhbiBhIGJsb2NrIG9mIG1lbW9yeSAo
ZXhjbHVzaXZlIHJhbmdlKSBmb3IgcG9pbnRlcnMgYW5kIG1vdmUKICAqIHRob3NlIGZvdW5kIHRv
IHRoZSBncmF5IGxpc3QuIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGgKLSAqIG1lbWxlYWtf
bG9jayBoZWxkCisgKiBtZW1sZWFrX2xvY2sgaGVsZCBhbmQgaW50ZXJydXB0cyBkaXNhYmxlZAog
ICovCiBzdGF0aWMgdm9pZCBfX3NjYW5fYmxvY2sodm9pZCAqX3N0YXJ0LCB2b2lkICpfZW5kKQog
ewpAQCAtOTgyLDYgKzExNjUsOSBAQCBzdGF0aWMgdm9pZCBfX3NjYW5fYmxvY2sodm9pZCAqX3N0
YXJ0LCB2CiAJCQkJCQkgICAgICBCWVRFU19QRVJfV09SRCk7CiAJdW5zaWduZWQgbG9uZyAqZW5k
ID0gX2VuZDsKIAorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNf
bG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKKwogCWZvciAocHRyID0gc3RhcnQ7IHB0ciA8IGVuZDsg
cHRyKyspIHsKIAkJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlciA9CiAJCQlyYWRpeF90
cmVlX2xvb2t1cCgmcG9pbnRlcl90cmVlLApAQCAtOTk4LDYgKzExODQsOSBAQCBzdGF0aWMgdm9p
ZCBfX3NjYW5fYmxvY2sodm9pZCAqX3N0YXJ0LCB2CiAJCQlsaXN0X2FkZF90YWlsX3JjdSgmcG9p
bnRlci0+Z3JheV9saXN0LCAmZ3JheV9saXN0KTsKIAkJfQogCX0KKworCUJVR19PTighaXJxc19k
aXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKIH0K
IAogc3RhdGljIHZvaWQgc2Nhbl9ibG9jayh2b2lkICpzdGFydCwgdm9pZCAqZW5kKQpAQCAtMTAy
Nyw3ICsxMjE2LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIHNjYW5fcG9pbnRlcihzdHJ1Y3QgbQog
CXNwaW5fbG9ja19pcnFzYXZlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKIAogCS8qIGZyZWVkIHBv
aW50ZXIgKi8KLQlpZiAoIXBvaW50ZXItPnBvaW50ZXIpCisJaWYgKCFwb2ludGVyLT5mbGFncyAm
IFBPSU5URVJfQUxMT0NBVEVEKQogCQlnb3RvIG91dDsKIAogCWlmIChobGlzdF9lbXB0eSgmcG9p
bnRlci0+YXJlYV9saXN0KSkKQEAgLTEwNTYsMTQgKzEyNDUsMjEgQEAgI2VuZGlmCiAJdW5zaWdu
ZWQgaW50IGNwdV9pZDsKIAogCS8qIGluaXRpYWxpemUgcG9pbnRlcnMgKG1ha2UgdGhlbSB3aGl0
ZSkgYW5kIGJ1aWxkIHRoZSBpbml0aWFsCi0JICogZ3JheSBsaXN0LiBOb3RlIHRoYXQgY3JlYXRl
X3BvaW50ZXJfYWxpYXNlcyBtaWdodCBhbGxvY2F0ZQotCSAqIG1lbW9yeSAqLwotCXNwaW5fbG9j
a19pcnFzYXZlKCZtZW1sZWFrX2xvY2ssIGZsYWdzKTsKLQljcHVfaWQgPSBzbXBfcHJvY2Vzc29y
X2lkKCk7CisJICogZ3JheSBsaXN0LiBtZW1sZWFrX2NwdV9tYXNrIGlzIHNldCBhcyB3ZSBkb24n
dCB0cmFjayB0aGUKKwkgKiBrbWVtbGVhayBhbGxvY2F0aW9ucyAqLworCWxvY2FsX2lycV9zYXZl
KGZsYWdzKTsKKwljcHVfaWQgPSBnZXRfY3B1KCk7CiAJaWYgKGNwdV90ZXN0X2FuZF9zZXQoY3B1
X2lkLCBtZW1sZWFrX2NwdV9tYXNrKSkKIAkJQlVHKCk7CiAKLQlsaXN0X2Zvcl9lYWNoX2VudHJ5
KHBvaW50ZXIsICZwb2ludGVyX2xpc3QsIHBvaW50ZXJfbGlzdCkgeworCS8qIHVzZSB0aGUgX3Jj
dSB2YXJpYW50IHNpbmNlIHBvaW50ZXJfbGlzdCBjYW4gY2hhbmdlICovCisJcmN1X3JlYWRfbG9j
aygpOworCS8qIG1lbWxlYWtfbG9jayBuZWVkZWQgdG8gZW5zdXJlIHRoYXQgdGhlIHBvaW50ZXIg
c3RydWN0dXJlIGlzCisJICogbm90IGZyZWVkIG9uIGEgZGlmZmVyZW50IENQVSAoY3JlYXRlX3Bv
aW50ZXJfYWxpYXNlcyBtYXkKKwkgKiByZWxlYXNlIHRoZSBsb2NrKSAqLworCXNwaW5fbG9jaygm
bWVtbGVha19sb2NrKTsKKworCWxpc3RfZm9yX2VhY2hfZW50cnlfcmN1KHBvaW50ZXIsICZwb2lu
dGVyX2xpc3QsIHBvaW50ZXJfbGlzdCkgewogCQkvKiBsYXp5IGluc2VydGlvbiBvZiB0aGUgcG9p
bnRlciBhbGlhc2VzIGludG8gdGhlIHJhZGl4IHRyZWUgKi8KIAkJaWYgKChwb2ludGVyLT5mbGFn
cyAmIFBPSU5URVJfQUxMT0NBVEVEKQogCQkgICAgJiYgIShwb2ludGVyLT5mbGFncyAmIFBPSU5U
RVJfQUxJQVNFUykpCkBAIC0xMDcxLDEzICsxMjY3LDE5IEBAICNlbmRpZgogCiAJCXBvaW50ZXIt
PmNvdW50ID0gMDsKIAkJaWYgKGNvbG9yX2dyYXkocG9pbnRlcikpIHsKKwkJCS8qIHRoZSBwb2lu
dGVyIHdpbGwgYmUgcHV0IGJhY2sgb25jZSBpdCBpcworCQkJICogc2Nhbm5lZCB2aWEgdGhlIGdy
YXlfbGlzdCAqLwogCQkJZ2V0X3BvaW50ZXIocG9pbnRlcik7CiAJCQlsaXN0X2FkZF90YWlsKCZw
b2ludGVyLT5ncmF5X2xpc3QsICZncmF5X2xpc3QpOwogCQl9CiAJfQogCisJc3Bpbl91bmxvY2so
Jm1lbWxlYWtfbG9jayk7CisJcmN1X3JlYWRfdW5sb2NrKCk7CisKIAljcHVfY2xlYXIoY3B1X2lk
LCBtZW1sZWFrX2NwdV9tYXNrKTsKLQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtZW1sZWFrX2xv
Y2ssIGZsYWdzKTsKKwlwdXRfY3B1X25vX3Jlc2NoZWQoKTsKKwlsb2NhbF9pcnFfcmVzdG9yZShm
bGFncyk7CiAKIAkvKiBkYXRhL2JzcyBzY2FubmluZyAqLwogCXNjYW5fYmxvY2soX3NkYXRhLCBf
ZWRhdGEpOwpAQCAtMTI2Miw2ICsxNDY0LDEwIEBAIHZvaWQgX19pbml0IG1lbWxlYWtfaW5pdCh2
b2lkKQogCiAJYXRvbWljX3NldCgmbWVtbGVha19pbml0aWFsaXplZCwgMSk7CiAKKwlpZiAocHJl
aW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKKwkJcGFuaWMoImttZW1sZWFrOiBwcmVpbml0
IHBvaW50ZXJzIGJ1ZmZlciBvdmVyZmxvdzogJWRcbiIsCisJCSAgICAgIHByZWluaXRfcG9zKTsK
KwogCS8qIGV4ZWN1dGUgdGhlIGJ1ZmZlcmVkIG1lbWxlYWsgYWN0aW9ucyAqLwogCXByX2RlYnVn
KCJrbWVtbGVhazogJWQgcHJlaW5pdCBhY3Rpb25zXG4iLCBwcmVpbml0X3Bvcyk7CiAJZm9yIChp
ID0gMDsgaSA8IHByZWluaXRfcG9zOyBpKyspIHsK
------=_Part_14343_1752537.1155851906852--
