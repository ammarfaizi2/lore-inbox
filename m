Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S263584AbREYGft>; Fri, 25 May 2001 02:35:49 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S263585AbREYGf3>; Fri, 25 May 2001 02:35:29 -0400
Received: from h24-65-193-28.cg.shawcable.net ([24.65.193.28]:17143 "EHLO
	webber.adilger.int") by vger.kernel.org with ESMTP
	id <S263584AbREYGf1>; Fri, 25 May 2001 02:35:27 -0400
From: Andreas Dilger <adilger@turbolinux.com>
Message-Id: <200105250633.f4P6Xuj2017833@webber.adilger.int>
Subject: Re: [CHECKER] large stack variables (>=1K) in 2.4.4 and 2.4.4-ac8
In-Reply-To: <23182.990768020@kao2.melbourne.sgi.com> "from Keith Owens at May
 25, 2001 03:20:20 pm"
To: Keith Owens <kaos@ocs.com.au>
Date: Fri, 25 May 2001 00:33:56 -0600 (MDT)
CC: Andi Kleen <ak@suse.de>, Andreas Dilger <adilger@turbolinux.com>,
        linux-kernel@vger.kernel.org
X-Mailer: ELM [version 2.4ME+ PL87 (25)]
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

Keith Owens writes:
> Andi Kleen <ak@suse.de> wrote:
> >At one time someone had a script to grep objdump -S vmlinux for the
> >stack allocations generated by gcc and check them.
> 
> ftp://ftp.ocs.com.au/pub/kernel.stack.gz.  ix86 specific, probably gcc
> specific and it only picks up code that you compile.  The Stanford
> checker is much better.

I would probably agree.  Dawson said in a separate email that it would
be possible to enhance the checker to follow the call chains to measure
total stack usage.  Combining this with potential interrupt stack usage,
we may be able to eliminate some rare problems otherwise hard to find.

> >> On a side note, does anyone know if the kernel does checking if the
> >> stack overflowed at any time?
> >
> >You normally get a silent hang or worse a stack fault exception 
> >(which linux/x86 without kdb cannot recover from) which gives you instant 
> >reboot.
> 
> You cannot recover from a kernel stack overflow even with kdb.  The
> exception handler and kdb use the stack that just overflowed.

If it at least tells you that the stack has overflowed, and a backtrace
of the stack up to that point, that would at least be useful for fixing
the functions which caused the problem.

Also, allowing a config option to zero the stack at allocation would at
least allow the SysRQ-T code to tell you how much of the stack has
previously been in use so we can get an idea if we are close or not.

Given that the Stanford checker has discovered several individual 3kB+
stack allocations, it would surprise me if we didn't have stack overflows.
It may well be that people get mysterious hangs in these cases and have
no way to even diagnose the problem.  Maybe they are blaming the rare
hangs on hardware instead of software.

Cheers, Andreas
-- 
Andreas Dilger  \ "If a man ate a pound of pasta and a pound of antipasto,
                 \  would they cancel out, leaving him still hungry?"
http://www-mddsp.enel.ucalgary.ca/People/adilger/               -- Dogbert
