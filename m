Return-Path: <linux-kernel-owner+willy=40w.ods.org-S261438AbVEJCnw@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261438AbVEJCnw (ORCPT <rfc822;willy@w.ods.org>);
	Mon, 9 May 2005 22:43:52 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261469AbVEJCnw
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Mon, 9 May 2005 22:43:52 -0400
Received: from wproxy.gmail.com ([64.233.184.202]:55391 "EHLO wproxy.gmail.com")
	by vger.kernel.org with ESMTP id S261438AbVEJCns convert rfc822-to-8bit
	(ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Mon, 9 May 2005 22:43:48 -0400
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:reply-to:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=GU2F5h9rJGgivcYPcKiaFZkWPD6U+3ylCtkWPBrAFVwE+EqrNqoOCM+6EmUHsAJZWWxXnUDjowGLfjATY5Cw5oFvK4zlZq8+NJLZO9f9YZyEPgNHSKQmINUF69byZNl1YG3+7JecldhN501XJP4i9XvpmnqkS8YxZiCnb6lnpcU=
Message-ID: <5eb4b065050509194330611d4a@mail.gmail.com>
Date: Tue, 10 May 2005 10:43:47 +0800
From: KC <kcc1967@gmail.com>
Reply-To: KC <kcc1967@gmail.com>
To: KC <kcc1967@gmail.com>, Erik Mouw <erik@harddisk-recovery.com>,
       linux-kernel@vger.kernel.org
Subject: Re: proc_mknod() replacement
In-Reply-To: <20050509220411.GA15932@mail>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7BIT
Content-Disposition: inline
References: <5eb4b06505050904172655477c@mail.gmail.com>
	 <20050509154147.GC5799@harddisk-recovery.com>
	 <5eb4b065050509100638bd7970@mail.gmail.com>
	 <20050509220411.GA15932@mail>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

Hi

> >
> > For regular file, I do agree with you.  But for device node, I don't see
> > anything wrong by create it directly from kernel space.
> > In fact, I do not understand why proc_mknod() is removed from
> > 2.6.x ... I will be happy if someone can tell me why.
> 
> Because naming of devices is a policy that shouldn't be defined in the
> kernel.

Mmm ... generally speaking, I agree with that ... but IMHO, the better way
should be ... kernel or driver writer should provide default policy and
allow user space to overwrite the default ... so once the module is loaded,
it's ready to use ... without extra deamon's help. 

For example, in ovi-dev, I scan the PCI bus and if the device is found,
create device entries as
/proc/ovi/vendor_name/device_name-x.y where

vendor_name and device_name is defined by driver writer.
x is board ID which is determine by PCI scan.
y is sub device ID (similar to minor number) which is defined by
   driver writer too.

This approach may not good for general hardware such as tty, hard disk ... but
is useful for DAQ system.

By using this trick, I can provide a general deivce interface (APIs) such as
ovi_dev_open(vendor_name, device_name, boardID, subID, flags)
ovi_dev_write[b,w,l](dev, base, offset, value)
ovi_dev_read[b,w,l](dev, base,offset, *value)
ovi_dev_close(dev)

And if your ISA/PCI/cPCI/PXI device only use I/O and memory access, you can
have your driver done in ~ 5 min (maybe less) without any deamon's help ...
Just load the driver and use the API to access the devices.

> >
> > Why I want to use proc_mknod() in driver ?  I write a small package, ovi-dev,
> > which can be downloaded from
> > http://www.sourceforge.net/projects/ovi
> > The ovi-dev will scan the PCI bus and if it found, eg, 3 PCI devices, it
> > will create 3 device entries (nodes) automatically at module load time.
> > So number of device entries (nodes) will match number of devices
> > of the system ... well, UNIX/Linux doesn't work that way ... there are a lot
> > of device entries ... but no corresponding hardware existed.
> 
> You must have not have converted to udev, it's sort of like devfs in that
> device nodes are created dynamicly but it's a userspace daemon that
> adds/removes device nodes in response to hotplug events generated by the kernel.
> >
> > The proc_mknod() can fix the problems ... but it was removed from 2.6.x ...
> > too bad ... at least for me.   So I'm looking for an alternative way to create
> > device entry under /dev from drivers instead of /proc ... but still don't know
> > how.   Anyone know how to do that ?  It should be done at module_init()
> > and the entry should be removed at module_exit().
> 
> I believe if you use the driver core class stuff (i.e.
> class_simple_device_add) it should add device nodes in sysfs and generate
> hotplug events for udev.

Thanks, I will check that.


Regards
KC
kccheng@LinuxDAQ-Labs.org

> 
> Jim.
>
