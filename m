Return-Path: <linux-kernel-owner+willy=40w.ods.org@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S265242AbTIDRWY (ORCPT <rfc822;willy@w.ods.org>);
	Thu, 4 Sep 2003 13:22:24 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S265323AbTIDRWX
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Thu, 4 Sep 2003 13:22:23 -0400
Received: from fmr09.intel.com ([192.52.57.35]:41439 "EHLO hermes.hd.intel.com")
	by vger.kernel.org with ESMTP id S265242AbTIDRWA (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 4 Sep 2003 13:22:00 -0400
content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----_=_NextPart_001_01C37309.09E5C7AD"
X-MimeOLE: Produced By Microsoft Exchange V6.0.6375.0
Subject: RE: [PATCH] linux-2.6.0-test4_cyclone-hpet-fix_A0
Date: Thu, 4 Sep 2003 10:21:55 -0700
Message-ID: <C8C38546F90ABF408A5961FC01FDBF1902C7D23C@fmsmsx405.fm.intel.com>
X-MS-Has-Attach: yes
X-MS-TNEF-Correlator: 
Thread-Topic: [PATCH] linux-2.6.0-test4_cyclone-hpet-fix_A0
Thread-Index: AcNysU+9cIBZfloOSDa7htyVnTnmfAAU3Axw
From: "Pallipadi, Venkatesh" <venkatesh.pallipadi@intel.com>
To: "Andrew Morton" <akpm@osdl.org>, "john stultz" <johnstul@us.ibm.com>
Cc: <linux-kernel@vger.kernel.org>
X-OriginalArrivalTime: 04 Sep 2003 17:21:55.0944 (UTC) FILETIME=[0A31C680:01C37309]
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

This is a multi-part message in MIME format.

------_=_NextPart_001_01C37309.09E5C7AD
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable



> -----Original Message-----
> From: Andrew Morton [mailto:akpm@osdl.org]=20
>=20
> john stultz <johnstul@us.ibm.com> wrote:
> >
> > Anyway, the HPET changes made calibrate_tsc() static, which=20
> it probably
> > should be, but it broke the timer_cyclone code. This patch=20
> fixes it back
> > up by re-implementing calibrate_tsc() locally as it was done in
> > timer_hpet.c=20
>=20
> <stdrant>
> Of course if some bozo had stuck this:
>=20
> 	extern unsigned long calibrate_tsc(void);
>=20
> in a header file rather than in a .c file (timer_cyclone.c),=20
> this problem
> would not have occurred.  Nevereverever put extern=20
> declarations in .c files!
> </stdrant>


My fault. I should have atleast test compiled cyclone timer code.


> Can we not we avoid the cut-n-paste coding?
>=20
> There is also timer_tsc.c:calibrate_tsc_hpet() which is=20
> almost the same as
> timer_hpet.c:calibrate_tsc().  Seem to me that we could tweak
> calibrate_tsc_hpet() a bit, unstaticalise=20
> timer_tsc.c:calibrate_tsc() and
> have two functions rather than four?
>=20


How about the attached patch (against mm4), that moves all=20
calibrate tsc functions into a common file, avoiding the duplication.=20
This time I could successfully compile cyclone timer too :). However,
I had to do an unrelated one line change in fixmap (last chunk in=20
the patch) to compile for summit.


Thanks,
-Venkatesh


------_=_NextPart_001_01C37309.09E5C7AD
Content-Type: application/octet-stream;
	name="mm4-hpet-fix.patch"
Content-Transfer-Encoding: base64
Content-Description: mm4-hpet-fix.patch
Content-Disposition: attachment;
	filename="mm4-hpet-fix.patch"

ZGlmZiAtcHVyTiBsaW51eC0yLjYuMC10ZXN0NC1tbTQvYXJjaC9pMzg2L2tlcm5lbC90aW1lcnMv
Y29tbW9uLmMgbGludXgtMi42LjAtdGVzdDQtbW00LWZpeC9hcmNoL2kzODYva2VybmVsL3RpbWVy
cy9jb21tb24uYwotLS0gbGludXgtMi42LjAtdGVzdDQtbW00L2FyY2gvaTM4Ni9rZXJuZWwvdGlt
ZXJzL2NvbW1vbi5jCTE5NjktMTItMzEgMTY6MDA6MDAuMDAwMDAwMDAwIC0wODAwCisrKyBsaW51
eC0yLjYuMC10ZXN0NC1tbTQtZml4L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL2NvbW1vbi5jCTIw
MDMtMDktMDQgMTE6NTc6NDcuMDAwMDAwMDAwIC0wNzAwCkBAIC0wLDAgKzEsMTM4IEBACisvKgkK
KyAqCUNvbW1vbiBmdW5jdGlvbnMgdXNlZCBhY3Jvc3MgdGhlIHRpbWVycyBnbyBoZXJlCisgKi8K
KworI2luY2x1ZGUgPGxpbnV4L2luaXQuaD4KKyNpbmNsdWRlIDxsaW51eC90aW1leC5oPgorI2lu
Y2x1ZGUgPGxpbnV4L2Vycm5vLmg+CisKKyNpbmNsdWRlIDxhc20vdGltZXIuaD4KKyNpbmNsdWRl
IDxhc20vaHBldC5oPgorCisjaW5jbHVkZSAibWFjaF90aW1lci5oIgorCisvKiAtLS0tLS0gQ2Fs
aWJyYXRlIHRoZSBUU0MgLS0tLS0tLSAKKyAqIFJldHVybiAyXjMyICogKDEgLyAoVFNDIGNsb2Nr
cyBwZXIgdXNlYykpIGZvciBkb19mYXN0X2dldHRpbWVvZmZzZXQoKS4KKyAqIFRvbyBtdWNoIDY0
LWJpdCBhcml0aG1ldGljIGhlcmUgdG8gZG8gdGhpcyBjbGVhbmx5IGluIEMsIGFuZCBmb3IKKyAq
IGFjY3VyYWN5J3Mgc2FrZSB3ZSB3YW50IHRvIGtlZXAgdGhlIG92ZXJoZWFkIG9uIHRoZSBDVEMg
c3BlYWtlciAoY2hhbm5lbCAyKQorICogb3V0cHV0IGJ1c3kgbG9vcCBhcyBsb3cgYXMgcG9zc2li
bGUuIFdlIGF2b2lkIHJlYWRpbmcgdGhlIENUQyByZWdpc3RlcnMKKyAqIGRpcmVjdGx5IGJlY2F1
c2Ugb2YgdGhlIGF3a3dhcmQgOC1iaXQgYWNjZXNzIG1lY2hhbmlzbSBvZiB0aGUgODJDNTQKKyAq
IGRldmljZS4KKyAqLworCisjZGVmaW5lIENBTElCUkFURV9USU1FCSg1ICogMTAwMDAyMC9IWikK
KwordW5zaWduZWQgbG9uZyBfX2luaXQgY2FsaWJyYXRlX3RzYyh2b2lkKQoreworCW1hY2hfcHJl
cGFyZV9jb3VudGVyKCk7CisKKwl7CisJCXVuc2lnbmVkIGxvbmcgc3RhcnRsb3csIHN0YXJ0aGln
aDsKKwkJdW5zaWduZWQgbG9uZyBlbmRsb3csIGVuZGhpZ2g7CisJCXVuc2lnbmVkIGxvbmcgY291
bnQ7CisKKwkJcmR0c2Moc3RhcnRsb3csc3RhcnRoaWdoKTsKKwkJbWFjaF9jb3VudHVwKCZjb3Vu
dCk7CisJCXJkdHNjKGVuZGxvdyxlbmRoaWdoKTsKKworCisJCS8qIEVycm9yOiBFQ1RDTkVWRVJT
RVQgKi8KKwkJaWYgKGNvdW50IDw9IDEpCisJCQlnb3RvIGJhZF9jdGM7CisKKwkJLyogNjQtYml0
IHN1YnRyYWN0IC0gZ2NjIGp1c3QgbWVzc2VzIHVwIHdpdGggbG9uZyBsb25ncyAqLworCQlfX2Fz
bV9fKCJzdWJsICUyLCUwXG5cdCIKKwkJCSJzYmJsICUzLCUxIgorCQkJOiI9YSIgKGVuZGxvdyks
ICI9ZCIgKGVuZGhpZ2gpCisJCQk6ImciIChzdGFydGxvdyksICJnIiAoc3RhcnRoaWdoKSwKKwkJ
CSAiMCIgKGVuZGxvdyksICIxIiAoZW5kaGlnaCkpOworCisJCS8qIEVycm9yOiBFQ1BVVE9PRkFT
VCAqLworCQlpZiAoZW5kaGlnaCkKKwkJCWdvdG8gYmFkX2N0YzsKKworCQkvKiBFcnJvcjogRUNQ
VVRPT1NMT1cgKi8KKwkJaWYgKGVuZGxvdyA8PSBDQUxJQlJBVEVfVElNRSkKKwkJCWdvdG8gYmFk
X2N0YzsKKworCQlfX2FzbV9fKCJkaXZsICUyIgorCQkJOiI9YSIgKGVuZGxvdyksICI9ZCIgKGVu
ZGhpZ2gpCisJCQk6InIiIChlbmRsb3cpLCAiMCIgKDApLCAiMSIgKENBTElCUkFURV9USU1FKSk7
CisKKwkJcmV0dXJuIGVuZGxvdzsKKwl9CisKKwkvKgorCSAqIFRoZSBDVEMgd2Fzbid0IHJlbGlh
YmxlOiB3ZSBnb3QgYSBoaXQgb24gdGhlIHZlcnkgZmlyc3QgcmVhZCwKKwkgKiBvciB0aGUgQ1BV
IHdhcyBzbyBmYXN0L3Nsb3cgdGhhdCB0aGUgcXVvdGllbnQgd291bGRuJ3QgZml0IGluCisJICog
MzIgYml0cy4uCisJICovCitiYWRfY3RjOgorCXJldHVybiAwOworfQorCisjaWZkZWYgQ09ORklH
X0hQRVRfVElNRVIKKy8qIC0tLS0tLSBDYWxpYnJhdGUgdGhlIFRTQyB1c2luZyBIUEVUIC0tLS0t
LS0KKyAqIFJldHVybiAyXjMyICogKDEgLyAoVFNDIGNsb2NrcyBwZXIgdXNlYykpIGZvciBnZXR0
aW5nIHRoZSBDUFUgZnJlcS4KKyAqIFNlY29uZCBvdXRwdXQgaXMgcGFyYW1ldGVyIDEgKHdoZW4g
bm9uIE5VTEwpCisgKiBTZXQgMl4zMiAqICgxIC8gKHRzYyBwZXIgSFBFVCBjbGspKSBmb3IgZGVs
YXlfaHBldCgpLgorICogY2FsaWJyYXRlX3RzYygpIGNhbGlicmF0ZXMgdGhlIHByb2Nlc3NvciBU
U0MgYnkgY29tcGFyaW5nCisgKiBpdCB0byB0aGUgSFBFVCB0aW1lciBvZiBrbm93biBmcmVxdWVu
Y3kuCisgKiBUb28gbXVjaCA2NC1iaXQgYXJpdGhtZXRpYyBoZXJlIHRvIGRvIHRoaXMgY2xlYW5s
eSBpbiBDCisgKi8KKyNkZWZpbmUgQ0FMSUJSQVRFX0NOVF9IUEVUIAkoNSAqIGhwZXRfdGljaykK
KyNkZWZpbmUgQ0FMSUJSQVRFX1RJTUVfSFBFVCAJKDUgKiBLRVJORUxfVElDS19VU0VDKQorCit1
bnNpZ25lZCBsb25nIF9faW5pdCBjYWxpYnJhdGVfdHNjX2hwZXQodW5zaWduZWQgbG9uZyAqdHNj
X2hwZXRfcXVvdGllbnRfcHRyKQoreworCXVuc2lnbmVkIGxvbmcgdHNjX3N0YXJ0bG93LCB0c2Nf
c3RhcnRoaWdoOworCXVuc2lnbmVkIGxvbmcgdHNjX2VuZGxvdywgdHNjX2VuZGhpZ2g7CisJdW5z
aWduZWQgbG9uZyBocGV0X3N0YXJ0LCBocGV0X2VuZDsKKwl1bnNpZ25lZCBsb25nIHJlc3VsdCwg
cmVtYWluOworCisJaHBldF9zdGFydCA9IGhwZXRfcmVhZGwoSFBFVF9DT1VOVEVSKTsKKwlyZHRz
Yyh0c2Nfc3RhcnRsb3csIHRzY19zdGFydGhpZ2gpOworCWRvIHsKKwkJaHBldF9lbmQgPSBocGV0
X3JlYWRsKEhQRVRfQ09VTlRFUik7CisJfSB3aGlsZSAoKGhwZXRfZW5kIC0gaHBldF9zdGFydCkg
PCBDQUxJQlJBVEVfQ05UX0hQRVQpOworCXJkdHNjKHRzY19lbmRsb3csIHRzY19lbmRoaWdoKTsK
KworCS8qIDY0LWJpdCBzdWJ0cmFjdCAtIGdjYyBqdXN0IG1lc3NlcyB1cCB3aXRoIGxvbmcgbG9u
Z3MgKi8KKwlfX2FzbV9fKCJzdWJsICUyLCUwXG5cdCIKKwkJInNiYmwgJTMsJTEiCisJCToiPWEi
ICh0c2NfZW5kbG93KSwgIj1kIiAodHNjX2VuZGhpZ2gpCisJCToiZyIgKHRzY19zdGFydGxvdyks
ICJnIiAodHNjX3N0YXJ0aGlnaCksCisJCSAiMCIgKHRzY19lbmRsb3cpLCAiMSIgKHRzY19lbmRo
aWdoKSk7CisKKwkvKiBFcnJvcjogRUNQVVRPT0ZBU1QgKi8KKwlpZiAodHNjX2VuZGhpZ2gpCisJ
CWdvdG8gYmFkX2NhbGlicmF0aW9uOworCisJLyogRXJyb3I6IEVDUFVUT09TTE9XICovCisJaWYg
KHRzY19lbmRsb3cgPD0gQ0FMSUJSQVRFX1RJTUVfSFBFVCkKKwkJZ290byBiYWRfY2FsaWJyYXRp
b247CisKKwlBU01fRElWNjRfUkVHKHJlc3VsdCwgcmVtYWluLCB0c2NfZW5kbG93LCAwLCBDQUxJ
QlJBVEVfVElNRV9IUEVUKTsKKwlpZiAocmVtYWluID4gKHRzY19lbmRsb3cgPj4gMSkpCisJCXJl
c3VsdCsrOyAvKiByb3VuZGluZyB0aGUgcmVzdWx0ICovCisKKwlpZiAodHNjX2hwZXRfcXVvdGll
bnRfcHRyKSB7CisJCXVuc2lnbmVkIGxvbmcgdHNjX2hwZXRfcXVvdGllbnQ7CisKKwkJQVNNX0RJ
VjY0X1JFRyh0c2NfaHBldF9xdW90aWVudCwgcmVtYWluLCB0c2NfZW5kbG93LCAwLAorCQkJQ0FM
SUJSQVRFX0NOVF9IUEVUKTsKKwkJaWYgKHJlbWFpbiA+ICh0c2NfZW5kbG93ID4+IDEpKQorCQkJ
dHNjX2hwZXRfcXVvdGllbnQrKzsgLyogcm91bmRpbmcgdGhlIHJlc3VsdCAqLworCQkqdHNjX2hw
ZXRfcXVvdGllbnRfcHRyID0gdHNjX2hwZXRfcXVvdGllbnQ7CisJfQorCisJcmV0dXJuIHJlc3Vs
dDsKK2JhZF9jYWxpYnJhdGlvbjoKKwkvKgorCSAqIHRoZSBDUFUgd2FzIHNvIGZhc3Qvc2xvdyB0
aGF0IHRoZSBxdW90aWVudCB3b3VsZG4ndCBmaXQgaW4KKwkgKiAzMiBiaXRzLi4KKwkgKi8KKwly
ZXR1cm4gMDsKK30KKyNlbmRpZgorCmRpZmYgLXB1ck4gbGludXgtMi42LjAtdGVzdDQtbW00L2Fy
Y2gvaTM4Ni9rZXJuZWwvdGltZXJzL01ha2VmaWxlIGxpbnV4LTIuNi4wLXRlc3Q0LW1tNC1maXgv
YXJjaC9pMzg2L2tlcm5lbC90aW1lcnMvTWFrZWZpbGUKLS0tIGxpbnV4LTIuNi4wLXRlc3Q0LW1t
NC9hcmNoL2kzODYva2VybmVsL3RpbWVycy9NYWtlZmlsZQkyMDAzLTA5LTAyIDE3OjU2OjQ4LjAw
MDAwMDAwMCAtMDcwMAorKysgbGludXgtMi42LjAtdGVzdDQtbW00LWZpeC9hcmNoL2kzODYva2Vy
bmVsL3RpbWVycy9NYWtlZmlsZQkyMDAzLTA5LTA0IDExOjMzOjA0LjAwMDAwMDAwMCAtMDcwMApA
QCAtMiw3ICsyLDcgQEAKICMgTWFrZWZpbGUgZm9yIHg4NiB0aW1lcnMKICMKIAotb2JqLXkgOj0g
dGltZXIubyB0aW1lcl9ub25lLm8gdGltZXJfdHNjLm8gdGltZXJfcGl0Lm8KK29iai15IDo9IHRp
bWVyLm8gdGltZXJfbm9uZS5vIHRpbWVyX3RzYy5vIHRpbWVyX3BpdC5vIGNvbW1vbi5vCiAKIG9i
ai0kKENPTkZJR19YODZfQ1lDTE9ORV9USU1FUikJKz0gdGltZXJfY3ljbG9uZS5vCiBvYmotJChD
T05GSUdfSFBFVF9USU1FUikJKz0gdGltZXJfaHBldC5vCmRpZmYgLXB1ck4gbGludXgtMi42LjAt
dGVzdDQtbW00L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX2N5Y2xvbmUuYyBsaW51eC0y
LjYuMC10ZXN0NC1tbTQtZml4L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX2N5Y2xvbmUu
YwotLS0gbGludXgtMi42LjAtdGVzdDQtbW00L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVy
X2N5Y2xvbmUuYwkyMDAzLTA4LTIyIDE2OjU3OjQ5LjAwMDAwMDAwMCAtMDcwMAorKysgbGludXgt
Mi42LjAtdGVzdDQtbW00LWZpeC9hcmNoL2kzODYva2VybmVsL3RpbWVycy90aW1lcl9jeWNsb25l
LmMJMjAwMy0wOS0wNCAxMTo1Nzo0Mi4wMDAwMDAwMDAgLTA3MDAKQEAgLTE5LDcgKzE5LDYgQEAK
ICNpbmNsdWRlIDxhc20vZml4bWFwLmg+CiAKIGV4dGVybiBzcGlubG9ja190IGk4MjUzX2xvY2s7
Ci1leHRlcm4gdW5zaWduZWQgbG9uZyBjYWxpYnJhdGVfdHNjKHZvaWQpOwogCiAvKiBOdW1iZXIg
b2YgdXNlY3MgdGhhdCB0aGUgbGFzdCBpbnRlcnJ1cHQgd2FzIGRlbGF5ZWQgKi8KIHN0YXRpYyBp
bnQgZGVsYXlfYXRfbGFzdF9pbnRlcnJ1cHQ7CmRpZmYgLXB1ck4gbGludXgtMi42LjAtdGVzdDQt
bW00L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX2hwZXQuYyBsaW51eC0yLjYuMC10ZXN0
NC1tbTQtZml4L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX2hwZXQuYwotLS0gbGludXgt
Mi42LjAtdGVzdDQtbW00L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX2hwZXQuYwkyMDAz
LTA5LTAyIDE3OjU2OjQ4LjAwMDAwMDAwMCAtMDcwMAorKysgbGludXgtMi42LjAtdGVzdDQtbW00
LWZpeC9hcmNoL2kzODYva2VybmVsL3RpbWVycy90aW1lcl9ocGV0LmMJMjAwMy0wOS0wNCAxMTo1
NzozOC4wMDAwMDAwMDAgLTA3MDAKQEAgLTEzMSw2MyArMTMxLDYgQEAgdm9pZCBkZWxheV9ocGV0
KHVuc2lnbmVkIGxvbmcgbG9vcHMpCiAJfSB3aGlsZSAoKGhwZXRfZW5kIC0gaHBldF9zdGFydCkg
PCAobG9vcHMpKTsKIH0KIAotLyogLS0tLS0tIENhbGlicmF0ZSB0aGUgVFNDIC0tLS0tLS0KLSAq
IFJldHVybiAyXjMyICogKDEgLyAoVFNDIGNsb2NrcyBwZXIgdXNlYykpIGZvciBnZXR0aW5nIHRo
ZSBDUFUgZnJlcS4KLSAqIFNldCAyXjMyICogKDEgLyAodHNjIHBlciBIUEVUIGNsaykpIGZvciBk
ZWxheV9ocGV0KCkuCi0gKiBjYWxpYnJhdGVfdHNjKCkgY2FsaWJyYXRlcyB0aGUgcHJvY2Vzc29y
IFRTQyBieSBjb21wYXJpbmcKLSAqIGl0IHRvIHRoZSBIUEVUIHRpbWVyIG9mIGtub3duIGZyZXF1
ZW5jeS4KLSAqIFRvbyBtdWNoIDY0LWJpdCBhcml0aG1ldGljIGhlcmUgdG8gZG8gdGhpcyBjbGVh
bmx5IGluIEMKLSAqLwotI2RlZmluZSBDQUxJQlJBVEVfQ05UX0hQRVQgCSg1ICogaHBldF90aWNr
KQotI2RlZmluZSBDQUxJQlJBVEVfVElNRV9IUEVUIAkoNSAqIEtFUk5FTF9USUNLX1VTRUMpCi0K
LXN0YXRpYyB1bnNpZ25lZCBsb25nIF9faW5pdCBjYWxpYnJhdGVfdHNjKHZvaWQpCi17Ci0JdW5z
aWduZWQgbG9uZyB0c2Nfc3RhcnRsb3csIHRzY19zdGFydGhpZ2g7Ci0JdW5zaWduZWQgbG9uZyB0
c2NfZW5kbG93LCB0c2NfZW5kaGlnaDsKLQl1bnNpZ25lZCBsb25nIGhwZXRfc3RhcnQsIGhwZXRf
ZW5kOwotCXVuc2lnbmVkIGxvbmcgcmVzdWx0LCByZW1haW47Ci0KLQlocGV0X3N0YXJ0ID0gaHBl
dF9yZWFkbChIUEVUX0NPVU5URVIpOwotCXJkdHNjKHRzY19zdGFydGxvdywgdHNjX3N0YXJ0aGln
aCk7Ci0JZG8gewotCQlocGV0X2VuZCA9IGhwZXRfcmVhZGwoSFBFVF9DT1VOVEVSKTsKLQl9IHdo
aWxlICgoaHBldF9lbmQgLSBocGV0X3N0YXJ0KSA8IENBTElCUkFURV9DTlRfSFBFVCk7Ci0JcmR0
c2ModHNjX2VuZGxvdywgdHNjX2VuZGhpZ2gpOwotCi0JLyogNjQtYml0IHN1YnRyYWN0IC0gZ2Nj
IGp1c3QgbWVzc2VzIHVwIHdpdGggbG9uZyBsb25ncyAqLwotCV9fYXNtX18oInN1YmwgJTIsJTBc
blx0IgotCQkic2JibCAlMywlMSIKLQkJOiI9YSIgKHRzY19lbmRsb3cpLCAiPWQiICh0c2NfZW5k
aGlnaCkKLQkJOiJnIiAodHNjX3N0YXJ0bG93KSwgImciICh0c2Nfc3RhcnRoaWdoKSwKLQkJICIw
IiAodHNjX2VuZGxvdyksICIxIiAodHNjX2VuZGhpZ2gpKTsKLQotCS8qIEVycm9yOiBFQ1BVVE9P
RkFTVCAqLwotCWlmICh0c2NfZW5kaGlnaCkKLQkJZ290byBiYWRfY2FsaWJyYXRpb247Ci0KLQkv
KiBFcnJvcjogRUNQVVRPT1NMT1cgKi8KLQlpZiAodHNjX2VuZGxvdyA8PSBDQUxJQlJBVEVfVElN
RV9IUEVUKQotCQlnb3RvIGJhZF9jYWxpYnJhdGlvbjsKLQotCUFTTV9ESVY2NF9SRUcocmVzdWx0
LCByZW1haW4sIHRzY19lbmRsb3csIDAsIENBTElCUkFURV9USU1FX0hQRVQpOwotCWlmIChyZW1h
aW4gPiAodHNjX2VuZGxvdyA+PiAxKSkKLQkJcmVzdWx0Kys7IC8qIHJvdW5kaW5nIHRoZSByZXN1
bHQgKi8KLQotCUFTTV9ESVY2NF9SRUcodHNjX2hwZXRfcXVvdGllbnQsIHJlbWFpbiwgdHNjX2Vu
ZGxvdywgMCwKLQkJCUNBTElCUkFURV9DTlRfSFBFVCk7Ci0JaWYgKHJlbWFpbiA+ICh0c2NfZW5k
bG93ID4+IDEpKQotCQl0c2NfaHBldF9xdW90aWVudCsrOyAvKiByb3VuZGluZyB0aGUgcmVzdWx0
ICovCi0KLQlyZXR1cm4gcmVzdWx0OwotYmFkX2NhbGlicmF0aW9uOgotCS8qCi0JICogdGhlIENQ
VSB3YXMgc28gZmFzdC9zbG93IHRoYXQgdGhlIHF1b3RpZW50IHdvdWxkbid0IGZpdCBpbgotCSAq
IDMyIGJpdHMuLgotCSAqLwotCXJldHVybiAwOwotfQotCiBzdGF0aWMgaW50IF9faW5pdCBpbml0
X2hwZXQoY2hhciogb3ZlcnJpZGUpCiB7CiAJdW5zaWduZWQgbG9uZyByZXN1bHQsIHJlbWFpbjsK
QEAgLTIwMSw3ICsxNDQsNyBAQCBzdGF0aWMgaW50IF9faW5pdCBpbml0X2hwZXQoY2hhciogb3Zl
cnJpCiAKIAlwcmludGsoIlVzaW5nIEhQRVQgZm9yIGdldHRpbWVvZmRheVxuIik7CiAJaWYgKGNw
dV9oYXNfdHNjKSB7Ci0JCXVuc2lnbmVkIGxvbmcgdHNjX3F1b3RpZW50ID0gY2FsaWJyYXRlX3Rz
YygpOworCQl1bnNpZ25lZCBsb25nIHRzY19xdW90aWVudCA9IGNhbGlicmF0ZV90c2NfaHBldCgm
dHNjX2hwZXRfcXVvdGllbnQpOwogCQlpZiAodHNjX3F1b3RpZW50KSB7CiAJCQkvKiByZXBvcnQg
Q1BVIGNsb2NrIHJhdGUgaW4gSHouCiAJCQkgKiBUaGUgZm9ybXVsYSBpcyAoMTBeNiAqIDJeMzIp
IC8gKDJeMzIgKiAxIC8gKGNsb2Nrcy91cykpID0KZGlmZiAtcHVyTiBsaW51eC0yLjYuMC10ZXN0
NC1tbTQvYXJjaC9pMzg2L2tlcm5lbC90aW1lcnMvdGltZXJfdHNjLmMgbGludXgtMi42LjAtdGVz
dDQtbW00LWZpeC9hcmNoL2kzODYva2VybmVsL3RpbWVycy90aW1lcl90c2MuYwotLS0gbGludXgt
Mi42LjAtdGVzdDQtbW00L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX3RzYy5jCTIwMDMt
MDktMDIgMTc6NTY6NDguMDAwMDAwMDAwIC0wNzAwCisrKyBsaW51eC0yLjYuMC10ZXN0NC1tbTQt
Zml4L2FyY2gvaTM4Ni9rZXJuZWwvdGltZXJzL3RpbWVyX3RzYy5jCTIwMDMtMDktMDQgMTE6NTc6
MzUuMDAwMDAwMDAwIC0wNzAwCkBAIC0yNTQsNjcgKzI1NCw2IEBAIHN0YXRpYyB2b2lkIGRlbGF5
X3RzYyh1bnNpZ25lZCBsb25nIGxvb3AKIAl9IHdoaWxlICgobm93LWJjbG9jaykgPCBsb29wcyk7
CiB9CiAKLS8qIC0tLS0tLSBDYWxpYnJhdGUgdGhlIFRTQyAtLS0tLS0tIAotICogUmV0dXJuIDJe
MzIgKiAoMSAvIChUU0MgY2xvY2tzIHBlciB1c2VjKSkgZm9yIGRvX2Zhc3RfZ2V0dGltZW9mZnNl
dCgpLgotICogVG9vIG11Y2ggNjQtYml0IGFyaXRobWV0aWMgaGVyZSB0byBkbyB0aGlzIGNsZWFu
bHkgaW4gQywgYW5kIGZvcgotICogYWNjdXJhY3kncyBzYWtlIHdlIHdhbnQgdG8ga2VlcCB0aGUg
b3ZlcmhlYWQgb24gdGhlIENUQyBzcGVha2VyIChjaGFubmVsIDIpCi0gKiBvdXRwdXQgYnVzeSBs
b29wIGFzIGxvdyBhcyBwb3NzaWJsZS4gV2UgYXZvaWQgcmVhZGluZyB0aGUgQ1RDIHJlZ2lzdGVy
cwotICogZGlyZWN0bHkgYmVjYXVzZSBvZiB0aGUgYXdrd2FyZCA4LWJpdCBhY2Nlc3MgbWVjaGFu
aXNtIG9mIHRoZSA4MkM1NAotICogZGV2aWNlLgotICovCi0KLSNkZWZpbmUgQ0FMSUJSQVRFX1RJ
TUUJKDUgKiAxMDAwMDIwL0haKQotCi1zdGF0aWMgdW5zaWduZWQgbG9uZyBfX2luaXQgY2FsaWJy
YXRlX3RzYyh2b2lkKQotewotCW1hY2hfcHJlcGFyZV9jb3VudGVyKCk7Ci0KLQl7Ci0JCXVuc2ln
bmVkIGxvbmcgc3RhcnRsb3csIHN0YXJ0aGlnaDsKLQkJdW5zaWduZWQgbG9uZyBlbmRsb3csIGVu
ZGhpZ2g7Ci0JCXVuc2lnbmVkIGxvbmcgY291bnQ7Ci0KLQkJcmR0c2Moc3RhcnRsb3csc3RhcnRo
aWdoKTsKLQkJbWFjaF9jb3VudHVwKCZjb3VudCk7Ci0JCXJkdHNjKGVuZGxvdyxlbmRoaWdoKTsK
LQotCQlsYXN0X3RzY19sb3cgPSBlbmRsb3c7Ci0KLQkJLyogRXJyb3I6IEVDVENORVZFUlNFVCAq
LwotCQlpZiAoY291bnQgPD0gMSkKLQkJCWdvdG8gYmFkX2N0YzsKLQotCQkvKiA2NC1iaXQgc3Vi
dHJhY3QgLSBnY2MganVzdCBtZXNzZXMgdXAgd2l0aCBsb25nIGxvbmdzICovCi0JCV9fYXNtX18o
InN1YmwgJTIsJTBcblx0IgotCQkJInNiYmwgJTMsJTEiCi0JCQk6Ij1hIiAoZW5kbG93KSwgIj1k
IiAoZW5kaGlnaCkKLQkJCToiZyIgKHN0YXJ0bG93KSwgImciIChzdGFydGhpZ2gpLAotCQkJICIw
IiAoZW5kbG93KSwgIjEiIChlbmRoaWdoKSk7Ci0KLQkJLyogRXJyb3I6IEVDUFVUT09GQVNUICov
Ci0JCWlmIChlbmRoaWdoKQotCQkJZ290byBiYWRfY3RjOwotCi0JCS8qIEVycm9yOiBFQ1BVVE9P
U0xPVyAqLwotCQlpZiAoZW5kbG93IDw9IENBTElCUkFURV9USU1FKQotCQkJZ290byBiYWRfY3Rj
OwotCi0JCV9fYXNtX18oImRpdmwgJTIiCi0JCQk6Ij1hIiAoZW5kbG93KSwgIj1kIiAoZW5kaGln
aCkKLQkJCToiciIgKGVuZGxvdyksICIwIiAoMCksICIxIiAoQ0FMSUJSQVRFX1RJTUUpKTsKLQot
CQlyZXR1cm4gZW5kbG93OwotCX0KLQotCS8qCi0JICogVGhlIENUQyB3YXNuJ3QgcmVsaWFibGU6
IHdlIGdvdCBhIGhpdCBvbiB0aGUgdmVyeSBmaXJzdCByZWFkLAotCSAqIG9yIHRoZSBDUFUgd2Fz
IHNvIGZhc3Qvc2xvdyB0aGF0IHRoZSBxdW90aWVudCB3b3VsZG4ndCBmaXQgaW4KLQkgKiAzMiBi
aXRzLi4KLQkgKi8KLWJhZF9jdGM6Ci0JcmV0dXJuIDA7Ci19Ci0KICNpZmRlZiBDT05GSUdfSFBF
VF9USU1FUgogc3RhdGljIHZvaWQgbWFya19vZmZzZXRfdHNjX2hwZXQodm9pZCkKIHsKQEAgLTM2
Myw1OCArMzAyLDYgQEAgc3RhdGljIHZvaWQgbWFya19vZmZzZXRfdHNjX2hwZXQodm9pZCkKIAlB
U01fTVVMNjRfUkVHKHRlbXAsIGRlbGF5X2F0X2xhc3RfaW50ZXJydXB0LAogCQkJaHBldF91c2Vj
X3F1b3RpZW50LCBkZWxheV9hdF9sYXN0X2ludGVycnVwdCk7CiB9Ci0KLS8qIC0tLS0tLSBDYWxp
YnJhdGUgdGhlIFRTQyBiYXNlZCBvbiBIUEVUIHRpbWVyIC0tLS0tLS0KLSAqIFJldHVybiAyXjMy
ICogKDEgLyAoVFNDIGNsb2NrcyBwZXIgdXNlYykpIGZvciBkb19mYXN0X2dldHRpbWVvZmZzZXQo
KS4KLSAqIGNhbGlicmF0ZV90c2MoKSBjYWxpYnJhdGVzIHRoZSBwcm9jZXNzb3IgVFNDIGJ5IGNv
bXBhcmluZwotICogaXQgdG8gdGhlIEhQRVQgdGltZXIgb2Yga25vd24gZnJlcXVlbmN5LgotICog
VG9vIG11Y2ggNjQtYml0IGFyaXRobWV0aWMgaGVyZSB0byBkbyB0aGlzIGNsZWFubHkgaW4gQwot
ICovCi0KLSNkZWZpbmUgQ0FMSUJSQVRFX0NOVF9IUEVUIAkoNSAqIGhwZXRfdGljaykKLSNkZWZp
bmUgQ0FMSUJSQVRFX1RJTUVfSFBFVCAJKDUgKiBLRVJORUxfVElDS19VU0VDKQotCi11bnNpZ25l
ZCBsb25nIF9faW5pdCBjYWxpYnJhdGVfdHNjX2hwZXQodm9pZCkKLXsKLQl1bnNpZ25lZCBsb25n
IHRzY19zdGFydGxvdywgdHNjX3N0YXJ0aGlnaDsKLQl1bnNpZ25lZCBsb25nIHRzY19lbmRsb3cs
IHRzY19lbmRoaWdoOwotCXVuc2lnbmVkIGxvbmcgaHBldF9zdGFydCwgaHBldF9lbmQ7Ci0JdW5z
aWduZWQgbG9uZyByZXN1bHQsIHJlbWFpbjsKLQotCWhwZXRfc3RhcnQgPSBocGV0X3JlYWRsKEhQ
RVRfQ09VTlRFUik7Ci0JcmR0c2ModHNjX3N0YXJ0bG93LCB0c2Nfc3RhcnRoaWdoKTsKLQlkbyB7
Ci0JCWhwZXRfZW5kID0gaHBldF9yZWFkbChIUEVUX0NPVU5URVIpOwotCX0gd2hpbGUgKChocGV0
X2VuZCAtIGhwZXRfc3RhcnQpIDwgQ0FMSUJSQVRFX0NOVF9IUEVUKTsKLQlyZHRzYyh0c2NfZW5k
bG93LCB0c2NfZW5kaGlnaCk7Ci0KLQkvKiA2NC1iaXQgc3VidHJhY3QgLSBnY2MganVzdCBtZXNz
ZXMgdXAgd2l0aCBsb25nIGxvbmdzICovCi0JX19hc21fXygic3VibCAlMiwlMFxuXHQiCi0JCSJz
YmJsICUzLCUxIgotCQk6Ij1hIiAodHNjX2VuZGxvdyksICI9ZCIgKHRzY19lbmRoaWdoKQotCQk6
ImciICh0c2Nfc3RhcnRsb3cpLCAiZyIgKHRzY19zdGFydGhpZ2gpLAotCQkgIjAiICh0c2NfZW5k
bG93KSwgIjEiICh0c2NfZW5kaGlnaCkpOwotCi0JLyogRXJyb3I6IEVDUFVUT09GQVNUICovCi0J
aWYgKHRzY19lbmRoaWdoKQotCQlnb3RvIGJhZF9jYWxpYnJhdGlvbjsKLQotCS8qIEVycm9yOiBF
Q1BVVE9PU0xPVyAqLwotCWlmICh0c2NfZW5kbG93IDw9IENBTElCUkFURV9USU1FX0hQRVQpCi0J
CWdvdG8gYmFkX2NhbGlicmF0aW9uOwotCi0JQVNNX0RJVjY0X1JFRyhyZXN1bHQsIHJlbWFpbiwg
dHNjX2VuZGxvdywgMCwgQ0FMSUJSQVRFX1RJTUVfSFBFVCk7Ci0JaWYgKHJlbWFpbiA+ICh0c2Nf
ZW5kbG93ID4+IDEpKQotCQlyZXN1bHQrKzsgLyogcm91bmRpbmcgdGhlIHJlc3VsdCAqLwotCi0J
cmV0dXJuIHJlc3VsdDsKLWJhZF9jYWxpYnJhdGlvbjoKLQkvKgotCSAqIHRoZSBDUFUgd2FzIHNv
IGZhc3Qvc2xvdyB0aGF0IHRoZSBxdW90aWVudCB3b3VsZG4ndCBmaXQgaW4KLQkgKiAzMiBiaXRz
Li4KLQkgKi8KLQlyZXR1cm4gMDsKLX0KICNlbmRpZgogCiAjaWZkZWYgQ09ORklHX0NQVV9GUkVR
CkBAIC01MTUsNyArNDAyLDcgQEAgc3RhdGljIGludCBfX2luaXQgaW5pdF90c2MoY2hhciogb3Zl
cnJpZAogCQlpZiAoaXNfaHBldF9lbmFibGVkKCkpewogCQkJdW5zaWduZWQgbG9uZyByZXN1bHQs
IHJlbWFpbjsKIAkJCXByaW50aygiVXNpbmcgVFNDIGZvciBnZXR0aW1lb2ZkYXlcbiIpOwotCQkJ
dHNjX3F1b3RpZW50ID0gY2FsaWJyYXRlX3RzY19ocGV0KCk7CisJCQl0c2NfcXVvdGllbnQgPSBj
YWxpYnJhdGVfdHNjX2hwZXQoTlVMTCk7CiAJCQl0aW1lcl90c2MubWFya19vZmZzZXQgPSAmbWFy
a19vZmZzZXRfdHNjX2hwZXQ7CiAJCQkvKgogCQkJICogTWF0aCB0byBjYWxjdWxhdGUgaHBldCB0
byB1c2VjIG11bHRpcGxpZXIKZGlmZiAtcHVyTiBsaW51eC0yLjYuMC10ZXN0NC1tbTQvaW5jbHVk
ZS9hc20taTM4Ni90aW1lci5oIGxpbnV4LTIuNi4wLXRlc3Q0LW1tNC1maXgvaW5jbHVkZS9hc20t
aTM4Ni90aW1lci5oCi0tLSBsaW51eC0yLjYuMC10ZXN0NC1tbTQvaW5jbHVkZS9hc20taTM4Ni90
aW1lci5oCTIwMDMtMDktMDIgMTc6NTY6NDguMDAwMDAwMDAwIC0wNzAwCisrKyBsaW51eC0yLjYu
MC10ZXN0NC1tbTQtZml4L2luY2x1ZGUvYXNtLWkzODYvdGltZXIuaAkyMDAzLTA5LTA0IDExOjIx
OjI0LjAwMDAwMDAwMCAtMDcwMApAQCAtMzgsOCArMzgsMTAgQEAgZXh0ZXJuIHN0cnVjdCB0aW1l
cl9vcHRzIHRpbWVyX3RzYzsKIGV4dGVybiBzdHJ1Y3QgdGltZXJfb3B0cyB0aW1lcl9jeWNsb25l
OwogI2VuZGlmCiAKK2V4dGVybiB1bnNpZ25lZCBsb25nIGNhbGlicmF0ZV90c2Modm9pZCk7CiAj
aWZkZWYgQ09ORklHX0hQRVRfVElNRVIKIGV4dGVybiBzdHJ1Y3QgdGltZXJfb3B0cyB0aW1lcl9o
cGV0OworZXh0ZXJuIHVuc2lnbmVkIGxvbmcgY2FsaWJyYXRlX3RzY19ocGV0KHVuc2lnbmVkIGxv
bmcgKnRzY19ocGV0X3F1b3RpZW50X3B0cik7CiAjZW5kaWYKIAogI2VuZGlmCmRpZmYgLXB1ck4g
bGludXgtMi42LjAtdGVzdDQtbW00L2luY2x1ZGUvYXNtLWkzODYvZml4bWFwLmggbGludXgtMi42
LjAtdGVzdDQtbW00LWZpeC9pbmNsdWRlL2FzbS1pMzg2L2ZpeG1hcC5oCi0tLSBsaW51eC0yLjYu
MC10ZXN0NC1tbTQvaW5jbHVkZS9hc20taTM4Ni9maXhtYXAuaAkyMDAzLTA5LTAyIDE3OjU2OjQ4
LjAwMDAwMDAwMCAtMDcwMAorKysgbGludXgtMi42LjAtdGVzdDQtbW00LWZpeC9pbmNsdWRlL2Fz
bS1pMzg2L2ZpeG1hcC5oCTIwMDMtMDktMDQgMTE6NDI6MTMuMDAwMDAwMDAwIC0wNzAwCkBAIC03
Myw3ICs3Myw3IEBAIGVudW0gZml4ZWRfYWRkcmVzc2VzIHsKIAlGSVhfVFNTXzAsCiAJRklYX0VO
VFJZX1RSQU1QT0xJTkVfMSwKIAlGSVhfRU5UUllfVFJBTVBPTElORV8wLAotI2lmZGVmIENPTkZJ
R19YODZfQ1lDTE9ORQorI2lmZGVmIENPTkZJR19YODZfQ1lDTE9ORV9USU1FUgogCUZJWF9DWUNM
T05FX1RJTUVSLCAvKmN5Y2xvbmUgdGltZXIgcmVnaXN0ZXIqLwogCUZJWF9WU1RBQ0tfSE9MRV8y
LAogI2VuZGlmIAo=

------_=_NextPart_001_01C37309.09E5C7AD--
