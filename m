Return-Path: <linux-kernel-owner+willy=40w.ods.org-S1751373AbWHRN1q@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751373AbWHRN1q (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 18 Aug 2006 09:27:46 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1751387AbWHRN1p
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 18 Aug 2006 09:27:45 -0400
Received: from py-out-1112.google.com ([64.233.166.182]:65186 "EHLO
	py-out-1112.google.com") by vger.kernel.org with ESMTP
	id S1751373AbWHRN1o (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 18 Aug 2006 09:27:44 -0400
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=BRsOafb8o1Xc7xi/rooHf2K4bvFt1wFLsIvffQmwzr92U519fBoojoEAOvX6T7qUrRBlAuw9ud6KzFXiONaSxLSU9SsrxEHL2KRaxnFQbiRk12Syfj+9kptK5r1gPzq8SDeSSAYNufcYO5six2ik9XPK8SeQbeZVQrozEHLel9Q=
Message-ID: <b0943d9e0608180627g61007207read993387bf0c0b4@mail.gmail.com>
Date: Fri, 18 Aug 2006 14:27:43 +0100
From: "Catalin Marinas" <catalin.marinas@gmail.com>
To: "Michal Piotrowski" <michal.k.k.piotrowski@gmail.com>
Subject: Re: [PATCH 2.6.18-rc4 00/10] Kernel memory leak detector 0.9
Cc: linux-kernel@vger.kernel.org
In-Reply-To: <6bffcb0e0608180528ocadc36ck8868ae1a33342bb9@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_25122_11391705.1155907663840"
References: <20060812215857.17709.79502.stgit@localhost.localdomain>
	 <6bffcb0e0608130459k1c7e142esbfc2439badf323bd@mail.gmail.com>
	 <b0943d9e0608130713j1e4a8836i943d31011169cf05@mail.gmail.com>
	 <6bffcb0e0608130726x8fc1c0v7717165a63391e80@mail.gmail.com>
	 <b0943d9e0608170602v13dea49bgf64dbf17b7a52273@mail.gmail.com>
	 <6bffcb0e0608170745s8145df4ya4e946c76ab83c1b@mail.gmail.com>
	 <b0943d9e0608170801v23592952scf12c2c0b4a7bf4@mail.gmail.com>
	 <b0943d9e0608171458l45b717bexbfb8fb2ba68228db@mail.gmail.com>
	 <6bffcb0e0608180528ocadc36ck8868ae1a33342bb9@mail.gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

------=_Part_25122_11391705.1155907663840
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 18/08/06, Michal Piotrowski <michal.k.k.piotrowski@gmail.com> wrote:
> Something doesn't work. It appears while udev start.

Could you try the attached patch? It has some improvements from the
yesterday's one and also prints extra information when that error
happens.

Thanks.

-- 
Catalin

------=_Part_25122_11391705.1155907663840
Content-Type: text/x-patch; name="new-locking.patch"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="new-locking.patch"
X-Attachment-Id: f_er0lkbvt

ZGlmZiAtLWdpdCBhL21tL21lbWxlYWsuYyBiL21tL21lbWxlYWsuYwppbmRleCA1MTQyODBmLi5m
ZmE0YmRkIDEwMDY0NAotLS0gYS9tbS9tZW1sZWFrLmMKKysrIGIvbW0vbWVtbGVhay5jCkBAIC0x
Niw2ICsxNiwxOCBAQAogICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUg
R05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBp
ZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAgKiBGb3VuZGF0aW9uLCBJbmMuLCA1
OSBUZW1wbGUgUGxhY2UsIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3IFVTQQorICoK
KyAqCisgKiBOb3RlcyBvbiBsb2NraW5nOiBrbWVtbGVhayBuZWVkcyB0byBhbGxvY2F0ZS9mcmVl
IG1lbW9yeSBmb3IgaXRzCisgKiBvd24gZGF0YSBzdHJ1Y3R1cmVzIC0gdGhlIG1lbWxlYWtfcG9p
bnRlciBhbmQgdGhlIHBvaW50ZXIgYW5kCisgKiBhbGlhc2VzIHJhZGl4IHRyZWVzLiBUaGUgbWVt
bGVha19mcmVlIGhvb2sgY2FuIGJlIGNhbGxlZCBmcm9tCisgKiBtbS9zbGFiLmMgd2l0aCB0aGUg
bGlzdF9sb2NrIGhlbGQgKGkuZS4gd2hlbiByZWxlYXNpbmcgb2Ygb2ZmLXNsYWIKKyAqIG1hbmFn
ZW1lbnQgc3RydWN0dXJlcykgYW5kIGl0IHdpbGwgYWNrcXVpcmUgdGhlIG1lbWxlYWtfbG9jay4g
VG8KKyAqIGF2b2lkIGRlYWRsb2NrcyBjYXVzZWQgYnkgbG9ja2luZyBkZXBlbmRlbmN5LCB0aGUg
bGlzdF9sb2NrIG11c3QKKyAqIG5vdCBiZSBhY3F1aXJlZCB3aGlsZSBtZW1sZWFrX2xvY2sgaXMg
aGVsZC4gVGhpcyBpcyBlbnN1cmVkIGJ5IG5vdAorICogYWxsb2NhdGluZyBhbnkgbWVtb3J5IHdo
aWxlIG1lbWxlYWtfbG9jayBpcyBoZWxkLiBUaGUgcmFkaXggdHJlZXMKKyAqIGhhdmUgdG8gYmUg
cHJlbG9hZGVkIGJlZm9yZSBhY3F1aXJpbmcgdGhlIGxvY2sgc28gdGhhdCB0aGUKKyAqIGluc2Vy
dGlvbiB3b24ndCBhbGxvY2F0ZSBtZW1vcnkuCiAgKi8KIAogLyogI2RlZmluZSBERUJVRyAqLwpA
QCAtMzcsNiArNDksNyBAQCAjaW5jbHVkZSA8bGludXgvc2VxX2ZpbGUuaD4KICNpbmNsdWRlIDxs
aW51eC92bWFsbG9jLmg+CiAjaW5jbHVkZSA8bGludXgvbXV0ZXguaD4KICNpbmNsdWRlIDxsaW51
eC9jcHVtYXNrLmg+CisjaW5jbHVkZSA8bGludXgvc3BpbmxvY2suaD4KIAogI2luY2x1ZGUgPGFz
bS9iaXRvcHMuaD4KICNpbmNsdWRlIDxhc20vc2VjdGlvbnMuaD4KQEAgLTEyOCw2ICsxNDEsNyBA
QCBzdGF0aWMgaW5saW5lIGludCBjb2xvcl9ibGFjayhjb25zdCBzdHJ1CiAKIC8qIFRyZWUgc3Rv
cmluZyB0aGUgcG9pbnRlciBhbGlhc2VzIGluZGV4ZWQgYnkgc2l6ZSAqLwogc3RhdGljIFJBRElY
X1RSRUUoYWxpYXNfdHJlZSwgR0ZQX0FUT01JQyk7CitzdGF0aWMgREVGSU5FX1JXTE9DSyhhbGlh
c190cmVlX2xvY2spOwogLyogVHJlZSBzdG9yaW5nIGFsbCB0aGUgcG9zc2libGUgcG9pbnRlcnMs
IGluZGV4ZWQgYnkgdGhlIHBvaW50ZXIgdmFsdWUgKi8KIHN0YXRpYyBSQURJWF9UUkVFKHBvaW50
ZXJfdHJlZSwgR0ZQX0FUT01JQyk7CiAvKiBUaGUgbGlzdCBvZiBhbGwgYWxsb2NhdGVkIHBvaW50
ZXJzICovCkBAIC0xMzYsOCArMTUwLDggQEAgc3RhdGljIExJU1RfSEVBRChwb2ludGVyX2xpc3Qp
Owogc3RhdGljIExJU1RfSEVBRChncmF5X2xpc3QpOwogCiBzdGF0aWMgc3RydWN0IGttZW1fY2Fj
aGUgKnBvaW50ZXJfY2FjaGU7Ci0vKiBVc2VkIHRvIGF2b2lkIHJlY3Vyc2l2ZSBjYWxsIHZpYSB0
aGUga21hbGxvYy9rZnJlZSBmdW5jdGlvbnMgKi8KLXN0YXRpYyBzcGlubG9ja190IG1lbWxlYWtf
bG9jayA9IFNQSU5fTE9DS19VTkxPQ0tFRDsKKy8qIFRoZSBtYWluIGxvY2sgZm9yIHByb3RlY3Rp
bmcgdGhlIHBvaW50ZXIgbGlzdHMgYW5kIHJhZGl4IHRyZWVzICovCitzdGF0aWMgREVGSU5FX1NQ
SU5MT0NLKG1lbWxlYWtfbG9jayk7CiBzdGF0aWMgY3B1bWFza190IG1lbWxlYWtfY3B1X21hc2sg
PSBDUFVfTUFTS19OT05FOwogc3RhdGljIERFRklORV9NVVRFWChtZW1sZWFrX211dGV4KTsKIHN0
YXRpYyBhdG9taWNfdCBtZW1sZWFrX2luaXRpYWxpemVkID0gQVRPTUlDX0lOSVQoMCk7CkBAIC0x
NzEsNyArMTg1LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIGR1bXBfc3ltYm9sX25hbWUodW5zaQog
fQogI2VuZGlmCiAKLSNpZmRlZiBERUJVRworI2lmIDEKIHN0YXRpYyBpbmxpbmUgdm9pZCBkdW1w
X3BvaW50ZXJfaW50ZXJuYWxzKHN0cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXIpCiB7CiAJ
c3RydWN0IG1lbWxlYWtfYWxpYXMgKmFsaWFzOwpAQCAtMTgxLDkgKzE5NSwxMiBAQCBzdGF0aWMg
aW5saW5lIHZvaWQgZHVtcF9wb2ludGVyX2ludGVybmFsCiAJcHJpbnRrKEtFUk5fTk9USUNFICIg
IHJlZl9jb3VudCA9ICVkXG4iLCBwb2ludGVyLT5yZWZfY291bnQpOwogCXByaW50ayhLRVJOX05P
VElDRSAiICBjb3VudCA9ICVkXG4iLCBwb2ludGVyLT5jb3VudCk7CiAJcHJpbnRrKEtFUk5fTk9U
SUNFICIgIGFsaWFzZXM6XG4iKTsKLQlpZiAocG9pbnRlci0+YWxpYXNfbGlzdCkKLQkJaGxpc3Rf
Zm9yX2VhY2hfZW50cnkoYWxpYXMsIGVsZW0sIHBvaW50ZXItPmFsaWFzX2xpc3QsIG5vZGUpCisJ
aWYgKHBvaW50ZXItPmFsaWFzX2xpc3QpIHsKKwkJcmN1X3JlYWRfbG9jaygpOworCQlobGlzdF9m
b3JfZWFjaF9lbnRyeV9yY3UoYWxpYXMsIGVsZW0sIHBvaW50ZXItPmFsaWFzX2xpc3QsIG5vZGUp
CiAJCQlwcmludGsoS0VSTl9OT1RJQ0UgIiAgICAweCVseFxuIiwgYWxpYXMtPm9mZnNldCk7CisJ
CXJjdV9yZWFkX3VubG9jaygpOworCX0KIH0KICNlbHNlCiBzdGF0aWMgaW5saW5lIHZvaWQgZHVt
cF9wb2ludGVyX2ludGVybmFscyhzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQpAQCAt
MjEzLDQ1ICsyMzAsODEgQEAgc3RhdGljIGludCBpbnNlcnRfYWxpYXModW5zaWduZWQgbG9uZyB0
eQogewogCWludCByZXQgPSAwOwogCXN0cnVjdCBobGlzdF9oZWFkICphbGlhc19saXN0OworCXN0
cnVjdCBobGlzdF9ub2RlICplbGVtOwogCXN0cnVjdCBtZW1sZWFrX2FsaWFzICphbGlhczsKKwl1
bnNpZ25lZCBsb25nIGZsYWdzOworCXVuc2lnbmVkIGludCBjcHVfaWQ7CiAKLQlpZiAodHlwZV9p
ZCA9PSAwIHx8IG9mZnNldCA9PSAwIHx8IG9mZnNldCA+PSBtbF9zaXplb2YodHlwZV9pZCkpIHsK
LQkJcmV0ID0gLUVJTlZBTDsKLQkJZ290byBvdXQ7Ci0JfQorCWlmICh0eXBlX2lkID09IDAgfHwg
b2Zmc2V0ID09IDAgfHwgb2Zmc2V0ID49IG1sX3NpemVvZih0eXBlX2lkKSkKKwkJcmV0dXJuIC1F
SU5WQUw7CisKKwkvKiBubyByZWN1cnNpdmUgcmUtZW50cmFuY2Ugb24gdGhlIHNhbWUgQ1BVLiBX
ZSBkbyBub3QgdHJhY2sKKwkgKiB0aGUgYWxpYXMgdHJlZSBhbGxvY2F0aW9ucyAqLworCWxvY2Fs
X2lycV9zYXZlKGZsYWdzKTsKKwljcHVfaWQgPSBnZXRfY3B1KCk7CisJaWYgKGNwdV90ZXN0X2Fu
ZF9zZXQoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKSkKKwkJQlVHKCk7CiAKIAlvZmZzZXQgJj0g
fihCWVRFU19QRVJfV09SRCAtIDEpOwogCisJcmVhZF9sb2NrKCZhbGlhc190cmVlX2xvY2spOwog
CWFsaWFzX2xpc3QgPSByYWRpeF90cmVlX2xvb2t1cCgmYWxpYXNfdHJlZSwgdHlwZV9pZCk7Ci0J
aWYgKGFsaWFzX2xpc3QpIHsKLQkJc3RydWN0IGhsaXN0X25vZGUgKmVsZW07CisJcmVhZF91bmxv
Y2soJmFsaWFzX3RyZWVfbG9jayk7CiAKLQkJaGxpc3RfZm9yX2VhY2hfZW50cnkoYWxpYXMsIGVs
ZW0sIGFsaWFzX2xpc3QsIG5vZGUpIHsKLQkJCWlmIChhbGlhcy0+b2Zmc2V0ID09IG9mZnNldCkg
ewotCQkJCXJldCA9IC1FRVhJU1Q7Ci0JCQkJZ290byBvdXQ7Ci0JCQl9Ci0JCX0KLQl9IGVsc2Ug
eworCWlmICghYWxpYXNfbGlzdCkgeworCQkvKiBubyBhbGlhcyBsaXN0IGZvciB0aGlzIHR5cGUg
aWQuIEFsbG9jYXRlIGxpc3RfaGVhZAorCQkgKiBhbmQgcHJlbG9hZCB0aGUgcmFkaXggdHJlZSAq
LwogCQlhbGlhc19saXN0ID0ga21hbGxvYyhzaXplb2YoKmFsaWFzX2xpc3QpLCBHRlBfQVRPTUlD
KTsKIAkJaWYgKCFhbGlhc19saXN0KQotCQkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgYWxsb2Nh
dGUgaW5pdGlhbCBtZW1vcnlcbiIpOworCQkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgYWxsb2Nh
dGUgYWxpYXNfbGlzdFxuIik7CiAJCUlOSVRfSExJU1RfSEVBRChhbGlhc19saXN0KTsKIAotCQly
ZXQgPSByYWRpeF90cmVlX2luc2VydCgmYWxpYXNfdHJlZSwgdHlwZV9pZCwgYWxpYXNfbGlzdCk7
CisJCXJldCA9IHJhZGl4X3RyZWVfcHJlbG9hZChHRlBfQVRPTUlDKTsKIAkJaWYgKHJldCkKKwkJ
CXBhbmljKCJrbWVtbGVhazogY2Fubm90IHByZWxvYWQgdGhlIGFsaWFzZXMgcmFkaXggdHJlZTog
JWRcbiIsIHJldCk7CisKKwkJd3JpdGVfbG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwkJcmV0ID0g
cmFkaXhfdHJlZV9pbnNlcnQoJmFsaWFzX3RyZWUsIHR5cGVfaWQsIGFsaWFzX2xpc3QpOworCQl3
cml0ZV91bmxvY2soJmFsaWFzX3RyZWVfbG9jayk7CisKKwkJcmFkaXhfdHJlZV9wcmVsb2FkX2Vu
ZCgpOworCisJCWlmIChyZXQgPT0gLUVFWElTVCkgeworCQkJLyogYWxsb2NhdGVkIGluIHRoZSBt
ZWFudGltZSBvbiBhIGRpZmZlcmVudCBDUFUgKi8KKwkJCXJlYWRfbG9jaygmYWxpYXNfdHJlZV9s
b2NrKTsKKwkJCWFsaWFzX2xpc3QgPSByYWRpeF90cmVlX2xvb2t1cCgmYWxpYXNfdHJlZSwgdHlw
ZV9pZCk7CisJCQlyZWFkX3VubG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwkJfSBlbHNlIGlmIChy
ZXQpCiAJCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBpbnNlcnQgaW50byB0aGUgYWxpYXNlcyBy
YWRpeCB0cmVlOiAlZFxuIiwgcmV0KTsKIAl9CiAKKwlCVUdfT04oIWFsaWFzX2xpc3QpOworCisJ
cmN1X3JlYWRfbG9jaygpOworCWhsaXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShhbGlhcywgZWxlbSwg
YWxpYXNfbGlzdCwgbm9kZSkgeworCQlpZiAoYWxpYXMtPm9mZnNldCA9PSBvZmZzZXQpIHsKKwkJ
CXJjdV9yZWFkX3VubG9jaygpOworCQkJcmV0ID0gLUVFWElTVDsKKwkJCWdvdG8gb3V0OworCQl9
CisJfQorCXJjdV9yZWFkX3VubG9jaygpOworCiAJYWxpYXMgPSBrbWFsbG9jKHNpemVvZigqYWxp
YXMpLCBHRlBfQVRPTUlDKTsKIAlpZiAoIWFsaWFzKQogCQlwYW5pYygia21lbWxlYWs6IGNhbm5v
dCBhbGxvY2F0ZSBpbml0aWFsIG1lbW9yeVxuIik7CiAJSU5JVF9ITElTVF9OT0RFKCZhbGlhcy0+
bm9kZSk7CiAJYWxpYXMtPm9mZnNldCA9IG9mZnNldDsKIAotCWhsaXN0X2FkZF9oZWFkKCZhbGlh
cy0+bm9kZSwgYWxpYXNfbGlzdCk7CisJd3JpdGVfbG9jaygmYWxpYXNfdHJlZV9sb2NrKTsKKwlo
bGlzdF9hZGRfaGVhZF9yY3UoJmFsaWFzLT5ub2RlLCBhbGlhc19saXN0KTsKKwl3cml0ZV91bmxv
Y2soJmFsaWFzX3RyZWVfbG9jayk7CiAKICBvdXQ6CisJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVh
a19jcHVfbWFzayk7CisJcHV0X2NwdV9ub19yZXNjaGVkKCk7CisJbG9jYWxfaXJxX3Jlc3RvcmUo
ZmxhZ3MpOworCiAJcmV0dXJuIHJldDsKIH0KIApAQCAtMjYxLDE4ICszMTQsMTIgQEAgdm9pZCBt
ZW1sZWFrX2luc2VydF9hbGlhc2VzKHN0cnVjdCBtZW1sZQogewogCXN0cnVjdCBtZW1sZWFrX29m
ZnNldCAqbWxfb2ZmOwogCWludCBpID0gMDsKKyNpZmRlZiBDT05GSUdfREVCVUdfTUVNTEVBS19T
RUNPTkRBUllfQUxJQVNFUwogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7Ci0JdW5zaWduZWQgaW50IGNw
dV9pZDsKKyNlbmRpZgogCiAJcHJfZGVidWcoIiVzKDB4JXAsIDB4JXApXG4iLCBfX0ZVTkNUSU9O
X18sIG1sX29mZl9zdGFydCwgbWxfb2ZmX2VuZCk7CiAKLQlzcGluX2xvY2tfaXJxc2F2ZSgmbWVt
bGVha19sb2NrLCBmbGFncyk7Ci0KLQkvKiBkbyBub3QgdHJhY2sgdGhlIGttZW1sZWFrIGFsbG9j
YXRlZCBwb2ludGVycyAqLwotCWNwdV9pZCA9IHNtcF9wcm9jZXNzb3JfaWQoKTsKLQlpZiAoY3B1
X3Rlc3RfYW5kX3NldChjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spKQotCQlCVUcoKTsKLQogCS8q
IHByaW1hcnkgYWxpYXNlcyAtIGNvbnRhaW5lcl9vZihtZW1iZXIpICovCiAJZm9yIChtbF9vZmYg
PSBtbF9vZmZfc3RhcnQ7IG1sX29mZiA8IG1sX29mZl9lbmQ7IG1sX29mZisrKQogCQlpZiAoIWlu
c2VydF9hbGlhcyhtbF9vZmYtPnR5cGVfaWQsIG1sX29mZi0+b2Zmc2V0KSkKQEAgLTI4NiwxMjQg
KzMzMywyMTMgQEAgI2lmZGVmIENPTkZJR19ERUJVR19NRU1MRUFLX1NFQ09OREFSWV9BTAogCQlz
dHJ1Y3QgbWVtbGVha19hbGlhcyAqYWxpYXM7CiAJCXN0cnVjdCBobGlzdF9ub2RlICplbGVtOwog
CisJCS8qIHdpdGggaW1wcmVjaXNlIHR5cGUgaWRlbnRpZmljYXRpb24sIGl0IHRoZSBtZW1iZXIK
KwkJICogaWQgaXMgdGhlIHNhbWUgYXMgdGhlIG91dGVyIHN0cnVjdHVyZSBpZCwganVzdAorCQkg
KiBpZ25vcmUgYXMgYW55IHBvdGVudGlhbCBhbGlhc2VzIGFyZSBhbHJlYWR5IGluIHRoZQorCQkg
KiB0cmVlICovCisJCWlmIChtbF9vZmYtPm1lbWJlcl90eXBlX2lkID09IG1sX29mZi0+dHlwZV9p
ZCkKKwkJCWNvbnRpbnVlOworCisJCXJlYWRfbG9ja19pcnFzYXZlKCZhbGlhc190cmVlX2xvY2ss
IGZsYWdzKTsKIAkJYWxpYXNfbGlzdCA9IHJhZGl4X3RyZWVfbG9va3VwKCZhbGlhc190cmVlLCBt
bF9vZmYtPm1lbWJlcl90eXBlX2lkKTsKKwkJcmVhZF91bmxvY2tfaXJxcmVzdG9yZSgmYWxpYXNf
dHJlZV9sb2NrLCBmbGFncyk7CiAJCWlmICghYWxpYXNfbGlzdCkKIAkJCWNvbnRpbnVlOwogCi0J
CWhsaXN0X2Zvcl9lYWNoX2VudHJ5KGFsaWFzLCBlbGVtLCBhbGlhc19saXN0LCBub2RlKQorCQly
Y3VfcmVhZF9sb2NrKCk7CisJCWhsaXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShhbGlhcywgZWxlbSwg
YWxpYXNfbGlzdCwgbm9kZSkKIAkJCWlmICghaW5zZXJ0X2FsaWFzKG1sX29mZi0+dHlwZV9pZCwg
bWxfb2ZmLT5vZmZzZXQgKyBhbGlhcy0+b2Zmc2V0KSkKIAkJCQlpKys7CisJCXJjdV9yZWFkX3Vu
bG9jaygpOwogCX0KIAlwcl9kZWJ1Zygia21lbWxlYWs6IGZvdW5kICVkIGFsaWFzKGVzKVxuIiwg
aSk7CiAjZW5kaWYKLQotCWNwdV9jbGVhcihjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spOwotCXNw
aW5fdW5sb2NrX2lycXJlc3RvcmUoJm1lbWxlYWtfbG9jaywgZmxhZ3MpOwogfQogRVhQT1JUX1NZ
TUJPTF9HUEwobWVtbGVha19pbnNlcnRfYWxpYXNlcyk7CiAKKy8qIGNhbGxlZCB3aXRoIG1lbWxl
YWtfbG9jayBoZWxkIGFuZCBpbnRlcnJ1cHRzIGRpc2FibGVkICovCiBzdGF0aWMgaW5saW5lIHN0
cnVjdCBtZW1sZWFrX3BvaW50ZXIgKmdldF9jYWNoZWRfcG9pbnRlcih1bnNpZ25lZCBsb25nIHB0
cikKIHsKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xvY2tl
ZCgmbWVtbGVha19sb2NrKSk7CisKIAlpZiAoIWxhc3RfcG9pbnRlciB8fCBwdHIgIT0gbGFzdF9w
b2ludGVyLT5wb2ludGVyKQogCQlsYXN0X3BvaW50ZXIgPSByYWRpeF90cmVlX2xvb2t1cCgmcG9p
bnRlcl90cmVlLCBwdHIpOwogCXJldHVybiBsYXN0X3BvaW50ZXI7CiB9CiAKLXN0YXRpYyB2b2lk
IGNyZWF0ZV9wb2ludGVyX2FsaWFzZXMoc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcikK
Ky8qIG5vIG5lZWQgZm9yIGF0b21pYyBvcGVyYXRpb25zIHNpbmNlIG1lbWxlYWtfbG9jayBpcyBo
ZWxkIGFuZAorICogaW50ZXJydXB0cyBkaXNhYmxlZCAqLworc3RhdGljIGlubGluZSB2b2lkIGdl
dF9wb2ludGVyKHN0cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXIpCiB7Ci0Jc3RydWN0IG1l
bWxlYWtfYWxpYXMgKmFsaWFzOwotCXN0cnVjdCBobGlzdF9ub2RlICplbGVtOwotCXVuc2lnbmVk
IGxvbmcgcHRyID0gcG9pbnRlci0+cG9pbnRlcjsKLQlpbnQgZXJyOworCUJVR19PTighaXJxc19k
aXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKIAot
CUJVR19PTihwb2ludGVyLT5mbGFncyAmIFBPSU5URVJfQUxJQVNFUyk7CisJcG9pbnRlci0+dXNl
X2NvdW50Kys7Cit9CiAKLQlpZiAocG9pbnRlci0+b2Zmc2V0KSB7Ci0JCWVyciA9IHJhZGl4X3Ry
ZWVfaW5zZXJ0KCZwb2ludGVyX3RyZWUsIHB0ciArIHBvaW50ZXItPm9mZnNldCwgcG9pbnRlcik7
Ci0JCWlmIChlcnIpIHsKLQkJCWR1bXBfc3RhY2soKTsKLQkJCXBhbmljKCJrbWVtbGVhazogY2Fu
bm90IGluc2VydCBvZmZzZXQgaW50byB0aGUgcG9pbnRlciByYWRpeCB0cmVlOiAlZFxuIiwgZXJy
KTsKLQkJfQotCX0KKy8qIGNhbGxlZCB3aXRoIG1lbWxlYWtfbG9jayBoZWxkIGZvciBwb2ludGVy
X2xpc3QgbW9kaWZpY2F0aW9uIGFuZAorICogbWVtbGVha19jcHVfbWFzayBzZXQgdG8gYXZvaWQg
ZW50ZXJpbmcgbWVtbGVha19mcmVlIChhbmQgZGVhZGxvY2spCisgKi8KK3N0YXRpYyB2b2lkIF9f
cHV0X3BvaW50ZXIoc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcikKK3sKKwlzdHJ1Y3Qg
aGxpc3Rfbm9kZSAqZWxlbSwgKnRtcDsKKwlzdHJ1Y3QgbWVtbGVha19zY2FuX2FyZWEgKmFyZWE7
CiAKLQlwb2ludGVyLT5hbGlhc19saXN0ID0gcmFkaXhfdHJlZV9sb29rdXAoJmFsaWFzX3RyZWUs
IHBvaW50ZXItPnR5cGVfaWQpOwotCWlmIChwb2ludGVyLT5hbGlhc19saXN0KSB7Ci0JCWhsaXN0
X2Zvcl9lYWNoX2VudHJ5KGFsaWFzLCBlbGVtLCBwb2ludGVyLT5hbGlhc19saXN0LCBub2RlKSB7
Ci0JCQllcnIgPSByYWRpeF90cmVlX2luc2VydCgmcG9pbnRlcl90cmVlLCBwdHIKLQkJCQkJCSsg
cG9pbnRlci0+b2Zmc2V0ICsgYWxpYXMtPm9mZnNldCwKLQkJCQkJCXBvaW50ZXIpOwotCQkJaWYg
KGVycikgewotCQkJCWR1bXBfc3RhY2soKTsKLQkJCQlwYW5pYygia21lbWxlYWs6IGNhbm5vdCBp
bnNlcnQgYWxpYXMgaW50byB0aGUgcG9pbnRlciByYWRpeCB0cmVlOiAlZFxuIiwgZXJyKTsKLQkJ
CX0KLQkJfQorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9j
a2VkKCZtZW1sZWFrX2xvY2spKTsKKworCWlmICgtLXBvaW50ZXItPnVzZV9jb3VudCA+IDApCisJ
CXJldHVybjsKKworCS8qIGZyZWUgdGhlIHNjYW5uaW5nIGFyZWFzICovCisJaGxpc3RfZm9yX2Vh
Y2hfZW50cnlfc2FmZShhcmVhLCBlbGVtLCB0bXAsICZwb2ludGVyLT5hcmVhX2xpc3QsIG5vZGUp
IHsKKwkJaGxpc3RfZGVsKGVsZW0pOworCQlrZnJlZShhcmVhKTsKIAl9CiAKLQlwb2ludGVyLT5m
bGFncyB8PSBQT0lOVEVSX0FMSUFTRVM7CisJbGlzdF9kZWwoJnBvaW50ZXItPnBvaW50ZXJfbGlz
dCk7CisJa21lbV9jYWNoZV9mcmVlKHBvaW50ZXJfY2FjaGUsIHBvaW50ZXIpOworCisJQlVHX09O
KCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2NrZWQoJm1lbWxlYWtfbG9j
aykpOworfQorCitzdGF0aWMgdm9pZCBwdXRfcG9pbnRlcihzdHJ1Y3QgbWVtbGVha19wb2ludGVy
ICpwb2ludGVyKQoreworCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CisJdW5zaWduZWQgaW50IGNwdV9p
ZDsKKworCS8qIG5vIHJlY3Vyc2l2ZSByZS1lbnRyYW5jZSBvbiB0aGUgc2FtZSBDUFUgKi8KKwls
b2NhbF9pcnFfc2F2ZShmbGFncyk7CisJY3B1X2lkID0gZ2V0X2NwdSgpOworCWlmIChjcHVfdGVz
dF9hbmRfc2V0KGNwdV9pZCwgbWVtbGVha19jcHVfbWFzaykpCisJCUJVRygpOworCisJc3Bpbl9s
b2NrKCZtZW1sZWFrX2xvY2spOworCV9fcHV0X3BvaW50ZXIocG9pbnRlcik7CisJc3Bpbl91bmxv
Y2soJm1lbWxlYWtfbG9jayk7CisKKwljcHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNr
KTsKKwlwdXRfY3B1X25vX3Jlc2NoZWQoKTsKKwlsb2NhbF9pcnFfcmVzdG9yZShmbGFncyk7CiB9
CiAKKy8qIGNhbGxlZCB3aXRoIG1lbWxlYWtfbG9jayBoZWxkIGFuZCBpbnRlcnJ1cHRzIGRpc2Fi
bGVkICovCiBzdGF0aWMgdm9pZCBkZWxldGVfcG9pbnRlcl9hbGlhc2VzKHN0cnVjdCBtZW1sZWFr
X3BvaW50ZXIgKnBvaW50ZXIpCiB7CiAJc3RydWN0IG1lbWxlYWtfYWxpYXMgKmFsaWFzOwogCXN0
cnVjdCBobGlzdF9ub2RlICplbGVtOwotCXVuc2lnbmVkIGxvbmcgcHRyID0gcG9pbnRlci0+cG9p
bnRlcjsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9j
a2VkKCZtZW1sZWFrX2xvY2spKTsKIAogCUJVR19PTighKHBvaW50ZXItPmZsYWdzICYgUE9JTlRF
Ul9BTElBU0VTKSk7CiAKIAlpZiAocG9pbnRlci0+b2Zmc2V0KQotCQlyYWRpeF90cmVlX2RlbGV0
ZSgmcG9pbnRlcl90cmVlLCBwdHIgKyBwb2ludGVyLT5vZmZzZXQpOworCQlyYWRpeF90cmVlX2Rl
bGV0ZSgmcG9pbnRlcl90cmVlLCBwb2ludGVyLT5wb2ludGVyCisJCQkJICArIHBvaW50ZXItPm9m
ZnNldCk7CiAKIAlpZiAocG9pbnRlci0+YWxpYXNfbGlzdCkgewotCQlobGlzdF9mb3JfZWFjaF9l
bnRyeShhbGlhcywgZWxlbSwgcG9pbnRlci0+YWxpYXNfbGlzdCwgbm9kZSkKLQkJCXJhZGl4X3Ry
ZWVfZGVsZXRlKCZwb2ludGVyX3RyZWUsCi0JCQkJCSAgcHRyICsgcG9pbnRlci0+b2Zmc2V0ICsg
YWxpYXMtPm9mZnNldCk7CisJCXJjdV9yZWFkX2xvY2soKTsKKwkJaGxpc3RfZm9yX2VhY2hfZW50
cnlfcmN1KGFsaWFzLCBlbGVtLCBwb2ludGVyLT5hbGlhc19saXN0LCBub2RlKQorCQkJcmFkaXhf
dHJlZV9kZWxldGUoJnBvaW50ZXJfdHJlZSwgcG9pbnRlci0+cG9pbnRlcgorCQkJCQkgICsgcG9p
bnRlci0+b2Zmc2V0ICsgYWxpYXMtPm9mZnNldCk7CisJCXJjdV9yZWFkX3VubG9jaygpOwogCQlw
b2ludGVyLT5hbGlhc19saXN0ID0gTlVMTDsKIAl9CiAKIAlwb2ludGVyLT5mbGFncyAmPSB+UE9J
TlRFUl9BTElBU0VTOworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bp
bl9pc19sb2NrZWQoJm1lbWxlYWtfbG9jaykpOwogfQogCi0vKiBubyBuZWVkIGZvciBhdG9taWMg
b3BlcmF0aW9ucyBzaW5jZSBtZW1sZWFrX2xvY2sgaXMgaGVsZCBhbnl3YXkgKi8KLXN0YXRpYyBp
bmxpbmUgdm9pZCBnZXRfcG9pbnRlcihzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQor
LyogY2FsbGVkIHdpdGggbWVtbGVha19sb2NrIGhlbGQgYnV0IG1heSBiZSByZWxlYXNlZCAqLwor
c3RhdGljIGlubGluZSBpbnQgaW5zZXJ0X3BvaW50ZXJfYWxpYXMoc3RydWN0IG1lbWxlYWtfcG9p
bnRlciAqcG9pbnRlciwKKwkJCQkgICAgICAgdW5zaWduZWQgbG9uZyBhbGlhcykKIHsKLQlwb2lu
dGVyLT51c2VfY291bnQrKzsKKwlpbnQgcmV0ID0gMDsKKworCUJVR19PTighaXJxc19kaXNhYmxl
ZCgpKTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKKworCXNwaW5f
dW5sb2NrKCZtZW1sZWFrX2xvY2spOworCXJldCA9IHJhZGl4X3RyZWVfcHJlbG9hZChHRlBfQVRP
TUlDKTsKKwlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CisJaWYgKHJldCkgeworCQlwcmludGso
S0VSTl9XQVJOSU5HICJrbWVtbGVhazogY2Fubm90IHByZWxvYWQgdGhlIHBvaW50ZXIgcmFkaXgg
dHJlZTogJWRcbiIsIHJldCk7CisJCWdvdG8gb3V0OworCX0KKworCXJldCA9IHJhZGl4X3RyZWVf
aW5zZXJ0KCZwb2ludGVyX3RyZWUsIGFsaWFzLCBwb2ludGVyKTsKKwlpZiAocmV0KSB7CisJCWR1
bXBfc3RhY2soKTsKKwkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgaW5zZXJ0IGFsaWFzIGludG8g
dGhlIHBvaW50ZXIgcmFkaXggdHJlZTogJWRcbiIsIHJldCk7CisJfQorCisJcmFkaXhfdHJlZV9w
cmVsb2FkX2VuZCgpOworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bp
bl9pc19sb2NrZWQoJm1lbWxlYWtfbG9jaykpOworCisgb3V0OgorCXJldHVybiByZXQ7CiB9CiAK
LS8qIGNhbGxlZCB3aXRoIG1lbWxlYWtfbG9jayBoZWxkIGZvciBwb2ludGVyX2xpc3QgbW9kaWZp
Y2F0aW9uIGFuZAotICogbWVtbGVha19jcHVfbWFzayBzZXQgdG8gYXZvaWQgZW50ZXJpbmcgbWVt
bGVha19mcmVlIChhbmQgZGVhZGxvY2spCisvKiBjYWxsZWQgd2l0aCBtZW1sZWFrX2xvY2sgaGVs
ZCBidXQgaXQgbWF5IGJlIHJlbGVhc2VkIGluCisgKiBpbnNlcnRfcG9pbnRlcl9hbGlhcygpLiBU
aGUgcG9pbnRlciBzdHJ1Y3R1cmUgaXMgZ3VhcmFudGVlZCBub3QgdG8KKyAqIGJlIGZyZWVkIGJl
Zm9yZSB0aGlzIGZ1bmN0aW9uIHJldHVybnMgKGdldC9wdXRfcG9pbnRlcikKICAqLwotc3RhdGlj
IHZvaWQgX19wdXRfcG9pbnRlcihzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQorc3Rh
dGljIGlubGluZSB2b2lkIGNyZWF0ZV9wb2ludGVyX2FsaWFzZXMoc3RydWN0IG1lbWxlYWtfcG9p
bnRlciAqcG9pbnRlcikKIHsKLQlzdHJ1Y3QgaGxpc3Rfbm9kZSAqZWxlbSwgKnRtcDsKLQlzdHJ1
Y3QgbWVtbGVha19zY2FuX2FyZWEgKmFyZWE7CisJc3RydWN0IG1lbWxlYWtfYWxpYXMgKmFsaWFz
OworCXN0cnVjdCBobGlzdF9ub2RlICplbGVtOworCWludCBlcnIgPSAwOwogCi0JaWYgKC0tcG9p
bnRlci0+dXNlX2NvdW50ID4gMCkKLQkJcmV0dXJuOworCUJVR19PTighaXJxc19kaXNhYmxlZCgp
KTsKKwlCVUdfT04oIXNwaW5faXNfbG9ja2VkKCZtZW1sZWFrX2xvY2spKTsKIAotCS8qIGZyZWUg
dGhlIHNjYW5uaW5nIGFyZWFzICovCi0JaGxpc3RfZm9yX2VhY2hfZW50cnlfc2FmZShhcmVhLCBl
bGVtLCB0bXAsICZwb2ludGVyLT5hcmVhX2xpc3QsIG5vZGUpIHsKLQkJaGxpc3RfZGVsKGVsZW0p
OwotCQlrZnJlZShhcmVhKTsKKwlCVUdfT04ocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFT
RVMpOworCisJZ2V0X3BvaW50ZXIocG9pbnRlcik7CisKKwlpZiAocG9pbnRlci0+b2Zmc2V0KSB7
CisJCWVyciA9IGluc2VydF9wb2ludGVyX2FsaWFzKHBvaW50ZXIsIHBvaW50ZXItPnBvaW50ZXIK
KwkJCQkJICAgKyBwb2ludGVyLT5vZmZzZXQpOworCQlpZiAoZXJyKQorCQkJZ290byBvdXQ7CiAJ
fQogCi0JbGlzdF9kZWwoJnBvaW50ZXItPnBvaW50ZXJfbGlzdCk7Ci0Ja21lbV9jYWNoZV9mcmVl
KHBvaW50ZXJfY2FjaGUsIHBvaW50ZXIpOwotfQorCXJlYWRfbG9jaygmYWxpYXNfdHJlZV9sb2Nr
KTsKKwlwb2ludGVyLT5hbGlhc19saXN0ID0gcmFkaXhfdHJlZV9sb29rdXAoJmFsaWFzX3RyZWUs
IHBvaW50ZXItPnR5cGVfaWQpOworCXJlYWRfdW5sb2NrKCZhbGlhc190cmVlX2xvY2spOwogCi1z
dGF0aWMgdm9pZCBwdXRfcG9pbnRlcihzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVyKQot
ewotCXVuc2lnbmVkIGxvbmcgZmxhZ3M7Ci0JdW5zaWduZWQgaW50IGNwdV9pZDsKKwlpZiAocG9p
bnRlci0+YWxpYXNfbGlzdCkgeworCQlyY3VfcmVhZF9sb2NrKCk7CisJCWhsaXN0X2Zvcl9lYWNo
X2VudHJ5X3JjdShhbGlhcywgZWxlbSwgcG9pbnRlci0+YWxpYXNfbGlzdCwgbm9kZSkgeworCQkJ
ZXJyID0gaW5zZXJ0X3BvaW50ZXJfYWxpYXMocG9pbnRlciwgcG9pbnRlci0+cG9pbnRlcgorCQkJ
CQkJICAgKyBwb2ludGVyLT5vZmZzZXQgKyBhbGlhcy0+b2Zmc2V0KTsKKwkJCWlmIChlcnIpIHsK
KwkJCQlyY3VfcmVhZF91bmxvY2soKTsKKwkJCQlnb3RvIG91dDsKKwkJCX0KKwkJfQorCQlyY3Vf
cmVhZF91bmxvY2soKTsKKwl9CiAKLQlzcGluX2xvY2tfaXJxc2F2ZSgmbWVtbGVha19sb2NrLCBm
bGFncyk7Ci0JY3B1X2lkID0gc21wX3Byb2Nlc3Nvcl9pZCgpOwotCWlmIChjcHVfdGVzdF9hbmRf
c2V0KGNwdV9pZCwgbWVtbGVha19jcHVfbWFzaykpCi0JCUJVRygpOworIG91dDoKKwlwb2ludGVy
LT5mbGFncyB8PSBQT0lOVEVSX0FMSUFTRVM7CisKKwkvKiBjaGVjayB3aGV0aGVyIHRoZSBtZW1v
cnkgYmxvY2sgbWlnaHQgaGF2ZSBiZWVuIGZyZWVkIGR1cmluZworCSAqIHRoZSB1bmxvY2tlZCBw
ZXJpb2RzIG9yIGFuIGVycm9yIG9jY3VyZWQgKi8KKwlpZiAoZXJyIHx8ICEocG9pbnRlci0+Zmxh
Z3MgJiBQT0lOVEVSX0FMTE9DQVRFRCkpCisJCWRlbGV0ZV9wb2ludGVyX2FsaWFzZXMocG9pbnRl
cik7CiAKIAlfX3B1dF9wb2ludGVyKHBvaW50ZXIpOwogCi0JY3B1X2NsZWFyKGNwdV9pZCwgbWVt
bGVha19jcHVfbWFzayk7Ci0Jc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbWVtbGVha19sb2NrLCBm
bGFncyk7CisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCUJVR19PTighc3Bpbl9pc19sb2Nr
ZWQoJm1lbWxlYWtfbG9jaykpOwogfQogCiAvKiBJbnNlcnQgYSBwb2ludGVyIGFuZCBpdHMgYWxp
YXNlcyBpbnRvIHRoZSBwb2ludGVyIHJhZGl4IHRyZWUgKi8KQEAgLTQxNiwxMiArNTUyLDEyIEBA
ICNpZmRlZiBDT05GSUdfRlJBTUVfUE9JTlRFUgogCXZvaWQgKmZyYW1lOwogI2VuZGlmCiAKKwlC
VUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisKIAlwb2ludGVyID0ga21lbV9jYWNoZV9hbGxvYyhw
b2ludGVyX2NhY2hlLCBTTEFCX0FUT01JQyk7CiAJaWYgKCFwb2ludGVyKQogCQlwYW5pYygia21l
bWxlYWs6IGNhbm5vdCBhbGxvY2F0ZSBhIG1lbWxlYWtfcG9pbnRlciBzdHJ1Y3R1cmVcbiIpOwog
Ci0JbGFzdF9wb2ludGVyID0gcG9pbnRlcjsKLQogCUlOSVRfTElTVF9IRUFEKCZwb2ludGVyLT5w
b2ludGVyX2xpc3QpOwogCUlOSVRfTElTVF9IRUFEKCZwb2ludGVyLT5ncmF5X2xpc3QpOwogCUlO
SVRfSExJU1RfSEVBRCgmcG9pbnRlci0+YXJlYV9saXN0KTsKQEAgLTQ1NSw2ICs1OTEsMTYgQEAg
I2Vsc2UKIAlwb2ludGVyLT50cmFjZVswXSA9ICh1bnNpZ25lZCBsb25nKV9fYnVpbHRpbl9yZXR1
cm5fYWRkcmVzcygwKTsKICNlbmRpZgogCisJLyogYWxsb2NhdGUgaGVyZSB0byBhdm9pZCBhY3F1
aXJpbmcgdGhlIGxpc3RfbG9jayBpbiBtbS9zbGFiLmMKKwkgKiB3aGlsZSBtZW1sZWFrX2xvY2sg
aXMgaGVsZCAqLworCWVyciA9IHJhZGl4X3RyZWVfcHJlbG9hZChHRlBfQVRPTUlDKTsKKwlpZiAo
ZXJyKSB7CisJCWR1bXBfc3RhY2soKTsKKwkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgcHJlbG9h
ZCB0aGUgcG9pbnRlciByYWRpeCB0cmVlOiAlZFxuIiwgZXJyKTsKKwl9CisKKwlzcGluX2xvY2so
Jm1lbWxlYWtfbG9jayk7CisKIAllcnIgPSByYWRpeF90cmVlX2luc2VydCgmcG9pbnRlcl90cmVl
LCBwdHIsIHBvaW50ZXIpOwogCWlmIChlcnIpIHsKIAkJZHVtcF9zdGFjaygpOwpAQCAtNDY5LDYg
KzYxNSwxMiBAQCAjZW5kaWYKIAogCWxpc3RfYWRkX3RhaWwoJnBvaW50ZXItPnBvaW50ZXJfbGlz
dCwgJnBvaW50ZXJfbGlzdCk7CiAJZ2V0X3BvaW50ZXIocG9pbnRlcik7CisJbGFzdF9wb2ludGVy
ID0gcG9pbnRlcjsKKworCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOworCXJhZGl4X3RyZWVf
cHJlbG9hZF9lbmQoKTsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKIH0KIAogLyogUmVt
b3ZlIGEgcG9pbnRlciBhbmQgaXRzIGFsaWFzZXMgZnJvbSB0aGUgcG9pbnRlciByYWRpeCB0cmVl
ICovCkBAIC00NzYsMTEgKzYyOCwxNSBAQCBzdGF0aWMgaW5saW5lIHZvaWQgZGVsZXRlX3BvaW50
ZXIodW5zaWduCiB7CiAJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcjsKIAorCUJVR19P
TighaXJxc19kaXNhYmxlZCgpKTsKKworCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsKKwogCXBv
aW50ZXIgPSByYWRpeF90cmVlX2RlbGV0ZSgmcG9pbnRlcl90cmVlLCBwdHIpOwogCWlmICghcG9p
bnRlcikgewogCQlkdW1wX3N0YWNrKCk7CiAJCXByaW50ayhLRVJOX1dBUk5JTkcgImttZW1sZWFr
OiBmcmVlaW5nIHVua25vd24gcG9pbnRlciB2YWx1ZSAweCUwOGx4XG4iLCBwdHIpOwotCQlyZXR1
cm47CisJCWdvdG8gb3V0OwogCX0KIAlpZiAocG9pbnRlci0+cG9pbnRlciAhPSBwdHIpIHsKIAkJ
ZHVtcF9zdGFjaygpOwpAQCAtNDkwLDYgKzY0Niw3IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBkZWxl
dGVfcG9pbnRlcih1bnNpZ24KIAogCUJVR19PTighKHBvaW50ZXItPmZsYWdzICYgUE9JTlRFUl9B
TExPQ0FURUQpKTsKIAorCS8qIGRlbGV0aW5nIHRoZSBjYWNoZWQgcG9pbnRlciAqLwogCWlmIChs
YXN0X3BvaW50ZXIgJiYgcHRyID09IGxhc3RfcG9pbnRlci0+cG9pbnRlcikKIAkJbGFzdF9wb2lu
dGVyID0gTlVMTDsKIApAQCAtNTA2LDYgKzY2MywxMSBAQCAjZW5kaWYKIAlwb2ludGVyLT5mbGFn
cyAmPSB+UE9JTlRFUl9BTExPQ0FURUQ7CiAJcG9pbnRlci0+cG9pbnRlciA9IDA7CiAJX19wdXRf
cG9pbnRlcihwb2ludGVyKTsKKworIG91dDoKKwlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsK
KworCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKIH0KIAogLyogUmUtY3JlYXRlIHRoZSBwb2lu
dGVyIGFsaWFzZXMgYWNjb3JkaW5nIHRvIHRoZSBuZXcgc2l6ZS9vZmZzZXQKQEAgLTUxNSw2ICs2
NzcsMTAgQEAgc3RhdGljIGlubGluZSB2b2lkIHVucGFkX3BvaW50ZXIodW5zaWduZQogewogCXN0
cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXI7CiAKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQo
KSk7CisKKwlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CisKIAlwb2ludGVyID0gZ2V0X2NhY2hl
ZF9wb2ludGVyKHB0cik7CiAJaWYgKCFwb2ludGVyKSB7CiAJCWR1bXBfc3RhY2soKTsKQEAgLTUz
MiwxMyArNjk4LDE4IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCB1bnBhZF9wb2ludGVyKHVuc2lnbmUK
IAl9CiAKIAlpZiAob2Zmc2V0ID09IHBvaW50ZXItPm9mZnNldCAmJiBzaXplID09IHBvaW50ZXIt
PnNpemUpCi0JCXJldHVybjsKKwkJZ290byBvdXQ7CiAKIAlpZiAocG9pbnRlci0+ZmxhZ3MgJiBQ
T0lOVEVSX0FMSUFTRVMpCiAJCWRlbGV0ZV9wb2ludGVyX2FsaWFzZXMocG9pbnRlcik7CiAKIAlw
b2ludGVyLT5vZmZzZXQgPSBvZmZzZXQ7CiAJcG9pbnRlci0+c2l6ZSA9IHNpemU7CisKKyBvdXQ6
CisJc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQo
KSk7CiB9CiAKIC8qIE1ha2UgYSBwb2ludGVyIHBlcm1hbmVudGx5IGdyYXkgKGZhbHNlIHBvc2l0
aXZlKSAqLwpAQCAtNTQ2LDYgKzcxNywxMCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgbWFrZV9ncmF5
X3BvaW50ZXIodW5zCiB7CiAJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9pbnRlcjsKIAorCUJV
R19PTighaXJxc19kaXNhYmxlZCgpKTsKKworCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsKKwog
CXBvaW50ZXIgPSBnZXRfY2FjaGVkX3BvaW50ZXIocHRyKTsKIAlpZiAoIXBvaW50ZXIpIHsKIAkJ
ZHVtcF9zdGFjaygpOwpAQCAtNTU4LDYgKzczMywxMCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgbWFr
ZV9ncmF5X3BvaW50ZXIodW5zCiAJfQogCiAJcG9pbnRlci0+cmVmX2NvdW50ID0gMDsKKworCXNw
aW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOworCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOwog
fQogCiAvKiBNYXJrIHRoZSBwb2ludGVyIGFzIGJsYWNrICovCkBAIC01NjUsNiArNzQ0LDEwIEBA
IHN0YXRpYyBpbmxpbmUgdm9pZCBtYWtlX2JsYWNrX3BvaW50ZXIodW4KIHsKIAlzdHJ1Y3QgbWVt
bGVha19wb2ludGVyICpwb2ludGVyOwogCisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOworCisJ
c3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOworCiAJcG9pbnRlciA9IGdldF9jYWNoZWRfcG9pbnRl
cihwdHIpOwogCWlmICghcG9pbnRlcikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC01NzcsNiArNzYw
LDEwIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBtYWtlX2JsYWNrX3BvaW50ZXIodW4KIAl9CiAKIAlw
b2ludGVyLT5yZWZfY291bnQgPSAtMTsKKworCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOwor
CisJQlVHX09OKCFpcnFzX2Rpc2FibGVkKCkpOwogfQogCiAvKiBBZGQgYSBzY2FubmluZyBhcmVh
IHRvIHRoZSBwb2ludGVyICovCkBAIC01ODUsNiArNzcyLDE4IEBAIHN0YXRpYyBpbmxpbmUgdm9p
ZCBhZGRfc2Nhbl9hcmVhKHVuc2lnbmUKIAlzdHJ1Y3QgbWVtbGVha19wb2ludGVyICpwb2ludGVy
OwogCXN0cnVjdCBtZW1sZWFrX3NjYW5fYXJlYSAqYXJlYTsKIAorCUJVR19PTighaXJxc19kaXNh
YmxlZCgpKTsKKworCWFyZWEgPSBrbWFsbG9jKHNpemVvZigqYXJlYSksIEdGUF9BVE9NSUMpOwor
CWlmICghYXJlYSkKKwkJcGFuaWMoImttZW1sZWFrOiBjYW5ub3QgYWxsb2NhdGUgYSBzY2FuIGFy
ZWFcbiIpOworCisJSU5JVF9ITElTVF9OT0RFKCZhcmVhLT5ub2RlKTsKKwlhcmVhLT5vZmZzZXQg
PSBvZmZzZXQ7CisJYXJlYS0+bGVuZ3RoID0gbGVuZ3RoOworCisJc3Bpbl9sb2NrKCZtZW1sZWFr
X2xvY2spOworCiAJcG9pbnRlciA9IGdldF9jYWNoZWRfcG9pbnRlcihwdHIpOwogCWlmICghcG9p
bnRlcikgewogCQlkdW1wX3N0YWNrKCk7CkBAIC02MDEsMTUgKzgwMCwxMSBAQCBzdGF0aWMgaW5s
aW5lIHZvaWQgYWRkX3NjYW5fYXJlYSh1bnNpZ25lCiAJCXBhbmljKCJrbWVtbGVhazogc2NhbiBh
cmVhIGxhcmdlciB0aGFuIGJsb2NrIDB4JTA4bHhcbiIsIHB0cik7CiAJfQogCi0JYXJlYSA9IGtt
YWxsb2Moc2l6ZW9mKCphcmVhKSwgR0ZQX0FUT01JQyk7Ci0JaWYgKCFhcmVhKQotCQlwYW5pYygi
a21lbWxlYWs6IGNhbm5vdCBhbGxvY2F0ZSBhIHNjYW4gYXJlYVxuIik7CisJaGxpc3RfYWRkX2hl
YWQoJmFyZWEtPm5vZGUsICZwb2ludGVyLT5hcmVhX2xpc3QpOwogCi0JSU5JVF9ITElTVF9OT0RF
KCZhcmVhLT5ub2RlKTsKLQlhcmVhLT5vZmZzZXQgPSBvZmZzZXQ7Ci0JYXJlYS0+bGVuZ3RoID0g
bGVuZ3RoOworCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOwogCi0JaGxpc3RfYWRkX2hlYWQo
JmFyZWEtPm5vZGUsICZwb2ludGVyLT5hcmVhX2xpc3QpOworCUJVR19PTighaXJxc19kaXNhYmxl
ZCgpKTsKIH0KIAogLyogUmUtY3JlYXRlIHRoZSBwb2ludGVyIGFsaWFzZXMgYWNjb3JkaW5nIHRv
IHRoZSBuZXcgdHlwZSBpZCAqLwpAQCAtNjE3LDYgKzgxMiwxMCBAQCBzdGF0aWMgaW5saW5lIHZv
aWQgY2hhbmdlX3R5cGVfaWQodW5zaWduCiB7CiAJc3RydWN0IG1lbWxlYWtfcG9pbnRlciAqcG9p
bnRlcjsKIAorCUJVR19PTighaXJxc19kaXNhYmxlZCgpKTsKKworCXNwaW5fbG9jaygmbWVtbGVh
a19sb2NrKTsKKwogCXBvaW50ZXIgPSBnZXRfY2FjaGVkX3BvaW50ZXIocHRyKTsKIAlpZiAoIXBv
aW50ZXIpIHsKIAkJZHVtcF9zdGFjaygpOwpAQCAtNjM0LDEyICs4MzMsMTcgQEAgc3RhdGljIGlu
bGluZSB2b2lkIGNoYW5nZV90eXBlX2lkKHVuc2lnbgogCX0KIAogCWlmICghdHlwZV9pZCB8fCB0
eXBlX2lkID09IHBvaW50ZXItPnR5cGVfaWQpCi0JCXJldHVybjsKKwkJZ290byBvdXQ7CiAKIAlp
ZiAocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFTRVMpCiAJCWRlbGV0ZV9wb2ludGVyX2Fs
aWFzZXMocG9pbnRlcik7CiAKIAlwb2ludGVyLT50eXBlX2lkID0gdHlwZV9pZDsKKworIG91dDoK
KwlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKKworCUJVR19PTighaXJxc19kaXNhYmxlZCgp
KTsKIH0KIAogLyogQWxsb2NhdGlvbiBmdW5jdGlvbiBob29rICovCkBAIC02NzEsMjEgKzg3NSwy
MCBAQCB2b2lkIG1lbWxlYWtfYWxsb2MoY29uc3Qgdm9pZCAqcHRyLCBzaXplCiAKIAkJQlVHX09O
KGNwdV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykK
LQkJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIp
OwotCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChw
cmVpbml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9w
b2ludGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfQUxMT0M7
Ci0JCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7Ci0JCXBvaW50ZXItPnNpemUgPSBzaXplOwotCQlw
b2ludGVyLT5yZWZfY291bnQgPSByZWZfY291bnQ7CisJCQlwb2ludGVyLT50eXBlID0gTUVNTEVB
S19BTExPQzsKKwkJCXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7CisJCQlwb2ludGVyLT5zaXplID0g
c2l6ZTsKKwkJCXBvaW50ZXItPnJlZl9jb3VudCA9IHJlZl9jb3VudDsKKwkJfQorCQlwcmVpbml0
X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNwaW5fbG9jaygmbWVtbGVha19sb2Nr
KTsKIAljcmVhdGVfcG9pbnRlcigodW5zaWduZWQgbG9uZylwdHIsIHNpemUsIHJlZl9jb3VudCk7
Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1bm1hc2s6CiAJY3B1X2NsZWFyKGNw
dV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC03MTgsMTkgKzkyMSwxOCBAQCB2b2lkIG1lbWxl
YWtfZnJlZShjb25zdCB2b2lkICpwdHIpCiAKIAkJQlVHX09OKGNwdV9pZCAhPSAwKTsKIAotCQlp
ZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKLQkJCXBhbmljKCJrbWVtbGVhazog
cHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIpOwotCQlwb2ludGVyID0gJnByZWlu
aXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChwcmVpbml0X3BvcyA8IFBSRUlOSVRf
UE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1twcmVpbml0X3Bvc107
CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfRlJFRTsKLQkJcG9pbnRlci0+cG9pbnRlciA9
IHB0cjsKKwkJCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX0ZSRUU7CisJCQlwb2ludGVyLT5wb2lu
dGVyID0gcHRyOworCQl9CisJCXByZWluaXRfcG9zKys7CiAKIAkJZ290byB1bm1hc2s7CiAJfQog
Ci0Jc3Bpbl9sb2NrKCZtZW1sZWFrX2xvY2spOwogCWRlbGV0ZV9wb2ludGVyKCh1bnNpZ25lZCBs
b25nKXB0cik7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7CiAKICB1bm1hc2s6CiAJY3B1
X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC03NjQsMjEgKzk2NiwyMCBAQCB2
b2lkIG1lbWxlYWtfcGFkZGluZyhjb25zdCB2b2lkICpwdHIsIHVuCiAKIAkJQlVHX09OKGNwdV9p
ZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKLQkJCXBh
bmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIpOwotCQlw
b2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChwcmVpbml0
X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVy
c1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfUEFERElORzsKLQkJ
cG9pbnRlci0+cG9pbnRlciA9IHB0cjsKLQkJcG9pbnRlci0+b2Zmc2V0ID0gb2Zmc2V0OwotCQlw
b2ludGVyLT5zaXplID0gc2l6ZTsKKwkJCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX1BBRERJTkc7
CisJCQlwb2ludGVyLT5wb2ludGVyID0gcHRyOworCQkJcG9pbnRlci0+b2Zmc2V0ID0gb2Zmc2V0
OworCQkJcG9pbnRlci0+c2l6ZSA9IHNpemU7CisJCX0KKwkJcHJlaW5pdF9wb3MrKzsKIAogCQln
b3RvIHVubWFzazsKIAl9CiAKLQlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CiAJdW5wYWRfcG9p
bnRlcigodW5zaWduZWQgbG9uZylwdHIsIG9mZnNldCwgc2l6ZSk7Ci0Jc3Bpbl91bmxvY2soJm1l
bWxlYWtfbG9jayk7CiAKICB1bm1hc2s6CiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVf
bWFzayk7CkBAIC04MTEsMTkgKzEwMTIsMTggQEAgdm9pZCBtZW1sZWFrX25vdF9sZWFrKGNvbnN0
IHZvaWQgKnB0cikKIAogCQlCVUdfT04oY3B1X2lkICE9IDApOwogCi0JCWlmIChwcmVpbml0X3Bv
cyA+PSBQUkVJTklUX1BPSU5URVJTKQotCQkJcGFuaWMoImttZW1sZWFrOiBwcmVpbml0IHBvaW50
ZXJzIGJ1ZmZlciBvdmVyZmxvd1xuIik7Ci0JCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2ludGVyc1tw
cmVpbml0X3BvcysrXTsKKwkJaWYgKHByZWluaXRfcG9zIDwgUFJFSU5JVF9QT0lOVEVSUykgewor
CQkJcG9pbnRlciA9ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zXTsKIAotCQlwb2ludGVy
LT50eXBlID0gTUVNTEVBS19OT1RfTEVBSzsKLQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKKwkJ
CXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX05PVF9MRUFLOworCQkJcG9pbnRlci0+cG9pbnRlciA9
IHB0cjsKKwkJfQorCQlwcmVpbml0X3BvcysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNw
aW5fbG9jaygmbWVtbGVha19sb2NrKTsKIAltYWtlX2dyYXlfcG9pbnRlcigodW5zaWduZWQgbG9u
ZylwdHIpOwotCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2spOwogCiAgdW5tYXNrOgogCWNwdV9j
bGVhcihjcHVfaWQsIG1lbWxlYWtfY3B1X21hc2spOwpAQCAtODU2LDE5ICsxMDU2LDE4IEBAIHZv
aWQgbWVtbGVha19pZ25vcmUoY29uc3Qgdm9pZCAqcHRyKQogCiAJCUJVR19PTihjcHVfaWQgIT0g
MCk7CiAKLQkJaWYgKHByZWluaXRfcG9zID49IFBSRUlOSVRfUE9JTlRFUlMpCi0JCQlwYW5pYygi
a21lbWxlYWs6IHByZWluaXQgcG9pbnRlcnMgYnVmZmVyIG92ZXJmbG93XG4iKTsKLQkJcG9pbnRl
ciA9ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9zKytdOworCQlpZiAocHJlaW5pdF9wb3Mg
PCBQUkVJTklUX1BPSU5URVJTKSB7CisJCQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJl
aW5pdF9wb3NdOwogCi0JCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX0lHTk9SRTsKLQkJcG9pbnRl
ci0+cG9pbnRlciA9IHB0cjsKKwkJCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX0lHTk9SRTsKKwkJ
CXBvaW50ZXItPnBvaW50ZXIgPSBwdHI7CisJCX0KKwkJcHJlaW5pdF9wb3MrKzsKIAogCQlnb3Rv
IHVubWFzazsKIAl9CiAKLQlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7CiAJbWFrZV9ibGFja19w
b2ludGVyKCh1bnNpZ25lZCBsb25nKXB0cik7Ci0Jc3Bpbl91bmxvY2soJm1lbWxlYWtfbG9jayk7
CiAKICB1bm1hc2s6CiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVfbWFzayk7CkBAIC05
MDEsMjEgKzExMDAsMjAgQEAgdm9pZCBtZW1sZWFrX3NjYW5fYXJlYShjb25zdCB2b2lkICpwdHIs
IAogCiAJCUJVR19PTihjcHVfaWQgIT0gMCk7CiAKLQkJaWYgKHByZWluaXRfcG9zID49IFBSRUlO
SVRfUE9JTlRFUlMpCi0JCQlwYW5pYygia21lbWxlYWs6IHByZWluaXQgcG9pbnRlcnMgYnVmZmVy
IG92ZXJmbG93XG4iKTsKLQkJcG9pbnRlciA9ICZwcmVpbml0X3BvaW50ZXJzW3ByZWluaXRfcG9z
KytdOworCQlpZiAocHJlaW5pdF9wb3MgPCBQUkVJTklUX1BPSU5URVJTKSB7CisJCQlwb2ludGVy
ID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3NdOwogCi0JCXBvaW50ZXItPnR5cGUgPSBN
RU1MRUFLX1NDQU5fQVJFQTsKLQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKLQkJcG9pbnRlci0+
b2Zmc2V0ID0gb2Zmc2V0OwotCQlwb2ludGVyLT5zaXplID0gbGVuZ3RoOworCQkJcG9pbnRlci0+
dHlwZSA9IE1FTUxFQUtfU0NBTl9BUkVBOworCQkJcG9pbnRlci0+cG9pbnRlciA9IHB0cjsKKwkJ
CXBvaW50ZXItPm9mZnNldCA9IG9mZnNldDsKKwkJCXBvaW50ZXItPnNpemUgPSBsZW5ndGg7CisJ
CX0KKwkJcHJlaW5pdF9wb3MrKzsKIAogCQlnb3RvIHVubWFzazsKIAl9CiAKLQlzcGluX2xvY2so
Jm1lbWxlYWtfbG9jayk7CiAJYWRkX3NjYW5fYXJlYSgodW5zaWduZWQgbG9uZylwdHIsIG9mZnNl
dCwgbGVuZ3RoKTsKLQlzcGluX3VubG9jaygmbWVtbGVha19sb2NrKTsKIAogIHVubWFzazoKIAlj
cHVfY2xlYXIoY3B1X2lkLCBtZW1sZWFrX2NwdV9tYXNrKTsKQEAgLTk0OCwyMCArMTE0NiwxOSBA
QCB2b2lkIG1lbWxlYWtfdHlwZWlkX3Jhdyhjb25zdCB2b2lkICpwdHIsCiAKIAkJQlVHX09OKGNw
dV9pZCAhPSAwKTsKIAotCQlpZiAocHJlaW5pdF9wb3MgPj0gUFJFSU5JVF9QT0lOVEVSUykKLQkJ
CXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZmZXIgb3ZlcmZsb3dcbiIpOwot
CQlwb2ludGVyID0gJnByZWluaXRfcG9pbnRlcnNbcHJlaW5pdF9wb3MrK107CisJCWlmIChwcmVp
bml0X3BvcyA8IFBSRUlOSVRfUE9JTlRFUlMpIHsKKwkJCXBvaW50ZXIgPSAmcHJlaW5pdF9wb2lu
dGVyc1twcmVpbml0X3Bvc107CiAKLQkJcG9pbnRlci0+dHlwZSA9IE1FTUxFQUtfVFlQRUlEOwot
CQlwb2ludGVyLT5wb2ludGVyID0gcHRyOwotCQlwb2ludGVyLT50eXBlX2lkID0gdHlwZV9pZDsK
KwkJCXBvaW50ZXItPnR5cGUgPSBNRU1MRUFLX1RZUEVJRDsKKwkJCXBvaW50ZXItPnBvaW50ZXIg
PSBwdHI7CisJCQlwb2ludGVyLT50eXBlX2lkID0gdHlwZV9pZDsKKwkJfQorCQlwcmVpbml0X3Bv
cysrOwogCiAJCWdvdG8gdW5tYXNrOwogCX0KIAotCXNwaW5fbG9jaygmbWVtbGVha19sb2NrKTsK
IAljaGFuZ2VfdHlwZV9pZCgodW5zaWduZWQgbG9uZylwdHIsIHR5cGVfaWQpOwotCXNwaW5fdW5s
b2NrKCZtZW1sZWFrX2xvY2spOwogCiAgdW5tYXNrOgogCWNwdV9jbGVhcihjcHVfaWQsIG1lbWxl
YWtfY3B1X21hc2spOwpAQCAtOTczLDcgKzExNzAsNyBAQCBFWFBPUlRfU1lNQk9MKG1lbWxlYWtf
dHlwZWlkX3Jhdyk7CiAKIC8qIFNjYW4gYSBibG9jayBvZiBtZW1vcnkgKGV4Y2x1c2l2ZSByYW5n
ZSkgZm9yIHBvaW50ZXJzIGFuZCBtb3ZlCiAgKiB0aG9zZSBmb3VuZCB0byB0aGUgZ3JheSBsaXN0
LiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoCi0gKiBtZW1sZWFrX2xvY2sgaGVsZAorICog
bWVtbGVha19sb2NrIGhlbGQgYW5kIGludGVycnVwdHMgZGlzYWJsZWQKICAqLwogc3RhdGljIHZv
aWQgX19zY2FuX2Jsb2NrKHZvaWQgKl9zdGFydCwgdm9pZCAqX2VuZCkKIHsKQEAgLTk4Miw2ICsx
MTc5LDkgQEAgc3RhdGljIHZvaWQgX19zY2FuX2Jsb2NrKHZvaWQgKl9zdGFydCwgdgogCQkJCQkJ
ICAgICAgQllURVNfUEVSX1dPUkQpOwogCXVuc2lnbmVkIGxvbmcgKmVuZCA9IF9lbmQ7CiAKKwlC
VUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJQlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVh
a19sb2NrKSk7CisKIAlmb3IgKHB0ciA9IHN0YXJ0OyBwdHIgPCBlbmQ7IHB0cisrKSB7CiAJCXN0
cnVjdCBtZW1sZWFrX3BvaW50ZXIgKnBvaW50ZXIgPQogCQkJcmFkaXhfdHJlZV9sb29rdXAoJnBv
aW50ZXJfdHJlZSwKQEAgLTk5OCw2ICsxMTk4LDkgQEAgc3RhdGljIHZvaWQgX19zY2FuX2Jsb2Nr
KHZvaWQgKl9zdGFydCwgdgogCQkJbGlzdF9hZGRfdGFpbF9yY3UoJnBvaW50ZXItPmdyYXlfbGlz
dCwgJmdyYXlfbGlzdCk7CiAJCX0KIAl9CisKKwlCVUdfT04oIWlycXNfZGlzYWJsZWQoKSk7CisJ
QlVHX09OKCFzcGluX2lzX2xvY2tlZCgmbWVtbGVha19sb2NrKSk7CiB9CiAKIHN0YXRpYyB2b2lk
IHNjYW5fYmxvY2sodm9pZCAqc3RhcnQsIHZvaWQgKmVuZCkKQEAgLTEwMjcsNyArMTIzMCw3IEBA
IHN0YXRpYyBpbmxpbmUgdm9pZCBzY2FuX3BvaW50ZXIoc3RydWN0IG0KIAlzcGluX2xvY2tfaXJx
c2F2ZSgmbWVtbGVha19sb2NrLCBmbGFncyk7CiAKIAkvKiBmcmVlZCBwb2ludGVyICovCi0JaWYg
KCFwb2ludGVyLT5wb2ludGVyKQorCWlmICghcG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMTE9D
QVRFRCkKIAkJZ290byBvdXQ7CiAKIAlpZiAoaGxpc3RfZW1wdHkoJnBvaW50ZXItPmFyZWFfbGlz
dCkpCkBAIC0xMDU2LDE0ICsxMjU5LDIxIEBAICNlbmRpZgogCXVuc2lnbmVkIGludCBjcHVfaWQ7
CiAKIAkvKiBpbml0aWFsaXplIHBvaW50ZXJzIChtYWtlIHRoZW0gd2hpdGUpIGFuZCBidWlsZCB0
aGUgaW5pdGlhbAotCSAqIGdyYXkgbGlzdC4gTm90ZSB0aGF0IGNyZWF0ZV9wb2ludGVyX2FsaWFz
ZXMgbWlnaHQgYWxsb2NhdGUKLQkgKiBtZW1vcnkgKi8KLQlzcGluX2xvY2tfaXJxc2F2ZSgmbWVt
bGVha19sb2NrLCBmbGFncyk7Ci0JY3B1X2lkID0gc21wX3Byb2Nlc3Nvcl9pZCgpOworCSAqIGdy
YXkgbGlzdC4gbWVtbGVha19jcHVfbWFzayBpcyBzZXQgYXMgd2UgZG9uJ3QgdHJhY2sgdGhlCisJ
ICoga21lbWxlYWsgYWxsb2NhdGlvbnMgKi8KKwlsb2NhbF9pcnFfc2F2ZShmbGFncyk7CisJY3B1
X2lkID0gZ2V0X2NwdSgpOwogCWlmIChjcHVfdGVzdF9hbmRfc2V0KGNwdV9pZCwgbWVtbGVha19j
cHVfbWFzaykpCiAJCUJVRygpOwogCi0JbGlzdF9mb3JfZWFjaF9lbnRyeShwb2ludGVyLCAmcG9p
bnRlcl9saXN0LCBwb2ludGVyX2xpc3QpIHsKKwkvKiB1c2UgdGhlIF9yY3UgdmFyaWFudCBzaW5j
ZSBwb2ludGVyX2xpc3QgY2FuIGNoYW5nZSAqLworCXJjdV9yZWFkX2xvY2soKTsKKwkvKiBtZW1s
ZWFrX2xvY2sgbmVlZGVkIHRvIGVuc3VyZSB0aGF0IHRoZSBwb2ludGVyIHN0cnVjdHVyZSBpcwor
CSAqIG5vdCBmcmVlZCBvbiBhIGRpZmZlcmVudCBDUFUgKGNyZWF0ZV9wb2ludGVyX2FsaWFzZXMg
bWF5CisJICogcmVsZWFzZSB0aGUgbG9jaykgKi8KKwlzcGluX2xvY2soJm1lbWxlYWtfbG9jayk7
CisKKwlsaXN0X2Zvcl9lYWNoX2VudHJ5X3JjdShwb2ludGVyLCAmcG9pbnRlcl9saXN0LCBwb2lu
dGVyX2xpc3QpIHsKIAkJLyogbGF6eSBpbnNlcnRpb24gb2YgdGhlIHBvaW50ZXIgYWxpYXNlcyBp
bnRvIHRoZSByYWRpeCB0cmVlICovCiAJCWlmICgocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FM
TE9DQVRFRCkKIAkJICAgICYmICEocG9pbnRlci0+ZmxhZ3MgJiBQT0lOVEVSX0FMSUFTRVMpKQpA
QCAtMTA3MSwxMyArMTI4MSwxOSBAQCAjZW5kaWYKIAogCQlwb2ludGVyLT5jb3VudCA9IDA7CiAJ
CWlmIChjb2xvcl9ncmF5KHBvaW50ZXIpKSB7CisJCQkvKiB0aGUgcG9pbnRlciB3aWxsIGJlIHB1
dCBiYWNrIG9uY2UgaXQgaXMKKwkJCSAqIHNjYW5uZWQgdmlhIHRoZSBncmF5X2xpc3QgKi8KIAkJ
CWdldF9wb2ludGVyKHBvaW50ZXIpOwogCQkJbGlzdF9hZGRfdGFpbCgmcG9pbnRlci0+Z3JheV9s
aXN0LCAmZ3JheV9saXN0KTsKIAkJfQogCX0KIAorCXNwaW5fdW5sb2NrKCZtZW1sZWFrX2xvY2sp
OworCXJjdV9yZWFkX3VubG9jaygpOworCiAJY3B1X2NsZWFyKGNwdV9pZCwgbWVtbGVha19jcHVf
bWFzayk7Ci0Jc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbWVtbGVha19sb2NrLCBmbGFncyk7CisJ
cHV0X2NwdV9ub19yZXNjaGVkKCk7CisJbG9jYWxfaXJxX3Jlc3RvcmUoZmxhZ3MpOwogCiAJLyog
ZGF0YS9ic3Mgc2Nhbm5pbmcgKi8KIAlzY2FuX2Jsb2NrKF9zZGF0YSwgX2VkYXRhKTsKQEAgLTEy
NjIsNiArMTQ3OCwxMCBAQCB2b2lkIF9faW5pdCBtZW1sZWFrX2luaXQodm9pZCkKIAogCWF0b21p
Y19zZXQoJm1lbWxlYWtfaW5pdGlhbGl6ZWQsIDEpOwogCisJaWYgKHByZWluaXRfcG9zID49IFBS
RUlOSVRfUE9JTlRFUlMpCisJCXBhbmljKCJrbWVtbGVhazogcHJlaW5pdCBwb2ludGVycyBidWZm
ZXIgb3ZlcmZsb3c6ICVkXG4iLAorCQkgICAgICBwcmVpbml0X3Bvcyk7CisKIAkvKiBleGVjdXRl
IHRoZSBidWZmZXJlZCBtZW1sZWFrIGFjdGlvbnMgKi8KIAlwcl9kZWJ1Zygia21lbWxlYWs6ICVk
IHByZWluaXQgYWN0aW9uc1xuIiwgcHJlaW5pdF9wb3MpOwogCWZvciAoaSA9IDA7IGkgPCBwcmVp
bml0X3BvczsgaSsrKSB7Cg==
------=_Part_25122_11391705.1155907663840--
