Return-Path: <linux-kernel-owner+willy=40w.ods.org-S268092AbUI1WeW@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S268092AbUI1WeW (ORCPT <rfc822;willy@w.ods.org>);
	Tue, 28 Sep 2004 18:34:22 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S268090AbUI1WeV
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Tue, 28 Sep 2004 18:34:21 -0400
Received: from coriana6.CIS.McMaster.CA ([130.113.128.17]:44504 "EHLO
	coriana6.cis.mcmaster.ca") by vger.kernel.org with ESMTP
	id S268082AbUI1WdL (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Tue, 28 Sep 2004 18:33:11 -0400
Subject: [RFC][PATCH] inotify 0.11.0 [WITH PATCH!]
From: John McCutchan <ttb@tentacle.dhs.org>
To: linux-kernel@vger.kernel.org, gamin-list@gnome.org, rml@ximian.com,
       viro@parcelfarce.linux.theplanet.co.uk, akpm@osdl.org, iggy@gentoo.org
Content-Type: multipart/mixed; boundary="=-cqbmgi8GvOqOLsiBTO5F"
Message-Id: <1096410792.4365.3.camel@vertex>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.4.6 
Date: Tue, 28 Sep 2004 18:33:12 -0400
X-PMX-Version-Mac: 4.7.0.111621, Antispam-Engine: 2.0.0.0, Antispam-Data: 2004.9.28.3
X-PerlMx-Spam: Gauge=IIIIIII, Probability=7%, Report='__CT 0, __CTYPE_HAS_BOUNDARY 0, __CTYPE_MULTIPART 0, __HAS_MSGID 0, __HAS_X_MAILER 0, __MIME_VERSION 0, __SANE_MSGID 0'
X-Spam-Flag: NO
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


--=-cqbmgi8GvOqOLsiBTO5F
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

Hello,

Here is release 0.11.0 of inotify. Attached is a patch to 2.6.8.1

--New in this version--
-remove timer (rml)
-fix typo (rml)
-remove check for dev->file_private (rml)
-redo find_inode (rml)
-use the bitmap functions (rml)
-modularization (rml)
-misc cleanup (rml,me)
-redo inotify_read (me)

John McCutchan

Release notes:

--Why Not dnotify and Why inotify (By Robert Love)--

Everyone seems quick to deride the blunder known as "dnotify" and
applaud a
replacement, any replacement, man anything but that current mess, but in
the
name of fairness I present my treatise on why dnotify is what one might
call
not good:

* dnotify requires the opening of one fd per each directory that you
intend to
  watch.
	o The file descriptor pins the directory, disallowing the backing
	  device to be unmounted, which absolutely wrecks havoc with removable
	  media.
	o Watching many directories results in many open file descriptors,
	  possibly hitting a per-process fd limit. 
* dnotify is directory-based. You only learn about changes to
directories.
  Sure, a change to a file in a directory affects the directory, but you
are
  then forced to keep a cache of stat structures around to compare
things in
  order to find out which file.
* dnotify's interface to user-space is awful.
	o dnotify uses signals to communicate with user-space.
	o Specifically, dnotify uses SIGIO.
	o But then you can pick a different signal! So by "signals," I really
	  meant you need to use real-time signals if you want to queue the
	  events.
* dnotify basically ignores any problems that would arise in the VFS
from hard
  links.
* Rumor is that the "d" in "dnotify" does not stand for "directory" but
for
  "suck."

A suitable replacement is "inotify." And now, my tract on what inotify
brings
to the table:

* inotify's interface is a device node, not SIGIO.
	o You open only a single fd, to the device node. No more pinning
	  directories or opening a million file descriptors.
	o Usage is nice: open the device, issue simple commands via ioctl(),
	  and then block on the device. It returns events when, well, there are
	  events to be returned.
	o You can select() on the device node and so it integrates with main
	  loops like coffee mixed with vanilla milkshake.
* inotify has an event that says "the filesystem that the item you were
  watching is on was unmounted" (this is particularly cool).
* inotify can watch directories or files.
* The "i" in inotify does not stand for "suck" but for "inode" -- the
logical
  choice since inotify is inode-based. 


--COMPLEXITY--

I have been asked what the complexity of inotify is. Inotify has
2 path codes where complexity could be an issue:

Adding a watcher to a device
	This code has to check if the inode is already being watched 
	by the device, this is O(1) since the maximum number of 
	devices is limited to 8.


Removing a watch from a device
	This code has to do a search of all watches on the device to
	find the watch descriptor that is being asked to remove.
	This involves a linear search, but should not really be an issue
	because it is limited to 8192 entries. If this does turn in to
	a concern, I would replace the list of watches on the device
	with a sorted binary tree, so that the search could be done
	very quickly.


The calls to inotify from the VFS code has a complexity of O(1) so
inotify does not affect the speed of VFS operations.

--MEMORY USAGE--

The inotify data structures are light weight:

inotify watch is 40 bytes
inotify device is 68 bytes
inotify event is 272 bytes

So assuming a device has 8192 watches, the structures are only going
to consume 320KB of memory. With a maximum number of 8 devices allowed
to exist at a time, this is still only 2.5 MB

Each device can also have 256 events queued at a time, which sums to
68KB per device. And only .5 MB if all devices are opened and have
a full event queue.

So approximately 3 MB of memory are used in the rare case of 
everything open and full.

Each inotify watch pins the inode of a directory/file in memory,
the size of an inode is different per file system but lets assume
that it is 512 byes. 

So assuming the maximum number of global watches are active, this would
pin down 32 MB of inodes in the inode cache. Again not a problem
on a modern system. 

On smaller systems, the maximum watches / events could be lowered
to provide a smaller foot print.

Keep in mind that this is an absolute worst case memory analysis.
In reality it will most likely cost approximately 5MB.

--HOWTO USE--
Inotify is a character device that when opened offers 2 IOCTL's.
(It actually has 4 but the other 2 are used for debugging)

INOTIFY_WATCH:
        Which takes a path and event mask and returns a unique 
        (to the instance of the driver) integer (wd [watch descriptor]
        from here on) that is a 1:1 mapping to the path passed. 
        What happens is inotify gets the inode (and ref's the inode)
        for the path and adds a inotify_watcher structure to the inodes
        list of watchers. If this instance of the driver is already
        watching the path, the event mask will be updated and
        the original wd will be returned.

INOTIFY_IGNORE:
        Which takes an integer (that you got from INOTIFY_WATCH) 
        representing a wd that you are not interested in watching
        anymore. This will:

        send an IGNORE event to the device
        remove the inotify_watcher structure from the device and 
        from the inode and unref the inode.
        
After you are watching 1 or more paths, you can read from the fd
and get events. The events are struct inotify_event. If you are
watching a directory and something happens to a file in the directory
the event will contain the filename (just the filename not the full
path).

-- EVENTS --
IN_ACCESS - Sent when file is accessed.
IN_MODIFY - Sent when file is modified.
IN_ATTRIB - Sent when file is chmod'ed.
IN_CLOSE - Sent when file is closed
IN_OPEN - Sent when file is opened.
IN_MOVED_FROM - Sent to the source folder of a move.
IN_MOVED_TO - Sent to the destination folder of a move.
IN_DELETE_SUBDIR - Sent when a sub directory is deleted. (When watching
parent)
IN_DELETE_FILE - Sent when a file is deleted. (When watching parent)
IN_CREATE_SUBDIR - Sent when a sub directory is created. (When watching
parent)
IN_CREATE_FILE - Sent when a file is created. (When watching parent)
IN_DELETE_SELF - Sent when file is deleted.
IN_UNMOUNT - Sent when the filesystem is being unmounted.
IN_Q_OVERFLOW - Sent when your event queue has over flowed.

The MOVED_FROM/MOVED_TO events are always sent in pairs.
MOVED_FROM/MOVED_TO
is also sent when a file is renamed. The cookie field in the event pairs
up MOVED_FROM/MOVED_TO events. These two events are not guaranteed to be
successive in the event stream. You must rely on the cookie to pair
them up. (Note, the cookie is not sent yet.)

If you aren't watching the source and destination folders in a MOVE.
You will only get MOVED_TO or MOVED_FROM. In this case, MOVED_TO
is equivelent to a CREATE and MOVED_FROM is equivelent to a DELETE.

--KERNEL CHANGES--
inotify char device driver.

Adding calls to inotify_inode_queue_event and 
inotify_dentry_parent_queue_event from VFS operations.
Dnotify has the same function calls. The complexity of the VFS 
operations is not affected because inotify_*_queue_event is O(1).


Adding a call to inotify_super_block_umount from
generic_shutdown_superblock

inotify_super_block_umount consists of this:
find all of the inodes that are on the super block being shut down,
sends each watcher on each inode the UNMOUNT and IGNORED event
removes the watcher structures from each instance of the device driver 
and each inode.
unref's the inode.


--=-cqbmgi8GvOqOLsiBTO5F
Content-Disposition: attachment; filename=inotify-0.11.0.diff
Content-Transfer-Encoding: base64
Content-Type: text/x-patch; name=inotify-0.11.0.diff; charset=utf-8

LS0tIGNsZWFuL2xpbnV4L2RyaXZlcnMvY2hhci9pbm90aWZ5LmMJMTk2OS0xMi0zMSAxOTowMDow
MC4wMDAwMDAwMDAgLTA1MDANCisrKyBsaW51eC9kcml2ZXJzL2NoYXIvaW5vdGlmeS5jCTIwMDQt
MDktMjggMTg6MDY6NDguMDAwMDAwMDAwIC0wNDAwDQpAQCAtMCwwICsxLDEwMTcgQEANCisvKg0K
KyAqIElub2RlIGJhc2VkIGRpcmVjdG9yeSBub3RpZmljYXRpb25zIGZvciBMaW51eC4NCisgKg0K
KyAqIENvcHlyaWdodCAoQykgMjAwNCBKb2huIE1jQ3V0Y2hhbg0KKyAqDQorICogVGhpcyBwcm9n
cmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2Rp
ZnkgaXQNCisgKiB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNl
bnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUNCisgKiBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVp
dGhlciB2ZXJzaW9uIDIsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55DQorICogbGF0ZXIgdmVyc2lv
bi4NCisgKg0KKyAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0
IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQNCisgKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91
dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQorICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJ
VE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUNCisgKiBHZW5lcmFs
IFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQorICovDQorDQorLyogVE9ETzogDQor
ICogdW5tb3VudCBldmVudHMgZG9uJ3QgZ2V0IHNlbnQgaWYgZmlsZXN5c3RlbSBpcyBtb3VudGVk
IGluIHR3byBwbGFjZXMuDQorICogZHluYW1pY2FsbHkgYWxsb2NhdGUgZXZlbnQgZmlsZW5hbWUN
CisgKiB3YXRjaGVycyBhbmQgZXZlbnRzIGNvdWxkIHVzZSB0aGVpciBvd24gc2xhYiBjYWNoZQ0K
KyAqIHJlbmFtZSBpbm90aWZ5X3dhdGNoZXIgdG8gaW5vdGlmeV93YXRjaA0KKyAqIG5lZWQgYSB3
YXkgdG8gY29ubmVjdCBNT1ZFRF9UTy9NT1ZFRF9GUk9NIGV2ZW50cyBpbiB1c2VyIHNwYWNlDQor
ICovDQorDQorI2luY2x1ZGUgPGxpbnV4L2JpdG9wcy5oPg0KKyNpbmNsdWRlIDxsaW51eC9iaXRt
YXAuaD4NCisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQorI2luY2x1ZGUgPGxpbnV4L2tlcm5l
bC5oPg0KKyNpbmNsdWRlIDxsaW51eC9zY2hlZC5oPg0KKyNpbmNsdWRlIDxsaW51eC9zcGlubG9j
ay5oPg0KKyNpbmNsdWRlIDxsaW51eC9zbGFiLmg+DQorI2luY2x1ZGUgPGxpbnV4L2ZzLmg+DQor
I2luY2x1ZGUgPGxpbnV4L25hbWVpLmg+DQorI2luY2x1ZGUgPGxpbnV4L3BvbGwuaD4NCisjaW5j
bHVkZSA8bGludXgvbWlzY2RldmljZS5oPg0KKyNpbmNsdWRlIDxsaW51eC9kZXZpY2UuaD4NCisj
aW5jbHVkZSA8bGludXgvaW5pdC5oPg0KKyNpbmNsdWRlIDxsaW51eC90eXBlcy5oPg0KKyNpbmNs
dWRlIDxsaW51eC9zdGRkZWYuaD4NCisjaW5jbHVkZSA8bGludXgva2VybmVsLmg+DQorI2luY2x1
ZGUgPGxpbnV4L2xpc3QuaD4NCisjaW5jbHVkZSA8bGludXgvd3JpdGViYWNrLmg+DQorI2luY2x1
ZGUgPGxpbnV4L2lub3RpZnkuaD4NCisNCisjZGVmaW5lIE1BWF9JTk9USUZZX0RFVlMJICA4CS8q
IG1heCBvcGVuIGlub3RpZnkgZGV2aWNlcyAqLw0KKyNkZWZpbmUgTUFYX0lOT1RJRllfREVWX1dB
VENIRVJTICA4MTkyCS8qIG1heCB0b3RhbCB3YXRjaGVzICovDQorI2RlZmluZSBNQVhfSU5PVElG
WV9RVUVVRURfRVZFTlRTIDI1NgkvKiBtYXggZXZlbnRzIHF1ZXVlZCBvbiB0aGUgZGV2Ki8NCisN
CitzdGF0aWMgYXRvbWljX3Qgd2F0Y2hlcl9jb3VudDsNCitzdGF0aWMga21lbV9jYWNoZV90ICp3
YXRjaGVyX2NhY2hlOw0KK3N0YXRpYyBrbWVtX2NhY2hlX3QgKmtldmVudF9jYWNoZTsNCisNCisv
KiBGb3IgZGVidWdnaW5nICovDQorc3RhdGljIGludCBpbm90aWZ5X2RlYnVnX2ZsYWdzOw0KKyNk
ZWZpbmUgaXByaW50ayhmLCBzdHIuLi4pIGlmIChpbm90aWZ5X2RlYnVnX2ZsYWdzICYgZikgcHJp
bnRrIChLRVJOX0FMRVJUIHN0cikNCisNCisvKg0KKyAqIHN0cnVjdCBpbm90aWZ5X2RldmljZSAt
IHJlcHJlc2VudHMgYW4gb3BlbiBpbnN0YW5jZSBvZiBhbiBpbm90aWZ5IGRldmljZQ0KKyAqDQor
ICogRm9yIGVhY2ggaW5vdGlmeSBkZXZpY2UsIHdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUg
ZXZlbnRzIHF1ZXVlZCBvbiBpdCwNCisgKiBhIGxpc3Qgb2YgdGhlIGlub2RlcyB0aGF0IHdlIGFy
ZSB3YXRjaGluZywgYW5kIHNvIG9uLg0KKyAqDQorICogJ2JpdG1hc2snIGhvbGRzIG9uZSBiaXQg
Zm9yIGVhY2ggcG9zc2libGUgd2F0Y2hlciBkZXNjcmlwdG9yOiBhIHNldCBiaXQNCisgKiBpbXBs
aWVzIHRoYXQgdGhlIGdpdmVuIFdEIGlzIHZhbGlkLCB1bnNldCBpbXBsaWVzIGl0IGlzIG5vdC4N
CisgKg0KKyAqIFRoaXMgc3RydWN0dXJlIGlzIHByb3RlY3RlZCBieSAnbG9jaycuICBMb2NrIG9y
ZGVyaW5nOg0KKyAqCWRldi0+bG9jaw0KKyAqCQlkZXYtPndhaXQtPmxvY2sNCisgKiBGSVhNRTog
RGVmaW5lIGxvY2sgb3JkZXJpbmcgd3J0IGlub2RlIGFuZCBkZW50cnkgbG9ja2luZyENCisgKi8N
CitzdHJ1Y3QgaW5vdGlmeV9kZXZpY2Ugew0KKwlERUNMQVJFX0JJVE1BUChiaXRtYXNrLCBNQVhf
SU5PVElGWV9ERVZfV0FUQ0hFUlMpOw0KKwl3YWl0X3F1ZXVlX2hlYWRfdCAJd2FpdDsNCisJc3Ry
dWN0IGxpc3RfaGVhZCAJZXZlbnRzOw0KKwlzdHJ1Y3QgbGlzdF9oZWFkIAl3YXRjaGVyczsNCisJ
c3BpbmxvY2tfdAkJbG9jazsNCisJdW5zaWduZWQgaW50CQlldmVudF9jb3VudDsNCisJaW50CQkJ
bnJfd2F0Y2hlczsNCit9Ow0KKw0KK3N0cnVjdCBpbm90aWZ5X3dhdGNoZXIgew0KKwlpbnQgCQkJ
d2Q7IC8vIHdhdGNoZXIgZGVzY3JpcHRvcg0KKwl1bnNpZ25lZCBsb25nCQltYXNrOw0KKwlzdHJ1
Y3QgaW5vZGUgKgkJaW5vZGU7DQorCXN0cnVjdCBpbm90aWZ5X2RldmljZSAqCWRldjsNCisJc3Ry
dWN0IGxpc3RfaGVhZAlkX2xpc3Q7IC8vIGRldmljZSBsaXN0DQorCXN0cnVjdCBsaXN0X2hlYWQJ
aV9saXN0OyAvLyBpbm9kZSBsaXN0DQorCXN0cnVjdCBsaXN0X2hlYWQJdV9saXN0OyAvLyB1bm1v
dW50IGxpc3QgDQorfTsNCisjZGVmaW5lIGlub3RpZnlfd2F0Y2hlcl9kX2xpc3QocG9zKSBsaXN0
X2VudHJ5KChwb3MpLCBzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyLCBkX2xpc3QpDQorI2RlZmluZSBp
bm90aWZ5X3dhdGNoZXJfaV9saXN0KHBvcykgbGlzdF9lbnRyeSgocG9zKSwgc3RydWN0IGlub3Rp
Znlfd2F0Y2hlciwgaV9saXN0KQ0KKyNkZWZpbmUgaW5vdGlmeV93YXRjaGVyX3VfbGlzdChwb3Mp
IGxpc3RfZW50cnkoKHBvcyksIHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIsIHVfbGlzdCkNCisNCisv
Kg0KKyAqIEEgbGlzdCBvZiB0aGVzZSBpcyBhdHRhY2hlZCB0byBlYWNoIGluc3RhbmNlIG9mIHRo
ZSBkcml2ZXINCisgKiB3aGVuIHRoZSBkcml2ZXJzIHJlYWQoKSBnZXRzIGNhbGxlZCwgdGhpcyBs
aXN0IGlzIHdhbGtlZCBhbmQNCisgKiBhbGwgZXZlbnRzIHRoYXQgY2FuIGZpdCBpbiB0aGUgYnVm
ZmVyIGdldCBkZWxpdmVyZWQNCisgKi8NCitzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQgew0K
KyAgICAgICAgc3RydWN0IGxpc3RfaGVhZCAgICAgICAgbGlzdDsNCisJc3RydWN0IGlub3RpZnlf
ZXZlbnQJZXZlbnQ7DQorfTsNCisjZGVmaW5lIGxpc3RfdG9faW5vdGlmeV9rZXJuZWxfZXZlbnQo
cG9zKSBsaXN0X2VudHJ5KChwb3MpLCBzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQsIGxpc3Qp
DQorDQorLyoNCisgKiBmaW5kX2lub2RlIC0gcmVzb2x2ZSBhIHVzZXItZ2l2ZW4gcGF0aCB0byBh
IHNwZWNpZmljIGlub2RlIGFuZCBpZ2V0KCkgaXQNCisgKi8NCitzdGF0aWMgc3RydWN0IGlub2Rl
ICogZmluZF9pbm9kZShjb25zdCBjaGFyIF9fdXNlciAqZGlybmFtZSkNCit7DQorCXN0cnVjdCBp
bm9kZSAqaW5vZGU7DQorCXN0cnVjdCBuYW1laWRhdGEgbmQ7DQorCWludCBlcnJvcjsNCisNCisJ
ZXJyb3IgPSBfX3VzZXJfd2FsayhkaXJuYW1lLCBMT09LVVBfRk9MTE9XLCAmbmQpOw0KKwlpZiAo
ZXJyb3IpIHsNCisJCWlwcmludGsoSU5PVElGWV9ERUJVR19JTk9ERSwgImNvdWxkIG5vdCBmaW5k
IGlub2RlXG4iKTsNCisJCWlub2RlID0gRVJSX1BUUihlcnJvcik7DQorCQlnb3RvIG91dDsNCisJ
fQ0KKw0KKwlpbm9kZSA9IG5kLmRlbnRyeS0+ZF9pbm9kZTsNCisJX19pZ2V0KGlub2RlKTsNCisJ
aXByaW50ayhJTk9USUZZX0RFQlVHX0lOT0RFLCAicmVmJ2QgaW5vZGVcbiIpOw0KKwlwYXRoX3Jl
bGVhc2UoJm5kKTsNCitvdXQ6DQorCXJldHVybiBpbm9kZTsNCit9DQorDQorc3RhdGljIHZvaWQg
dW5yZWZfaW5vZGUoc3RydWN0IGlub2RlICppbm9kZSkNCit7DQorCWlwcmludGsoSU5PVElGWV9E
RUJVR19JTk9ERSwgInVucmVmJ2QgaW5vZGVcbiIpOw0KKwlpcHV0KGlub2RlKTsNCit9DQorDQor
c3RydWN0IGlub3RpZnlfa2VybmVsX2V2ZW50ICprZXJuZWxfZXZlbnQoaW50IHdkLCBpbnQgbWFz
aywNCisJCQkJCSAgY29uc3QgY2hhciAqZmlsZW5hbWUpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV9r
ZXJuZWxfZXZlbnQgKmtldmVudDsNCisNCisJa2V2ZW50ID0ga21lbV9jYWNoZV9hbGxvYyhrZXZl
bnRfY2FjaGUsIEdGUF9BVE9NSUMpOw0KKwlpZiAoIWtldmVudCkgew0KKwkJaXByaW50ayhJTk9U
SUZZX0RFQlVHX0FMTE9DLA0KKwkJCSJmYWlsZWQgdG8gYWxsb2Mga2V2ZW50ICglZCwlZClcbiIs
IHdkLCBtYXNrKTsNCisJCWdvdG8gb3V0Ow0KKwl9DQorDQorCWlwcmludGsoSU5PVElGWV9ERUJV
R19BTExPQywgImFsbG9jZWQga2V2ZW50ICVwICglZCwlZClcbiIsDQorCQlrZXZlbnQsIHdkLCBt
YXNrKTsNCisNCisJa2V2ZW50LT5ldmVudC53ZCA9IHdkOw0KKwlrZXZlbnQtPmV2ZW50Lm1hc2sg
PSBtYXNrOw0KKwlJTklUX0xJU1RfSEVBRCgma2V2ZW50LT5saXN0KTsNCisNCisJaWYgKGZpbGVu
YW1lKSB7DQorCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRklMRU4sDQorCQkJImZpbGVuYW1lIGZv
ciBldmVudCB3YXMgJXAgJXNcbiIsIGZpbGVuYW1lLCBmaWxlbmFtZSk7DQorCQlzdHJuY3B5KGtl
dmVudC0+ZXZlbnQuZmlsZW5hbWUsIGZpbGVuYW1lLA0KKwkJCUlOT1RJRllfRklMRU5BTUVfTUFY
KTsNCisJCWtldmVudC0+ZXZlbnQuZmlsZW5hbWVbSU5PVElGWV9GSUxFTkFNRV9NQVgtMV0gPSAn
XDAnOw0KKwkJaXByaW50ayhJTk9USUZZX0RFQlVHX0ZJTEVOLA0KKwkJCSJmaWxlbmFtZSBhZnRl
ciBjb3B5aW5nICVzXG4iLCBrZXZlbnQtPmV2ZW50LmZpbGVuYW1lKTsNCisJfSBlbHNlIHsNCisJ
CWlwcmludGsoSU5PVElGWV9ERUJVR19GSUxFTiwgIm5vIGZpbGVuYW1lIGZvciBldmVudFxuIik7
DQorCQlrZXZlbnQtPmV2ZW50LmZpbGVuYW1lWzBdID0gJ1wwJzsNCisJfQ0KKwkNCisNCitvdXQ6
DQorCXJldHVybiBrZXZlbnQ7DQorfQ0KKw0KK3ZvaWQgZGVsZXRlX2tlcm5lbF9ldmVudChzdHJ1
Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQgKmtldmVudCkNCit7DQorCWlmICgha2V2ZW50KQ0KKwkJ
cmV0dXJuOw0KKw0KKwlJTklUX0xJU1RfSEVBRCgma2V2ZW50LT5saXN0KTsNCisJa2V2ZW50LT5l
dmVudC53ZCA9IC0xOw0KKwlrZXZlbnQtPmV2ZW50Lm1hc2sgPSAwOw0KKw0KKwlpcHJpbnRrKElO
T1RJRllfREVCVUdfQUxMT0MsICJmcmVlJ2Qga2V2ZW50ICVwXG4iLCBrZXZlbnQpOw0KKwlrbWVt
X2NhY2hlX2ZyZWUoa2V2ZW50X2NhY2hlLCBrZXZlbnQpOw0KK30NCisNCisjZGVmaW5lIGlub3Rp
ZnlfZGV2X2hhc19ldmVudHMoZGV2KSAoIWxpc3RfZW1wdHkoJmRldi0+ZXZlbnRzKSkNCisjZGVm
aW5lIGlub3RpZnlfZGV2X2dldF9ldmVudChkZXYpIChsaXN0X3RvX2lub3RpZnlfa2VybmVsX2V2
ZW50KGRldi0+ZXZlbnRzLm5leHQpKQ0KKy8qIERvZXMgdGhpcyBldmVudHMgbWFzayBnZXQgc2Vu
dCB0byB0aGUgd2F0Y2hlciA/ICovDQorI2RlZmluZSBldmVudF9hbmQoZXZlbnRfbWFzayx3YXRj
aGVyc19tYXNrKSAJKChldmVudF9tYXNrID09IElOX1VOTU9VTlQpIHx8IFwNCisJCQkJCQkoZXZl
bnRfbWFzayA9PSBJTl9JR05PUkVEKSB8fCBcDQorCQkJCQkJKGV2ZW50X21hc2sgJiB3YXRjaGVy
c19tYXNrKSkNCisNCisvKg0KKyAqIGlub3RpZnlfZGV2X3F1ZXVlX2V2ZW50IC0gYWRkIGEgbmV3
IGV2ZW50IHRvIHRoZSBnaXZlbiBkZXZpY2UNCisgKg0KKyAqIENhbGxlciBtdXN0IGhvbGQgZGV2
LT5sb2NrLg0KKyAqLw0KK3N0YXRpYyB2b2lkIGlub3RpZnlfZGV2X3F1ZXVlX2V2ZW50KHN0cnVj
dCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJCQkgICAgc3RydWN0IGlub3RpZnlfd2F0Y2hlciAq
d2F0Y2hlciwgaW50IG1hc2ssDQorCQkJCSAgICBjb25zdCBjaGFyICpmaWxlbmFtZSkNCit7DQor
CXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVudCAqa2V2ZW50Ow0KKw0KKwkvKg0KKwkgKiBDaGVj
ayBpZiB0aGUgbmV3IGV2ZW50IGlzIGEgZHVwbGljYXRlIG9mIHRoZSBsYXN0IGV2ZW50IHF1ZXVl
ZC4NCisJICovDQorCWlmIChkZXYtPmV2ZW50X2NvdW50ICYmIA0KKwkJaW5vdGlmeV9kZXZfZ2V0
X2V2ZW50KGRldiktPmV2ZW50Lm1hc2sgPT0gbWFzayAmJg0KKwkJaW5vdGlmeV9kZXZfZ2V0X2V2
ZW50KGRldiktPmV2ZW50LndkID09IHdhdGNoZXItPndkKSB7DQorDQorCQkvKiBDaGVjayBpZiB0
aGUgZmlsZW5hbWVzIG1hdGNoICovDQorCQlpZiAoIWZpbGVuYW1lICYmIGlub3RpZnlfZGV2X2dl
dF9ldmVudChkZXYpLT5ldmVudC5maWxlbmFtZVswXSA9PSAnXDAnKQ0KKwkJCXJldHVybjsNCisJ
CWlmIChmaWxlbmFtZSAmJiAhc3RyY21wKGlub3RpZnlfZGV2X2dldF9ldmVudChkZXYpLT5ldmVu
dC5maWxlbmFtZSwgZmlsZW5hbWUpKQ0KKwkJCXJldHVybjsNCisJfQ0KKwkvKg0KKwkgKiB0aGUg
cXVldWUgaGFzIGFscmVhZHkgb3ZlcmZsb3dlZCBhbmQgd2UgaGF2ZSBhbHJlYWR5IHNlbnQgdGhl
DQorCSAqIFFfT1ZFUkZMT1cgZXZlbnQNCisJICovDQorCWlmIChkZXYtPmV2ZW50X2NvdW50ID4g
TUFYX0lOT1RJRllfUVVFVUVEX0VWRU5UUykgew0KKwkJaXByaW50ayhJTk9USUZZX0RFQlVHX0VW
RU5UUywNCisJCQkiZXZlbnQgcXVldWUgZm9yICVwIG92ZXJmbG93ZWRcbiIsIGRldik7DQorCQly
ZXR1cm47DQorCX0NCisNCisJLyogdGhlIHF1ZXVlIGhhcyBqdXN0IG92ZXJmbG93ZWQgYW5kIHdl
IG5lZWQgdG8gbm90aWZ5IHVzZXIgc3BhY2UgKi8NCisJaWYgKGRldi0+ZXZlbnRfY291bnQgPT0g
TUFYX0lOT1RJRllfUVVFVUVEX0VWRU5UUykgew0KKwkJZGV2LT5ldmVudF9jb3VudCsrOw0KKwkJ
a2V2ZW50ID0ga2VybmVsX2V2ZW50KC0xLCBJTl9RX09WRVJGTE9XLCBOVUxMKTsNCisJCWlwcmlu
dGsoSU5PVElGWV9ERUJVR19FVkVOVFMsICJzZW5kaW5nIElOX1FfT1ZFUkZMT1cgdG8gJXBcbiIs
DQorCQkJZGV2KTsNCisJCWdvdG8gYWRkX2V2ZW50X3RvX3F1ZXVlOw0KKwl9DQorDQorCWlmICgh
ZXZlbnRfYW5kKG1hc2ssIHdhdGNoZXItPmlub2RlLT53YXRjaGVyc19tYXNrKSB8fA0KKwkJCSFl
dmVudF9hbmQobWFzaywgd2F0Y2hlci0+bWFzaykpDQorCQlyZXR1cm47DQorDQorCWRldi0+ZXZl
bnRfY291bnQrKzsNCisJa2V2ZW50ID0ga2VybmVsX2V2ZW50KHdhdGNoZXItPndkLCBtYXNrLCBm
aWxlbmFtZSk7DQorDQorYWRkX2V2ZW50X3RvX3F1ZXVlOg0KKwlpZiAoIWtldmVudCkgew0KKwkJ
aXByaW50ayhJTk9USUZZX0RFQlVHX0VWRU5UUywgImZhaWxlZCB0byBxdWV1ZSBldmVudCBmb3Ig
JXAiDQorCQkJIiAtLSBjb3VsZCBub3QgYWxsb2NhdGUga2V2ZW50XG4iLCBkZXYpOw0KKwkJZGV2
LT5ldmVudF9jb3VudC0tOw0KKwkJcmV0dXJuOw0KKwl9DQorDQorCS8qIHF1ZXVlIHRoZSBldmVu
dCBhbmQgd2FrZSB1cCBhbnlvbmUgd2FpdGluZyAqLw0KKwlsaXN0X2FkZF90YWlsKCZrZXZlbnQt
Pmxpc3QsICZkZXYtPmV2ZW50cyk7DQorCWlwcmludGsoSU5PVElGWV9ERUJVR19FVkVOVFMsDQor
CQkicXVldWVkIGV2ZW50ICV4IGZvciAlcFxuIiwga2V2ZW50LT5ldmVudC5tYXNrLCBkZXYpOw0K
Kwl3YWtlX3VwX2ludGVycnVwdGlibGUoJmRldi0+d2FpdCk7DQorfQ0KKw0KKy8qDQorICogaW5v
dGlmeV9kZXZfZXZlbnRfZGVxdWV1ZSAtIGRlc3Ryb3kgYW4gZXZlbnQgb24gdGhlIGdpdmVuIGRl
dmljZQ0KKyAqDQorICogQ2FsbGVyIG11c3QgaG9sZCBkZXYtPmxvY2suDQorICovDQorc3RhdGlj
IHZvaWQgaW5vdGlmeV9kZXZfZXZlbnRfZGVxdWV1ZShzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRl
dikNCit7DQorCXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9ldmVudCAqa2V2ZW50Ow0KKw0KKwlpZiAo
IWlub3RpZnlfZGV2X2hhc19ldmVudHMoZGV2KSkNCisJCXJldHVybjsNCisNCisJa2V2ZW50ID0g
aW5vdGlmeV9kZXZfZ2V0X2V2ZW50KGRldik7DQorCWxpc3RfZGVsKCZrZXZlbnQtPmxpc3QpOw0K
KwlkZXYtPmV2ZW50X2NvdW50LS07DQorCWRlbGV0ZV9rZXJuZWxfZXZlbnQoa2V2ZW50KTsNCisN
CisJaXByaW50ayhJTk9USUZZX0RFQlVHX0VWRU5UUywgImRlcXVldWVkIGV2ZW50IG9uICVwXG4i
LCBkZXYpOw0KK30NCisNCisvKg0KKyAqIGlub3RpZnlfZGV2X2dldF93ZCAtIHJldHVybnMgdGhl
IG5leHQgV0QgZm9yIHVzZSBieSB0aGUgZ2l2ZW4gZGV2DQorICoNCisgKiBDYWxsZXIgbXVzdCBo
b2xkIGRldi0+bG9jayBiZWZvcmUgY2FsbGluZy4NCisgKi8NCitzdGF0aWMgaW50IGlub3RpZnlf
ZGV2X2dldF93ZChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldikNCit7DQorCWludCB3ZDsNCisN
CisJaWYgKCFkZXYgfHwgZGV2LT5ucl93YXRjaGVzID09IE1BWF9JTk9USUZZX0RFVl9XQVRDSEVS
UykNCisJCXJldHVybiAtMTsNCisNCisJZGV2LT5ucl93YXRjaGVzKys7DQorCXdkID0gZmluZF9m
aXJzdF96ZXJvX2JpdChkZXYtPmJpdG1hc2ssIE1BWF9JTk9USUZZX0RFVl9XQVRDSEVSUyk7DQor
CXNldF9iaXQod2QsIGRldi0+Yml0bWFzayk7DQorDQorCXJldHVybiB3ZDsNCit9DQorDQorLyoN
CisgKiBpbm90aWZ5X2Rldl9wdXRfd2QgLSByZWxlYXNlIHRoZSBnaXZlbiBXRCBvbiB0aGUgZ2l2
ZW4gZGV2aWNlDQorICoNCisgKiBDYWxsZXIgbXVzdCBob2xkIGRldi0+bG9jay4NCisgKi8NCitz
dGF0aWMgaW50IGlub3RpZnlfZGV2X3B1dF93ZChzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldiwg
aW50IHdkKQ0KK3sNCisJaWYgKCFkZXYgfHwgd2QgPCAwKQ0KKwkJcmV0dXJuIC0xOw0KKw0KKwlk
ZXYtPm5yX3dhdGNoZXMtLTsNCisJY2xlYXJfYml0KHdkLCBkZXYtPmJpdG1hc2spOw0KKw0KKwly
ZXR1cm4gMDsNCit9DQorDQorLyoNCisgKiBjcmVhdGVfd2F0Y2hlciAtIGNyZWF0ZXMgYSB3YXRj
aGVyIG9uIHRoZSBnaXZlbiBkZXZpY2UuDQorICoNCisgKiBHcmFicyBkZXYtPmxvY2ssIHNvIHRo
ZSBjYWxsZXIgbXVzdCBub3QgaG9sZCBpdC4NCisgKi8NCitzdGF0aWMgc3RydWN0IGlub3RpZnlf
d2F0Y2hlciAqY3JlYXRlX3dhdGNoZXIoc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYsDQorCQkJ
CQkgICAgICBpbnQgbWFzaywgc3RydWN0IGlub2RlICppbm9kZSkNCit7DQorCXN0cnVjdCBpbm90
aWZ5X3dhdGNoZXIgKndhdGNoZXI7DQorDQorCXdhdGNoZXIgPSBrbWVtX2NhY2hlX2FsbG9jKHdh
dGNoZXJfY2FjaGUsIEdGUF9LRVJORUwpOw0KKwlpZiAoIXdhdGNoZXIpIHsNCisJCWlwcmludGso
SU5PVElGWV9ERUJVR19BTExPQywNCisJCQkiZmFpbGVkIHRvIGFsbG9jYXRlIHdhdGNoZXIgKCVw
LCVkKVxuIiwgaW5vZGUsIG1hc2spOw0KKwkJcmV0dXJuIE5VTEw7DQorCX0NCisNCisJd2F0Y2hl
ci0+d2QgPSAtMTsNCisJd2F0Y2hlci0+bWFzayA9IG1hc2s7DQorCXdhdGNoZXItPmlub2RlID0g
aW5vZGU7DQorCXdhdGNoZXItPmRldiA9IGRldjsNCisJSU5JVF9MSVNUX0hFQUQoJndhdGNoZXIt
PmRfbGlzdCk7DQorCUlOSVRfTElTVF9IRUFEKCZ3YXRjaGVyLT5pX2xpc3QpOw0KKwlJTklUX0xJ
U1RfSEVBRCgmd2F0Y2hlci0+dV9saXN0KTsNCisNCisJc3Bpbl9sb2NrKCZkZXYtPmxvY2spOw0K
Kwl3YXRjaGVyLT53ZCA9IGlub3RpZnlfZGV2X2dldF93ZChkZXYpOw0KKwlzcGluX3VubG9jaygm
ZGV2LT5sb2NrKTsNCisNCisJaWYgKHdhdGNoZXItPndkIDwgMCkgew0KKwkJaXByaW50ayhJTk9U
SUZZX0RFQlVHX0VSUk9SUywNCisJCQkiQ291bGQgbm90IGdldCB3ZCBmb3Igd2F0Y2hlciAlcFxu
Iiwgd2F0Y2hlcik7DQorCQlpcHJpbnRrKElOT1RJRllfREVCVUdfQUxMT0MsICJmcmVlJ2Qgd2F0
Y2hlciAlcFxuIiwgd2F0Y2hlcik7DQorCQlrbWVtX2NhY2hlX2ZyZWUod2F0Y2hlcl9jYWNoZSwg
d2F0Y2hlcik7DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0KKw0KKwlyZXR1cm4gd2F0Y2hlcjsNCit9
DQorDQorLyoNCisgKiBkZWxldGVfd2F0Y2hlciAtIHJlbW92ZXMgdGhlIGdpdmVuICd3YXRjaGVy
JyBmcm9tIHRoZSBnaXZlbiAnZGV2Jw0KKyAqDQorICogQ2FsbGVyIG11c3QgaG9sZCBkZXYtPmxv
Y2suDQorICovDQorc3RhdGljIHZvaWQgZGVsZXRlX3dhdGNoZXIoc3RydWN0IGlub3RpZnlfZGV2
aWNlICpkZXYsDQorCQkJICAgc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcikNCit7DQor
CWlub3RpZnlfZGV2X3B1dF93ZChkZXYsIHdhdGNoZXItPndkKTsNCisJaXByaW50ayhJTk9USUZZ
X0RFQlVHX0FMTE9DLCAiZnJlZSdkIHdhdGNoZXIgJXBcbiIsIHdhdGNoZXIpOw0KKwlrbWVtX2Nh
Y2hlX2ZyZWUod2F0Y2hlcl9jYWNoZSwgd2F0Y2hlcik7DQorfQ0KKw0KKy8qDQorICogaW5vdGlm
eV9maW5kX2RldiAtIGZpbmQgdGhlIHdhdGNoZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBp
bm9kZSBhbmQgZGV2DQorICoNCisgKiBDYWxsZXIgbXVzdCBob2xkIGRldi0+bG9jay4NCisgKi8N
CitzdGF0aWMgc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqaW5vZGVfZmluZF9kZXYoc3RydWN0IGlu
b2RlICppbm9kZSwNCisJCQkJCSAgICAgIHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2KQ0KK3sN
CisJc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcjsNCisNCisJbGlzdF9mb3JfZWFjaF9l
bnRyeSh3YXRjaGVyLCAmaW5vZGUtPndhdGNoZXJzLCBpX2xpc3QpIHsNCisJCWlmICh3YXRjaGVy
LT5kZXYgPT0gZGV2KQ0KKwkJCXJldHVybiB3YXRjaGVyOw0KKwl9DQorDQorCXJldHVybiBOVUxM
Ow0KK30NCisNCitzdGF0aWMgc3RydWN0IGlub3RpZnlfd2F0Y2hlciAqZGV2X2ZpbmRfd2Qoc3Ry
dWN0IGlub3RpZnlfZGV2aWNlICpkZXYsIGludCB3ZCkNCit7DQorCXN0cnVjdCBpbm90aWZ5X3dh
dGNoZXIgKndhdGNoZXI7DQorDQorCWxpc3RfZm9yX2VhY2hfZW50cnkod2F0Y2hlciwgJmRldi0+
d2F0Y2hlcnMsIGRfbGlzdCkgew0KKwkJaWYgKHdhdGNoZXItPndkID09IHdkKQ0KKwkJCXJldHVy
biB3YXRjaGVyOw0KKwl9DQorCXJldHVybiBOVUxMOw0KK30NCisNCitzdGF0aWMgaW50IGlub3Rp
ZnlfZGV2X2lzX3dhdGNoaW5nX2lub2RlKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJ
CQkJICBzdHJ1Y3QgaW5vZGUgKmlub2RlKQ0KK3sNCisJc3RydWN0IGlub3RpZnlfd2F0Y2hlciAq
d2F0Y2hlcjsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeSh3YXRjaGVyLCAmZGV2LT53YXRjaGVy
cywgZF9saXN0KSB7DQorCQlpZiAod2F0Y2hlci0+aW5vZGUgPT0gaW5vZGUpDQorCQkJcmV0dXJu
IDE7DQorCX0NCisJDQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IGlub3RpZnlfZGV2
X2FkZF93YXRjaGVyKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJCQkgICBzdHJ1Y3Qg
aW5vdGlmeV93YXRjaGVyICp3YXRjaGVyKQ0KK3sNCisJaW50IGVycm9yOw0KKw0KKwllcnJvciA9
IDA7DQorDQorCWlmICghZGV2IHx8ICF3YXRjaGVyKSB7DQorCQllcnJvciA9IC1FSU5WQUw7DQor
CQlnb3RvIG91dDsNCisJfQ0KKw0KKwlpZiAoZGV2X2ZpbmRfd2QgKGRldiwgd2F0Y2hlci0+d2Qp
KSB7DQorCQllcnJvciA9IC1FSU5WQUw7DQorCQlnb3RvIG91dDsNCisJfQ0KKw0KKwlpZiAoZGV2
LT5ucl93YXRjaGVzID09IE1BWF9JTk9USUZZX0RFVl9XQVRDSEVSUykgew0KKwkJZXJyb3IgPSAt
RU5PU1BDOw0KKwkJZ290byBvdXQ7DQorCX0NCisNCisJbGlzdF9hZGQoJndhdGNoZXItPmRfbGlz
dCwgJmRldi0+d2F0Y2hlcnMpOw0KK291dDoNCisJcmV0dXJuIGVycm9yOw0KK30NCisNCisvKg0K
KyAqIGlub3RpZnlfZGV2X3JtX3dhdGNoZXIgLSByZW1vdmUgdGhlIGdpdmVuIHdhdGNoIGZyb20g
dGhlIGdpdmVuIGRldmljZQ0KKyAqDQorICogQ2FsbGVyIG11c3QgaG9sZCBkZXYtPmxvY2sgYmVj
YXVzZSB3ZSBjYWxsIGlub3RpZnlfZGV2X3F1ZXVlX2V2ZW50KCkuDQorICovDQorc3RhdGljIGlu
dCBpbm90aWZ5X2Rldl9ybV93YXRjaGVyKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJ
CQkgIHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIpDQorew0KKwlpbnQgZXJyb3I7DQor
DQorCWVycm9yID0gLUVJTlZBTDsNCisJaWYgKHdhdGNoZXIpIHsNCisJCWlub3RpZnlfZGV2X3F1
ZXVlX2V2ZW50KGRldiwgd2F0Y2hlciwgSU5fSUdOT1JFRCwgTlVMTCk7DQorCQlsaXN0X2RlbCgm
d2F0Y2hlci0+ZF9saXN0KTsNCisJCWVycm9yID0gMDsNCisJfSANCisNCisJcmV0dXJuIGVycm9y
Ow0KK30NCisNCit2b2lkIGlub2RlX3VwZGF0ZV93YXRjaGVyc19tYXNrKHN0cnVjdCBpbm9kZSAq
aW5vZGUpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0KKwl1bnNpZ25l
ZCBsb25nIG5ld19tYXNrOw0KKw0KKwluZXdfbWFzayA9IDA7DQorCWxpc3RfZm9yX2VhY2hfZW50
cnkod2F0Y2hlciwgJmlub2RlLT53YXRjaGVycywgaV9saXN0KQ0KKwkJbmV3X21hc2sgfD0gd2F0
Y2hlci0+bWFzazsNCisNCisJaW5vZGUtPndhdGNoZXJzX21hc2sgPSBuZXdfbWFzazsNCit9DQor
DQorLyoNCisgKiBpbm9kZV9hZGRfd2F0Y2hlciAtIGFkZCBhIHdhdGNoZXIgdG8gdGhlIGdpdmVu
IGlub2RlDQorICoNCisgKiBDYWxsZXJzIG11c3QgaG9sZCBkZXYtPmxvY2ssIGJlY2F1c2Ugd2Ug
Y2FsbCBpbm9kZV9maW5kX2RldigpLg0KKyAqLw0KK3N0YXRpYyBpbnQgaW5vZGVfYWRkX3dhdGNo
ZXIoc3RydWN0IGlub2RlICppbm9kZSwNCisJCQkgICAgIHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIg
KndhdGNoZXIpDQorew0KKwlpZiAoIWlub2RlIHx8ICF3YXRjaGVyIHx8IGlub2RlX2ZpbmRfZGV2
KGlub2RlLCB3YXRjaGVyLT5kZXYpKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQorDQorCWxpc3RfYWRk
KCZ3YXRjaGVyLT5pX2xpc3QsICZpbm9kZS0+d2F0Y2hlcnMpOw0KKwlpbm9kZS0+d2F0Y2hlcl9j
b3VudCsrOw0KKwlpbm9kZV91cGRhdGVfd2F0Y2hlcnNfbWFzayhpbm9kZSk7DQorDQorCXJldHVy
biAwOw0KK30NCisNCitzdGF0aWMgaW50IGlub2RlX3JtX3dhdGNoZXIoc3RydWN0IGlub2RlICpp
bm9kZSwNCisJCQkgICAgIHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIpDQorew0KKwlp
ZiAoIWlub2RlIHx8ICF3YXRjaGVyKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQorDQorCWxpc3RfZGVs
KCZ3YXRjaGVyLT5pX2xpc3QpOw0KKwlpbm9kZS0+d2F0Y2hlcl9jb3VudC0tOw0KKw0KKwlpbm9k
ZV91cGRhdGVfd2F0Y2hlcnNfbWFzayhpbm9kZSk7DQorDQorCXJldHVybiAwOw0KK30NCisNCisv
KiBLZXJuZWwgQVBJICovDQorDQordm9pZCBpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KHN0cnVj
dCBpbm9kZSAqaW5vZGUsIHVuc2lnbmVkIGxvbmcgbWFzaywNCisJCQkgICAgICAgY29uc3QgY2hh
ciAqZmlsZW5hbWUpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0KKw0K
KwlzcGluX2xvY2soJmlub2RlLT5pX2xvY2spOw0KKw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5KHdh
dGNoZXIsICZpbm9kZS0+d2F0Y2hlcnMsIGlfbGlzdCkgew0KKwkJc3Bpbl9sb2NrKCZ3YXRjaGVy
LT5kZXYtPmxvY2spOw0KKwkJaW5vdGlmeV9kZXZfcXVldWVfZXZlbnQod2F0Y2hlci0+ZGV2LCB3
YXRjaGVyLCBtYXNrLCBmaWxlbmFtZSk7DQorCQlzcGluX3VubG9jaygmd2F0Y2hlci0+ZGV2LT5s
b2NrKTsNCisJfQ0KKw0KKwlzcGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorfQ0KK0VYUE9S
VF9TWU1CT0xfR1BMKGlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQpOw0KKw0KK3ZvaWQgaW5vdGlm
eV9pbm9kZV9xdWV1ZV9ldmVudF9wYWlyKHN0cnVjdCBpbm9kZSAqaW5vZGUxLCB1bnNpZ25lZCBs
b25nIG1hc2sxLA0KKwkJCQkgICAgY29uc3QgY2hhciAqZmlsZW5hbWUxLA0KKwkJCQkgICAgc3Ry
dWN0IGlub2RlICppbm9kZTIsIHVuc2lnbmVkIGxvbmcgbWFzazIsDQorCQkJCSAgICBjb25zdCBj
aGFyICpmaWxlbmFtZTIpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0K
Kw0KKwlzcGluX2xvY2soJmlub2RlMS0+aV9sb2NrKTsNCisJc3Bpbl9sb2NrKCZpbm9kZTItPmlf
bG9jayk7DQorDQorCWxpc3RfZm9yX2VhY2hfZW50cnkod2F0Y2hlciwgJmlub2RlMS0+d2F0Y2hl
cnMsIGlfbGlzdCkgew0KKwkJc3Bpbl9sb2NrKCZ3YXRjaGVyLT5kZXYtPmxvY2spOw0KKwkJaW5v
dGlmeV9kZXZfcXVldWVfZXZlbnQod2F0Y2hlci0+ZGV2LCB3YXRjaGVyLA0KKwkJCQkJbWFzazEs
IGZpbGVuYW1lMSk7DQorCQlzcGluX3VubG9jaygmd2F0Y2hlci0+ZGV2LT5sb2NrKTsNCisJfQ0K
Kw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5KHdhdGNoZXIsICZpbm9kZTItPndhdGNoZXJzLCBpX2xp
c3QpIHsNCisJCXNwaW5fbG9jaygmd2F0Y2hlci0+ZGV2LT5sb2NrKTsNCisJCWlub3RpZnlfZGV2
X3F1ZXVlX2V2ZW50KHdhdGNoZXItPmRldiwgd2F0Y2hlciwNCisJCQkJCW1hc2syLCBmaWxlbmFt
ZTIpOw0KKwkJc3Bpbl91bmxvY2soJndhdGNoZXItPmRldi0+bG9jayk7DQorCX0NCisNCisJc3Bp
bl91bmxvY2soJmlub2RlMi0+aV9sb2NrKTsNCisJc3Bpbl91bmxvY2soJmlub2RlMS0+aV9sb2Nr
KTsNCit9DQorRVhQT1JUX1NZTUJPTF9HUEwoaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudF9wYWly
KTsNCisNCit2b2lkIGlub3RpZnlfZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudChzdHJ1Y3QgZGVu
dHJ5ICpkZW50cnksDQorCQkJCSAgICAgICB1bnNpZ25lZCBsb25nIG1hc2ssDQorCQkJCSAgICAg
ICBjb25zdCBjaGFyICpmaWxlbmFtZSkNCit7DQorCXN0cnVjdCBkZW50cnkgKnBhcmVudDsNCisN
CisJc3Bpbl9sb2NrKCZkZW50cnktPmRfbG9jayk7DQorCWRnZXQoZGVudHJ5LT5kX3BhcmVudCk7
DQorCXBhcmVudCA9IGRlbnRyeS0+ZF9wYXJlbnQ7DQorCWlub3RpZnlfaW5vZGVfcXVldWVfZXZl
bnQocGFyZW50LT5kX2lub2RlLCBtYXNrLCBmaWxlbmFtZSk7DQorCWRwdXQocGFyZW50KTsNCisJ
c3Bpbl91bmxvY2soJmRlbnRyeS0+ZF9sb2NrKTsNCit9DQorRVhQT1JUX1NZTUJPTF9HUEwoaW5v
dGlmeV9kZW50cnlfcGFyZW50X3F1ZXVlX2V2ZW50KTsNCisNCitzdGF0aWMgdm9pZCBpZ25vcmVf
aGVscGVyKHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIsIGludCBldmVudCkNCit7DQor
CXN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2Ow0KKwlzdHJ1Y3QgaW5vZGUgKmlub2RlOw0KKw0K
KwlzcGluX2xvY2soJndhdGNoZXItPmRldi0+bG9jayk7DQorCXNwaW5fbG9jaygmd2F0Y2hlci0+
aW5vZGUtPmlfbG9jayk7DQorDQorCWlub2RlID0gd2F0Y2hlci0+aW5vZGU7DQorCWRldiA9IHdh
dGNoZXItPmRldjsNCisNCisJaWYgKGV2ZW50KQ0KKwkJaW5vdGlmeV9kZXZfcXVldWVfZXZlbnQo
ZGV2LCB3YXRjaGVyLCBldmVudCwgTlVMTCk7DQorDQorCWlub2RlX3JtX3dhdGNoZXIoaW5vZGUs
IHdhdGNoZXIpOw0KKwlpbm90aWZ5X2Rldl9ybV93YXRjaGVyKHdhdGNoZXItPmRldiwgd2F0Y2hl
cik7DQorCWxpc3RfZGVsKCZ3YXRjaGVyLT51X2xpc3QpOw0KKw0KKwlzcGluX3VubG9jaygmaW5v
ZGUtPmlfbG9jayk7DQorCWRlbGV0ZV93YXRjaGVyKGRldiwgd2F0Y2hlcik7DQorCXNwaW5fdW5s
b2NrKCZkZXYtPmxvY2spOw0KKw0KKwl1bnJlZl9pbm9kZShpbm9kZSk7DQorfQ0KKw0KK3N0YXRp
YyB2b2lkIHByb2Nlc3NfdW1vdW50X2xpc3Qoc3RydWN0IGxpc3RfaGVhZCAqdW1vdW50KSB7DQor
CXN0cnVjdCBpbm90aWZ5X3dhdGNoZXIgKndhdGNoZXIsICpuZXh0Ow0KKw0KKwlsaXN0X2Zvcl9l
YWNoX2VudHJ5X3NhZmUod2F0Y2hlciwgbmV4dCwgdW1vdW50LCB1X2xpc3QpDQorCQlpZ25vcmVf
aGVscGVyKHdhdGNoZXIsIElOX1VOTU9VTlQpOw0KK30NCisNCitzdGF0aWMgdm9pZCBidWlsZF91
bW91bnRfbGlzdChzdHJ1Y3QgbGlzdF9oZWFkICpoZWFkLCBzdHJ1Y3Qgc3VwZXJfYmxvY2sgKnNi
LA0KKwkJCSAgICAgICBzdHJ1Y3QgbGlzdF9oZWFkICp1bW91bnQpDQorew0KKwlzdHJ1Y3QgaW5v
ZGUgKglpbm9kZTsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeShpbm9kZSwgaGVhZCwgaV9saXN0
KSB7DQorCQlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyOw0KKw0KKwkJaWYgKGlub2Rl
LT5pX3NiICE9IHNiKQ0KKwkJCWNvbnRpbnVlOw0KKw0KKwkJc3Bpbl9sb2NrKCZpbm9kZS0+aV9s
b2NrKTsNCisNCisJCWxpc3RfZm9yX2VhY2hfZW50cnkod2F0Y2hlciwgJmlub2RlLT53YXRjaGVy
cywgaV9saXN0KQ0KKwkJCWxpc3RfYWRkKCZ3YXRjaGVyLT51X2xpc3QsIHVtb3VudCk7DQorDQor
CQlzcGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorCX0NCit9DQorDQordm9pZCBpbm90aWZ5
X3N1cGVyX2Jsb2NrX3Vtb3VudChzdHJ1Y3Qgc3VwZXJfYmxvY2sgKnNiKQ0KK3sNCisJc3RydWN0
IGxpc3RfaGVhZCB1bW91bnQ7DQorDQorCUlOSVRfTElTVF9IRUFEKCZ1bW91bnQpOw0KKw0KKwlz
cGluX2xvY2soJmlub2RlX2xvY2spOw0KKwlidWlsZF91bW91bnRfbGlzdCgmaW5vZGVfaW5fdXNl
LCBzYiwgJnVtb3VudCk7DQorCXNwaW5fdW5sb2NrKCZpbm9kZV9sb2NrKTsNCisNCisJcHJvY2Vz
c191bW91bnRfbGlzdCgmdW1vdW50KTsNCit9DQorRVhQT1JUX1NZTUJPTF9HUEwoaW5vdGlmeV9z
dXBlcl9ibG9ja191bW91bnQpOw0KKw0KK3ZvaWQgaW5vdGlmeV9pbm9kZV9pc19kZWFkKHN0cnVj
dCBpbm9kZSAqaW5vZGUpDQorew0KKwlzdHJ1Y3QgaW5vdGlmeV93YXRjaGVyICp3YXRjaGVyLCAq
bmV4dDsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeV9zYWZlKHdhdGNoZXIsIG5leHQsICZpbm9k
ZS0+d2F0Y2hlcnMsIGlfbGlzdCkNCisJCWlnbm9yZV9oZWxwZXIod2F0Y2hlciwgMCk7DQorfQ0K
K0VYUE9SVF9TWU1CT0xfR1BMKGlub3RpZnlfaW5vZGVfaXNfZGVhZCk7DQorDQorLyogVGhlIGRy
aXZlciBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgYmVsb3cgKi8NCisNCitzdGF0aWMgdW5zaWdu
ZWQgaW50IGlub3RpZnlfcG9sbChzdHJ1Y3QgZmlsZSAqZmlsZSwgcG9sbF90YWJsZSAqd2FpdCkN
Cit7DQorICAgICAgICBzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldjsNCisNCisgICAgICAgIGRl
diA9IGZpbGUtPnByaXZhdGVfZGF0YTsNCisNCisgICAgICAgIHBvbGxfd2FpdChmaWxlLCAmZGV2
LT53YWl0LCB3YWl0KTsNCisNCisgICAgICAgIGlmIChpbm90aWZ5X2Rldl9oYXNfZXZlbnRzKGRl
dikpDQorICAgICAgICAgICAgICAgIHJldHVybiBQT0xMSU4gfCBQT0xMUkROT1JNOw0KKw0KKyAg
ICAgICAgcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyBzc2l6ZV90IGlub3RpZnlfcmVhZChzdHJ1
Y3QgZmlsZSAqZmlsZSwgX191c2VyIGNoYXIgKmJ1ZiwNCisJCQkgICAgc2l6ZV90IGNvdW50LCBs
b2ZmX3QgKnBvcykNCit7DQorCXNpemVfdCBvdXQ7DQorCXN0cnVjdCBpbm90aWZ5X2tlcm5lbF9l
dmVudCAqa2V2ZW50Ow0KKwlzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UgKmRldjsNCisJY2hhciAqb2J1
ZjsNCisJaW50IGVycjsNCisJREVDTEFSRV9XQUlUUVVFVUUod2FpdCwgY3VycmVudCk7DQorDQor
CW9idWYgPSBidWY7DQorCWRldiA9IGZpbGUtPnByaXZhdGVfZGF0YTsNCisNCisJLyogV2Ugb25s
eSBoYW5kIG91dCBmdWxsIGlub3RpZnkgZXZlbnRzICovDQorCWlmIChjb3VudCA8IHNpemVvZihz
dHJ1Y3QgaW5vdGlmeV9ldmVudCkpIHsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorDQorCXNw
aW5fbG9jaygmZGV2LT5sb2NrKTsNCisJYWRkX3dhaXRfcXVldWUoJmRldi0+d2FpdCwgJndhaXQp
Ow0KKwlkbyB7DQorCQlzZXRfY3VycmVudF9zdGF0ZShUQVNLX0lOVEVSUlVQVElCTEUpOw0KKw0K
KwkJaWYgKGlub3RpZnlfZGV2X2hhc19ldmVudHMoZGV2KSkNCisJCQlicmVhazsNCisNCisJCWlm
IChmaWxlLT5mX2ZsYWdzICYgT19OT05CTE9DSykgew0KKwkJCW91dCA9IC1FQUdBSU47DQorCQkJ
Z290byBvdXQ7DQorCQl9DQorDQorCQlpZiAoc2lnbmFsX3BlbmRpbmcoY3VycmVudCkpIHsNCisJ
CQlvdXQgPSAtRVJFU1RBUlRTWVM7DQorCQkJZ290byBvdXQ7DQorCQl9DQorCX0gd2hpbGUoMSk7
DQorDQorDQorCXJlbW92ZV93YWl0X3F1ZXVlKCZkZXYtPndhaXQsICZ3YWl0KTsNCisJc2V0X2N1
cnJlbnRfc3RhdGUoVEFTS19SVU5OSU5HKTsNCisJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQor
DQorDQorCXdoaWxlIChjb3VudCA+PSBzaXplb2Yoc3RydWN0IGlub3RpZnlfZXZlbnQpKSB7DQor
CQlzcGluX2xvY2soJmRldi0+bG9jayk7DQorCQlpZiAoIWlub3RpZnlfZGV2X2hhc19ldmVudHMo
ZGV2KSkgew0KKwkJCXNwaW5fdW5sb2NrKCZkZXYtPmxvY2spOw0KKwkJCWJyZWFrOw0KKwkJfQ0K
KwkJa2V2ZW50ID0gaW5vdGlmeV9kZXZfZ2V0X2V2ZW50KGRldik7DQorCQlzcGluX3VubG9jaygm
ZGV2LT5sb2NrKTsNCisJCWVyciA9IGNvcHlfdG9fdXNlciAoYnVmLCAma2V2ZW50LT5ldmVudCwg
c2l6ZW9mIChzdHJ1Y3QgaW5vdGlmeV9ldmVudCkpOw0KKwkJaWYgKGVycikgew0KKwkJCXJldHVy
biAtRUZBVUxUOw0KKwkJfQ0KKwkJc3Bpbl9sb2NrKCZkZXYtPmxvY2spOw0KKwkJaW5vdGlmeV9k
ZXZfZXZlbnRfZGVxdWV1ZShkZXYpOw0KKwkJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorCQlj
b3VudCAtPSBzaXplb2YgKHN0cnVjdCBpbm90aWZ5X2V2ZW50KTsNCisJCWJ1ZiArPSBzaXplb2Yg
KHN0cnVjdCBpbm90aWZ5X2V2ZW50KTsNCisJfQ0KKw0KKwlvdXQgPSBidWYgLSBvYnVmOw0KKwly
ZXR1cm4gb3V0Ow0KKw0KK291dDoNCisJcmVtb3ZlX3dhaXRfcXVldWUoJmRldi0+d2FpdCwgJndh
aXQpOw0KKwlzZXRfY3VycmVudF9zdGF0ZShUQVNLX1JVTk5JTkcpOw0KKwlzcGluX3VubG9jaygm
ZGV2LT5sb2NrKTsNCisJcmV0dXJuIG91dDsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X29w
ZW4oc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbGUpDQorew0KKwlzdHJ1Y3Qg
aW5vdGlmeV9kZXZpY2UgKmRldjsNCisNCisJaWYgKGF0b21pY19yZWFkKCZ3YXRjaGVyX2NvdW50
KSA9PSBNQVhfSU5PVElGWV9ERVZTKQ0KKwkJcmV0dXJuIC1FTk9ERVY7DQorDQorCWF0b21pY19p
bmMoJndhdGNoZXJfY291bnQpOw0KKw0KKwlkZXYgPSBrbWFsbG9jKHNpemVvZihzdHJ1Y3QgaW5v
dGlmeV9kZXZpY2UpLCBHRlBfS0VSTkVMKTsNCisJaWYgKCFkZXYpDQorCQlyZXR1cm4gLUVOT01F
TTsNCisNCisJYml0bWFwX3plcm8oZGV2LT5iaXRtYXNrLCBNQVhfSU5PVElGWV9ERVZfV0FUQ0hF
UlMpOw0KKw0KKwlJTklUX0xJU1RfSEVBRCgmZGV2LT5ldmVudHMpOw0KKwlJTklUX0xJU1RfSEVB
RCgmZGV2LT53YXRjaGVycyk7DQorCWluaXRfd2FpdHF1ZXVlX2hlYWQoJmRldi0+d2FpdCk7DQor
DQorCWRldi0+ZXZlbnRfY291bnQgPSAwOw0KKwlkZXYtPm5yX3dhdGNoZXMgPSAwOw0KKwlkZXYt
PmxvY2sgPSBTUElOX0xPQ0tfVU5MT0NLRUQ7DQorDQorCWZpbGUtPnByaXZhdGVfZGF0YSA9IGRl
djsNCisNCisJcHJpbnRrKEtFUk5fQUxFUlQgImlub3RpZnkgZGV2aWNlIG9wZW5lZFxuIik7DQor
DQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgdm9pZCBpbm90aWZ5X3JlbGVhc2VfYWxsX3dh
dGNoZXJzKHN0cnVjdCBpbm90aWZ5X2RldmljZSAqZGV2KQ0KK3sNCisJc3RydWN0IGlub3RpZnlf
d2F0Y2hlciAqd2F0Y2hlciwqbmV4dDsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeV9zYWZlKHdh
dGNoZXIsIG5leHQsICZkZXYtPndhdGNoZXJzLCBkX2xpc3QpDQorCQlpZ25vcmVfaGVscGVyKHdh
dGNoZXIsIDApOw0KK30NCisNCisvKg0KKyAqIGlub3RpZnlfcmVsZWFzZV9hbGxfZXZlbnRzIC0g
ZGVzdHJveSBhbGwgb2YgdGhlIGV2ZW50cyBvbiBhIGdpdmVuIGRldmljZQ0KKyAqLw0KK3N0YXRp
YyB2b2lkIGlub3RpZnlfcmVsZWFzZV9hbGxfZXZlbnRzKHN0cnVjdCBpbm90aWZ5X2RldmljZSAq
ZGV2KQ0KK3sNCisJc3Bpbl9sb2NrKCZkZXYtPmxvY2spOw0KKwl3aGlsZSAoaW5vdGlmeV9kZXZf
aGFzX2V2ZW50cyhkZXYpKQ0KKwkJaW5vdGlmeV9kZXZfZXZlbnRfZGVxdWV1ZShkZXYpOw0KKwlz
cGluX3VubG9jaygmZGV2LT5sb2NrKTsNCit9DQorDQorDQorc3RhdGljIGludCBpbm90aWZ5X3Jl
bGVhc2Uoc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbGUpDQorew0KKwlzdHJ1
Y3QgaW5vdGlmeV9kZXZpY2UgKmRldjsNCisNCisJZGV2ID0gZmlsZS0+cHJpdmF0ZV9kYXRhOw0K
Kwlpbm90aWZ5X3JlbGVhc2VfYWxsX3dhdGNoZXJzKGRldik7DQorCWlub3RpZnlfcmVsZWFzZV9h
bGxfZXZlbnRzKGRldik7DQorCWtmcmVlKGRldik7DQorDQorCXByaW50ayhLRVJOX0FMRVJUICJp
bm90aWZ5IGRldmljZSByZWxlYXNlZFxuIik7DQorDQorCWF0b21pY19kZWMoJndhdGNoZXJfY291
bnQpOw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X3dhdGNoKHN0cnVj
dCBpbm90aWZ5X2RldmljZSAqZGV2LA0KKwkJCSBzdHJ1Y3QgaW5vdGlmeV93YXRjaF9yZXF1ZXN0
ICpyZXF1ZXN0KQ0KK3sNCisJaW50IGVycjsNCisJc3RydWN0IGlub2RlICppbm9kZTsNCisJc3Ry
dWN0IGlub3RpZnlfd2F0Y2hlciAqd2F0Y2hlcjsNCisJZXJyID0gMDsNCisNCisJaW5vZGUgPSBm
aW5kX2lub2RlKHJlcXVlc3QtPmRpcm5hbWUpOw0KKwlpZiAoSVNfRVJSKGlub2RlKSkgew0KKwkJ
ZXJyID0gUFRSX0VSUihpbm9kZSk7DQorCQlnb3RvIGV4aXQ7DQorCX0NCisNCisJaWYgKCFTX0lT
RElSKGlub2RlLT5pX21vZGUpKQ0KKwkJaXByaW50ayhJTk9USUZZX0RFQlVHX0VSUk9SUywgIndh
dGNoaW5nIGZpbGVcbiIpOw0KKw0KKwlzcGluX2xvY2soJmRldi0+bG9jayk7DQorCXNwaW5fbG9j
aygmaW5vZGUtPmlfbG9jayk7DQorDQorCS8qDQorCSAqIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSBv
ZiByZS1hZGRpbmcgYSBkaXJlY3Rvcnkgd2UgYXJlIGFscmVhZHkNCisJICogd2F0Y2hpbmcsIHdl
IGp1c3QgdXBkYXRlIHRoZSBtYXNrIGFuZCByZXR1cm4gMA0KKwkgKi8NCisJaWYgKGlub3RpZnlf
ZGV2X2lzX3dhdGNoaW5nX2lub2RlKGRldiwgaW5vZGUpKSB7DQorCQlzdHJ1Y3QgaW5vdGlmeV93
YXRjaGVyICpvd2F0Y2hlcjsJLyogdGhlIG9sZCB3YXRjaGVyICovDQorDQorCQlpcHJpbnRrKElO
T1RJRllfREVCVUdfRVJST1JTLA0KKwkJCQkiYWRqdXN0aW5nIGV2ZW50IG1hc2sgZm9yIGlub2Rl
ICVwXG4iLCBpbm9kZSk7DQorDQorCQlvd2F0Y2hlciA9IGlub2RlX2ZpbmRfZGV2KGlub2RlLCBk
ZXYpOw0KKwkJb3dhdGNoZXItPm1hc2sgPSByZXF1ZXN0LT5tYXNrOw0KKwkJaW5vZGVfdXBkYXRl
X3dhdGNoZXJzX21hc2soaW5vZGUpOw0KKwkJc3Bpbl91bmxvY2soJmlub2RlLT5pX2xvY2spOw0K
KwkJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorCQl1bnJlZl9pbm9kZShpbm9kZSk7DQorDQor
CQlyZXR1cm4gMDsNCisJfQ0KKw0KKwlzcGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorCXNw
aW5fdW5sb2NrKCZkZXYtPmxvY2spOw0KKw0KKwl3YXRjaGVyID0gY3JlYXRlX3dhdGNoZXIoZGV2
LCByZXF1ZXN0LT5tYXNrLCBpbm9kZSk7DQorCWlmICghd2F0Y2hlcikgew0KKwkJdW5yZWZfaW5v
ZGUoaW5vZGUpOw0KKwkJcmV0dXJuIC1FTk9TUEM7DQorCX0NCisNCisJc3Bpbl9sb2NrKCZkZXYt
PmxvY2spOw0KKwlzcGluX2xvY2soJmlub2RlLT5pX2xvY2spOw0KKw0KKwkvKiBXZSBjYW4ndCBh
ZGQgYW55bW9yZSB3YXRjaGVycyB0byB0aGlzIGRldmljZSAqLw0KKwlpZiAoaW5vdGlmeV9kZXZf
YWRkX3dhdGNoZXIoZGV2LCB3YXRjaGVyKSA9PSAtRU5PU1BDKSB7DQorCQlpcHJpbnRrKElOT1RJ
RllfREVCVUdfRVJST1JTLA0KKwkJCSJjYW4ndCBhZGQgd2F0Y2hlciBkZXYgaXMgZnVsbFxuIik7
DQorCQlzcGluX3VubG9jaygmaW5vZGUtPmlfbG9jayk7DQorCQlkZWxldGVfd2F0Y2hlcihkZXYs
IHdhdGNoZXIpOw0KKwkJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorDQorCQl1bnJlZl9pbm9k
ZShpbm9kZSk7DQorCQlyZXR1cm4gLUVOT1NQQzsNCisJfQ0KKw0KKwlpbm9kZV9hZGRfd2F0Y2hl
cihpbm9kZSwgd2F0Y2hlcik7DQorDQorCS8qIHdlIGtlZXAgYSByZWZlcmVuY2Ugb24gdGhlIGlu
b2RlICovDQorCWlmICghZXJyKQ0KKwkJZXJyID0gd2F0Y2hlci0+d2Q7DQorDQorCXNwaW5fdW5s
b2NrKCZpbm9kZS0+aV9sb2NrKTsNCisJc3Bpbl91bmxvY2soJmRldi0+bG9jayk7DQorZXhpdDoN
CisJcmV0dXJuIGVycjsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X2lnbm9yZShzdHJ1Y3Qg
aW5vdGlmeV9kZXZpY2UgKmRldiwgaW50IHdkKQ0KK3sNCisJc3RydWN0IGlub3RpZnlfd2F0Y2hl
ciAqd2F0Y2hlcjsNCisNCisJd2F0Y2hlciA9IGRldl9maW5kX3dkKGRldiwgd2QpOw0KKwlpZiAo
IXdhdGNoZXIpDQorCQlyZXR1cm4gLUVJTlZBTDsNCisJaWdub3JlX2hlbHBlcih3YXRjaGVyLCAw
KTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIGlub3RpZnlfcHJpbnRfc3Rh
dHMoc3RydWN0IGlub3RpZnlfZGV2aWNlICpkZXYpDQorew0KKwlpbnQgc2l6ZW9mX2lub3RpZnlf
d2F0Y2hlcjsNCisJaW50IHNpemVvZl9pbm90aWZ5X2RldmljZTsNCisJaW50IHNpemVvZl9pbm90
aWZ5X2tlcm5lbF9ldmVudDsNCisNCisJc2l6ZW9mX2lub3RpZnlfd2F0Y2hlciA9IHNpemVvZiAo
c3RydWN0IGlub3RpZnlfd2F0Y2hlcik7DQorCXNpemVvZl9pbm90aWZ5X2RldmljZSA9IHNpemVv
ZiAoc3RydWN0IGlub3RpZnlfZGV2aWNlKTsNCisJc2l6ZW9mX2lub3RpZnlfa2VybmVsX2V2ZW50
ID0gc2l6ZW9mIChzdHJ1Y3QgaW5vdGlmeV9rZXJuZWxfZXZlbnQpOw0KKw0KKwlwcmludGsoS0VS
Tl9BTEVSVCAiR0xPQkFMIElOT1RJRlkgU1RBVFNcbiIpOw0KKwlwcmludGsoS0VSTl9BTEVSVCAi
d2F0Y2hlcl9jb3VudCA9ICVkXG4iLCBhdG9taWNfcmVhZCgmd2F0Y2hlcl9jb3VudCkpOw0KKw0K
KwlwcmludGsoS0VSTl9BTEVSVCAic2l6ZW9mKHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIpID0gJWRc
biIsDQorCQlzaXplb2ZfaW5vdGlmeV93YXRjaGVyKTsNCisJcHJpbnRrKEtFUk5fQUxFUlQgInNp
emVvZihzdHJ1Y3QgaW5vdGlmeV9kZXZpY2UpID0gJWRcbiIsDQorCQlzaXplb2ZfaW5vdGlmeV9k
ZXZpY2UpOw0KKwlwcmludGsoS0VSTl9BTEVSVCAic2l6ZW9mKHN0cnVjdCBpbm90aWZ5X2tlcm5l
bF9ldmVudCkgPSAlZFxuIiwNCisJCXNpemVvZl9pbm90aWZ5X2tlcm5lbF9ldmVudCk7DQorDQor
CXNwaW5fbG9jaygmZGV2LT5sb2NrKTsNCisNCisJcHJpbnRrKEtFUk5fQUxFUlQgImlub3RpZnkg
ZGV2aWNlOiAlcFxuIiwgZGV2KTsNCisJcHJpbnRrKEtFUk5fQUxFUlQgImlub3RpZnkgZXZlbnRf
Y291bnQ6ICV1XG4iLCBkZXYtPmV2ZW50X2NvdW50KTsNCisJcHJpbnRrKEtFUk5fQUxFUlQgImlu
b3RpZnkgd2F0Y2hfY291bnQ6ICVkXG4iLCBkZXYtPm5yX3dhdGNoZXMpOw0KKw0KKwlzcGluX3Vu
bG9jaygmZGV2LT5sb2NrKTsNCit9DQorDQorc3RhdGljIGludCBpbm90aWZ5X2lvY3RsKHN0cnVj
dCBpbm9kZSAqaXAsIHN0cnVjdCBmaWxlICpmcCwNCisJCQkgdW5zaWduZWQgaW50IGNtZCwgdW5z
aWduZWQgbG9uZyBhcmcpDQorew0KKwlpbnQgZXJyOw0KKwlzdHJ1Y3QgaW5vdGlmeV9kZXZpY2Ug
KmRldjsNCisJc3RydWN0IGlub3RpZnlfd2F0Y2hfcmVxdWVzdCByZXF1ZXN0Ow0KKwlpbnQgd2Q7
DQorDQorCWRldiA9IGZwLT5wcml2YXRlX2RhdGE7DQorCWVyciA9IDA7DQorDQorCWlmIChfSU9D
X1RZUEUoY21kKSAhPSBJTk9USUZZX0lPQ1RMX01BR0lDKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQor
CWlmIChfSU9DX05SKGNtZCkgPiBJTk9USUZZX0lPQ1RMX01BWE5SKQ0KKwkJcmV0dXJuIC1FSU5W
QUw7DQorDQorCWlmIChfSU9DX0RJUihjbWQpICYgX0lPQ19SRUFEKQ0KKwkJZXJyID0gIWFjY2Vz
c19vayhWRVJJRllfUkVBRCwgKHZvaWQgKikgYXJnLCBfSU9DX1NJWkUoY21kKSk7DQorDQorCWlm
IChlcnIpIHsNCisJCWVyciA9IC1FRkFVTFQ7DQorCQlnb3RvIG91dDsNCisJfQ0KKw0KKwlpZiAo
X0lPQ19ESVIoY21kKSAmIF9JT0NfV1JJVEUpDQorCQllcnIgPSAhYWNjZXNzX29rKFZFUklGWV9X
UklURSwgKHZvaWQgKilhcmcsIF9JT0NfU0laRShjbWQpKTsNCisNCisJaWYgKGVycikgew0KKwkJ
ZXJyID0gLUVGQVVMVDsNCisJCWdvdG8gb3V0Ow0KKwl9DQorDQorCWVyciA9IC1FSU5WQUw7DQor
DQorCXN3aXRjaCAoY21kKSB7DQorCWNhc2UgSU5PVElGWV9XQVRDSDoNCisJCWlwcmludGsoSU5P
VElGWV9ERUJVR19FUlJPUlMsICJJTk9USUZZX1dBVENIIGlvY3RsXG4iKTsNCisJCWlmIChjb3B5
X2Zyb21fdXNlcigmcmVxdWVzdCwgKHZvaWQgKikgYXJnLA0KKwkJCQlzaXplb2Yoc3RydWN0IGlu
b3RpZnlfd2F0Y2hfcmVxdWVzdCkpKSB7DQorCQkJZXJyID0gLUVGQVVMVDsNCisJCQlnb3RvIG91
dDsNCisJCX0NCisJCWVyciA9IGlub3RpZnlfd2F0Y2goZGV2LCAmcmVxdWVzdCk7DQorCQlicmVh
azsNCisJY2FzZSBJTk9USUZZX0lHTk9SRToNCisJCWlwcmludGsoSU5PVElGWV9ERUJVR19FUlJP
UlMsICJJTk9USUZZX0lHTk9SRSBpb2N0bFxuIik7DQorCQlpZiAoY29weV9mcm9tX3VzZXIoJndk
LCAodm9pZCAqKWFyZywgc2l6ZW9mIChpbnQpKSkgew0KKwkJCWVyciA9IC1FRkFVTFQ7DQorCQkJ
Z290byBvdXQ7DQorCQl9DQorCQllcnIgPSBpbm90aWZ5X2lnbm9yZShkZXYsIHdkKTsNCisJCWJy
ZWFrOw0KKwljYXNlIElOT1RJRllfU1RBVFM6DQorCQlpcHJpbnRrKElOT1RJRllfREVCVUdfRVJS
T1JTLCAiSU5PVElGWV9TVEFUUyBpb2N0bFxuIik7DQorCQlpbm90aWZ5X3ByaW50X3N0YXRzKGRl
dik7DQorCQllcnIgPSAwOw0KKwkJYnJlYWs7DQorCWNhc2UgSU5PVElGWV9TRVRERUJVRzoNCisJ
CWlwcmludGsoSU5PVElGWV9ERUJVR19FUlJPUlMsDQorCQkJIklOT1RJRllfU0VUREVCVUcgaW9j
dGxcbiIpOw0KKwkJaWYgKGNvcHlfZnJvbV91c2VyKCZpbm90aWZ5X2RlYnVnX2ZsYWdzLCAodm9p
ZCAqKSBhcmcsDQorCQkJCXNpemVvZiAoaW50KSkpIHsNCisJCQllcnIgPSAtRUZBVUxUOw0KKwkJ
CWdvdG8gb3V0Ow0KKwkJfQ0KKwkJYnJlYWs7DQorCX0NCisNCitvdXQ6DQorCXJldHVybiBlcnI7
DQorfQ0KKw0KK3N0YXRpYyBzdHJ1Y3QgZmlsZV9vcGVyYXRpb25zIGlub3RpZnlfZm9wcyA9IHsN
CisJLm93bmVyCQk9IFRISVNfTU9EVUxFLA0KKwkucG9sbAkJPSBpbm90aWZ5X3BvbGwsDQorCS5y
ZWFkCQk9IGlub3RpZnlfcmVhZCwNCisJLm9wZW4JCT0gaW5vdGlmeV9vcGVuLA0KKwkucmVsZWFz
ZQk9IGlub3RpZnlfcmVsZWFzZSwNCisJLmlvY3RsCQk9IGlub3RpZnlfaW9jdGwsDQorfTsNCisN
CitzdHJ1Y3QgbWlzY2RldmljZSBpbm90aWZ5X2RldmljZSA9IHsNCisJLm1pbm9yICA9IE1JU0Nf
RFlOQU1JQ19NSU5PUiwNCisJLm5hbWUJPSAiaW5vdGlmeSIsDQorCS5mb3BzCT0gJmlub3RpZnlf
Zm9wcywNCit9Ow0KKw0KK3N0YXRpYyBpbnQgX19pbml0IGlub3RpZnlfaW5pdCh2b2lkKQ0KK3sN
CisJaW50IHJldDsNCisNCisJcmV0ID0gbWlzY19yZWdpc3RlcigmaW5vdGlmeV9kZXZpY2UpOw0K
KwlpZiAocmV0KQ0KKwkJZ290byBvdXQ7DQorDQorCWlub3RpZnlfZGVidWdfZmxhZ3MgPSBJTk9U
SUZZX0RFQlVHX05PTkU7DQorDQorCXdhdGNoZXJfY2FjaGUgPSBrbWVtX2NhY2hlX2NyZWF0ZSgi
d2F0Y2hlcl9jYWNoZSIsDQorCQkJc2l6ZW9mKHN0cnVjdCBpbm90aWZ5X3dhdGNoZXIpLCAwLCBT
TEFCX1BBTklDLA0KKwkJCU5VTEwsIE5VTEwpOw0KKw0KKwlrZXZlbnRfY2FjaGUgPSBrbWVtX2Nh
Y2hlX2NyZWF0ZSgia2V2ZW50X2NhY2hlIiwNCisJCQlzaXplb2Yoc3RydWN0IGlub3RpZnlfa2Vy
bmVsX2V2ZW50KSwgMCwNCisJCQlTTEFCX1BBTklDLCBOVUxMLCBOVUxMKTsNCisNCisJcHJpbnRr
KEtFUk5fSU5GTyAiaW5vdGlmeSBpbml0OiBtaW5vcj0lZFxuIiwgaW5vdGlmeV9kZXZpY2UubWlu
b3IpOw0KK291dDoNCisJcmV0dXJuIHJldDsNCit9DQorDQorbW9kdWxlX2luaXQoaW5vdGlmeV9p
bml0KTsNCi0tLSBjbGVhbi9saW51eC9pbmNsdWRlL2xpbnV4L2lub3RpZnkuaAkxOTY5LTEyLTMx
IDE5OjAwOjAwLjAwMDAwMDAwMCAtMDUwMA0KKysrIGxpbnV4L2luY2x1ZGUvbGludXgvaW5vdGlm
eS5oCTIwMDQtMDktMjggMTY6NDQ6MzQuMDAwMDAwMDAwIC0wNDAwDQpAQCAtMCwwICsxLDExOCBA
QA0KKy8qDQorICogSW5vZGUgYmFzZWQgZGlyZWN0b3J5IG5vdGlmaWNhdGlvbiBmb3IgTGludXgN
CisgKg0KKyAqIENvcHlyaWdodCAoQykgMjAwNCBKb2huIE1jQ3V0Y2hhbg0KKyAqLw0KKw0KKyNp
Zm5kZWYgX0xJTlVYX0lOT1RJRllfSA0KKyNkZWZpbmUgX0xJTlVYX0lOT1RJRllfSA0KKw0KKyNp
bmNsdWRlIDxsaW51eC9saW1pdHMuaD4NCisNCisvKiB0aGlzIHNpemUgY291bGQgbGltaXQgdGhp
bmdzLCBzaW5jZSB0ZWNobmljYWxseSB3ZSBjb3VsZCBuZWVkIFBBVEhfTUFYICovDQorI2RlZmlu
ZSBJTk9USUZZX0ZJTEVOQU1FX01BWAkyNTYNCisNCisvKg0KKyAqIHN0cnVjdCBpbm90aWZ5X2V2
ZW50IC0gc3RydWN0dXJlIHJlYWQgZnJvbSB0aGUgaW5vdGlmeSBkZXZpY2UgZm9yIGVhY2ggZXZl
bnQNCisgKg0KKyAqIFdoZW4geW91IGFyZSB3YXRjaGluZyBhIGRpcmVjdG9yeSwgeW91IHdpbGwg
cmVjZWl2ZSB0aGUgZmlsZW5hbWUgZm9yIGV2ZW50cw0KKyAqIHN1Y2ggYXMgSU5fQ1JFQVRFLCBJ
Tl9ERUxFVEUsIElOX09QRU4sIElOX0NMT1NFLCAuLi4NCisgKg0KKyAqIE5vdGU6IFdoZW4gcmVh
ZGluZyBmcm9tIHRoZSBkZXZpY2UgeW91IG11c3QgcHJvdmlkZSBhIGJ1ZmZlciB0aGF0IGlzIGEN
CisgKiBtdWx0aXBsZSBvZiBzaXplb2Yoc3RydWN0IGlub3RpZnlfZXZlbnQpDQorICovDQorc3Ry
dWN0IGlub3RpZnlfZXZlbnQgew0KKwlpbnQgd2Q7DQorCWludCBtYXNrOw0KKwlpbnQgY29va2ll
Ow0KKwljaGFyIGZpbGVuYW1lW0lOT1RJRllfRklMRU5BTUVfTUFYXTsNCit9Ow0KKw0KKy8qIHRo
ZSBmb2xsb3dpbmcgYXJlIGxlZ2FsLCBpbXBsZW1lbnRlZCBldmVudHMgKi8NCisjZGVmaW5lIElO
X0FDQ0VTUwkJMHgwMDAwMDAwMQkvKiBGaWxlIHdhcyBhY2Nlc3NlZCAqLw0KKyNkZWZpbmUgSU5f
TU9ESUZZCQkweDAwMDAwMDAyCS8qIEZpbGUgd2FzIG1vZGlmaWVkICovDQorI2RlZmluZSBJTl9B
VFRSSUIJCTB4MDAwMDAwMDQJLyogRmlsZSBjaGFuZ2VkIGF0dHJpYnV0ZXMgKi8NCisjZGVmaW5l
IElOX0NMT1NFCQkweDAwMDAwMDA4CS8qIEZpbGUgd2FzIGNsb3NlZCAqLw0KKyNkZWZpbmUgSU5f
T1BFTgkJCTB4MDAwMDAwMTAJLyogRmlsZSB3YXMgb3BlbmVkICovDQorI2RlZmluZSBJTl9NT1ZF
RF9GUk9NCQkweDAwMDAwMDIwCS8qIEZpbGUgd2FzIG1vdmVkIGZyb20gWCAqLw0KKyNkZWZpbmUg
SU5fTU9WRURfVE8JCTB4MDAwMDAwNDAJLyogRmlsZSB3YXMgbW92ZWQgdG8gWSAqLw0KKyNkZWZp
bmUgSU5fREVMRVRFX1NVQkRJUgkweDAwMDAwMDgwCS8qIFN1YmRpciB3YXMgZGVsZXRlZCAqLyAN
CisjZGVmaW5lIElOX0RFTEVURV9GSUxFCQkweDAwMDAwMTAwCS8qIFN1YmZpbGUgd2FzIGRlbGV0
ZWQgKi8NCisjZGVmaW5lIElOX0NSRUFURV9TVUJESVIJMHgwMDAwMDIwMAkvKiBTdWJkaXIgd2Fz
IGNyZWF0ZWQgKi8NCisjZGVmaW5lIElOX0NSRUFURV9GSUxFCQkweDAwMDAwNDAwCS8qIFN1YmZp
bGUgd2FzIGNyZWF0ZWQgKi8NCisjZGVmaW5lIElOX0RFTEVURV9TRUxGCQkweDAwMDAwODAwCS8q
IFNlbGYgd2FzIGRlbGV0ZWQgKi8NCisjZGVmaW5lIElOX1VOTU9VTlQJCTB4MDAwMDEwMDAJLyog
QmFja2luZyBmcyB3YXMgdW5tb3VudGVkICovDQorI2RlZmluZSBJTl9RX09WRVJGTE9XCQkweDAw
MDAyMDAwCS8qIEV2ZW50IHF1ZXVlZCBvdmVyZmxvd2VkICovDQorI2RlZmluZSBJTl9JR05PUkVE
CQkweDAwMDA0MDAwCS8qIEZpbGUgd2FzIGlnbm9yZWQgKi8NCisNCisvKiBzcGVjaWFsIGZsYWdz
ICovDQorI2RlZmluZSBJTl9BTExfRVZFTlRTCQkweGZmZmZmZmZmCS8qIEFsbCB0aGUgZXZlbnRz
ICovDQorDQorLyoNCisgKiBzdHJ1Y3QgaW5vdGlmeV93YXRjaF9yZXF1ZXN0IC0gcmVwcmVzZW50
cyBhIHdhdGNoIHJlcXVlc3QNCisgKg0KKyAqIFBhc3MgdG8gdGhlIGlub3RpZnkgZGV2aWNlIHZp
YSB0aGUgSU5PVElGWV9XQVRDSCBpb2N0bA0KKyAqLw0KK3N0cnVjdCBpbm90aWZ5X3dhdGNoX3Jl
cXVlc3Qgew0KKwljaGFyICpkaXJuYW1lOwkJLyogZGlyZWN0b3J5IG5hbWUgKi8NCisJdW5zaWdu
ZWQgbG9uZyBtYXNrOwkvKiBldmVudCBtYXNrICovDQorfTsNCisNCisjZGVmaW5lIElOT1RJRllf
SU9DVExfTUFHSUMJJ1EnDQorI2RlZmluZSBJTk9USUZZX0lPQ1RMX01BWE5SCTQNCisNCisjZGVm
aW5lIElOT1RJRllfV0FUQ0ggIAkJX0lPUihJTk9USUZZX0lPQ1RMX01BR0lDLCAxLCBzdHJ1Y3Qg
aW5vdGlmeV93YXRjaF9yZXF1ZXN0KQ0KKyNkZWZpbmUgSU5PVElGWV9JR05PUkUgCQlfSU9SKElO
T1RJRllfSU9DVExfTUFHSUMsIDIsIGludCkNCisjZGVmaW5lIElOT1RJRllfU1RBVFMJCV9JT1Io
SU5PVElGWV9JT0NUTF9NQUdJQywgMywgaW50KQ0KKyNkZWZpbmUgSU5PVElGWV9TRVRERUJVRwlf
SU9SKElOT1RJRllfSU9DVExfTUFHSUMsIDQsIGludCkNCisNCisjZGVmaW5lIElOT1RJRllfREVC
VUdfTk9ORQkweDAwMDAwMDAwDQorI2RlZmluZSBJTk9USUZZX0RFQlVHX0FMTE9DCTB4MDAwMDAw
MDENCisjZGVmaW5lIElOT1RJRllfREVCVUdfRVZFTlRTCTB4MDAwMDAwMDINCisjZGVmaW5lIElO
T1RJRllfREVCVUdfSU5PREUJMHgwMDAwMDAwNA0KKyNkZWZpbmUgSU5PVElGWV9ERUJVR19FUlJP
UlMJMHgwMDAwMDAwOA0KKyNkZWZpbmUgSU5PVElGWV9ERUJVR19GSUxFTgkweDAwMDAwMDEwDQor
I2RlZmluZSBJTk9USUZZX0RFQlVHX0FMTAkweGZmZmZmZmZmDQorDQorI2lmZGVmIF9fS0VSTkVM
X18NCisNCisjaW5jbHVkZSA8bGludXgvZGNhY2hlLmg+DQorI2luY2x1ZGUgPGxpbnV4L2ZzLmg+
DQorI2luY2x1ZGUgPGxpbnV4L2NvbmZpZy5oPg0KKw0KKyNpZmRlZiBDT05GSUdfSU5PVElGWQ0K
Kw0KK2V4dGVybiB2b2lkIGlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoc3RydWN0IGlub2RlICos
IHVuc2lnbmVkIGxvbmcsDQorCQljb25zdCBjaGFyICopOw0KK2V4dGVybiB2b2lkIGlub3RpZnlf
ZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudChzdHJ1Y3QgZGVudHJ5ICosIHVuc2lnbmVkIGxvbmcs
DQorCQljb25zdCBjaGFyICopOw0KK2V4dGVybiB2b2lkIGlub3RpZnlfc3VwZXJfYmxvY2tfdW1v
dW50KHN0cnVjdCBzdXBlcl9ibG9jayAqKTsNCitleHRlcm4gdm9pZCBpbm90aWZ5X2lub2RlX2lz
X2RlYWQoc3RydWN0IGlub2RlICopOw0KKw0KKyNlbHNlDQorDQorc3RhdGljIGlubGluZSB2b2lk
IGlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoc3RydWN0IGlub2RlICppbm9kZSwNCisJCQkJCSAg
ICAgdW5zaWduZWQgbG9uZyBtYXNrLA0KKwkJCQkJICAgICBjb25zdCBjaGFyICpmaWxlbmFtZSkN
Cit7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBpbm90aWZ5X2RlbnRyeV9wYXJlbnRfcXVl
dWVfZXZlbnQoc3RydWN0IGRlbnRyeSAqZGVudHJ5LA0KKwkJCQkJCSAgICAgdW5zaWduZWQgbG9u
ZyBtYXNrLA0KKwkJCQkJCSAgICAgY29uc3QgY2hhciAqZmlsZW5hbWUpDQorew0KK30NCisNCitz
dGF0aWMgaW5saW5lIHZvaWQgaW5vdGlmeV9zdXBlcl9ibG9ja191bW91bnQoc3RydWN0IHN1cGVy
X2Jsb2NrICpzYikNCit7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBpbm90aWZ5X2lub2Rl
X2lzX2RlYWQoc3RydWN0IGlub2RlICppbm9kZSkNCit7DQorfQ0KKw0KKyNlbmRpZgkvKiBDT05G
SUdfSU5PVElGWSAqLw0KKw0KKyNlbmRpZgkvKiBfX0tFUk5FTCBfXyAqLw0KKw0KKyNlbmRpZgkv
KiBfTElOVVhfSU5PVElGWV9IICovDQotLS0gY2xlYW4vbGludXgvaW5jbHVkZS9saW51eC9mcy5o
CTIwMDQtMDgtMTQgMDY6NTU6MDkuMDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgvaW5jbHVkZS9s
aW51eC9mcy5oCTIwMDQtMDktMjggMTY6NDQ6MzQuMDAwMDAwMDAwIC0wNDAwDQpAQCAtNDU4LDYg
KzQ1OCwxMiBAQA0KIAl1bnNpZ25lZCBsb25nCQlpX2Rub3RpZnlfbWFzazsgLyogRGlyZWN0b3J5
IG5vdGlmeSBldmVudHMgKi8NCiAJc3RydWN0IGRub3RpZnlfc3RydWN0CSppX2Rub3RpZnk7IC8q
IGZvciBkaXJlY3Rvcnkgbm90aWZpY2F0aW9ucyAqLw0KIA0KKyNpZmRlZiBDT05GSUdfSU5PVElG
WQ0KKwlzdHJ1Y3QgbGlzdF9oZWFkCXdhdGNoZXJzOw0KKwl1bnNpZ25lZCBsb25nCQl3YXRjaGVy
c19tYXNrOw0KKwlpbnQJCQl3YXRjaGVyX2NvdW50Ow0KKyNlbmRpZg0KKw0KIAl1bnNpZ25lZCBs
b25nCQlpX3N0YXRlOw0KIAl1bnNpZ25lZCBsb25nCQlkaXJ0aWVkX3doZW47CS8qIGppZmZpZXMg
b2YgZmlyc3QgZGlydHlpbmcgKi8NCiANCi0tLSBjbGVhbi9saW51eC9mcy9zdXBlci5jCTIwMDQt
MDgtMTQgMDY6NTU6MjIuMDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgvZnMvc3VwZXIuYwkyMDA0
LTA5LTE4IDAyOjI0OjMzLjAwMDAwMDAwMCAtMDQwMA0KQEAgLTM2LDYgKzM2LDcgQEANCiAjaW5j
bHVkZSA8bGludXgvd3JpdGViYWNrLmg+CQkvKiBmb3IgdGhlIGVtZXJnZW5jeSByZW1vdW50IHN0
dWZmICovDQogI2luY2x1ZGUgPGxpbnV4L2lkci5oPg0KICNpbmNsdWRlIDxhc20vdWFjY2Vzcy5o
Pg0KKyNpbmNsdWRlIDxsaW51eC9pbm90aWZ5Lmg+DQogDQogDQogdm9pZCBnZXRfZmlsZXN5c3Rl
bShzdHJ1Y3QgZmlsZV9zeXN0ZW1fdHlwZSAqZnMpOw0KQEAgLTIwNCw2ICsyMDUsNyBAQA0KIA0K
IAlpZiAocm9vdCkgew0KIAkJc2ItPnNfcm9vdCA9IE5VTEw7DQorCQlpbm90aWZ5X3N1cGVyX2Js
b2NrX3Vtb3VudCAoc2IpOw0KIAkJc2hyaW5rX2RjYWNoZV9wYXJlbnQocm9vdCk7DQogCQlzaHJp
bmtfZGNhY2hlX2Fub24oJnNiLT5zX2Fub24pOw0KIAkJZHB1dChyb290KTsNCi0tLSBjbGVhbi9s
aW51eC9mcy9yZWFkX3dyaXRlLmMJMjAwNC0wOC0xNCAwNjo1NTozNS4wMDAwMDAwMDAgLTA0MDAN
CisrKyBsaW51eC9mcy9yZWFkX3dyaXRlLmMJMjAwNC0wOC0xOSAwMDoxMTo1Mi4wMDAwMDAwMDAg
LTA0MDANCkBAIC0xMSw2ICsxMSw3IEBADQogI2luY2x1ZGUgPGxpbnV4L3Vpby5oPg0KICNpbmNs
dWRlIDxsaW51eC9zbXBfbG9jay5oPg0KICNpbmNsdWRlIDxsaW51eC9kbm90aWZ5Lmg+DQorI2lu
Y2x1ZGUgPGxpbnV4L2lub3RpZnkuaD4NCiAjaW5jbHVkZSA8bGludXgvc2VjdXJpdHkuaD4NCiAj
aW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQogDQpAQCAtMjE2LDggKzIxNywxMSBAQA0KIAkJCQly
ZXQgPSBmaWxlLT5mX29wLT5yZWFkKGZpbGUsIGJ1ZiwgY291bnQsIHBvcyk7DQogCQkJZWxzZQ0K
IAkJCQlyZXQgPSBkb19zeW5jX3JlYWQoZmlsZSwgYnVmLCBjb3VudCwgcG9zKTsNCi0JCQlpZiAo
cmV0ID4gMCkNCisJCQlpZiAocmV0ID4gMCkgew0KIAkJCQlkbm90aWZ5X3BhcmVudChmaWxlLT5m
X2RlbnRyeSwgRE5fQUNDRVNTKTsNCisJCQkJaW5vdGlmeV9kZW50cnlfcGFyZW50X3F1ZXVlX2V2
ZW50KGZpbGUtPmZfZGVudHJ5LCBJTl9BQ0NFU1MsIGZpbGUtPmZfZGVudHJ5LT5kX25hbWUubmFt
ZSk7DQorCQkJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQgKGZpbGUtPmZfZGVudHJ5LT5kX2lu
b2RlLCBJTl9BQ0NFU1MsIE5VTEwpOw0KKwkJCX0NCiAJCX0NCiAJfQ0KIA0KQEAgLTI2MCw4ICsy
NjQsMTEgQEANCiAJCQkJcmV0ID0gZmlsZS0+Zl9vcC0+d3JpdGUoZmlsZSwgYnVmLCBjb3VudCwg
cG9zKTsNCiAJCQllbHNlDQogCQkJCXJldCA9IGRvX3N5bmNfd3JpdGUoZmlsZSwgYnVmLCBjb3Vu
dCwgcG9zKTsNCi0JCQlpZiAocmV0ID4gMCkNCisJCQlpZiAocmV0ID4gMCkgew0KIAkJCQlkbm90
aWZ5X3BhcmVudChmaWxlLT5mX2RlbnRyeSwgRE5fTU9ESUZZKTsNCisJCQkJaW5vdGlmeV9kZW50
cnlfcGFyZW50X3F1ZXVlX2V2ZW50KGZpbGUtPmZfZGVudHJ5LCBJTl9NT0RJRlksIGZpbGUtPmZf
ZGVudHJ5LT5kX25hbWUubmFtZSk7DQorCQkJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQgKGZp
bGUtPmZfZGVudHJ5LT5kX2lub2RlLCBJTl9NT0RJRlksIE5VTEwpOw0KKwkJCX0NCiAJCX0NCiAJ
fQ0KIA0KQEAgLTQ5Myw5ICs1MDAsMTMgQEANCiBvdXQ6DQogCWlmIChpb3YgIT0gaW92c3RhY2sp
DQogCQlrZnJlZShpb3YpOw0KLQlpZiAoKHJldCArICh0eXBlID09IFJFQUQpKSA+IDApDQorCWlm
ICgocmV0ICsgKHR5cGUgPT0gUkVBRCkpID4gMCkgew0KIAkJZG5vdGlmeV9wYXJlbnQoZmlsZS0+
Zl9kZW50cnksDQogCQkJCSh0eXBlID09IFJFQUQpID8gRE5fQUNDRVNTIDogRE5fTU9ESUZZKTsN
CisJCWlub3RpZnlfZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudChmaWxlLT5mX2RlbnRyeSwgDQor
CQkJCSh0eXBlID09IFJFQUQpID8gSU5fQUNDRVNTIDogSU5fTU9ESUZZLCBmaWxlLT5mX2RlbnRy
eS0+ZF9uYW1lLm5hbWUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudCAoZmlsZS0+Zl9k
ZW50cnktPmRfaW5vZGUsICh0eXBlID09IFJFQUQpID8gSU5fQUNDRVNTIDogSU5fTU9ESUZZLCBO
VUxMKTsNCisJfQ0KIAlyZXR1cm4gcmV0Ow0KIH0NCiANCi0tLSBjbGVhbi9saW51eC9mcy9vcGVu
LmMJMjAwNC0wOC0xNCAwNjo1NDo0OC4wMDAwMDAwMDAgLTA0MDANCisrKyBsaW51eC9mcy9vcGVu
LmMJMjAwNC0wOC0xOSAwMDoxMTo1Mi4wMDAwMDAwMDAgLTA0MDANCkBAIC0xMSw2ICsxMSw3IEBA
DQogI2luY2x1ZGUgPGxpbnV4L3NtcF9sb2NrLmg+DQogI2luY2x1ZGUgPGxpbnV4L3F1b3Rhb3Bz
Lmg+DQogI2luY2x1ZGUgPGxpbnV4L2Rub3RpZnkuaD4NCisjaW5jbHVkZSA8bGludXgvaW5vdGlm
eS5oPg0KICNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4NCiAjaW5jbHVkZSA8bGludXgvc2xhYi5o
Pg0KICNpbmNsdWRlIDxsaW51eC90dHkuaD4NCkBAIC05NTUsNiArOTU2LDggQEANCiAJCQllcnJv
ciA9IFBUUl9FUlIoZik7DQogCQkJaWYgKElTX0VSUihmKSkNCiAJCQkJZ290byBvdXRfZXJyb3I7
DQorCQkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudCAoZi0+Zl9kZW50cnktPmRfaW5vZGUsIElO
X09QRU4sIE5VTEwpOw0KKwkJCWlub3RpZnlfZGVudHJ5X3BhcmVudF9xdWV1ZV9ldmVudCAoZi0+
Zl9kZW50cnksIElOX09QRU4sIGYtPmZfZGVudHJ5LT5kX25hbWUubmFtZSk7DQogCQkJZmRfaW5z
dGFsbChmZCwgZik7DQogCQl9DQogb3V0Og0KQEAgLTEwMzQsNiArMTAzNyw4IEBADQogCUZEX0NM
UihmZCwgZmlsZXMtPmNsb3NlX29uX2V4ZWMpOw0KIAlfX3B1dF91bnVzZWRfZmQoZmlsZXMsIGZk
KTsNCiAJc3Bpbl91bmxvY2soJmZpbGVzLT5maWxlX2xvY2spOw0KKwlpbm90aWZ5X2RlbnRyeV9w
YXJlbnRfcXVldWVfZXZlbnQgKGZpbHAtPmZfZGVudHJ5LCBJTl9DTE9TRSwgZmlscC0+Zl9kZW50
cnktPmRfbmFtZS5uYW1lKTsNCisJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudCAoZmlscC0+Zl9k
ZW50cnktPmRfaW5vZGUsIElOX0NMT1NFLCBOVUxMKTsNCiAJcmV0dXJuIGZpbHBfY2xvc2UoZmls
cCwgZmlsZXMpOw0KIA0KIG91dF91bmxvY2s6DQotLS0gY2xlYW4vbGludXgvZnMvbmFtZWkuYwky
MDA0LTA4LTE0IDA2OjU1OjEwLjAwMDAwMDAwMCAtMDQwMA0KKysrIGxpbnV4L2ZzL25hbWVpLmMJ
MjAwNC0wOS0yNCAxMzoxMDoxMy4wMDAwMDAwMDAgLTA0MDANCkBAIC0yMiw2ICsyMiw3IEBADQog
I2luY2x1ZGUgPGxpbnV4L3F1b3Rhb3BzLmg+DQogI2luY2x1ZGUgPGxpbnV4L3BhZ2VtYXAuaD4N
CiAjaW5jbHVkZSA8bGludXgvZG5vdGlmeS5oPg0KKyNpbmNsdWRlIDxsaW51eC9pbm90aWZ5Lmg+
DQogI2luY2x1ZGUgPGxpbnV4L3NtcF9sb2NrLmg+DQogI2luY2x1ZGUgPGxpbnV4L3BlcnNvbmFs
aXR5Lmg+DQogI2luY2x1ZGUgPGxpbnV4L3NlY3VyaXR5Lmg+DQpAQCAtMTIyMSw2ICsxMjIyLDcg
QEANCiAJZXJyb3IgPSBkaXItPmlfb3AtPmNyZWF0ZShkaXIsIGRlbnRyeSwgbW9kZSwgbmQpOw0K
IAlpZiAoIWVycm9yKSB7DQogCQlpbm9kZV9kaXJfbm90aWZ5KGRpciwgRE5fQ1JFQVRFKTsNCisJ
CWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoZGlyLCBJTl9DUkVBVEVfRklMRSwgZGVudHJ5LT5k
X25hbWUubmFtZSk7DQogCQlzZWN1cml0eV9pbm9kZV9wb3N0X2NyZWF0ZShkaXIsIGRlbnRyeSwg
bW9kZSk7DQogCX0NCiAJcmV0dXJuIGVycm9yOw0KQEAgLTE1MzUsNiArMTUzNyw3IEBADQogCWVy
cm9yID0gZGlyLT5pX29wLT5ta25vZChkaXIsIGRlbnRyeSwgbW9kZSwgZGV2KTsNCiAJaWYgKCFl
cnJvcikgew0KIAkJaW5vZGVfZGlyX25vdGlmeShkaXIsIEROX0NSRUFURSk7DQorCQlpbm90aWZ5
X2lub2RlX3F1ZXVlX2V2ZW50KGRpciwgSU5fQ1JFQVRFX0ZJTEUsIGRlbnRyeS0+ZF9uYW1lLm5h
bWUpOw0KIAkJc2VjdXJpdHlfaW5vZGVfcG9zdF9ta25vZChkaXIsIGRlbnRyeSwgbW9kZSwgZGV2
KTsNCiAJfQ0KIAlyZXR1cm4gZXJyb3I7DQpAQCAtMTYwOCw2ICsxNjExLDcgQEANCiAJZXJyb3Ig
PSBkaXItPmlfb3AtPm1rZGlyKGRpciwgZGVudHJ5LCBtb2RlKTsNCiAJaWYgKCFlcnJvcikgew0K
IAkJaW5vZGVfZGlyX25vdGlmeShkaXIsIEROX0NSRUFURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1
ZXVlX2V2ZW50KGRpciwgSU5fQ1JFQVRFX1NVQkRJUiwgZGVudHJ5LT5kX25hbWUubmFtZSk7DQog
CQlzZWN1cml0eV9pbm9kZV9wb3N0X21rZGlyKGRpcixkZW50cnksIG1vZGUpOw0KIAl9DQogCXJl
dHVybiBlcnJvcjsNCkBAIC0xNzAzLDYgKzE3MDcsOSBAQA0KIAl1cCgmZGVudHJ5LT5kX2lub2Rl
LT5pX3NlbSk7DQogCWlmICghZXJyb3IpIHsNCiAJCWlub2RlX2Rpcl9ub3RpZnkoZGlyLCBETl9E
RUxFVEUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudChkaXIsIElOX0RFTEVURV9TVUJE
SVIsIGRlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KKwkJaW5vdGlmeV9pbm9kZV9xdWV1ZV9ldmVudChk
ZW50cnktPmRfaW5vZGUsIElOX0RFTEVURV9TRUxGLCBOVUxMKTsNCisJCWlub3RpZnlfaW5vZGVf
aXNfZGVhZCAoZGVudHJ5LT5kX2lub2RlKTsNCiAJCWRfZGVsZXRlKGRlbnRyeSk7DQogCX0NCiAJ
ZHB1dChkZW50cnkpOw0KQEAgLTE3NzUsOCArMTc4MiwxMSBAQA0KIA0KIAkvKiBXZSBkb24ndCBk
X2RlbGV0ZSgpIE5GUyBzaWxseXJlbmFtZWQgZmlsZXMtLXRoZXkgc3RpbGwgZXhpc3QuICovDQog
CWlmICghZXJyb3IgJiYgIShkZW50cnktPmRfZmxhZ3MgJiBEQ0FDSEVfTkZTRlNfUkVOQU1FRCkp
IHsNCi0JCWRfZGVsZXRlKGRlbnRyeSk7DQogCQlpbm9kZV9kaXJfbm90aWZ5KGRpciwgRE5fREVM
RVRFKTsNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQoZGlyLCBJTl9ERUxFVEVfRklMRSwg
ZGVudHJ5LT5kX25hbWUubmFtZSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRlbnRy
eS0+ZF9pbm9kZSwgSU5fREVMRVRFX1NFTEYsIE5VTEwpOw0KKwkJaW5vdGlmeV9pbm9kZV9pc19k
ZWFkIChkZW50cnktPmRfaW5vZGUpOw0KKwkJZF9kZWxldGUoZGVudHJ5KTsNCiAJfQ0KIAlyZXR1
cm4gZXJyb3I7DQogfQ0KQEAgLTE4NTMsNiArMTg2Myw3IEBADQogCWVycm9yID0gZGlyLT5pX29w
LT5zeW1saW5rKGRpciwgZGVudHJ5LCBvbGRuYW1lKTsNCiAJaWYgKCFlcnJvcikgew0KIAkJaW5v
ZGVfZGlyX25vdGlmeShkaXIsIEROX0NSRUFURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2
ZW50KGRpciwgSU5fQ1JFQVRFX0ZJTEUsIGRlbnRyeS0+ZF9uYW1lLm5hbWUpOw0KIAkJc2VjdXJp
dHlfaW5vZGVfcG9zdF9zeW1saW5rKGRpciwgZGVudHJ5LCBvbGRuYW1lKTsNCiAJfQ0KIAlyZXR1
cm4gZXJyb3I7DQpAQCAtMTkyNiw2ICsxOTM3LDcgQEANCiAJdXAoJm9sZF9kZW50cnktPmRfaW5v
ZGUtPmlfc2VtKTsNCiAJaWYgKCFlcnJvcikgew0KIAkJaW5vZGVfZGlyX25vdGlmeShkaXIsIERO
X0NSRUFURSk7DQorCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRpciwgSU5fQ1JFQVRFX0ZJ
TEUsIG5ld19kZW50cnktPmRfbmFtZS5uYW1lKTsNCiAJCXNlY3VyaXR5X2lub2RlX3Bvc3RfbGlu
ayhvbGRfZGVudHJ5LCBkaXIsIG5ld19kZW50cnkpOw0KIAl9DQogCXJldHVybiBlcnJvcjsNCkBA
IC0yMTE1LDEyICsyMTI3LDE1IEBADQogCWVsc2UNCiAJCWVycm9yID0gdmZzX3JlbmFtZV9vdGhl
cihvbGRfZGlyLG9sZF9kZW50cnksbmV3X2RpcixuZXdfZGVudHJ5KTsNCiAJaWYgKCFlcnJvcikg
ew0KLQkJaWYgKG9sZF9kaXIgPT0gbmV3X2RpcikNCisJCWlmIChvbGRfZGlyID09IG5ld19kaXIp
IHsNCiAJCQlpbm9kZV9kaXJfbm90aWZ5KG9sZF9kaXIsIEROX1JFTkFNRSk7DQotCQllbHNlIHsN
CisJCX0gZWxzZSB7DQogCQkJaW5vZGVfZGlyX25vdGlmeShvbGRfZGlyLCBETl9ERUxFVEUpOw0K
IAkJCWlub2RlX2Rpcl9ub3RpZnkobmV3X2RpciwgRE5fQ1JFQVRFKTsNCiAJCX0NCisNCisJCWlu
b3RpZnlfaW5vZGVfcXVldWVfZXZlbnQgKG9sZF9kaXIsIElOX01PVkVEX0ZST00sIG9sZF9kZW50
cnktPmRfbmFtZS5uYW1lKTsNCisJCWlub3RpZnlfaW5vZGVfcXVldWVfZXZlbnQgKG5ld19kaXIs
IElOX01PVkVEX1RPLCBuZXdfZGVudHJ5LT5kX25hbWUubmFtZSk7DQogCX0NCiAJcmV0dXJuIGVy
cm9yOw0KIH0NCi0tLSBjbGVhbi9saW51eC9mcy9pbm9kZS5jCTIwMDQtMDgtMTQgMDY6NTY6MjMu
MDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgvZnMvaW5vZGUuYwkyMDA0LTA5LTI4IDE2OjQ0OjM0
LjAwMDAwMDAwMCAtMDQwMA0KQEAgLTExNCw2ICsxMTQsOSBAQA0KIAlpZiAoaW5vZGUpIHsNCiAJ
CXN0cnVjdCBhZGRyZXNzX3NwYWNlICogY29uc3QgbWFwcGluZyA9ICZpbm9kZS0+aV9kYXRhOw0K
IA0KKyNpZmRlZiBDT05GSUdfSU5PVElGWQ0KKwkJSU5JVF9MSVNUX0hFQUQoJmlub2RlLT53YXRj
aGVycyk7DQorI2VuZGlmDQogCQlpbm9kZS0+aV9zYiA9IHNiOw0KIAkJaW5vZGUtPmlfYmxrYml0
cyA9IHNiLT5zX2Jsb2Nrc2l6ZV9iaXRzOw0KIAkJaW5vZGUtPmlfZmxhZ3MgPSAwOw0KLS0tIGNs
ZWFuL2xpbnV4L2ZzL2F0dHIuYwkyMDA0LTA4LTE0IDA2OjU0OjUwLjAwMDAwMDAwMCAtMDQwMA0K
KysrIGxpbnV4L2ZzL2F0dHIuYwkyMDA0LTA5LTI4IDE2OjQ0OjM0LjAwMDAwMDAwMCAtMDQwMA0K
QEAgLTExLDYgKzExLDcgQEANCiAjaW5jbHVkZSA8bGludXgvc3RyaW5nLmg+DQogI2luY2x1ZGUg
PGxpbnV4L3NtcF9sb2NrLmg+DQogI2luY2x1ZGUgPGxpbnV4L2Rub3RpZnkuaD4NCisjaW5jbHVk
ZSA8bGludXgvaW5vdGlmeS5oPg0KICNpbmNsdWRlIDxsaW51eC9mY250bC5oPg0KICNpbmNsdWRl
IDxsaW51eC9xdW90YW9wcy5oPg0KICNpbmNsdWRlIDxsaW51eC9zZWN1cml0eS5oPg0KQEAgLTEy
OCw2ICsxMjksMjggQEANCiAJcmV0dXJuIGRuX21hc2s7DQogfQ0KIA0KK3N0YXRpYyBpbnQgc2V0
YXR0cl9tYXNrX2lub3RpZnkodW5zaWduZWQgaW50IGlhX3ZhbGlkKQ0KK3sNCisJdW5zaWduZWQg
bG9uZyBkbl9tYXNrID0gMDsNCisNCisJaWYgKGlhX3ZhbGlkICYgQVRUUl9VSUQpDQorCQlkbl9t
YXNrIHw9IElOX0FUVFJJQjsNCisJaWYgKGlhX3ZhbGlkICYgQVRUUl9HSUQpDQorCQlkbl9tYXNr
IHw9IElOX0FUVFJJQjsNCisJaWYgKGlhX3ZhbGlkICYgQVRUUl9TSVpFKQ0KKwkJZG5fbWFzayB8
PSBJTl9NT0RJRlk7DQorCS8qIGJvdGggdGltZXMgaW1wbGllcyBhIHV0aW1lKHMpIGNhbGwgKi8N
CisJaWYgKChpYV92YWxpZCAmIChBVFRSX0FUSU1FfEFUVFJfTVRJTUUpKSA9PSAoQVRUUl9BVElN
RXxBVFRSX01USU1FKSkNCisJCWRuX21hc2sgfD0gSU5fQVRUUklCOw0KKwllbHNlIGlmIChpYV92
YWxpZCAmIEFUVFJfQVRJTUUpDQorCQlkbl9tYXNrIHw9IElOX0FDQ0VTUzsNCisJZWxzZSBpZiAo
aWFfdmFsaWQgJiBBVFRSX01USU1FKQ0KKwkJZG5fbWFzayB8PSBJTl9NT0RJRlk7DQorCWlmIChp
YV92YWxpZCAmIEFUVFJfTU9ERSkNCisJCWRuX21hc2sgfD0gSU5fQVRUUklCOw0KKwlyZXR1cm4g
ZG5fbWFzazsNCit9DQorDQogaW50IG5vdGlmeV9jaGFuZ2Uoc3RydWN0IGRlbnRyeSAqIGRlbnRy
eSwgc3RydWN0IGlhdHRyICogYXR0cikNCiB7DQogCXN0cnVjdCBpbm9kZSAqaW5vZGUgPSBkZW50
cnktPmRfaW5vZGU7DQpAQCAtMTg1LDggKzIwOCwxNiBAQA0KIAl9DQogCWlmICghZXJyb3IpIHsN
CiAJCXVuc2lnbmVkIGxvbmcgZG5fbWFzayA9IHNldGF0dHJfbWFzayhpYV92YWxpZCk7DQorCQl1
bnNpZ25lZCBsb25nIGluX21hc2sgPSBzZXRhdHRyX21hc2tfaW5vdGlmeShpYV92YWxpZCk7DQor
DQogCQlpZiAoZG5fbWFzaykNCiAJCQlkbm90aWZ5X3BhcmVudChkZW50cnksIGRuX21hc2spOw0K
KwkJaWYgKGluX21hc2spIHsNCisJCQlpbm90aWZ5X2lub2RlX3F1ZXVlX2V2ZW50KGRlbnRyeS0+
ZF9pbm9kZSwgaW5fbWFzaywNCisJCQkJCQkgIE5VTEwpOw0KKwkJCWlub3RpZnlfZGVudHJ5X3Bh
cmVudF9xdWV1ZV9ldmVudChkZW50cnksIGluX21hc2ssDQorCQkJCQkJCSAgZGVudHJ5LT5kX25h
bWUubmFtZSk7DQorCQl9DQogCX0NCiAJcmV0dXJuIGVycm9yOw0KIH0NCi0tLSBjbGVhbi9saW51
eC9kcml2ZXJzL2NoYXIvTWFrZWZpbGUJMjAwNC0wOC0xNCAwNjo1NjoyMi4wMDAwMDAwMDAgLTA0
MDANCisrKyBsaW51eC9kcml2ZXJzL2NoYXIvTWFrZWZpbGUJMjAwNC0wOS0yOCAxNjo0NjowNS4w
MDAwMDAwMDAgLTA0MDANCkBAIC05LDYgKzksOCBAQA0KIA0KIG9iai15CSArPSBtZW0ubyByYW5k
b20ubyB0dHlfaW8ubyBuX3R0eS5vIHR0eV9pb2N0bC5vIHB0eS5vIG1pc2Mubw0KIA0KKw0KK29i
ai0kKENPTkZJR19JTk9USUZZKQkJKz0gaW5vdGlmeS5vDQogb2JqLSQoQ09ORklHX1ZUKQkJKz0g
dnRfaW9jdGwubyB2Y19zY3JlZW4ubyBjb25zb2xlbWFwLm8gXA0KIAkJCQkgICBjb25zb2xlbWFw
X2RlZnRibC5vIHNlbGVjdGlvbi5vIGtleWJvYXJkLm8NCiBvYmotJChDT05GSUdfSFdfQ09OU09M
RSkJKz0gdnQubyBkZWZrZXltYXAubw0KLS0tIGNsZWFuL2xpbnV4L2RyaXZlcnMvY2hhci9LY29u
ZmlnCTIwMDQtMDgtMTQgMDY6NTQ6NDcuMDAwMDAwMDAwIC0wNDAwDQorKysgbGludXgvZHJpdmVy
cy9jaGFyL0tjb25maWcJMjAwNC0wOS0yOCAxNjo0NDozNC4wMDAwMDAwMDAgLTA0MDANCkBAIC02
Miw2ICs2MiwxOSBAQA0KIAlkZXBlbmRzIG9uIFZUICYmICFTMzkwICYmICFVTQ0KIAlkZWZhdWx0
IHkNCiANCitjb25maWcgSU5PVElGWQ0KKwlib29sICJJbm90aWZ5IGZpbGUgY2hhbmdlIG5vdGlm
aWNhdGlvbiBzdXBwb3J0Ig0KKwlkZWZhdWx0IHkNCisJLS0taGVscC0tLQ0KKwkgIFNheSBZIGhl
cmUgdG8gZW5hYmxlIGlub3RpZnkgc3VwcG9ydCBhbmQgdGhlIC9kZXYvaW5vdGlmeSBjaGFyYWN0
ZXINCisJICBkZXZpY2UuICBJbm90aWZ5IGlzIGEgZmlsZSBjaGFuZ2Ugbm90aWZpY2F0aW9uIHN5
c3RlbSBhbmQgYQ0KKwkgIHJlcGxhY2VtZW50IGZvciBkbm90aWZ5LiAgSW5vdGlmeSBmaXhlcyBu
dW1lcm91cyBzaG9ydGNvbWluZ3MgaW4NCisJICBkbm90aWZ5IGFuZCBpbnRyb2R1Y2VzIHNldmVy
YWwgbmV3IGZlYXR1cmVzLiAgSXQgYWxsb3dzIG1vbml0b3JpbmcNCisJICBvZiBib3RoIGZpbGVz
IGFuZCBkaXJlY3RvcmllcyB2aWEgYSBzaW5nbGUgb3BlbiBmZC4gIE11bHRpcGxlIGZpbGUNCisJ
ICBldmVudHMgYXJlIHN1cHBvcnRlZC4NCisJICANCisJICBJZiB1bnN1cmUsIHNheSBZLg0KKw0K
IGNvbmZpZyBTRVJJQUxfTk9OU1RBTkRBUkQNCiAJYm9vbCAiTm9uLXN0YW5kYXJkIHNlcmlhbCBw
b3J0IHN1cHBvcnQiDQogCS0tLWhlbHAtLS0NCi==

--=-cqbmgi8GvOqOLsiBTO5F--
