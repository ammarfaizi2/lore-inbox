Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S272044AbRH2S6E>; Wed, 29 Aug 2001 14:58:04 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S272045AbRH2S5y>; Wed, 29 Aug 2001 14:57:54 -0400
Received: from suntan.tandem.com ([192.216.221.8]:4807 "EHLO suntan.tandem.com")
	by vger.kernel.org with ESMTP id <S272044AbRH2S5l>;
	Wed, 29 Aug 2001 14:57:41 -0400
Date: Wed, 29 Aug 2001 11:47:30 -0700 (PDT)
Message-Id: <200108291847.f7TIlUh13144@kahuna.cag.cpqcorp.net>
To: torvalds@transmeta.com
Cc: linux-kernel@vger.kernel.org
From: john.l.byrne@compaq.com
Subject: [PATCH] 2.4.x i386 SMP interrupts can corrupt registers
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


Currently, the SMP interrupt code generated by the macros
BUILD_SMP_INTERRUPT and BUILD_SMP_TIMER_INTERRUPT push the positive
interrupt vector number on the stack. If the correct signal is pending
on the process and %eax happens to have the correct value, do_signal()
can be spoofed into adjusting %eax and %eip with almost certainly bad
results. For example, trying to do a "strace -p" the following program
will result in its dumping core with an illegal instruction.

int
main(void)
{
	int i;

	asm (
		"mov %1,%0\n\t"
		"1:\t"
		"cmp %1,%0\n\t"
		"rep;nop\n\t"
		"je 1b\n\t"
		:"=&a" (i)
		:"i" (-512));

	return i;
}

I suspect what was wanted was to subtract 256, as is done in BUILD_IRQ,
to make the values negative, but leave the vector available in %al, so
I offer the following patch against 2.4.10-pre2 to do so. (The 2.2.x
code simply pushes -1. I don't see anything that uses the vector for
these interrupt, so this should work. However, I assume the change was
made so the vector number would be available on the stack, perhaps for
debugging.)

This has only been tested by me on my SMP box, but... (I don't want to
complete that sentence with words I might be forced to regret for some
reason.)

John Byrne

diff -Nar -u4 orig/include/asm-i386/hw_irq.h linux/include/asm-i386/hw_irq.h
--- orig/include/asm-i386/hw_irq.h	Mon Jul  9 13:28:00 2001
+++ linux/include/asm-i386/hw_irq.h	Wed Aug 29 09:48:38 2001
@@ -129,9 +129,9 @@
 asmlinkage void call_##x(void); \
 __asm__( \
 "\n"__ALIGN_STR"\n" \
 SYMBOL_NAME_STR(x) ":\n\t" \
-	"pushl $"#v"\n\t" \
+	"pushl $"#v"-256\n\t" \
 	SAVE_ALL \
 	SYMBOL_NAME_STR(call_##x)":\n\t" \
 	"call "SYMBOL_NAME_STR(smp_##x)"\n\t" \
 	"jmp ret_from_intr\n");
@@ -142,9 +142,9 @@
 asmlinkage void call_##x(void); \
 __asm__( \
 "\n"__ALIGN_STR"\n" \
 SYMBOL_NAME_STR(x) ":\n\t" \
-	"pushl $"#v"\n\t" \
+	"pushl $"#v"-256\n\t" \
 	SAVE_ALL \
 	"movl %esp,%eax\n\t" \
 	"pushl %eax\n\t" \
 	SYMBOL_NAME_STR(call_##x)":\n\t" \
