Return-Path: <linux-kernel-owner@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id <S290819AbSBLTjM>; Tue, 12 Feb 2002 14:39:12 -0500
Received: (majordomo@vger.kernel.org) by vger.kernel.org
	id <S290837AbSBLTjD>; Tue, 12 Feb 2002 14:39:03 -0500
Received: from dell-paw-3.cambridge.redhat.com ([195.224.55.237]:1523 "HELO
	executor.cambridge.redhat.com") by vger.kernel.org with SMTP
	id <S290819AbSBLTiy>; Tue, 12 Feb 2002 14:38:54 -0500
To: davidm@hpl.hp.com
Cc: dhowells@redhat.com, davem@redhat.com, torvalds@transmeta.com,
        anton@samba.org, linux-kernel@vger.kernel.org, zippel@linux-m68k.org
Subject: Re: thread_info implementation 
In-Reply-To: Your message of "Tue, 12 Feb 2002 11:15:17 PST."
             <15465.27077.652387.974359@napali.hpl.hp.com> 
User-Agent: EMH/1.14.1 SEMI/1.14.3 (Ushinoya) FLIM/1.14.3
 (=?ISO-8859-4?Q?Unebigory=F2mae?=) APEL/10.3 Emacs/21.1
 (i386-redhat-linux-gnu) MULE/5.0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.3 - "Ushinoya")
Content-Type: text/plain; charset=US-ASCII
Date: Tue, 12 Feb 2002 19:38:48 +0000
Message-ID: <25227.1013542728@warthog.cambridge.redhat.com>
From: David Howells <dhowells@redhat.com>
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org


David Mosberger <davidm@hpl.hp.com> wrote:
>   David.H> What might be worth doing is to move the task_struct slab
>   David.H> cache and (de-)allocator out of fork.c and to stick it in
>   David.H> the arch somewhere. Then archs aren't bound to have the two
>   David.H> separate. So for a system that can handle lots of memory,
>   David.H> you can allocate the thread_info, task_struct and
>   David.H> supervisor stack all on one very large chunk if you so
>   David.H> wish.
>
> Could you do this?  I'd prefer if task_info could be completely hidden
> inside the x86/sparc arch-specific code, but if things are set up such that
> we at least have the option to keep the stack, task_info, and task_struct in
> a single chunk of memory (and without pointers between them), I'd have much
> less of an issue with it.

Well, I can do a patch for it tomorrow (it's not particularly difficult to
actually do), but whether Linus'll take it is an entirely different matter.

David
