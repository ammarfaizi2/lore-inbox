Return-Path: <linux-kernel-owner+willy=40w.ods.org-S1751974AbWG1OJc@vger.kernel.org>
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751974AbWG1OJc (ORCPT <rfc822;willy@w.ods.org>);
	Fri, 28 Jul 2006 10:09:32 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1751390AbWG1OJc
	(ORCPT <rfc822;linux-kernel-outgoing>);
	Fri, 28 Jul 2006 10:09:32 -0400
Received: from ns2.suse.de ([195.135.220.15]:53402 "EHLO mx2.suse.de")
	by vger.kernel.org with ESMTP id S1751974AbWG1OJb (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Fri, 28 Jul 2006 10:09:31 -0400
Date: Fri, 28 Jul 2006 16:09:21 +0200
Message-ID: <s5hzmetn7n2.wl%tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Denis Vlasenko <vda.linux@googlemail.com>
Cc: alsa-devel@alsa-project.org, linux-kernel@vger.kernel.org
Subject: Re: Sound problems with snd_hda on x86_64
In-Reply-To: <200607281514.14085.vda.linux@googlemail.com>
References: <200607281216.25214.vda.linux@googlemail.com>
	<200607281247.11986.vda.linux@googlemail.com>
	<s5hmzaunevd.wl%tiwai@suse.de>
	<200607281514.14085.vda.linux@googlemail.com>
User-Agent: Wanderlust/2.12.0 (Your Wildest Dreams) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.7 (=?ISO-8859-4?Q?Sanj=F2?=) APEL/10.6 MULE XEmacs/21.5 (beta25)
 (eggplant) (+CVS-20060326) (i386-suse-linux)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
X-Mailing-List: linux-kernel@vger.kernel.org

[CC list reduced since it's pretty ALSA specific now]

At Fri, 28 Jul 2006 15:14:13 +0200,
Denis Vlasenko wrote:
> 
> On Friday 28 July 2006 13:33, Takashi Iwai wrote:
> > > Why artsd attempts mmap at all then?
> > 
> > The app must try mmap.  From the application side, you can't know
> > whether you're 32bit-emulation mode or it's really on 32bit
> > architecture.  And, mmap is usually done automatically via alsa-lib
> > plugin for optimization or soft-mixing purpose.
> 
> Well, alsa seems to have info about mmap-ability here:
> 
> static struct snd_pcm_hardware azx_pcm_hw = {
>         .info =                 (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED |
>                                  SNDRV_PCM_INFO_BLOCK_TRANSFER |
>                                  SNDRV_PCM_INFO_MMAP_VALID |
>                                  SNDRV_PCM_INFO_PAUSE /*|*/
>                                  /*SNDRV_PCM_INFO_RESUME*/),
> ...
> };
> 
> but it is not split into "can mmap data", "can mmap control/status".

It's only for mmap data and has nothing to do with control/status
mmap.

> When this one triggers:
> 
> snd_pcm_ioctl_compat()
> ...
>         /*
>          * When PCM is used on 32bit mode, we need to disable
>          * mmap of PCM status/control records because of the size
>          * incompatibility.
>          */
>         substream->no_mmap_ctrl = 1;
> 
> It does not clear any such flags. If there will be separate bits
> for data and "status/control", should they be cleared here too?
> 
> What will happen if fd is opened in 64-bit process and then
> process will exec a 32-bit one, _after_ doing ioctl
> but _before_ mmap?! substream->no_mmap_ctrl will remain cleared.
> Looks disastrous.

mmap is called always after ioctl as long as you use alsa-lib.

> And still _now_ there is only one bit. Does it mean
> "mmap works on data and status/control" or 
> "mmap works on data and _maybe_ on status/control"?

The PCM bit is only for mmap data.  The status/control mmap is
irrelevant, and can be used even the PCM data is non-mmappable.

> Another matter. IIRC this mmap is not to the hardware
> (hardware memory-mapped structures won't change layout when one
> replaces 32bit kernel by 64bit one) but to some software alsa
> structure. Can it be made more clever in this case, like
> using 32bit structure for 32bit tasks? Or allowing 32bit tasks
> to detect that structure is 64bit and they should use it?

Would be nice, but how to detect it?

> Second one sounds saner.

Well, the simplest solution is to fix that 64bit incompatiblity in the
struct definition.  Right now, it's still unchanged just to keep the
compatibility with older versions, but it's possible to introduce a
new struct together with new mmap offset, for example.


Takashi
